
#Область КомандыФормы

&НаКлиенте
Процедура ДокументыФизическихЛицИстория(Команда)
	
	ОткрытьИсторию("ДокументыФизическихЛиц");
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДокументыЭтогоЧеловека(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Физлицо", КлиентСсылка);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица", ПараметрыОткрытияФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоФизическихЛицИстория(Команда)
	
	ОткрытьИсторию("ГражданствоФизическихЛиц");
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизическихЛицИстория(Команда)
	
	ОткрытьИсторию("ФИОФизическихЛиц");
	
КонецПроцедуры

//<>, Басаргин (03.10.2017) {
&НаКлиенте
Процедура Позвонить(Команда)
	
	Если ЗначениеЗаполнено(Объект.ОсновнойТелефон) И глТелефония["Активирована"] Тогда
		УправлениеТелефониейКлиент.СделатьЗвонок(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(УправлениеТелефониейКлиентСервер.ТолькоДопустимыеСимволыНомера(Объект.ОсновнойТелефон)));
		УправлениеТелефониейКлиентПовтИсп.АктивизироватьНачальнуюСтраницу();
	КонецЕсли;
		
КонецПроцедуры
//<> }

#КонецОбласти

#Область ФИОФизЛиц

&НаСервере
Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка)
	
	ИзменилосьФИО 					= Ложь;
	ИзменилосьУдостоверениеЛичности = Ложь;
	
	НачатьТранзакцию();
	
	//Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры") Тогда
		ИзменилосьФИО = РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, ИзменилосьФИО);
	//КонецЕсли;
	
	Если НЕ ИзменилосьФИО 
			//И Форма["ИзмененоУточнениеНаименования"] 
			Тогда
		ТаблицаФизЛиц = Новый ТаблицаЗначений;
		ТаблицаФизЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.Клиенты"));
		Строка = ТаблицаФизЛиц.Добавить();
		Строка.ФизическоеЛицо = ФизическоеЛицоСсылка;
		
		ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц);
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		
		ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
		
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			
			Форма.ИзмененыЛичныеДанные = Форма[КлючИЗначение.Значение];
			
			Если Форма.ИзмененыЛичныеДанные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НЕ Форма.ИзмененыЛичныеДанные Тогда
			
			Форма.ИзмененыЛичныеДанные = ИзменилосьФИО 
				Или ИзменилосьУдостоверениеЛичности;
				
		Иначе
				
			Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
				
				Форма[КлючИЗначение.Значение] = Ложь;
				
			КонецЦикла;
			
		КонецЕсли; 
							
	КонецЕсли; 
								
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	Если Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		Возврат ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма["ДокументыФизическихЛиц"].Период <> Форма["ДокументыФизическихЛицПрежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные ИЛИ 
		(ВедущийОбъект <> Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Если Поле.Имя = ИмяИзмерения Тогда
				Продолжить;
			КонецЕсли; 
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// Пишем новое состояние записи.
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ДокументыФизическихЛиц");
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// Если нужно сохранить старую запись, то создадим новый менеджер записи.
		Если Форма["ДокументыФизическихЛицНоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзменилисьДанные;
	
КонецФункции

&НаСервере
Функция ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	ИзменилисьДанные = Ложь;
	
	ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);

	ИмяИзмерения = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"].Измерения[0].Имя;
	
	// Подготовим к сравнению набор исходных сведений.
	Набор = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьНаборЗаписей();
	Набор.Отбор[ИмяИзмерения].Установить(ВедущийОбъект);
	Набор.Прочитать();
	ТаблицаИсходногоНабора = Набор.Выгрузить();
	
	// Подготовим к сравнению набор, хранящийся в реквизите формы.
	ТаблицаНовогоНабора = Форма["ДокументыФизическихЛицНаборЗаписей"].Выгрузить();
	ТаблицаНовогоНабора.Колонки.Удалить("ИсходныйНомерСтроки");
	
	// Проверим необходимость записи нового набора.
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаИсходногоНабора, ТаблицаНовогоНабора, , "Представление") Тогда
		
		ИзменилисьДанные = Истина;
		МассивСохраняемыхСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СохранитьСтроку = Истина;
			СтрокиТаблицыИсходногоНабора = ТаблицаИсходногоНабора.НайтиСтроки(Новый Структура("Период,ВидДокумента", СтрокаТаблицаНовогоНабора.Период, СтрокаТаблицаНовогоНабора.ВидДокумента));
			Если СтрокиТаблицыИсходногоНабора.Количество() > 0 Тогда
				СтрокаТаблицаИсходногоНабора = СтрокиТаблицыИсходногоНабора[0];
				Если ОбщегоНазначения.КоллекцииИдентичны(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаНовогоНабора), ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаИсходногоНабора), , "Представление") Тогда
					СохранитьСтроку = Ложь;
				КонецЕсли;
				// Удалим строку из таблицы исходного набора.
				ТаблицаИсходногоНабора.Удалить(СтрокаТаблицаИсходногоНабора);
			КонецЕсли; 
			
			Если СохранитьСтроку Тогда
				МассивСохраняемыхСтрок.Добавить(СтрокаТаблицаНовогоНабора);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицаИсходногоНабора Из ТаблицаИсходногоНабора Цикл
			УдаляемаяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, СтрокаТаблицаИсходногоНабора);
			УдаляемаяЗапись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТаблицаНовогоНабора Из МассивСохраняемыхСтрок Цикл
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицаНовогоНабора);
			НоваяЗапись.Записать();
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИзменилисьДанные;
	
КонецФункции

&НаСервере
Процедура ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект) Экспорт
	Перем ЗаписьНабора;
	
	Если Не Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		
		Форма.ПрочитатьНаборЗаписейПериодическихСведений("ДокументыФизическихЛиц", ВедущийОбъект);
		
	КонецЕсли;
	
	СтруктураЗаписиСтрокой = "";
	ПрежняяЗапись = Новый Структура;
	НужнаЗапятая = Ложь;
	Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
		Если НужнаЗапятая Тогда
			СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + ",";
		КонецЕсли;
		СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + КлючЗначение.Ключ;
		НужнаЗапятая = Истина;
		ПрежняяЗапись.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма["ДокументыФизическихЛиц"].Период) Тогда
		ПериодИзменен = Форма["ДокументыФизическихЛиц"].Период > Форма["ДокументыФизическихЛицПрежняя"].Период;
		РесурсыИзменены = Ложь;
		Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
			Если КлючЗначение.Ключ = "Период" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючЗначение.Значение <> Форма["ДокументыФизическихЛиц"][КлючЗначение.Ключ] Тогда
				РесурсыИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей = Форма["ДокументыФизическихЛицНаборЗаписей"];
		Если (ПериодИзменен И РесурсыИзменены) ИЛИ НаборЗаписей.Количество() = 0 Тогда
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() = 0 Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли;
		Иначе
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() > 0 Тогда
				ЗаписьНабора = ЗаписьНаНовуюДату[0];
			Иначе
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗаписьНабора <> НеОпределено Тогда
			
			// Если в этом периоде уже есть документы являющиеся удостоверением личности - 
			// сбросим признак
			ЯвляющиесяУдостоверениямиЛичности = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ЯвляетсяДокументомУдостоверяющимЛичность", Форма["ДокументыФизическихЛиц"].Период, Истина));
			Для каждого УдостоверениеЛичности Из ЯвляющиесяУдостоверениямиЛичности Цикл
				Если УдостоверениеЛичности.ВидДокумента <> ЗаписьНабора.ВидДокумента Тогда
					УдостоверениеЛичности.ЯвляетсяДокументомУдостоверяющимЛичность = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Форма["ДокументыФизическихЛиц"]);
			НаборЗаписей.Сортировать("Период,ЯвляетсяДокументомУдостоверяющимЛичность");
			
			ЗаполнитьЗначенияСвойств(ПрежняяЗапись, Форма["ДокументыФизическихЛиц"]);
			Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ПрежняяЗапись);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц) Экспорт
	
 	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата", '20990101');
	Запрос.УстановитьПараметр("ТекущийНабор", ТаблицаФизЛиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущийНабор.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизЛицаТекущегоНабора
	|ИЗ
	|	&ТекущийНабор КАК ТекущийНабор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИОФизЛицПоследнее
	|ИЗ
	|	ВТФизЛицаТекущегоНабора КАК ФизЛицаТекущегоНабора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&ТекущаяДата,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						ФизЛицаТекущегоНабора.ФизическоеЛицо
	|					ИЗ
	|						ВТФизЛицаТекущегоНабора КАК ФизЛицаТекущегоНабора)) КАК ФИОФизическихЛицСрезПоследних
	|		ПО ФизЛицаТекущегоНабора.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицПоследнее.ФизическоеЛицо,
	|	ФИОФизЛицПоследнее.Фамилия,
	|	ФИОФизЛицПоследнее.Имя,
	|	ФИОФизЛицПоследнее.Отчество,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	ВТФИОФизЛицПоследнее КАК ФИОФизЛицПоследнее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК ФизическиеЛица
	|		ПО (ФИОФизЛицПоследнее.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|				И (ФизическиеЛица.Наименование <> (ВЫРАЗИТЬ(ФИОФизЛицПоследнее.Фамилия + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Имя = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Имя
	|						КОНЕЦ + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Отчество = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Отчество
	|						КОНЕЦ КАК СТРОКА(50)))
	|					ИЛИ ФизическиеЛица.ФИО <> (ВЫРАЗИТЬ(ФИОФизЛицПоследнее.Фамилия + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Имя = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Имя
	|						КОНЕЦ + ВЫБОР
	|							КОГДА ФИОФизЛицПоследнее.Отчество = """"
	|								ТОГДА """"
	|							ИНАЧЕ "" "" + ФИОФизЛицПоследнее.Отчество
	|						КОНЕЦ КАК СТРОКА(50)))))";
				   
	Результат = Запрос.ВыполнитьПакет();
	
	ИзменитьНаименованиеФизическихЛиц(Результат[2].Выбрать());
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНаименованиеФизическихЛиц(ДанныеФИО)
	
	Пока ДанныеФИО.Следующий() Цикл
		
		ФизЛицоОбъект = ДанныеФИО.ФизическоеЛицо.ПолучитьОбъект();
		
		СтруктураФИО = ФамилияИмяОтчество(ДанныеФИО.Наименование);
		НаименованиеФизЛица = СтруктураФИО.Фамилия + " " + СтруктураФИО.Имя + " " + СтруктураФИО.Отчество;
		
		Если СокрЛП(НаименованиеФизЛица) = ПолноеНаименованиеКлиента(ДанныеФИО.Фамилия, ДанныеФИО.Имя, ДанныеФИО.Отчество, "") Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка 
			ФизЛицоОбъект.Заблокировать();
		Исключение
			Отказ = Истина;
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить имя физического лица %1.
			|Возможно, данные сотрудника редактируются другим пользователем'"),
			ФизЛицоОбъект.Наименование);
			ВызватьИсключение ТекстИсключенияЗаписи;
			
		КонецПопытки;
		
		ФизЛицоОбъект.Наименование = ПолноеНаименованиеКлиента(
				ДанныеФИО.Фамилия,
				ДанныеФИО.Имя,
				ДанныеФИО.Отчество,
				"");
		
		ФизЛицоОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ФамилияИмяОтчество(Знач ФИО) Экспорт
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество");
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО, " ");
	
	Если МассивПодстрок.Количество() > 0 Тогда
		СтруктураФИО.Вставить("Фамилия", МассивПодстрок[0]);
		Если МассивПодстрок.Количество() > 1 Тогда
			СтруктураФИО.Вставить("Имя", МассивПодстрок[1]);
		КонецЕсли;
		Если МассивПодстрок.Количество() > 2 Тогда
			Отчество = "";
			Для Шаг = 2 По МассивПодстрок.Количество()-1 Цикл
				Отчество = Отчество + МассивПодстрок[Шаг] + " ";
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Отчество, 1);
			СтруктураФИО.Вставить("Отчество", Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураФИО;
	
КонецФункции

&НаСервере
Функция ИзменяемыеПоляФизическогоЛица() Экспорт
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Пол", "ИзмененПол");
	ИзменяемыеПоля.Вставить("ДатаРождения", "ИзмененаДатаРождения");
	ИзменяемыеПоля.Вставить("МестоРождения", "ИзмененоМестоРождения");
	
	Возврат ИзменяемыеПоля;
	
КонецФункции

&НаКлиенте
Процедура КлиентИзменилФИОНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("КлиентИзменилФИОНажатиеЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ИзменитьФИОКлиента(ЭтаФорма, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КлиентИзменилФИОНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат <> Неопределено Тогда 
		УстановитьТолькоПросмотрФИО(Форма.Элементы.ФИО, Результат.ИзменениеЗаднимЧислом, Форма.ФИОФизическихЛиц.Период, Результат.ДатаТекущейЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОКлиента(Форма, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ОповещениеЗавершения", Форма, ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФИОКлиентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИзменитьФИОФизическогоЛица(Форма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрФИО(Элемент, ИзменениеЗаднимЧислом, ПериодНачалаДействия, ПериодОкончанияДействия) 
	Если ИзменениеЗаднимЧислом Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСТР("ru = 'Изменение ФИО выполнено ""задним числом"". Введенное данные действуют с %1 по %2.
                                                                                            |Редактирование ФИО непосредственно в форме сейчас недоступно и будет доступно только после записи.'"),
																					  Формат(ПериодНачалаДействия, "ДФ=дд.ММ.гггг"),
																					  Формат(ПериодОкончанияДействия, "ДФ=дд.ММ.гггг"));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Элемент.ТолькоПросмотр = Истина;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОФизическогоЛица(Форма, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ОповещениеЗавершения", Форма, ОповещениеЗавершения);
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Форма.Объект.ФИО);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Фамилия", 		?(СтруктураФИО.Фамилия = Неопределено, 	"", СтруктураФИО.Фамилия));
	ПараметрыФормы.Вставить("Имя", 			?(СтруктураФИО.Имя = Неопределено, 		"", СтруктураФИО.Имя));
	ПараметрыФормы.Вставить("Отчество", 	?(СтруктураФИО.Отчество = Неопределено, "", СтруктураФИО.Отчество));
	ПараметрыФормы.Вставить("ДатаИзменения", ОбщегоНазначенияКлиент.ДатаСеанса());

	Оповещение = Новый ОписаниеОповещения("ИзменитьФИОФизическогоЛицаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.Клиенты.Форма.СменаФИО", ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОКлиентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если Результат <> Неопределено Тогда
		Если Форма.Объект.ФИО <> Результат.НовоеНаименование Тогда
			Если Не Результат.ИзменениеЗаднимЧислом И ЗаблокироватьФизическоеЛицоПриРедактировании(Форма) Тогда
				Форма.Объект.ФИО = Результат.НовоеНаименование;
				СформироватьНаименованиеКлиента(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеКлиента(Форма) Экспорт
	
	Форма.Объект.Наименование 	= ПолноеНаименованиеКлиента(Форма.ФИОФизическихЛиц.Фамилия, Форма.ФИОФизическихЛиц.Имя, Форма.ФИОФизическихЛиц.Отчество, "");
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.Клиент.Наименование, Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОФизическогоЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	МенеджерЗаписиФИО = Форма.ФИОФизическихЛиц;
	
	Если Результат <> Неопределено Тогда
		// нажали ОК
		Если Результат.ДатаИзменения >= МенеджерЗаписиФИО.Период Тогда
			// Изменим имя только если это - хронологически последняя запись регистра ФИО.
			НовоеНаименование = Результат.Фамилия + " " + Результат.Имя + " " + Результат.Отчество;
		Иначе
			// Вернем прежнее имя если это - ввод хронологически не последней записи регистра ФИО.
			НовоеНаименование = МенеджерЗаписиФИО.Фамилия + " " + МенеджерЗаписиФИО.Имя + " " + МенеджерЗаписиФИО.Отчество;
		КонецЕсли;
		
		Результат.Вставить("НовоеНаименование", НовоеНаименование);
		Результат.Вставить("ИзменениеЗаднимЧислом", Результат.ДатаИзменения < МенеджерЗаписиФИО.Период);
		Результат.Вставить("ДатаТекущейЗаписи", МенеджерЗаписиФИО.Период);
		
		МенеджерЗаписиФИО.Фамилия = Результат.Фамилия;
		МенеджерЗаписиФИО.Имя = Результат.Имя;
		МенеджерЗаписиФИО.Отчество = Результат.Отчество;
		МенеджерЗаписиФИО.Период = Результат.ДатаИзменения;
		
		Форма.ВыполненаКомандаСменыФИО 		= Истина;
		Форма.ФИОФизическихЛицНоваяЗапись 	= Истина;
		Форма.Модифицированность 			= Истина;
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
		    ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		КонецЕсли;
		
	Иначе
			
		Форма.ФИОФизическихЛицНоваяЗапись = Ложь;
		Если ОповещениеЗавершения <> Неопределено Тогда 
		    ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	//СправочникКлиентыКлиентСервер.УстановитьВидимостьПолейФИО(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент) Экспорт
	
	Если НЕ ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФИО(Объект, ФИОФизическихЛиц);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФИО(Клиент, МенеджерЗаписиФИО) 
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Клиент.ФИО);
	
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		Если СтруктураФИО.Имя <> Неопределено Тогда
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		КонецЕсли;
		Если СтруктураФИО.Отчество <> Неопределено Тогда
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
			Если ЗначениеЗаполнено(Клиент.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = Клиент.ДатаРождения;
			Иначе
				МенеджерЗаписиФИО.Период = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МенеджерЗаписиФИО.Отчество) И Не ЗначениеЗаполнено(Клиент.Пол) Тогда
			Клиент.Пол = ОпределитьПолПоОтчеству(МенеджерЗаписиФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьНаименованиеФизическогоЛица();
	//СправочникКлиентыКлиентСервер.УстановитьВидимостьПолейФИО(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеФизическогоЛица() Экспорт
	ИзменитьНаименованиеФизическогоЛица();
	Оповестить("ИзмененЗаголовокФормыСотрудника", Объект.Наименование, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаименованиеФизическогоЛица()
	
	Объект.Наименование = ПолноеНаименованиеКлиента(ФИОФизическихЛиц.Фамилия, ФИОФизическихЛиц.Имя, ФИОФизическихЛиц.Отчество);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	//++ Юкаев Роман 20171225 ( //
	ФИОФизическихЛиц.Фамилия = СокрЛП(ФИОФизическихЛиц.Фамилия);
	//-- Юкаев Роман 20171225 )
	ПриИзмененииМенеджераФИО();	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	//++ Юкаев Роман 20171225 ( //
	ФИОФизическихЛиц.Имя = СокрЛП(ФИОФизическихЛиц.Имя);
	//-- Юкаев Роман 20171225 )
	ПриИзмененииМенеджераФИО();	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	//++ Юкаев Роман 20171225 ( //
	ФИОФизическихЛиц.Отчество = СокрЛП(ФИОФизическихЛиц.Отчество);
	//-- Юкаев Роман 20171225 )
	ПриИзмененииМенеджераФИО();	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМенеджераФИО()
	
	Если НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Период) Тогда
		Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
			ФИОФизическихЛиц.Период = Объект.ДатаРождения;
		Иначе
			ФИОФизическихЛиц.Период = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ФИОФизическихЛиц.Отчество) И Не ЗначениеЗаполнено(Объект.Пол) Тогда
		Объект.Пол = ОпределитьПолПоОтчеству(ФИОФизическихЛиц.Отчество);
	КонецЕсли;	
	
	ИзменитьНаименованиеФизическогоЛица();
	
	Объект.ФИО = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура КодНажатие(Элемент, СтандартнаяОбработка)
	
	тОбъект = Новый COMОбъект("htmlfile");
	тОбъект.ParentWindow.ClipboardData.Setdata("Text",	Объект.Код);

КонецПроцедуры

// Устанавливает свойство Наименование объекту Сотрудник.
// Параметры:
//		Фамилия, Имя, Отчество
//		УточнениеНаименования - строка, дополняющая имя сотрудника.
Функция ПолноеНаименованиеКлиента(Фамилия, Имя, Отчество, УточнениеНаименованияФизЛица = " ", УточнениеНаименованияСотрудника = "") Экспорт
	
	ПолноеНаименование = Строка(Фамилия);
	
	Если ЗначениеЗаполнено(Имя) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Отчество) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + Отчество;
	КонецЕсли;
	Если ЗначениеЗаполнено(УточнениеНаименованияФизЛица) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + УточнениеНаименованияФизЛица;
	КонецЕсли;
	Если ЗначениеЗаполнено(УточнениеНаименованияСотрудника) Тогда
		ПолноеНаименование = ПолноеНаименование + " " + УточнениеНаименованияСотрудника;
	КонецЕсли;
	
	//++ Юкаев Роман 20171225 ( //
	ПолноеНаименование = СокрЛП(ПолноеНаименование);
	//-- Юкаев Роман 20171225 )
	
	Возврат ПолноеНаименование;
	
КонецФункции

&НаКлиенте
Процедура ФизическиеЛицаПередЗаписьюФИО(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
		
	// Запрос про полное имя
	Оповещение = Новый ОписаниеОповещения("ФизическиеЛицаПередЗаписьюИзменитьФИО", ЭтотОбъект, ДополнительныеПараметры);
	ЗапроситьРежимИзмененияФИО(Форма, Форма.ФИОФизическихЛиц, Форма.ФИОФизическихЛицНоваяЗапись, Отказ, НСтр("ru = 'сотрудника'"), Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическиеЛицаПередЗаписьюИзменитьФИО(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	//Если внесли изменение в ФИО.
	Если Форма.ФИОФизическихЛицНоваяЗапись И Форма.ВыполненаКомандаСменыФИО = Ложь Тогда
		Оповещение = Новый ОписаниеОповещения("ФизическиеЛицаПередЗаписьюУдостоверениеЛичности", ЭтотОбъект, ДополнительныеПараметры);
		ИзменитьФИОФизическогоЛица(Форма, Оповещение);
	Иначе 
		ФизическиеЛицаПередЗаписьюУдостоверениеЛичности(Ложь, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияФИО(Форма, МенеджерЗаписиФИО, НоваяЗапись, Отказ, ПредставлениеСущности, ОповещениеЗавершения = Неопределено)
	
	// Если на вопрос про ввод новой записи еще не ответили.
	Если //Форма.ДоступенПросмотрДанныхФизическихЛиц И 
		НоваяЗапись = Ложь Тогда
		
		НоваяДатаФИО = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("МенеджерЗаписиФИО", МенеджерЗаписиФИО);
		ДополнительныеПараметры.Вставить("НоваяДатаФИО", НоваяДатаФИО);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияФИОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru =  'При редактировании изменено полное имя %2. 
							|Если просто исправлены прежние данные (они были ошибочны), нажмите ""Исправлена ошибка"".
							|Если у сотрудника сменилась фамилия или имя, нажмите ""Сотрудник изменил имя""'"), 
				Формат(НоваяДатаФИО, "ДФ='д ММММ гггг ""г""'"), ПредставлениеСущности);
		ТекстКнопкиДа = НСтр("ru = 'Сотрудник изменил имя'");
		РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(Форма, "ФИОФизическихЛиц", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);	
		
	Иначе 
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияФИОЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Форма = ДополнительныеПараметры.Форма;
	МенеджерЗаписиФИО = ДополнительныеПараметры.МенеджерЗаписиФИО;
	НоваяДатаФИО = ДополнительныеПараметры.НоваяДатаФИО;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если Не Отказ И Форма["ФИОФизическихЛицНоваяЗапись"] = Истина Тогда
		МенеджерЗаписиФИО.Период = НоваяДатаФИО;
		Форма.ВыполненаКомандаСменыФИО = Ложь;
	КонецЕсли;

	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененЗаголовокФормыСотрудника" Тогда
		
		Заголовок = Параметр;
		
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И КлиентСсылка = Источник Тогда
		Если (Параметр.ИмяРегистра = "ГражданствоФизическихЛиц"
			ИЛИ Параметр.ИмяРегистра = "ДокументыФизическихЛиц"
			ИЛИ Параметр.ИмяРегистра = "ФИОФизическихЛиц")
			И ЭтаФорма[Параметр.ИмяРегистра + "НаборЗаписейПрочитан"] Тогда
			Если Параметр.ИмяРегистра = "ДокументыФизическихЛиц" Тогда
				ОбработкаОповещенияОтредактированаИсторияДокументыФизическихЛиц(ЭтаФорма, КлиентСсылка, ИмяСобытия, Параметр, Источник);
				ОбработатьОтображениеСерияДокументаФизическогоЛица(ДокументыФизическихЛиц.ВидДокумента, ДокументыФизическихЛиц.Серия ,Элементы.ДокументыФизическихЛицСерия, ЭтаФорма);
				ОбработатьОтображениеНомерДокументаФизическогоЛица(ДокументыФизическихЛиц.ВидДокумента, ДокументыФизическихЛиц.Номер ,Элементы.ДокументыФизическихЛицНомер, ЭтаФорма);
				ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
			Иначе
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтаФорма, КлиентСсылка, ИмяСобытия, Параметр, Источник);
				Если Параметр.ИмяРегистра = "ГражданствоФизическихЛиц" Тогда
					Если ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна) Тогда
						ГражданствоФизическихЛицЛицоБезГражданства = 0;
					Иначе
						ГражданствоФизическихЛицЛицоБезГражданства = 1;
					КонецЕсли;
					СправочникКлиентыКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
				ИначеЕсли Параметр.ИмяРегистра = "ФИОФизическихЛиц" Тогда
					НаименованиеПоМенеджеруЗаписи = ФИОФизическихЛиц.Фамилия + " " + ФИОФизическихЛиц.Имя + " " + ФИОФизическихЛиц.Отчество;
					Если Не ПустаяСтрока(НаименованиеПоМенеджеруЗаписи) И Объект.ФИО <> НаименованиеПоМенеджеруЗаписи Тогда
						Объект.ФИО = НаименованиеПоМенеджеруЗаписи;
						СформироватьНаименованиеФизическогоЛица();
					КонецЕсли; 
					//СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОтредактированаИсторияДокументыФизическихЛиц(Форма, ВедущийОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
	КоллекцииИдентичны = РедактированиеПериодическихСведенийКлиент.КоллекцииНаборовИдентичны(Форма[Параметр.ИмяРегистра + "НаборЗаписей"], Параметр.МассивЗаписей, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Форма[Параметр.ИмяРегистра + "Прежняя"]));
	Если НЕ КоллекцииИдентичны Тогда
		НаборЗаписей = Форма[Параметр.ИмяРегистра + "НаборЗаписей"];
		НаборЗаписей.Очистить();
		Для Каждого Строка Из Параметр.МассивЗаписей Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		НаборЗаписей.Сортировать("Период");
		ПоследняяЗапись = Неопределено;
		Если НаборЗаписей.Количество() > 0 Тогда
			Для СмещениеИндекса = 0 По НаборЗаписей.Количество()-1 Цикл
				Запись = НаборЗаписей[НаборЗаписей.Количество() - 1 - СмещениеИндекса];
				Если Запись.ЯвляетсяДокументомУдостоверяющимЛичность Тогда
					ПоследняяЗапись = Запись;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		Если ПоследняяЗапись <> Неопределено Тогда
			СтруктураЗаписи = Новый Структура();
			Для Каждого КлючЗначение Из Форма[Параметр.ИмяРегистра + "Прежняя"] Цикл
				СтруктураЗаписи.Вставить(КлючЗначение.Ключ, ПоследняяЗапись[КлючЗначение.Ключ]);
			КонецЦикла;
			Форма[Параметр.ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
		Иначе
			МенеджерЗаписи = РедактированиеПериодическихСведенийВызовСервера.СтруктураМенеджераЗаписи(Параметр.ИмяРегистра, ВедущийОбъект);
			СтруктураЗаписи = Новый Структура();
			Для Каждого КлючЗначение Из Форма[Параметр.ИмяРегистра + "Прежняя"] Цикл
				СтруктураЗаписи.Вставить(КлючЗначение.Ключ, МенеджерЗаписи[КлючЗначение.Ключ]);
			КонецЦикла;
			Форма[Параметр.ИмяРегистра + "Прежняя"] = Новый ФиксированнаяСтруктура(СтруктураЗаписи);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Форма[Параметр.ИмяРегистра], Форма[Параметр.ИмяРегистра + "Прежняя"]);
		Форма.Модифицированность = Истина;
		РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, Параметр.ИмяРегистра, ВедущийОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	СозданиеНового = Параметры.Ключ.Пустая();
	
	Если СозданиеНового Тогда
		
		КлиентСсылка = Справочники.Клиенты.ПолучитьСсылку();		
		
		// Если это форма нового объекта - инициализация реквизитов формы, 
		// предназначенных для редактирования дополнительных
		// данных (помимо основного редактируемого объекта).
		//Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		//Форма.ДоступенПросмотрДанныхФизическихЛиц = Форма.ДоступноДобавлениеИзменениеДанныхФизическихЛиц
		//	ИЛИ Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры");
		
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "ФИОФизическихЛиц", 					КлиентСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "ГражданствоФизическихЛиц", 			КлиентСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "ДокументыФизическихЛиц", 				КлиентСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтаФорма, "СвидетельстваОРожденииФизическихЛиц", 	КлиентСсылка);
		
		//СправочникКлиентыКлиентСервер.УстановитьВидимостьПолейФИО(ЭтаФорма);
		
		Если Параметры.Свойство("ОсновнойТелефон") Тогда			
			Если ТипЗнч(Параметры.ОсновнойТелефон) = Тип("Массив") Тогда
				Номера = Параметры.ОсновнойТелефон;
				Если Номера.Количество() Тогда
					Для й = 0 По Номера.Количество() - 1 Цикл
						Если ЗначениеЗаполнено(Номера[й]) И Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("НомерТелефона", Номера[й])).Количество() = 0 Тогда 
							НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
							НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
							НоваяСтрока.Вид = ?(й = 0, Справочники.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента, Справочники.ВидыКонтактнойИнформации.ТелефонКлиента);
							НоваяСтрока.НомерТелефона = Номера[й];
							НоваяСтрока.НомерТелефонаБезКодов = УправлениеТелефониейКлиентСервер.ОбрезатьНомер(Номера[й]);
							НоваяСтрока.Представление = УправлениеТелефониейКлиентСервер.ПривестиТелефонКВиду(Номера[й]); 
							КонтактнаяИнформацияXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
							НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Параметры.ОсновнойТелефон) И Объект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("НомерТелефона", Параметры.ОсновнойТелефон)).Количество() = 0 Тогда
					НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
					НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента;
					НоваяСтрока.НомерТелефона = Параметры.ОсновнойТелефон;
					НоваяСтрока.НомерТелефонаБезКодов = УправлениеТелефониейКлиентСервер.ОбрезатьНомер(Параметры.ОсновнойТелефон); 
					НоваяСтрока.Представление = УправлениеТелефониейКлиентСервер.ПривестиТелефонКВиду(Параметры.ОсновнойТелефон); 
					КонтактнаяИнформацияXDTO = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(НоваяСтрока.Представление, НоваяСтрока.Вид);
					НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Объект.ТипКлиента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	КонецЕсли;
	
	ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	ЦветСтиляПоясняющийОшибкуТекст 		= ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
			
	СправочникКлиентыКлиентСервер.УстановитьВидимостьДополнительныхРеквизитовСвидетельства(ЭтаФорма, Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении);		
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Учесть возможность создания из взаимодействия.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	
	ВыполнитьВсеПроверки(ЭтотОбъект);
	
	Элементы.ВИП.Доступность = Пользователи.РолиДоступны("РедактированиеПризнакаВИПКлиента");
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// СтандартныеПодсистемы.Взаимодействия
	ВзаимодействияКлиент.КонтактПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Клиенты");
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ФизЛицо", Объект.Ссылка);
	ПараметрыОповещения.Вставить("ВидДокумента", ДокументыФизическихЛиц.ВидДокумента);
	Оповестить("ЗаписанДокументУдостоверяющийЛичность", ПараметрыОповещения);

	//<>, Басаргин (03.10.2017) {
	Если Параметры.СозданиеКлиентаИзЗапроса Тогда
		Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда 			
			Попытка
				ТекущиеДанные = ВладелецФормы.Элементы.Участники.ТекущиеДанные;
				ВладелецФормы.ОписаниеОповещенияОЗакрытииСозданияУчастника(Объект.Ссылка, ?(ТекущиеДанные = Неопределено, Неопределено, Новый Структура("Идентификатор", ТекущиеДанные.ПолучитьИдентификатор())));				
			Исключение
			КонецПопытки;			
		КонецЕсли;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.ОсновнойТелефон) ИЛИ Параметры.СозданиеКлиентаИзЗапроса Тогда
		Оповестить("ЗакрытьФормуВыбораКлиента", Объект.Ссылка, "Клиенты");
		Параметры.ОсновнойТелефон = Неопределено;
	КонецЕсли;		
	//Если ЗначениеЗаполнено(Параметры.ОсновнойТелефон) Тогда
	//	//Оповестить("СозданиеКлиентаИзТелефонии", Объект.Ссылка, "Клиенты");
	//	Оповестить("ЗакрытьФормуВыбораКлиента", Объект.Ссылка, "Клиенты");
	//	Параметры.ОсновнойТелефон = Неопределено;
	//ИначеЕсли Параметры.СозданиеКлиентаИзЗапроса Тогда
	//	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда 			
	//		Попытка
	//			ТекущиеДанные = ВладелецФормы.Элементы.Участники.ТекущиеДанные;
	//			ВладелецФормы.ОписаниеОповещенияОЗакрытииСозданияУчастника(Объект.Ссылка, ?(ТекущиеДанные = Неопределено, Неопределено, Новый Структура("Идентификатор", ТекущиеДанные.ПолучитьИдентификатор())));				
	//		Исключение
	//		КонецПопытки;			
	//	КонецЕсли;
	//	//Оповестить("СозданиеКлиентаИзЗапроса", Объект.Ссылка, "Клиенты");		
	//КонецЕсли;	
	//<> }
	
	//++ Юкаев Роман 20180226 (//
	Оповестить("ИзменениеКлиентаДляРасчетаИпотеки", Новый Структура("Клиент", Объект.Ссылка));
	//-- Юкаев Роман 20180226 )
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьДанныеКлиента();
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "ФИОФизическихЛиц", 					КлиентСсылка);
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СвидетельстваОРожденииФизическихЛиц", КлиентСсылка);
	
	ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(ЭтаФорма, КлиентСсылка);
	
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "ГражданствоФизическихЛиц", КлиентСсылка);
	Если ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна) Тогда
		ГражданствоФизическихЛицЛицоБезГражданства = 0;
	Иначе
		ГражданствоФизическихЛицЛицоБезГражданства = 1;
	КонецЕсли;
	
	Элементы.ГражданствоФизическихЛицСтрана.Доступность = (ГражданствоФизическихЛицЛицоБезГражданства = 0);	
	СправочникКлиентыКлиентСервер.ОбновитьПолеГражданствоПериод(ЭтаФорма, ТекущаяДатаСеанса());
	СправочникКлиентыКлиентСервер.УстановитьВидимостьИНН_КПП(ЭтаФорма);	

    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПослеОткрытияФормы", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормы()
	
	Если Параметры.Ключ.Пустая()
		И НЕ ПустаяСтрока(Объект.ФИО) Тогда

		ПриИзмененииФИО(Объект, ФИОФизическихЛиц);
		
	//Иначе

	//	СправочникКлиентыКлиентСервер.УстановитьВидимостьПолейФИО(ЭтаФорма);
		
	КонецЕсли; 
	
	ОбработатьОтображениеСерияДокументаФизическогоЛица(ЭтаФорма.ДокументыФизическихЛиц.ВидДокумента, ЭтаФорма.ДокументыФизическихЛиц.Серия ,ЭтаФорма.Элементы.ДокументыФизическихЛицСерия, ЭтаФорма);
	ОбработатьОтображениеНомерДокументаФизическогоЛица(ЭтаФорма.ДокументыФизическихЛиц.ВидДокумента, ЭтаФорма.ДокументыФизическихЛиц.Номер ,ЭтаФорма.Элементы.ДокументыФизическихЛицНомер, ЭтаФорма);	
	ОбработатьОтображениеИНН(ЭтаФорма.Элементы.ИНН, ЭтаФорма);
	ОбработатьОтображениеКПП(ЭтаФорма.Элементы.КПП, ЭтаФорма);
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
	
	//++ Юкаев Роман 20171219 ( //Задача 748729/2
	Элементы.ДокументыФизическихЛицПериод.Доступность = Ложь;
	//-- Юкаев Роман 20171219 )
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ Отказ И НЕ ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда 
		
		//++ Юкаев Роман 20171219 ( //задача 739668/3
		Если СтрНайти(Объект.ФИО, "  ") <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В ФИО клиента обнаружены двойные пробелы. Запись карточки невозможна!";
			Сообщение.Поле = "Объект.ФИО";
			Сообщение.Сообщить();
			
			Отказ = Истина;
		КонецЕсли;
		//-- Юкаев Роман 20171219 )
		
		//<846827>, Басаргин (18.07.2018) {	
		Для Каждого СтрокаТаблицы Из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл		
			Если СтрокаТаблицы.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКлиента")
				И СтрокаТаблицы.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты")
				И СтрНайти(СтрокаТаблицы.Представление, "absrealty.ru") Тогда			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Email не должен содержать ""absrealty.ru""", ,СтрокаТаблицы.ИмяРеквизита, , Отказ);
				Возврат;
			КонецЕсли;
		КонецЦикла;	
		//<846827> }
				
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
		ДополнительныеПараметры.Вставить("Отказ", Отказ);
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", 		ПараметрыЗаписи);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", 	Неопределено);
		ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", 		Ложь);
		//ДополнительныеПараметры.Вставить("ОповещениеЗавершения", 	ОповещениеЗавершения);
		//ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", 		ЗакрытьПослеЗаписи);
		
		ФизическиеЛицаПередЗаписьюФИО(Отказ, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
		
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Для нового физического лица устанавливаем ссылку.
	Если Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(КлиентСсылка);
	КонецЕсли;

    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	//Основной телефон
	СтруктураПоиска = Новый Структура("Тип,Вид",
											Перечисления.ТипыКонтактнойИнформации.Телефон,
											Справочники.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента);
	МассивНайденныхСтрок = ТекущийОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		ТекущийОбъект.ОсновнойТелефон 	= МассивНайденныхСтрок[0].Представление;
	КонецЕсли;
	
	//Если Объект.ВИП И Не Пользователи.РолиДоступны("РедактированиеПризнакаВИПКлиента") Тогда
	//	Сообщить("Недостаточно прав для редактирования VIP клиентов!");
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЛичныеДанныеФизическогоЛицаПриЗаписи(ЭтаФорма, КлиентСсылка);
	ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(ЭтаФорма, КлиентСсылка);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);	
	
	Если СозданиеНового Тогда
		
		ГражданствоПоУмолчанию = ГражданствоФизическихЛиц.Период = '00010101';
			
		ЗаписатьЗначенияПоУмолчанию(КлиентСсылка, ГражданствоПоУмолчанию);
		
	КонецЕсли;
	
	РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
																				ЭтаФорма,
																				"ГражданствоФизическихЛиц",
																				КлиентСсылка,
																				,
																				ДополнительныеСвойства);	
																				
	Если ДокументыФизическихЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении 
			И ДокументыФизическихЛиц.Период <> '00010101' Тогда
		
		СвидетельстваОРожденииФизическихЛиц.Период = ДокументыФизическихЛиц.Период;
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
																					ЭтаФорма,
																					"СвидетельстваОРожденииФизическихЛиц",
																					КлиентСсылка,
																					,
																					ДополнительныеСвойства);		
		
	КонецЕсли;																																										
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СозданиеНового = Ложь;
	
    // СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Сервисные процедуры

&НаКлиенте
Процедура ОткрытьИсторию(ИмяРегистра)
	
	ТолькоПросмотрИстории = ЭтаФорма.ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(ИмяРегистра, КлиентСсылка, ЭтаФорма, ТолькоПросмотрИстории);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначенияПоУмолчанию(ФизическоеЛицоСсылка, ГражданствоПоУмолчанию) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ГражданствоПоУмолчанию Тогда
		
		НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоСсылка);
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, РегистрыСведений.ГражданствоФизическихЛиц.СоздатьМенеджерЗаписи());
		Запись.ФизическоеЛицо = ФизическоеЛицоСсылка;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписей.Записать();
		
	КонецЕсли; 
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяЭлемента, ТекстПодсказки)
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьПолПоОтчеству(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ЗаблокироватьФизическоеЛицоПриРедактировании(СообщатьОНевозможностиБлокировки = Истина) Экспорт
	Если НЕ КлиентЗаблокировано Тогда
		Если НЕ ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(КлиентСсылка, КлиентВерсияДанных, УникальныйИдентификатор) Тогда
			Если СообщатьОНевозможностиБлокировки Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не удается внести изменения в личные данные сотрудника. Возможно, личные данные сотрудника редактируются другим пользователем.'"));
			КонецЕсли; 
			// Заблокировать не удалось - обновить данные физлица.
			ПрочитатьДанныеКлиента();
			Возврат Ложь;
		Иначе
			КлиентЗаблокировано = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(КлиентСсылка, КлиентВерсияДанных, УникальныйИдентификатор) Экспорт
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлиентСсылка, КлиентВерсияДанных, УникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеКлиента()
		
	КлиентСсылка		= Объект.Ссылка; 		
	КлиентВерсияДанных 	= КлиентСсылка.ВерсияДанных;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизическоеЛицо() Экспорт
	
	// Запись физического лица
	Если КлиентЗаблокировано ИЛИ Объект.Ссылка.Пустая() Тогда
		
		// Проверим права на запись нового физлица.
		//ПравоНаДобавлениеИзменениеКлиентов = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхКлиентов");
		//
		//Если Объект.Ссылка.Пустая() И НЕ ПравоНаДобавлениеИзменениеКлиентов Тогда
		//	ВызватьИсключение НСТР("ru = 'Нет прав на запись нового физического лица. Сотрудник не записан.'");
		//КонецЕсли;
	
		КлиентОбъект = РеквизитФормыВЗначение("Объект");
		Если КлиентОбъект.Ссылка.Пустая() Тогда
			КлиентОбъект.УстановитьСсылкуНового(КлиентСсылка);
		КонецЕсли;
		
		КлиентОбъект.Записать();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПривестиТелефонКВиду(Знач ТелефонСтрока) Экспорт 
	
	//++ Юкаев Роман 20180326 (//797274
	Попытка
		ТелефонЧисло = Число(ТелефонСтрока);
	Исключение
		ТелефонЧисло = УправлениеТелефониейКлиентСервер.ТолькоДопустимыеСимволыНомера(ТелефонСтрока);
	КонецПопытки;
	
	ТелефонСтрока = Формат(ТелефонЧисло, "ЧГ=0");
	
	Если СтрДлина(ТелефонСтрока) = 11 Тогда 
		Возврат Лев(ТелефонСтрока, 1) + " (" + Прав(Лев(ТелефонСтрока, 4), 3) + ") " + Лев(Прав(ТелефонСтрока, 7), 3) + "-" + Лев(Прав(ТелефонСтрока, 4), 2) + "-" + Прав(ТелефонСтрока, 2);
	ИначеЕсли СтрДлина(ТелефонСтрока) = 10 Тогда 
		Возврат "(" + Прав(Лев(ТелефонСтрока, 3), 3) + ") " + Лев(Прав(ТелефонСтрока, 7), 3) + "-" + Лев(Прав(ТелефонСтрока, 4), 2) + "-" + Прав(ТелефонСтрока, 2);
	ИначеЕсли СтрДлина(ТелефонСтрока) = 7 Тогда 
		Возврат Лев(Прав(ТелефонСтрока, 7), 3) + "-" + Лев(Прав(ТелефонСтрока, 4), 2) + "-" + Прав(ТелефонСтрока, 2);
	ИначеЕсли СтрДлина(ТелефонСтрока) > 11 и Лев(ТелефонСтрока,1) = "+" Тогда 
		Возврат Лев(ТелефонСтрока, 2) + " (" + Прав(Лев(ТелефонСтрока, 5), 3) + ") " + Лев(Прав(ТелефонСтрока, СтрДлина(ТелефонСтрока) - 5), 3) + "-" + Лев(Прав(ТелефонСтрока, СтрДлина(ТелефонСтрока) - 8), 2) + "-" + Прав(ТелефонСтрока,СтрДлина(ТелефонСтрока) - 10);
	Иначе
		Возврат ТелефонСтрока;	
	КонецЕсли;	
	//-- Юкаев Роман 20180326 )
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииЗавершение()
	//УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элементы[ТекущийЭлементКонтактнойИнформации]);
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзменении(Элемент)
	
	СправочникКлиентыКлиентСервер.УстановитьВидимостьИНН_КПП(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиИНН(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	ОбработатьОтображениеИНН(ЭтаФорма.Элементы.ИНН, ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиИНН(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если ПустаяСтрока(Объект.ИНН) Тогда
		Объект.ИННВведенКорректно = Истина;
	Иначе
		Объект.ИННВведенКорректно = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, ЭтоЮрЛицо(Объект.ТипКлиента), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиИНН = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветСтиляПоясняющийОшибкуТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиКПП(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	ОбработатьОтображениеКПП(ЭтаФорма.Элементы.КПП, ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиКПП(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если ПустаяСтрока(Объект.КПП) Тогда
		Объект.КППВведенКорректно = Истина;
	Иначе
		Объект.КППВведенКорректно = РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиКПП = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветСтиляПоясняющийОшибкуТекст);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьВсеПроверки(Форма)
	
	СформироватьПредставлениеПроверкиИНН(Форма);
	СформироватьПредставлениеПроверкиКПП(Форма);
	
	СформироватьПредставлениеПроверкиДанных(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиДанных(Форма) 
	
	КомпонентыФС = Новый Массив;
	
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиИНН) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиИНН);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиКПП) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиКПП);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
		
	Если КомпонентыФС.Количество() > 0 Тогда
		КомпонентыФС.Удалить(КомпонентыФС.ВГраница());
	КонецЕсли;
	
	Форма.ПредставлениеПроверкиДанных = Новый ФорматированнаяСтрока(КомпонентыФС);
	Форма.Элементы.ПредставлениеПроверкиДанных.Видимость = Не ПустаяСтрока(Форма.ПредставлениеПроверкиДанных);
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиДанных) Тогда
		Форма.Элементы.ПредставлениеПроверкиДанных.Высота = СтрЧислоСтрок(Форма.ПредставлениеПроверкиДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(ТипКлиента)
	
	Возврат ТипКлиента = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтображениеИНН(Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";

	Если НЕ ПустаяСтрока(Объект.ИНН) Тогда
		Если Объект.ИННВведенКорректно Тогда
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Иначе
			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
	Иначе
		СообщенияПроверки = НСтр("ru='Не указан ИНН'");
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	КонецЕсли;
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		Элемент.Имя,
		СообщенияПроверки);
		
	Элемент.ЦветТекста = ЭлементЦветТекста;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтображениеКПП(Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";

	Если НЕ ПустаяСтрока(Объект.ИНН) Тогда
		Если Объект.КППВведенКорректно Тогда
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Иначе
			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
	Иначе
		СообщенияПроверки = НСтр("ru='Не указан ИНН'");
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	КонецЕсли;
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		Элемент.Имя,
		СообщенияПроверки);
		
	Элемент.ЦветТекста = ЭлементЦветТекста;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыФизЛиц

//////////////////////////////////////////////////////////////////////////////////
// Документы физических лиц

&НаКлиенте
Процедура ФизическиеЛицаПередЗаписьюУдостоверениеЛичности(Результат, ДополнительныеПараметры) Экспорт

	Отказ = (Результат = Неопределено);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	// Запрос про документ удостоверяющий личность.
	Оповещение = Новый ОписаниеОповещения("ФизическиеЛицаПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
    ЗапроситьРежимИзмененияУдостоверенияЛичности(Форма, //Форма.ДокументыФизическихЛиц.Период, 
	                                                ТекущаяДата(),
													Отказ, Оповещение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическиеЛицаПередЗаписьюЗавершение(Отказ, ДополнительныеПараметры) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("ПроверкаПередЗаписьюВыполнена", Истина);
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ПараметрыЗаписи);
	ИначеЕсли Форма.Записать(ПараметрыЗаписи) Тогда
		
		Форма.Модифицированность = Ложь;
		Если ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда 
			Форма.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияУдостоверенияЛичности(ФормаИсточник, ДатаИзменения, Отказ, ОповещениеЗавершения = Неопределено) Экспорт
	
	//Если ФормаИсточник.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		ТекстКнопкиДа = НСтр("ru = 'Изменился документ, удостоверяющий личность'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru =  'При редактировании изменены сведения о документе, удостоверяющем личность.
							|Если исправлена прежняя запись о документе (она была ошибочной), нажмите ""Исправлена ошибка"".
							|Если у сотрудника изменился документ, удостоверяющий личность с %1, нажмите'") + " ""%2""",
				Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"),
				ТекстКнопкиДа);
		
		РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ФормаИсточник, "ДокументыФизическихЛиц", ТекстВопроса, ТекстКнопкиДа, Отказ, ОповещениеЗавершения);
		
	//Иначе 
		
		//Если ОповещениеЗавершения <> Неопределено Тогда 
		//	ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		//КонецЕсли;
		
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицДатаВыдачиПриИзменении(Элемент)
	
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);	
	
	//++ Юкаев Роман 20171219 ( //Задача 748729/2
	Элементы.ДокументыФизическихЛицПериод.Доступность = Ложь;
	//-- Юкаев Роман 20171219 )
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеУдостоверениеЛичностиПериод(Форма) Экспорт
	
	//Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		ЭтоЗначенияПоУмолчанию = Ложь;
		// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
		// записи о сведениях об инвалидности еще нет.
		Если СправочникКлиентыКлиентСервер.УдостоверениеЛичностиПоУмолчанию(Форма.ДокументыФизическихЛиц)
			И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			
			ЭтоЗначенияПоУмолчанию = Истина;
			Форма.ДокументыФизическихЛиц.Период = '00010101';
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"АвтоОтметкаНезаполненного",
				Ложь);

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"ОтметкаНезаполненного",
				Ложь);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"АвтоОтметкаНезаполненного",
				Истина);
				
			Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
				ВидДокументаОтметкаНезаполненного = Ложь;
				//++ Юкаев Роман 20180228 ( //
				Элементы.ДокументыФизическихЛицВидДокумента.СписокВыбора.Добавить(Форма.ДокументыФизическихЛиц.ВидДокумента, Строка(Форма.ДокументыФизическихЛиц.ВидДокумента));
				//-- Юкаев Роман 20180228 )
			Иначе
				ВидДокументаОтметкаНезаполненного = Истина;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"ОтметкаНезаполненного",
				ВидДокументаОтметкаНезаполненного);
				
			Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Период) И ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
				Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
			КонецЕсли;
			
			//++ Юкаев Роман 20171220 ( // Задача 748729
			Если Не ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Период) Тогда
				Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
			КонецЕсли;
			//-- Юкаев Роман 20171220 )
			
			Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			ТолькоПросмотрПоЛяПериод = Истина;
		Иначе
			ТолькоПросмотрПоЛяПериод = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоЗначенияПоУмолчанию
			И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицДатаВыдачи",
				"АвтоОтметкаНезаполненного",
				Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицДатаВыдачи",
				"ОтметкаНезаполненного",
				НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи));

		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицПериод",
			"ТолькоПросмотр",
			ТолькоПросмотрПоЛяПериод);
		
		РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ДокументыФизическихЛиц", Форма.КлиентСсылка);
		
		СправочникКлиентыКлиентСервер.УстановитьВидимостьДополнительныхРеквизитовСвидетельства(ЭтаФорма, ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении"));
		
		Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
		
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента) Тогда
		ДокументыФизическихЛиц.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли;
	
	//++ Юкаев Роман 20180228 (//
	СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокДокументовУдостоверяющихЛичность().ВыгрузитьЗначения());
	//-- Юкаев Роман 20180228 )
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Элемент)
	
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
	ОбработатьОтображениеСерияДокументаФизическогоЛица(ЭтаФорма.ДокументыФизическихЛиц.ВидДокумента, ЭтаФорма.ДокументыФизическихЛиц.Серия ,ЭтаФорма.Элементы.ДокументыФизическихЛицСерия, ЭтаФорма);
	ОбработатьОтображениеНомерДокументаФизическогоЛица(ЭтаФорма.ДокументыФизическихЛиц.ВидДокумента, ЭтаФорма.ДокументыФизическихЛиц.Номер ,ЭтаФорма.Элементы.ДокументыФизическихЛицНомер, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицСерияПриИзменении(Элемент)
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
	ОбработатьОтображениеСерияДокументаФизическогоЛица(ЭтаФорма.ДокументыФизическихЛиц.ВидДокумента, ЭтаФорма.ДокументыФизическихЛиц.Серия ,ЭтаФорма.Элементы.ДокументыФизическихЛицСерия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицНомерПриИзменении(Элемент)
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
	ОбработатьОтображениеНомерДокументаФизическогоЛица(ЭтаФорма.ДокументыФизическихЛиц.ВидДокумента, ЭтаФорма.ДокументыФизическихЛиц.Номер ,ЭтаФорма.Элементы.ДокументыФизическихЛицНомер, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКемВыданПриИзменении(Элемент)
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКодПодразделенияПриИзменении(Элемент)
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицСрокДействияПриИзменении(Элемент)
	ОбновитьПолеУдостоверениеЛичностиПериод(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтображениеСерияДокументаФизическогоЛица(ВидДокумента, Серия, Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";
	ТипСерии = ДокументыФизическихЛицКлиентСервер.ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если ЗначениеЗаполнено(ВидДокумента) И ТипСерии > 0 Тогда
		Если НЕ ПустаяСтрока(Серия) Тогда
			СерияУказанаПравильно = ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, Серия, СообщенияПроверки);
			Если СерияУказанаПравильно Тогда
				ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Иначе
				ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			КонецЕсли;
		Иначе
			СообщенияПроверки = НСтр("ru='Не указана серия документа'");
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		КонецЕсли;
	Иначе
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	КонецЕсли;
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		Элемент.Имя,
		СообщенияПроверки);
		
	Элемент.ЦветТекста = ЭлементЦветТекста;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтображениеНомерДокументаФизическогоЛица(ВидДокумента, Номер ,Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";
	ТипНомера = ДокументыФизическихЛицКлиентСервер.ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если ЗначениеЗаполнено(ВидДокумента) И ТипНомера > 0 Тогда
		Если НЕ ПустаяСтрока(Номер) Тогда
			СерияУказанаПравильно = ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, Номер, СообщенияПроверки);
			Если СерияУказанаПравильно Тогда
				ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Иначе
				ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			КонецЕсли;
		Иначе
			СообщенияПроверки = НСтр("ru='Не указан номер документа'");
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		КонецЕсли;
	Иначе
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	КонецЕсли;
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		Элемент.Имя,
		СообщенияПроверки);
		
	Элемент.ЦветТекста = ЭлементЦветТекста;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма.Параметры.Свойство("Ключ") И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
	КонецЕсли;
	
	МенеджерЗаписи = МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	// Имя реквизита формы совпадает с именем регистра.
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма["ДокументыФизическихЛицНоваяЗапись"] = Ложь;
	
КонецПроцедуры

&НаСервере
Функция МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	МенеджерЗаписи = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи["Физлицо"] = ВедущийОбъект;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Период,
	|	РегистрСведений.Физлицо,
	|	РегистрСведений.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ВедущийОбъект
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_КонтактнаяИнформация 

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)	
	
	//EXTCODE Шумилин Сергей 15.06.2017 {{ --->
	//++ Юкаев Роман 20180327 (//
	Реквизит = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Элемент.Имя))[0];
	Если Реквизит.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента")
		Или Реквизит.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКлиента") Тогда
		ЭтотОбъект[Элемент.Имя] = ПривестиТелефонКВиду(Элемент.ТекстРедактирования);
	КонецЕсли;
	ТекущийЭлементКонтактнойИнформации = Элемент.Имя; 		
	//ПодключитьОбработчикОжидания("Подключаемый_КонтактнаяИнформацияПриИзмененииЗавершение", 0.1, Истина);
	//EXTCODE Шумилин Сергей 15.06.2017 <--- }}
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
	//<770933>, Басаргин (05.02.2018) {
	КонтактнаяИнформация_ОчисткаОсновногоНомера(Элемент.Имя, ЭтаФорма);	
	//<770933> }	
	
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);	                                                     
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
    УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура КонтактнаяИнформация_ОчисткаОсновногоНомера(ИмяРеквизита, Форма)
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Результат)[0];
	
	Если НайденнаяСтрока.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента") 
		И Форма[ИмяРеквизита] = "" И НЕ Объект.ОсновнойТелефон = "" Тогда
			
		НайденнаяСтрока.ЗначенияПолей = "";
		НайденнаяСтрока.Представление = "";
		НайденнаяСтрока.Комментарий   = "";
		
		Форма[ИмяРеквизита] = "";
		Форма.Модифицированность = Истина;
		
		Объект.ОсновнойТелефон = "";
		
		Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Гражданство 

//////////////////////////////////////////////////////////////////////////////////
// Редактирование гражданства

&НаКлиенте
Процедура ГражданствоФизическихЛицЛицоБезГражданстваПриИзменении(Элемент)
	
	Если ГражданствоФизическихЛицЛицоБезГражданства = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна)
			И ЗначениеЗаполнено(ГражданствоФизическихЛицПрежняя.Страна) Тогда
		КонецЕсли;
		
		ГражданствоФизическихЛиц.Страна = ГражданствоФизическихЛицПрежняя.Страна;
		Если НЕ ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна) Тогда
			ГражданствоФизическихЛиц.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		КонецЕсли; 
		
	Иначе
		
		ГражданствоФизическихЛиц.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
		
	КонецЕсли;
	
	Элементы.ГражданствоФизическихЛицСтрана.Доступность = (ГражданствоФизическихЛицЛицоБезГражданства = 0);
	
	СправочникКлиентыКлиентСервер.ОбновитьПолеГражданствоПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());	
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоФизическихЛицСтранаПриИзменении(Элемент)
	
	Элементы.ГражданствоФизическихЛицСтрана.Доступность = (ГражданствоФизическихЛицЛицоБезГражданства = 0);
	
	СправочникКлиентыКлиентСервер.ОбновитьПолеГражданствоПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоФизическихЛицПериодПриИзменении(Элемент)
	
	//ГражданствоФизическихЛиц.Период = ГражданствоФизическихЛицПериод;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовУдостоверяющихЛичность()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка,
		|	ВидыДокументовФизическихЛиц.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
		|ГДЕ
		|	ВидыДокументовФизическихЛиц.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДокументовФизическихЛиц.Порядок";
	
	Результат = Запрос.Выполнить();
	
	СписокДокументов = Новый СписокЗначений;
	
	Если Результат.Пустой() Тогда
		Возврат СписокДокументов;
	Иначе
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			СписокДокументов.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
		Возврат СписокДокументов;
	КонецЕсли;
	
КонецФункции
//-- Юкаев Роман 20180228 )

#КонецОбласти
