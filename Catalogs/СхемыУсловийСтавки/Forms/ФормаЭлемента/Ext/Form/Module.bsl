&НаКлиенте
Перем ДоступныеСтрокиКолонки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	ОбновитьСхему();
	ОбновитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСхему(ЭтоЗаполнение=Ложь) Экспорт
	
	СхемаУсловий.Настройки.Отбор.Элементы.Очистить();

	СКД = Справочники.СхемыУсловийСтавки.СоздатьСхемуКомпоновки();
	
	АдресСхемыКомпоновкиДоступнныеПоля = ПоместитьВоВременноеХранилище(СКД, ЭтаФорма.УникальныйИдентификатор);
	
	ИсточникНастроекДоступнныеПоля = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДоступнныеПоля);
	СхемаУсловий.Инициализировать(ИсточникНастроекДоступнныеПоля);
	НастройкиКомпоновкиДанных = Неопределено;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		НастройкиКомпоновкиДанных = ПолучитьНастройкиКомпоновкиДанных(Объект.Ссылка);
	Иначе
		Если Параметры.Свойство(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			НастройкиКомпоновкиДанных = ПолучитьНастройкиКомпоновкиДанных(Параметры.ЗначениеКопирования);			
		ИначеЕсли ЭтоЗаполнение Тогда
			Сообщить("Сначала нужно записать схему!");
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ НастройкиКомпоновкиДанных = Неопределено Тогда
		СхемаУсловий.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КонецЕсли;
	
	ТД.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборы(ЭтоЗаполнение=Ложь) Экспорт
	
	Отборы.Настройки.Отбор.Элементы.Очистить();

	СКД = Справочники.СхемыУсловийСтавки.СоздатьСхемуКомпоновкиОтборы();
	
	АдресСхемыКомпоновкиДоступнныеПоля = ПоместитьВоВременноеХранилище(СКД, ЭтаФорма.УникальныйИдентификатор);
	
	ИсточникНастроекДоступнныеПоля = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДоступнныеПоля);
	Отборы.Инициализировать(ИсточникНастроекДоступнныеПоля);
	НастройкиКомпоновкиДанных = Неопределено;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		НастройкиКомпоновкиДанных = Справочники.СхемыУсловийСтавки.ПолучитьНастройкиКомпоновкиДанныхОтборы(Объект.Ссылка);
	Иначе
		Если Параметры.Свойство(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			НастройкиКомпоновкиДанных = Справочники.СхемыУсловийСтавки.ПолучитьНастройкиКомпоновкиДанныхОтборы(Объект.Ссылка);		
		ИначеЕсли ЭтоЗаполнение Тогда
			Сообщить("Сначала нужно записать схему!");
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ НастройкиКомпоновкиДанных = Неопределено Тогда
		Отборы.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьСхему(Команда)
	
	
	АдресФайлаВоВременномХранилище = "";
	ПодготовитьСхемуНаСервере(АдресФайлаВоВременномХранилище);
	
	ПолучитьФайл(АдресФайлаВоВременномХранилище);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьСхемуНаСервере(АдресФайлаВоВременномХранилище)
	
	СхемаКомпоновки    = Справочники.СхемыУсловийСтавки.СоздатьСхемуКомпоновки();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СхемаКомпоновки);
	ЗаписьXML.Закрыть();
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(
	Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	УдалитьФайлы(ИмяВременногоФайла);

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКомпоновкиДанных(Условие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отборы.ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник.СхемыУсловийСтавки КАК Отборы
	|ГДЕ
	|	Отборы.Ссылка = &Условие";
	
	Запрос.УстановитьПараметр("Условие", Условие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;  	
	
	Возврат Неопределено;
	
КонецФункции


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Схема
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных =
	Новый ХранилищеЗначения(СхемаУсловий.ПолучитьНастройки());
	
	ПараметрыОтбора = СформироватьМакетКомпоновкиДанных(СериализоватьОтборНаСервере(СхемаУсловий.Настройки.Отбор));
	
	ТекущийОбъект.МакетКомпоновкиДанных = ПараметрыОтбора.МакетКомпоновкиДанных;
	ТекущийОбъект.РеквизитыОтбора = ПараметрыОтбора.РеквизитыОтбора;
	
	//Отборы
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанныхОтборы =
	Новый ХранилищеЗначения(Отборы.ПолучитьНастройки());
	
	ПараметрыОтбора = СформироватьМакетКомпоновкиДанных(СериализоватьОтборНаСервере(СхемаУсловий.Настройки.Отбор));
	
	ТекущийОбъект.МакетКомпоновкиДанных = ПараметрыОтбора.МакетКомпоновкиДанных;
	ТекущийОбъект.РеквизитыОтбора = ПараметрыОтбора.РеквизитыОтбора;


КонецПроцедуры


&НаСервереБезКонтекста
Функция СформироватьМакетКомпоновкиДанных(Знач Отбор)
	
	СериализованныйМакет = "";	
    СериализолванныйМассивРеквизитов = "";
	Если Не ПустаяСтрока(СтрЗаменить(Отбор, "<Отборы/>","")) Тогда 
		
		СхемаКомпоновки 								= Справочники.СхемыУсловийСтавки.СоздатьСхемуКомпоновки();
		КомпоновщикНастроекКомпоновкиДанных 			= Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикМакетаКомпоновкиДанных				= Новый КомпоновщикМакетаКомпоновкиДанных;
		ИсточникДоступныхНастроекКомпоновкиДанных		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
		
		//Работа с данными
		КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
		Мультикалькулятор.ДесериализоватьОтбор(Отбор, КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор);
		
		//создаем новую группировку
		НоваяГруппировка = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		НоваяГруппировка.Использование	=	Истина;
		
		Таблицы = Новый Массив;
		
		РеквизитыОтбора = "";		
		сч = 0;
        
        МассивРеквизитовОтбора = Новый Массив;
		
		ЗапросКомпоновкиДляПрограммируемыхУсловий =  Справочники.СхемыУсловийСтавки.СформироватьЗапросКомпоновкиДляПрограммируемыхУсловий(); 		
		
		
		ПрименитьЭлементыОтбора (КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор, Таблицы, КомпоновщикНастроекКомпоновкиДанных, ЗапросКомпоновкиДляПрограммируемыхУсловий, МассивРеквизитовОтбора, "", сч, "ИмяПоля");		
		
		Если сч>0 Тогда
			
            МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновки
            ,КомпоновщикНастроекКомпоновкиДанных.Настройки, , ,
            Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
            
            
            МассивПараметровДляУдаления = Новый Массив;
            Для Каждого Набор из МакетКомпоновкиДанных.НаборыДанных Цикл 
                ТекстЗапроса = Набор.Запрос;
                Для Каждого ЗначениеПараметра из МакетКомпоновкиДанных.ЗначенияПараметров Цикл 
                    Если Найти(ТекстЗапроса, ЗначениеПараметра.Имя) = 0 Тогда 
                        МассивПараметровДляУдаления.Добавить(ЗначениеПараметра);
                    КонецЕсли;
                КонецЦикла;
            КонецЦикла;
            
            Для Каждого ЗначениеПараметра из МассивПараметровДляУдаления Цикл 
                МакетКомпоновкиДанных.ЗначенияПараметров.Удалить(ЗначениеПараметра);    
            КонецЦикла;
            
            
            СериализованныйМакет = Мультикалькулятор.СериализоватьМакетКомпоновкиДанных(МакетКомпоновкиДанных);
            СериализолванныйМассивРеквизитов = Мультикалькулятор.СериализоватьМассив(МассивРеквизитовОтбора)
        КонецЕсли;
	КонецЕсли;
	Возврат Новый Структура("МакетКомпоновкиДанных,РеквизитыОтбора", СериализованныйМакет, СериализолванныйМассивРеквизитов);
КонецФункции

&НаСервере
Функция СериализоватьОтборНаСервере(Знач РеквизитФормы)
    Возврат Мультикалькулятор.СериализоватьОтбор(РеквизитФормы);
КонецФункции

&НаСервереБезКонтекста
Процедура ПрименитьЭлементыОтбора (ЭлементыОтбора, Таблицы, КомпоновщикНастроекКомпоновкиДанных, ЗапросКомпоновкиДляПрограммируемыхУсловий, МассивРеквизитовОтбора, РеквизитыОтбора, сч, ИмяПоля)
	
	Для Каждого ЭлементОтбора из ЭлементыОтбора.Элементы Цикл  		
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПрименитьЭлементыОтбора (ЭлементОтбора, Таблицы, КомпоновщикНастроекКомпоновкиДанных, ЗапросКомпоновкиДляПрограммируемыхУсловий, МассивРеквизитовОтбора, РеквизитыОтбора, сч, ИмяПоля);   			
			Продолжить;
		КонецЕсли;
		
		РеквизитыОтбора = РеквизитыОтбора + ?(ЗначениеЗаполнено(РеквизитыОтбора),","+Строка(ЭлементОтбора.ЛевоеЗначение),Строка(ЭлементОтбора.ЛевоеЗначение));
		
		Если ЭлементОтбора.Использование и Не ПустаяСтрока(Строка(ЭлементОтбора.ЛевоеЗначение)) Тогда 			
			ОбновитьМассивРеквизитовОтбора(МассивРеквизитовОтбора, ЭлементОтбора.ЛевоеЗначение, ЗапросКомпоновкиДляПрограммируемыхУсловий.СоответствиеПолей);
			
			сч = сч + 1;
			ПервыйУровень 				= Новый ПолеКомпоновкиДанных(ИмяПоля + "."+Лев(СтрЗаменить(Строка(ЭлементОтбора.ЛевоеЗначение), ИмяПоля + ".",""),Найти(СтрЗаменить(Строка(ЭлементОтбора.ЛевоеЗначение),ИмяПоля + ".",""),".")-1));
			ПолеОтбораПервогоУровня     = КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПервыйУровень);
			Если Не ПолеОтбораПервогоУровня  = Неопределено и ПолеОтбораПервогоУровня.Таблица Тогда 
				ИндексГруппировки = Таблицы.Найти(ПолеОтбораПервогоУровня);
				Если ИндексГруппировки = Неопределено Тогда 
					Таблицы.Добавить(ПолеОтбораПервогоУровня);	
					НоваяГруппировка = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
					НоваяГруппировка.Использование	= Истина;
					НоваяГруппировка.Имя			= СтрЗаменить(ПервыйУровень,ИмяПоля + ".","");			
					ВыбранноеПолеГруппировки = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				Иначе
					ВыбранноеПолеГруппировки = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Получить(ИндексГруппировки + 1).Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));	
				КонецЕсли;	
			Иначе
				ВыбранноеПолеГруппировки = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Получить(0).Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			КонецЕсли;
			ВыбранноеПолеГруппировки.Поле 			= Новый ПолеКомпоновкиДанных(ЭлементОтбора.ЛевоеЗначение);
			ВыбранноеПолеГруппировки.Использование 	= Истина;				
		КонецЕсли;		
	КонецЦикла;   	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьМассивРеквизитовОтбора(МассивРеквизитовОтбора, ЭлементОтбора, СоответствиеПолей)
    
    Реквизит = Строка(ЭлементОтбора);
    
    ПрогрУсловие = СоответствиеПолей.Получить(ПривестиРеквизитКВиду(Реквизит));
    МассивРеквизитовДляДобавления = Новый Массив; 
    МассивРеквизитовДляДобавления.Добавить(Реквизит);
    
    Для Каждого Реквизит из МассивРеквизитовДляДобавления Цикл 
        
        ПриведенныйРеквизит = ПривестиРеквизитКВиду(Реквизит);
        
        Если МассивРеквизитовОтбора.Найти(ПриведенныйРеквизит) = Неопределено Тогда 
            МассивРеквизитовОтбора.Добавить(ПриведенныйРеквизит);
        КонецЕсли;
        
    КонецЦикла;    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПривестиРеквизитКВиду(ЭлементОтбора)
    Реквизит = Строка(ЭлементОтбора);
    
    ЛеваяЧастьДляОтсечения = Лев(Реквизит,Найти(Реквизит, "."));
    Реквизит = СтрЗаменить(Реквизит, ЛеваяЧастьДляОтсечения, "");
    РеквизитПриведенныйКВиду = Реквизит;
    
    Возврат РеквизитПриведенныйКВиду;
    
КонецФункции

&НаКлиенте
Процедура ДоступныеСтрокиКолонки()
	
	ДоступныеСтрокиКолонки = Новый СписокЗначений;
	Для Каждого Стр Из СхемаУсловий.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(Стр) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПолучитьЭлементыГруппы(Стр, ДоступныеСтрокиКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступныеСтрокиКолонки.НайтиПоЗначению(Объект.Колонки) = Неопределено Тогда
		Для Каждого Стр Из ДоступныеСтрокиКолонки Цикл
			Если Объект.Строки <> Стр.Значение Тогда
				Объект.Колонки = Стр.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	 	
	Если ДоступныеСтрокиКолонки.НайтиПоЗначению(Объект.Строки) = Неопределено Тогда
		Для Каждого Стр Из ДоступныеСтрокиКолонки Цикл
			Если Объект.Колонки <> Стр.Значение Тогда
				Объект.Строки = Стр.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЭлементыГруппы(знач Группа, СписокЭлементов,МассивЗначений=Неопределено, ВсеЗначения=Неопределено)
	
	МассивЗначений = Новый Массив;
	Для Каждого Стр Из Группа.Элементы Цикл
		Если ТипЗнч(Стр) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПолучитьЭлементыГруппы(Стр, СписокЭлементов);
		КонецЕсли;
		МассивЗначений.Добавить(Стр.ПравоеЗначение);
		Если ВсеЗначения<> Неопределено Тогда 
			Если ВсеЗначения.Найти(Стр.ПравоеЗначение)=Неопределено Тогда
				ВсеЗначения.Добавить(Стр.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьСписокЭлементовПоЗначениям(МассивЗначений, СписокЭлементов);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьСписокЭлементовПоЗначениям(Значения, СписокЭлементов)
	
	Для Каждого Стр Из Значения Цикл
		Если СписокЭлементов.НайтиПоЗначению(Стр.Владелец) = Неопределено Тогда
			СписокЭлементов.Добавить(Стр.Владелец);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникЗаполнения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Сначала нужно записать схему");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ВсеИспользуемыеЗначения", ВсеИспользуемыеЗначения());
	ФормаПомощника = ПолучитьФорму("Справочник.СхемыУсловийСтавки.Форма.ПомощникЗаполнения",ПараметрыОткрытия,ЭтаФорма);
	ФормаПомощника.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолеКакСтрокуКолонку(ЗначениеПоля)
	Поле = ЗначениеРеквизитаОбъекта(ЗначениеПоля, "Владелец");
	Если НЕ ЗначениеЗаполнено(Объект.Строки) Тогда
		Объект.Строки = Поле;
		СтрокиПриИзменении(Неопределено);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Колонки) Тогда
		Объект.Колонки = Поле;
		КолонкиПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	//Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции 

&НаСервере
Процедура ОбработкаВыбораПараметровНаСервере(ПараметрыВыбора)
	
	Объект.СортировкаКолонок.Очистить();
	Объект.СортировкаСтрок.Очистить();
	
	СхемаУсловий.Настройки.Отбор.Элементы.Очистить(); 
	 
	ВсеКомбинации = Справочники.СхемыУсловийСтавки.ПолучитьВсеКомбинации(ПараметрыВыбора);
	КоличествоЗначений = ВсеКомбинации.Колонки.Количество();
	
	Для Каждого Комбинация Из ВсеКомбинации Цикл
		Группа = СхемаУсловий.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
		Для i=0 По КоличествоЗначений-1 Цикл	
			Ключ = ПолучитьКлючПоЗначению(Комбинация[i]);
			Поле = ПолучитьПолеПоКлючу(Ключ, СхемаУсловий.Настройки.Отбор.ДоступныеПоляОтбора);
			НовыйЭлементОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 		          		
			НовыйЭлементОтбора.ЛевоеЗначение  = Поле;
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = Комбинация[i];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПараметров(ПараметрыВыбора) Экспорт

	ОбработкаВыбораПараметровНаСервере(ПараметрыВыбора);	
//	Элементы.СхемаУсловийНастройкиОтбор.Развернуть(Элементы.СхемаУсловийНастройкиОтбор.ТекущаяСтрока);
	ДоступныеСтрокиКолонки();
	
	Если ДоступныеСтрокиКолонки.НайтиПоЗначению(Объект.Колонки) = Неопределено Тогда
		Объект.Колонки = Неопределено;
	КонецЕсли;
	Если ДоступныеСтрокиКолонки.НайтиПоЗначению(Объект.Строки) = Неопределено Тогда
		Объект.Строки = Неопределено;
	КонецЕсли;
	
	КолонкиПриИзменении(Неопределено);
	СтрокиПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючПоЗначению(Значение)
	
	ПараметрыСКД = Справочники.СхемыУсловийСтавки.СформироватьЗапросКомпоновкиДляПрограммируемыхУсловий();
	Для Каждого Стр Из ПараметрыСКД.Поля Цикл
		Если Стр.Параметры = Значение Тогда
			 Возврат "[" + Стр.ПараметрНаименование +"]." + Стр.Поле;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьПолеПоКлючу(Ключ, знач пЭлементы)
	
	Для Каждого Стр Из пЭлементы.Элементы Цикл
			Поле = пЭлементы.НайтиПоле(Новый ПолеКомпоновкиДанных(Ключ)).Поле;
		Возврат Поле;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура СтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 	
	ДанныеВыбора = ДоступныеСтрокиКолонки.Скопировать();
	
	Если ЗначениеЗаполнено(Объект.Колонки) Тогда
		Элемент = ДанныеВыбора.НайтиПоЗначению(Объект.Колонки);
		ДанныеВыбора.Удалить(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КолонкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ДоступныеСтрокиКолонки.Скопировать();

	Если ЗначениеЗаполнено(Объект.Строки) Тогда
		Элемент = ДанныеВыбора.НайтиПоЗначению(Объект.Строки);
		ДанныеВыбора.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ДоступныеСтрокиКолонки();
	НарисоватьСхемуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СхемаУсловийНастройкиОтборПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ДоступныеСтрокиКолонки",0.5,Истина);

КонецПроцедуры

&НаКлиенте
Процедура КолонкиПриИзменении(Элемент)
	
	ДоступныеСтрокиКолонки = Новый СписокЗначений;	
	МассивЗначений = Новый Массив;
	
	Объект.СортировкаКолонок.Очистить();
	Для Каждого Стр Из СхемаУсловий.Настройки.Отбор.Элементы Цикл
		ПолучитьЭлементыГруппы(Стр, ДоступныеСтрокиКолонки,МассивЗначений);
		Для Каждого Эл Из МассивЗначений Цикл
		Если ВернутьЗначениеРеквизита(Эл, "Владелец") = Объект.Колонки Тогда
			Отбор = Новый Структура("Значение", Эл);
			ЕщеНетВСпискеСортировки = Объект.СортировкаКолонок.НайтиСтроки(Отбор).Количество() = 0;
			Если ЕщеНетВСпискеСортировки Тогда
				СтрокаСортировки = Объект.СортировкаКолонок.Добавить();
				СтрокаСортировки.Значение = Эл;
				СтрокаСортировки.Сортировка = ВернутьЗначениеРеквизита(Эл, "Сортировка");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	КонецЦикла;	
	Объект.СортировкаКолонок.Сортировать("Сортировка Возр");

	НарисоватьСхему();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьЗначениеРеквизита(Ссылка, Реквизит)
	Возврат Ссылка[Реквизит]
КонецФункции

&НаКлиенте
Процедура НарисоватьСхему()
	
	НарисоватьСхемуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НарисоватьСхемуНаСервере()
	
	Документы.УсловияПримененияСтавок.ЗаполнитьТабДокПоСхеме(Объект.Ссылка, ТД,,Новый ХранилищеЗначения(СхемаУсловий.ПолучитьНастройки()));
	
КонецПроцедуры


&НаКлиенте
Процедура НарисоватьСхемуНаКлиенте()
	
	ПодключитьОбработчикОжидания("НарисоватьСхему", 0.3, Истина);

КонецПроцедуры


&НаКлиенте
Процедура СтрокиПриИзменении(Элемент)
	
	ДоступныеСтрокиКолонки = Новый СписокЗначений;	
	МассивЗначений = Новый Массив;
	
	Объект.СортировкаСтрок.Очистить();
	Для Каждого Стр Из СхемаУсловий.Настройки.Отбор.Элементы Цикл
		ПолучитьЭлементыГруппы(Стр, ДоступныеСтрокиКолонки,МассивЗначений);
		Для Каждого Эл Из МассивЗначений Цикл
		Если ВернутьЗначениеРеквизита(Эл, "Владелец") = Объект.Строки Тогда
			Отбор = Новый Структура("Значение", Эл);
			ЕщеНетВСпискеСортировки = Объект.СортировкаСтрок.НайтиСтроки(Отбор).Количество() = 0;
			Если ЕщеНетВСпискеСортировки Тогда
				СтрокаСортировки = Объект.СортировкаСтрок.Добавить();
				СтрокаСортировки.Значение = Эл;
				СтрокаСортировки.Сортировка = ВернутьЗначениеРеквизита(Эл, "Сортировка");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	КонецЦикла;	
	Объект.СортировкаСтрок.Сортировать("Сортировка Возр");
	
	НарисоватьСхемуНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьСхемыУсловийСтавки",Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСтрокПриИзменении(Элемент)
	НарисоватьСхемуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СортировкаКолонокПриИзменении(Элемент)
	НарисоватьСхемуНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Группа5ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "ОтображениеВТаблице" Тогда
		НарисоватьСхемуНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВсеИспользуемыеЗначения()
	
	Результат = Новый Массив;
	Для Каждого Стр Из СхемаУсловий.Настройки.Отбор.Элементы Цикл
		ПолучитьЭлементыГруппы(Стр, ДоступныеСтрокиКолонки,,Результат);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции