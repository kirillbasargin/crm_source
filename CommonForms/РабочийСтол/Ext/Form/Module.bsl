
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ВсеОбъекты = Пользователи.ЭтоПолноправныйПользователь();
	
	МенеджерОСС 	  = Пользователи.РолиДоступны("ИспользованиеРабочегоСтолаМенеджераОСС");
	МенеджерФилиала   = Пользователи.РолиДоступны("ИспользованиеРабочегоСтолаМенеджераФилиала");
	МенеджерСтарший   = Пользователи.РолиДоступны("РедактированиеСрокаБронирования");
	МенеджерИпотечный = Пользователи.РолиДоступны("МенеджерИпотечный");
	Юрист 			  = Пользователи.РолиДоступны("Юрист");
	Отчетность		  = Пользователи.РолиДоступны("Отчетность");
	Контроль		  = Пользователи.РолиДоступны("МенеджерПоКонтролюКачества");
	
	//
	//Если Юрист Тогда
	//	Элементы.ОткрытьФормуРаботаСКлиентами.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Контроль И Не ВсеОбъекты Тогда
	//	Элементы.ГруппаЗадачи.Видимость = Ложь;
	//	Элементы.Декорация1.Видимость = Ложь;
	//	Элементы.Декорация4.Видимость = Ложь;
	//ИначеЕсли Отчетность И Не (МенеджерФилиала Или Юрист Или МенеджерИпотечный Или МенеджерСтарший Или МенеджерОСС Или ВсеОбъекты) Тогда
	//	Элементы.ГруппаЗадачи.Видимость = Ложь;
	//	Элементы.Декорация1.Видимость = Ложь;
	//	Элементы.Декорация4.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Не ВсеОбъекты И (Не МенеджерИпотечный Или (Контроль И МенеджерИпотечный)) Тогда
	//	Элементы.ГруппаДокументы.Видимость = Ложь;
	//	Элементы.ГруппаОбработки.Видимость = Ложь;
	//	Элементы.ГруппаЗадачиИпотека.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Не МенеджерИпотечный И Не Контроль И Не ВсеОбъекты Тогда
	//	Элементы.ГруппаИпотека.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Контроль И Не ВсеОбъекты Тогда
	//	Элементы.ФормаОбновитьКоличество.Видимость = Ложь;
	//	Элементы.ГруппаТолькоЗадачи.Видимость = Ложь;
	//Иначе
	//	Элементы.ФормаОбновитьКоличество.Видимость = Не (Отчетность Или Юрист) Или (ВсеОбъекты Или МенеджерФилиала Или МенеджерИпотечный Или МенеджерСтарший Или МенеджерОСС);
	//	Элементы.ГруппаТолькоЗадачи.Видимость = Не (Отчетность Или Юрист) Или (ВсеОбъекты Или МенеджерФилиала Или МенеджерИпотечный Или МенеджерСтарший Или МенеджерОСС);
	//КонецЕсли;
	//
	//Элементы.ГруппаСделки.Видимость	= МенеджерСтарший Или МенеджерФилиала Или Юрист Или ВсеОбъекты;
	//Элементы.ГруппаГПТ.Видимость	= МенеджерСтарший Или МенеджерФилиала Или ВсеОбъекты;
	//Элементы.ГруппаБронь.Видимость	= МенеджерСтарший Или МенеджерФилиала Или ВсеОбъекты;
	//
	//Элементы.ГруппаСсылкиПоВзаимодействиям.Видимость = Не (Юрист Или Отчетность Или Контроль) Или ВсеОбъекты;
	//
	//Элементы.ТолькоМоиДокументы.Видимость = Не Контроль И (МенеджерИпотечный Или ВсеОбъекты);
	//Элементы.ТолькоМоиЗадачи.Видимость 	  = Не Контроль И Не (Юрист Или Отчетность) Или ВсеОбъекты;
	//
	//Элементы.ГруппаСписокОН.Видимость = МенеджерФилиала Или ВсеОбъекты Или Контроль;
	//
	//Элементы.ОтчетПоЭффективностьМенеджераЗУ.Видимость = МенеджерФилиала Или ВсеОбъекты Или Контроль;
	//Элементы.ОтчетМенеджера.Видимость = МенеджерОСС Или ВсеОбъекты;
	//Элементы.ОтчетПодборЗУ.Видимость = МенеджерСтарший Или МенеджерФилиала Или ВсеОбъекты Или Контроль;
	//
	////Если Не Контроль И (МенеджерОСС Или МенеджерИпотечный Или Юрист) Тогда
	////	Элементы.ОтчетПоИсточникамРекламы.Видимость = Ложь;
	////КонецЕсли;
	//
	//Если Не ВсеОбъекты И Не Контроль И (Отчетность Или Юрист Или МенеджерИпотечный) Тогда
	//	Элементы.ОтчетПоЭффективностьМенеджера.Видимость = Ложь;
	//	Элементы.ОтчетПодборКвартир.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Не ВсеОбъекты И Не Контроль И (МенеджерИпотечный Или Юрист) Тогда
	//	Элементы.Шахматка.Видимость = Ложь;
	//	Элементы.ОтчетПодборКвартир.Видимость = Ложь;
	//	//Элементы.Календарь.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Не ВсеОбъекты И Не Контроль И (МенеджерИпотечный Или Юрист Или Отчетность) Тогда
	//	Элементы.ОтчетПоСделкам.Видимость = Ложь;
	//КонецЕсли;
	//
	//Элементы.ГруппаОтчетность.Видимость = Отчетность Или ВсеОбъекты Или Контроль;
	//Элементы.ГруппаОтчетность2.Видимость = Отчетность Или ВсеОбъекты;
	//
	////Если Не Контроль И Не Юрист Тогда
	////	Элементы.ОтчетПоВзаимодействиям.Видимость = Истина;
	////КонецЕсли;
	//
	//Если Не ВсеОбъекты И Не Контроль И Юрист Тогда
	//	Элементы.ГруппаОтчеты.Видимость = Ложь;
	//КонецЕсли;
	
	Если Не Отчетность И Не Юрист И Не Контроль Тогда
		ЗаполнитьЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьЗадачи", 300);
КонецПроцедуры

#КонецОбласти

#Область Задачи

&НаКлиенте
Процедура ГПТ_ЗаявкиНажатие(Элемент)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеОбработано"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться"));
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПараметрыФормы = Новый Структура;
	
	Если ТолькоМоиЗадачи Тогда 
		ПараметрыФормы.Вставить("Ответственный", ТекущийПользователь);
	Иначе
		Если МенеджерСтарший Тогда
			ПараметрыФормы.Вставить("Ответственный", ПолучитьОтбор(ТекущийПользователь));
		Иначе
			ПараметрыФормы.Вставить("Ответственный", ТекущийПользователь);
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыФормы.Вставить("Статус", МассивСтатусов);
	ПараметрыФормы.Вставить("Проведен", Истина);
	ПараметрыФормы.Вставить("Проект", ПолучитьСписокПроектов(ТекущийПользователь));
	
	ПараметрыОткрываемойФормы = Новый Структура("Отбор", ПараметрыФормы);
	
	ОткрытьФорму("Документ.ЗаявкаНаЗвонок.ФормаСписка", ПараметрыОткрываемойФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Задачи_ЗавершенныеСегодняНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	//Если ТолькоМоиЗадачи Тогда
	//	Ответственный = ТекущийПользователь;
	//Иначе
	//	Если МенеджерФилиала Тогда
	//		Ответственный = ТекущийПользователь;
	//	Иначе
	//		Если МенеджерИпотечный Тогда
	//			Ответственный = ПолучитьСписокСотрудников(ТекущийПользователь);
	//		Иначе
	//			Ответственный = ПолучитьОтбор(ТекущийПользователь);
	//			ПараметрыОткрываемойФормы.Вставить("Заголовок", "Взаимодействия (по группе сотрудников)");
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если МенеджерСтарший Тогда
	//	ПараметрыОткрываемойФормы.Вставить("ОтборДляСтаршегоМенеджера", Истина);
	//	
	//	ТекущаяДата = ТекущаяДата();
	//	ПараметрыОткрываемойФормы.Вставить("ДатаОт", НачалоДня(ТекущаяДата));
	//	ПараметрыОткрываемойФормы.Вставить("ДатаДо", КонецДня(ТекущаяДата));
	//	
	//	ПараметрыОткрываемойФормы.Вставить("Завершено", Истина);
	//	ПараметрыОткрываемойФормы.Вставить("Отменено", Ложь);
	//	ПараметрыОткрываемойФормы.Вставить("Рассмотрено", Истина);
	//Иначе
	//	ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборЗавершенныеВзаимодействия", Истина);
	//	Если Не МенеджерОСС Тогда
	//		ПараметрыОткрываемойФормы.Вставить("ОтборДляМенеджераФилиала", Истина);
	//	КонецЕсли;
	//КонецЕсли;

	ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборЗавершенныеВзаимодействия", Истина);
	
	ПараметрыОткрываемойФормы.Вставить("Ответственный", ТекущийПользователь);
	ПараметрыОткрываемойФормы.Вставить("Отбор", Неопределено);
	
	ТекущаяДата = ТекущаяДата();
	ПараметрыОткрываемойФормы.Вставить("ДатаОт", НачалоДня(ТекущаяДата));
	ПараметрыОткрываемойФормы.Вставить("ДатаДо", КонецДня(ТекущаяДата));
	
	ПараметрыОткрываемойФормы.Вставить("Завершено", Истина);
	ПараметрыОткрываемойФормы.Вставить("Отменено", Ложь);
	ПараметрыОткрываемойФормы.Вставить("Рассмотрено", Истина);
	
	//Если Не (МенеджерИпотечный Или МенеджерОСС) Тогда
	//	ПараметрыОткрываемойФормы.Вставить("Проект", ПолучитьСписокПроектов(ТекущийПользователь));
	//КонецЕсли;
	
	ФормаСпискаПараметрическая = ПолучитьФорму("ЖурналДокументов.Взаимодействия.Форма.ФормаСпискаПараметрическая", ПараметрыОткрываемойФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	Если ФормаСпискаПараметрическая.Открыта() Тогда
		ФормаСпискаПараметрическая.КонтекстВыбора = ПараметрыОткрываемойФормы;
	КонецЕсли;
	
	ФормаСпискаПараметрическая.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Задачи_ЗапланированоНаСегодняНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ТолькоМоиЗадачи Тогда
		Ответственный = ТекущийПользователь;
	Иначе
		
		Ответственный = ПолучитьОтбор(ТекущийПользователь,, Истина);
		
		//Если МенеджерСтарший Или МенеджерОСС Тогда
		//	Ответственный = ПолучитьОтбор(ТекущийПользователь);
		//	ПараметрыОткрываемойФормы.Вставить("Заголовок", "Взаимодействия (по группе сотрудников)");
		//Иначе
		//	Если МенеджерИпотечный Тогда
		//		Ответственный = ПолучитьСписокСотрудников(ПользователиКлиентСервер.ТекущийПользователь());
		//	Иначе
		//		Ответственный = ПолучитьОтбор(ТекущийПользователь,, Истина);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	//Если МенеджерСтарший Или МенеджерОСС Тогда
	//	ПараметрыОткрываемойФормы.Вставить("Заголовок", "Взаимодействия (по группе сотрудников)");
	//	ПараметрыОткрываемойФормы.Вставить("ОтборДляСтаршегоМенеджера", Истина);
	//	ПараметрыОткрываемойФормы.Вставить("Отменено", Ложь);
	//	ПараметрыОткрываемойФормы.Вставить("Рассмотрено", Ложь);
	//	ПараметрыОткрываемойФормы.Вставить("Запланировано", Истина);
	//	
	//	ТекущаяДата = ТекущаяДата();
	//	ПараметрыОткрываемойФормы.Вставить("ДатаОт", НачалоДня(ТекущаяДата));
	//	ПараметрыОткрываемойФормы.Вставить("ДатаДо", КонецДня(ТекущаяДата));
	//	
	//	Если МенеджерОСС Тогда
	//		ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборАктуальныеВзаимодействия", Истина);
	//	КонецЕсли;
	//Иначе
	//	ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборАктуальныеВзаимодействия", Истина);
	//	ПараметрыОткрываемойФормы.Вставить("ОтборДляМенеджераФилиала", Истина);
	//КонецЕсли;
	
	ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборАктуальныеВзаимодействия", Истина);
	
	ПараметрыОткрываемойФормы.Вставить("Ответственный", Ответственный);	
	ПараметрыОткрываемойФормы.Вставить("Отбор", Неопределено);
	
	//<813517>, Басаргин (15.05.2018) {
	Если НЕ ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда 
		Ответственный.Добавить(ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	ПараметрыОткрываемойФормы.Вставить("Автор", ПользователиКлиентСервер.ТекущийПользователь());	
	//<813517> }
	
	//Если Не (МенеджерИпотечный Или МенеджерОСС) Тогда
	//	ПараметрыОткрываемойФормы.Вставить("Проект", ПолучитьСписокПроектов(ТекущийПользователь));
	//КонецЕсли;
	
	ФормаСпискаПараметрическая = ПолучитьФорму("ЖурналДокументов.Взаимодействия.Форма.ФормаСпискаПараметрическая", ПараметрыОткрываемойФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	Если ФормаСпискаПараметрическая.Открыта() Тогда
		ФормаСпискаПараметрическая.КонтекстВыбора = ПараметрыОткрываемойФормы;
	КонецЕсли;
	
	ФормаСпискаПараметрическая.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Задачи_ПросроченныеНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ТолькоМоиЗадачи Тогда
		Ответственный = ТекущийПользователь;
	Иначе
		
		Ответственный = ПолучитьОтбор(ТекущийПользователь, , Истина);
		
		//Если МенеджерСтарший Или МенеджерОСС Тогда
		//	Ответственный = ПолучитьОтбор(ТекущийПользователь);
		//	Если МенеджерСтарший Тогда
		//		ПараметрыОткрываемойФормы.Вставить("Заголовок", "Взаимодействия (по группе сотрудников)");
		//	КонецЕсли;
		//Иначе
		//	Ответственный = ПолучитьОтбор(ТекущийПользователь,, Истина);
		//КонецЕсли;
	КонецЕсли;
	
	ПараметрыОткрываемойФормы.Вставить("Ответственный", Ответственный);
	ПараметрыОткрываемойФормы.Вставить("Отбор", Неопределено);
	
	//Если МенеджерФилиала Или МенеджерСтарший Тогда 
	//	ПараметрыОткрываемойФормы.Вставить("Проект", ПолучитьСписокПроектов(ТекущийПользователь));
	//КонецЕсли;
	
	//Если МенеджерСтарший Тогда
	//	ПараметрыОткрываемойФормы.Вставить("ОтборДляСтаршегоМенеджера", Истина);
	//	
	//	ПараметрыОткрываемойФормы.Вставить("ДатаОт", НачалоДня(ТекущаяДата()));
	//	ПараметрыОткрываемойФормы.Вставить("Просроченные", Истина);
	//Иначе
	//	Если Не МенеджерОСС Тогда
	//		ПараметрыОткрываемойФормы.Вставить("ОтборДляМенеджераФилиала", Истина);
	//	КонецЕсли;
	//	ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборПросроченныеВзаимодействия", Истина);
	//КонецЕсли;
	
	ПараметрыОткрываемойФормы.Вставить("УстанавливатьОтборПросроченныеВзаимодействия", Истина);	
	
	//<813517>, Басаргин (15.05.2018) {
	Если НЕ ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда 
		Ответственный.Добавить(ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	ПараметрыОткрываемойФормы.Вставить("Автор", ПользователиКлиентСервер.ТекущийПользователь());	
	//<813517> }
		
	ФормаСпискаПараметрическая = ПолучитьФорму("ЖурналДокументов.Взаимодействия.Форма.ФормаСпискаПараметрическая", ПараметрыОткрываемойФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	Если ФормаСпискаПараметрическая.Открыта() Тогда
		ФормаСпискаПараметрическая.КонтекстВыбора = ПараметрыОткрываемойФормы;
	КонецЕсли;
		
	ФормаСпискаПараметрическая.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Сделки_НаСогласованииНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура(); 	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если МенеджерФилиала Или МенеджерСтарший Тогда
		Если ТолькоМоиЗадачи Тогда 
			ПараметрыОткрываемойФормы.Вставить("Автор", ТекущийПользователь);
		Иначе
			ПараметрыОткрываемойФормы.Вставить("Автор", ПолучитьОтбор(ТекущийПользователь,, ?(МенеджерФилиала, Истина, Ложь)));
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерФилиала Тогда
		ПараметрыОткрываемойФормы.Вставить("ОтборДляМенеджераФилиала", Истина);
	ИначеЕсли МенеджерСтарший Тогда
		ПараметрыОткрываемойФормы.Вставить("ОтборДляСтаршегоМенеджера", Истина);
	ИначеЕсли Юрист Тогда
		ПараметрыОткрываемойФормы.Вставить("ОтборДляЮристов", Истина);
	КонецЕсли;
	
	ПараметрыОткрываемойФормы.Вставить("Проведен", Истина);
	
	ТекущаяДата = ТекущаяДата();
	ПараметрыОткрываемойФормы.Вставить("ДатаОт", НачалоДня(ТекущаяДата));
	ПараметрыОткрываемойФормы.Вставить("ДатаДо", КонецДня(ТекущаяДата));
	
	ПараметрыОткрываемойФормы.Вставить("Проект", ПолучитьСписокПроектов(ТекущийПользователь));
	
	Если МенеджерФилиала Или МенеджерСтарший Тогда
		ПараметрыОткрываемойФормы.Вставить("Статус", ПолучитьСписокСтатусовСделки());
	КонецЕсли;
	
	ФормаСписка = ПолучитьФорму("Документ.ЗаявкаНаСделку.ФормаСписка", ПараметрыОткрываемойФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	Если ФормаСписка.Открыта() Тогда
		ФормаСписка.КонтекстВыбора = ПараметрыОткрываемойФормы;
	КонецЕсли;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Бронь_ОчередьБронированияНажатие(Элемент)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПараметрыФормы = Новый Структура;
	
	Если МенеджерСтарший Тогда
		ПараметрыФормы.Вставить("ОтборДляСтаршегоМенеджера", Истина);
	Иначе
		ПараметрыФормы.Вставить("ОтборДляМенеджераФилиала", Истина);
	КонецЕсли;
	
	Если ТолькоМоиЗадачи Тогда 
		Ответственный = ТекущийПользователь; 
	Иначе
		Если МенеджерСтарший Тогда
			Ответственный = ПолучитьОтбор(ТекущийПользователь, Истина);
		Иначе
			Ответственный = ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Ответственный", Ответственный);
	ПараметрыФормы.Вставить("НачалоДня", НачалоДня(ТекущаяДата()));
	ПараметрыФормы.Вставить("Проект", ПолучитьСписокПроектов(ТекущийПользователь, Истина));
	
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.СрокиБронированияОбъектовНедвижимости.Форма.СрокиИОчередьБронированияПоОтветственному", ПараметрыФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	Если ФормаСписка.Открыта() Тогда
		//ФормаСписка.Закрыть();
		ФормаСписка.КонтекстВыбора = ПараметрыФормы;
	КонецЕсли;
	ФормаСписка.Открыть();
	
КонецПроцедуры

//EXTCODE Шумилин Сергей 29.05.2018 {{ ---> 824941
&НаКлиенте
Процедура ВыводВПул_ЗаявкаНаВыводНажатие(Элемент)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СтруктураОтбора = Новый Структура;
	
	//++ Юкаев Роман 20180716 (//Задача AN-96
	//Если НЕ МенеджерСтарший Тогда
	//	СтруктураОтбора.Вставить("Автор", 	ТекущийПользователь);
	//КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор, ОтборДляСтаршегоМенеджера, Автор", СтруктураОтбора, Ложь, ТекущийПользователь);
	//-- Юкаев Роман 20180716 )
	
	ОткрытьФорму("Документ.ЗаявкаНаВыводОНВПродажу.ФормаСписка", ПараметрыФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры
//EXTCODE Шумилин Сергей 29.05.2018 <--- }} 

//<888805>, Басаргин (07.11.2018) {
&НаКлиенте
Процедура ВыводВПродажу_ЗаявкаНаВыводНажатие(Элемент)

	ПараметрыФормы = Новый Структура("ОтборДляСтаршегоМенеджера", Истина);	
	ОткрытьФорму("Документ.ЗаявкаНаВыводОНВПродажу.ФормаСписка", ПараметрыФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры
//<888805> }

&НаКлиенте
Процедура СписокОН_СписокНажатие(Элемент)
	ОткрытьФорму("Обработка.РабочийСтолМенеджера.Форма.ФормаРСКвартирограмма", Новый Структура, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Декорация9Нажатие(Элемент)
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.МоиЗадачиДляРабочегоСтола", Новый Структура, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура АнкетыНажатие(Элемент)
	
	Если ТолькоМоиДокументы Тогда
		Отбор = Новый Структура("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		Отбор = Новый Структура("Ответственный", ПолучитьСписокПользователей(ПользователиКлиентСервер.ТекущийПользователь()));
	КонецЕсли;
	
	ОткрытьФорму("Документ.Анкета.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыНаОдобрениеОбъектаНажатие(Элемент)
	
	Если ТолькоМоиДокументы Тогда
		Отбор = Новый Структура("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		Отбор = Новый Структура("Ответственный", ПолучитьСписокПользователей(ПользователиКлиентСервер.ТекущийПользователь()));
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗапросНаОдобрениеОбъекта.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИпотечныеЗаявкиНажатие(Элемент)
	
	Если ТолькоМоиДокументы Тогда
		Отбор = Новый Структура("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		Отбор = Новый Структура("Ответственный", ПолучитьСписокПользователей(ПользователиКлиентСервер.ТекущийПользователь()));
	КонецЕсли;
	
	ОткрытьФорму("Документ.ИпотечнаяЗаявка.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыИпотекиНажатие(Элемент)
	
	Если ТолькоМоиДокументы Тогда
		Отбор = Новый Структура("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
	Иначе
		Отбор = Новый Структура("Ответственный", ПолучитьСписокПользователей(ПользователиКлиентСервер.ТекущийПользователь()));
	КонецЕсли;
	
	ОткрытьФорму("Документ.РасчетИпотеки.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура УправлениеРаспределениемЗаявок(Команда)
	ОткрытьФорму("Обработка.УправлениеРаспределениемЗаявок.Форма.Форма", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТелефонии(Команда)
	ОткрытьФорму("РегистрСведений.ПользовательскиеНастройкиТелефонии.Форма.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаспределенияЗаявок(Команда)
	ОткрытьФорму("РегистрСведений.ПользовательскиеНастройкиРаспределенияЗаявок.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЭффективностьМенеджераГПТ(Команда)
	ОткрытьФорму("Отчет.ЭффективностьМенеджера_ГПТ.Форма", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетЕжедневнаяСтатистика(Команда)
	ОткрытьФорму("Отчет.ОтчетЕжедневнаяСтатистика.Форма" , , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныСМС(Команда)
	ОткрытьФорму("Справочник.ШаблоныСообщений.Форма.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СпамНомера(Команда)
	ОткрытьФорму("Справочник.СпамНомера.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтчетПодборМашиноместНажатие(Элемент)
	
	ПараметрыОтчета = ОпределитьВариантОтчета(ПользователиКлиентСервер.АвторизованныйПользователь(), "Машиноместа");
	
	Отбор = Новый Структура("ПроектВидНедвижимости", ПараметрыОтчета.Машиноместа); 
	ПараметрыФормы = Новый Структура("Отбор, КлючТекущегоВарианта", Отбор, ПараметрыОтчета.КлючТекущегоВарианта);
	
	ОткрытьФорму("Отчет.Квартирограмма.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПодборКладовыхНажатие(Элемент)
	
	ПараметрыОтчета = ОпределитьВариантОтчета(ПользователиКлиентСервер.АвторизованныйПользователь(), "Кладовые");
	
	Отбор = Новый Структура("ПроектВидНедвижимости", ПараметрыОтчета.Кладовые); 
	ПараметрыФормы = Новый Структура("Отбор, КлючТекущегоВарианта", Отбор, ПараметрыОтчета.КлючТекущегоВарианта);
	
	ОткрытьФорму("Отчет.Квартирограмма.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПодборЗУНажатие(Элемент)
	
	ПараметрыОтчета = ОпределитьВариантОтчета(ПользователиКлиентСервер.АвторизованныйПользователь());
	
	Отбор = Новый Структура("ПроектВидНедвижимости", ПараметрыОтчета.ЗемельныйУчасток); //ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.ЗемельныйУчасток"));
	ПараметрыФормы = Новый Структура("Отбор, КлючТекущегоВарианта", Отбор, ПараметрыОтчета.КлючТекущегоВарианта);
	
	ОткрытьФорму("Отчет.Квартирограмма.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЭффективностьМенеджераНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ЭффективностьМенеджера.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЭффективностьМенеджераЗУНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ЭффективностьМенеджера_ОПО_ЗУ.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетМенеджераНажатие(Элемент)
	
	ПараметрыОткрываемойФормы = Новый Структура("Отбор,СформироватьПриОткрытии", Новый Структура("Стадия", ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Переговоры")), Истина);
	ОткрытьФорму("Отчет.ОтчетМенеджера.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСделкамНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличество(Команда)
	
	ЗаполнитьЗадачи();
	
КонецПроцедуры

#Область Служебные

&НаКлиенте
Процедура ОбновитьЗадачи()
	
	ЗаполнитьЗадачи();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПользователей(ТекущийПользователь)
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ГруппыПользователейСостав.Ссылка КАК Группа
				|ПОМЕСТИТЬ ВТ_СписокГрупп
				|ИЗ
				|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
				|ГДЕ
				|	ГруппыПользователейСостав.Пользователь = &Пользователь
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ГруппыПользователейСостав.Пользователь КАК Пользователь
				|ИЗ
				|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
				|ГДЕ
				|	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ
				|			(ВЫБРАТЬ
				|				ВТ.Группа
				|			ИЗ
				|				ВТ_СписокГрупп КАК ВТ)";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		Список.Добавить(ТекущийПользователь);
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Пользователь);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВариантОтчета(ТекущийПользователь, КлючТекущегоВарианта = "ЗУ")
	
	Результат = Новый Структура("КлючТекущегоВарианта, ЗемельныйУчасток, Машиноместа, Кладовые, ЖилаяНедвижимость", 
					КлючТекущегоВарианта, Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток, Перечисления.ВидыОбъектовНедвижимости.Машиноместо, Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость, Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
				|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта
				|ИЗ
				|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
				|ГДЕ
				|	ВариантыОтчетов.Отчет.Имя = ""Квартирограмма""
				|	И ВариантыОтчетов.Автор = &Автор
				|	И ВариантыОтчетов.Пользовательский
				|	И ВариантыОтчетов.Наименование ПОДОБНО &КлючВарианта
				|	И НЕ ВариантыОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КлючВарианта", Результат.КлючТекущегоВарианта + "%");
	Запрос.УстановитьПараметр("Автор", ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.КлючТекущегоВарианта = Выборка.КлючВарианта;	
	КонецЕсли;
	
	Возврат Результат;	
		
КонецФункции

&НаСервере
Процедура ЗаполнитьЗадачи()
	
	ВзаимодействияВидимость = Не (Отчетность Или Юрист);
	ДополнительноВидимость  = МенеджерСтарший Или МенеджерФилиала;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ВсеОбъекты Или ВзаимодействияВидимость Тогда
		
		ПараметрыЗаполнения = ПолучитьДанныеОВзаимодействиях(ТекущийПользователь, ?(ТолькоМоиЗадачи, ТекущийПользователь, ПолучитьОтбор(ТекущийПользователь, , Истина))        );		
		
		//Если МенеджерИпотечный Тогда
		//	//ПараметрыЗаполнения = ПолучитьДанныеПоВзаимодействиям(ТекущийПользователь, ТолькоМоиЗадачи);
		//	ПараметрыЗаполнения = ПолучитьДанныеОВзаимодействиях(ТекущийПользователь, ?(ТолькоМоиЗадачи, ТекущийПользователь, ПолучитьОтбор(ТекущийПользователь, , Истина))        );
		//ИначеЕсли МенеджерСтарший Тогда
		//	//ПараметрыЗаполнения = ПолучитьСтруктураНаСервере(?(ТолькоМоиЗадачи, ТекущийПользователь, ПолучитьОтбор(ТекущийПользователь)), ТекущийПользователь);
		//	ПараметрыЗаполнения = ПолучитьДанныеОВзаимодействиях(ТекущийПользователь, ?(ТолькоМоиЗадачи, ТекущийПользователь, ПолучитьОтбор(ТекущийПользователь)          ), Истина);
		//Иначе
		//	//ПараметрыЗаполнения = ПолучитьСтруктураНаСервереМенеджер(ТекущийПользователь, ТолькоМоиЗадачи);
		//	ПараметрыЗаполнения = ПолучитьДанныеОВзаимодействиях(ТекущийПользователь, ?(ТолькоМоиЗадачи, ТекущийПользователь, ПолучитьОтбор(ТекущийПользователь, , Истина)), Истина);
		//КонецЕсли;
		
		Элементы.Задачи_ЗапланированоКоличество.Заголовок = Строка(ПараметрыЗаполнения.Запланированные);
		Элементы.Задачи_ЗавершенныеКоличество.Заголовок = Строка(ПараметрыЗаполнения.Завершенные);
		Элементы.Задачи_ПросроченныеКоличество.Заголовок = Строка(ПараметрыЗаполнения.Просроченные);
	КонецЕсли;
	
	Если ВсеОбъекты Или ДополнительноВидимость Тогда
		
		Ответственный = ТекущийПользователь;
		
		//Если МенеджерСтарший И Не ТолькоМоиЗадачи Тогда
		//	Ответственный = ПолучитьОтбор(ТекущийПользователь);
		//Иначе
		//	//Если ТолькоМоиЗадачи Тогда 
		//	Ответственный = ТекущийПользователь; 
		//	//Иначе
		//	//	Ответственный = ПолучитьОтбор(ТекущийПользователь);
		//	//КонецЕсли;
		//	
		//	//ПараметрыЗаполнения = ПолучитьСтруктураНаСервере(Ответственный, ТекущийПользователь);
		////Иначе
		//	//ПараметрыЗаполнения = ПолучитьСтруктураНаСервереМенеджер(ТекущийПользователь, ТолькоМоиЗадачи);
		//КонецЕсли;
		ПараметрыЗаполнения = ПолучитьСтруктураДанныеПоДопПараметрам(ТекущийПользователь, Ответственный, МенеджерСтарший);
		
		Элементы.ГПТ_Количество.Заголовок    = Строка(ПараметрыЗаполнения.ЗаявкиОтГПТ);	
		Элементы.Сделки_Количество.Заголовок = Строка(ПараметрыЗаполнения.ЗаявкиНаСделку);
		Элементы.Бронь_Количество.Заголовок  = Строка(ПараметрыЗаполнения.ОчередиБронирования);
		//EXTCODE Шумилин Сергей 29.05.2018 {{ ---> 824941
		Элементы.ВыводВПул_Количество.Заголовок  = Строка(ПараметрыЗаполнения.ВыводВПул);
		//EXTCODE Шумилин Сергей 29.05.2018 <--- }}
		//<888805>, Басаргин (08.11.2018) {
		Элементы.ВыводВПродажу_Количество.Заголовок  = Строка(ПараметрыЗаполнения.ВыводВПродажу);
		//<888805> }
	КонецЕсли;
	
	Если ВсеОбъекты Или Юрист Тогда
		СтруктураПараметров = ПолучитьСтруктуруПараметровЮрист(ТекущийПользователь);
		Элементы.Сделки_Количество.Заголовок = Строка(СтруктураПараметров.ЗаявкиНаСделку);
	КонецЕсли;
	
	Если МенеджерИпотечный Или ВсеОбъекты Тогда
		Элементы.ДекорацияЗадачиКоличество.Заголовок = Строка(ПолучитьСписокЗадач(ТекущийПользователь));
		//<853881>, Басаргин (10.08.2018) {
		Элементы.НаправленыНаКонсультацию_Количество.Заголовок =  Строка(ПолучитьНаправленияНаконсультацию(ТекущийПользователь).Количество());		
		//<853881> 	
	КонецЕсли;
	
КонецПроцедуры

//<853881>, Басаргин (10.08.2018) {
&НаСервереБезконтекста
Функция ПолучитьНаправленияНаконсультацию(ТекущийПользователь)
	
	МассивСсылок = Новый Массив;
	
	ПроектыПользователя = Новый Массив;
	ГруппыПользователя = РегистрыСведений.Взаимодействия.ПолучитьГруппуПользователяВторогоУровня(ТекущийПользователь); //РегистрыСведений.Взаимодействия.ПолучитьГруппуОтветственного(Пользователи.АвторизованныйПользователь(), ТекущаяДата(), Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоответствиеГруппПользователейОфисам.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
	|ГДЕ
	|	СоответствиеГруппПользователейОфисам.ГруппаПользователей В(&ГруппыПользователя)";
	
	Запрос.УстановитьПараметр("ГруппыПользователя", ГруппыПользователя);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		ПроектыПользователя = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Проект");
	КонецЕсли;
	
	Если ПроектыПользователя.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетИпотеки.Ссылка КАК Ссылка,
		|	РасчетИпотеки.Запрос КАК Запрос
		|ПОМЕСТИТЬ ВТ_РасчетыИпотеки
		|ИЗ
		|	Документ.РасчетИпотеки КАК РасчетИпотеки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователейИсторияИзмений КАК СоставыГруппПользователейИсторияИзмений
		|		ПО РасчетИпотеки.Ответственный = СоставыГруппПользователейИсторияИзмений.Пользователь
		|			И (СоставыГруппПользователейИсторияИзмений.ГруппаПользователей.Наименование = ""Филиал"")
		|			И (ВЫБОР
		|				КОГДА СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА РасчетИпотеки.Дата >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
		|				ИНАЧЕ РасчетИпотеки.Дата >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
		|						И РасчетИпотеки.Дата < СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы
		|			КОНЕЦ)
		|ГДЕ
		|	РасчетИпотеки.ЖК В(&Проекты)
		|	И НЕ РасчетИпотеки.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Запрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Предмет КАК Запрос
		|ПОМЕСТИТЬ ВТ_Взаимодействия
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ГруппаОтветственного = &ГруппаОтветственного
		|	И Взаимодействия.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено), ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Отменено))
		|	И Взаимодействия.Предмет В
		|			(ВЫБРАТЬ
		|				ВТ_РасчетыИпотеки.Запрос КАК Запрос
		|			ИЗ
		|				ВТ_РасчетыИпотеки КАК ВТ_РасчетыИпотеки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Запрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РасчетыИпотеки.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_РасчетыИпотеки КАК ВТ_РасчетыИпотеки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Взаимодействия КАК ВТ_Взаимодействия
		|		ПО ВТ_РасчетыИпотеки.Запрос = ВТ_Взаимодействия.Запрос
		|ГДЕ
		|	ВТ_Взаимодействия.Запрос ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("Проекты", ПроектыПользователя);
		Запрос.УстановитьПараметр("ГруппаОтветственного", Справочники.ГруппыПользователей.НайтиПоНаименованию("Ипотечные брокеры"));
		
		Результат = Запрос.Выполнить();
	
		Если Результат.Пустой() Тогда
			Возврат МассивСсылок;
		Иначе			
			МассивСсылок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	КонецЕсли;

	Возврат МассивСсылок;
	
КонецФункции
//<853881> }

&НаСервереБезконтекста
Функция ПолучитьСписокЗадач(ТекущийПользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка) КАК Количество
		|ИЗ
		|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&ТекущийПользователь, НЕ Выполнена) КАК ЗадачаИсполнителяЗадачиПоИсполнителю";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Количество;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровЮрист(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	ВЫРАЗИТЬ(ИсполнителиЗадач.ОсновнойОбъектАдресации КАК Справочник.Проекты) КАК Проект
       |ПОМЕСТИТЬ ВТ_СписокПроектов
       |ИЗ
       |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
       |ГДЕ
       |	ИсполнителиЗадач.Исполнитель = &Исполнитель
       |	И ИсполнителиЗадач.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.Юристы)
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаСделку.Ссылка) КАК КоличествоДокументов
       |ПОМЕСТИТЬ ВТ_ПоЗаявкам
       |ИЗ
       |	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
       |ГДЕ
       |	ЗаявкаНаСделку.Дата МЕЖДУ &НачалоДня И &КонецДня
       |	И ЗаявкаНаСделку.Проект В
       |			(ВЫБРАТЬ
       |				ВТ_СписокПроектов.Проект КАК Проект
       |			ИЗ
       |				ВТ_СписокПроектов КАК ВТ_СписокПроектов)
       |	И ЗаявкаНаСделку.Проведен
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСделкиСрезПоследних.ЗаявкаНаСделку) КАК КоличествоДокументов
       |ИЗ
       |	РегистрСведений.СтатусыСделки.СрезПоследних(
       |			&КонецДня,
       |			ЗаявкаНаСделку.Проект В
       |				(ВЫБРАТЬ
       |					ВТ_СписокПроектов.Проект КАК Проект
       |				ИЗ
       |					ВТ_СписокПроектов КАК ВТ_СписокПроектов)) КАК СтатусыСделкиСрезПоследних
       |ГДЕ
       |	СтатусыСделкиСрезПоследних.Период >= &НачалоДня
       |	И СтатусыСделкиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.СогласованиеЮриста)";
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	
	ТекущаяДата = ТекущаяДата();
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекущаяДата));
	
	Результат = Запрос.Выполнить();
	
	СтруктураПараметров = Новый Структура("ЗаявкиНаСделку", 0);
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураПараметров.ЗаявкиНаСделку = Выборка.КоличествоДокументов;
		
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗначениеВРезультат(РезультатПакета, НомерПакета, Результат, ИмяПараметра)
	
	Если НЕ РезультатПакета[НомерПакета].Пустой() Тогда
		Выборка = РезультатПакета[НомерПакета].Выбрать();
		Выборка.Следующий();
		Результат[ИмяПараметра] = Выборка.КоличествоДокументов;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСотрудников(ТекущийПользователь)
	
	СписокРезультат = Новый СписокЗначений;
	СписокРезультат.Добавить(ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТ_СписокГрупп
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВТ.Группа КАК Группа
		|			ИЗ
		|				ВТ_СписокГрупп КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыПользователейСостав.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокРезультат.Добавить(Выборка.Пользователь);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтбор(Ответственный, ВМассив = Ложь, Группа = Ложь)
	
	Если ВМассив Тогда
		СписокОтбора = Новый Массив;
	Иначе
		СписокОтбора = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Состав.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТ_СписокГрупп
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК Состав
		|ГДЕ
		|	Состав.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Пользователь КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВТ.Группа
		|			ИЗ
		|				ВТ_СписокГрупп КАК ВТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыПользователейСостав.Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Ответственный);
	
	Если Группа Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГруппыПользователейСостав.Пользователь", "ГруппыПользователейСостав.Ссылка");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() Тогда
		СписокОтбора.Добавить(Ответственный);
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОтбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПроектов(Пользователь, ВМассив = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	ГруппыПользователейСостав.Ссылка КАК Ссылка
       |ПОМЕСТИТЬ ВТ_Группы
       |ИЗ
       |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
       |ГДЕ
       |	ГруппыПользователейСостав.Пользователь = &Пользователь
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |	СоответствиеГруппПользователейОфисам.Проект КАК Проект
       |ИЗ
       |	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
       |ГДЕ
       |	СоответствиеГруппПользователейОфисам.ГруппаПользователей В
       |			(ВЫБРАТЬ
       |				ВТ_Группы.Ссылка КАК Ссылка
       |			ИЗ
       |				ВТ_Группы КАК ВТ_Группы)
       |
       |СГРУППИРОВАТЬ ПО
       |	СоответствиеГруппПользователейОфисам.Проект";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Если ВМассив Тогда
			Список = Новый Массив;
		Иначе
			Список = Новый СписокЗначений;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Проект);
		КонецЦикла;
		
		Возврат Список;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовСделки()
	
	Статусы = Новый СписокЗначений;
	Статусы.Добавить(Перечисления.СтатусыСделки.Согласована);
	Статусы.Добавить(Перечисления.СтатусыСделки.СогласованиеЮриста);
	Статусы.Добавить(Перечисления.СтатусыСделки.СогласованиеИБ);
	Статусы.Добавить(Перечисления.СтатусыСделки.СогласованиеУПН);
	
	Возврат Статусы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеОВзаимодействиях(ТекущийПользователь, Ответственные, ОтборПоПроектам = Ложь)
	
	ПараметрыЗаполнения = Новый Структура("Запланированные, Завершенные, Просроченные", 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК Запланированные,
		|	0 КАК Завершенные,
		|	0 КАК Просроченные
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
		|ГДЕ
		|	(Взаимодействия.Ответственный В (&Ответственные)
		|			ИЛИ Взаимодействия.Ответственный = &ТекущийПользователь
		|			ИЛИ Взаимодействия.Автор = &ТекущийПользователь)
		|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1)) МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
		|				ТОГДА ""Завершено""
		|			КОГДА Взаимодействия.Отменено
		|				ТОГДА ""Отменено""
		|			ИНАЧЕ ""Запланировано""
		|		КОНЕЦ = ""Запланировано""
		|	И ВЫБОР
		|			КОГДА &ОтборПоПроектам
		|				ТОГДА ВЫБОР
		|						КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
		|							ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка),
		|	0
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
		|ГДЕ
		|	Взаимодействия.Ответственный = &ТекущийПользователь
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
		|					ИЛИ Взаимодействия.Отменено
		|				ТОГДА Взаимодействия.ДатаОкончания
		|			ИНАЧЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1))
		|		КОНЕЦ МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
		|				ТОГДА ""Завершено""
		|			КОГДА Взаимодействия.Отменено
		|				ТОГДА ""Отменено""
		|			ИНАЧЕ ""Запланировано""
		|		КОНЕЦ = ""Завершено""
		|	И ВЫБОР
		|			КОГДА &ОтборПоПроектам
		|				ТОГДА ВЫБОР
		|						КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
		|							ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка)
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
		|ГДЕ
		|	(Взаимодействия.Ответственный В (&Ответственные)
		|			ИЛИ Взаимодействия.Ответственный = &ТекущийПользователь
		|			ИЛИ Взаимодействия.Автор = &ТекущийПользователь)
		|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
		|				ТОГДА ""Завершено""
		|			КОГДА Взаимодействия.Отменено
		|				ТОГДА ""Отменено""
		|			ИНАЧЕ ""Запланировано""
		|		КОНЕЦ = ""Запланировано""
		|	И ВЫБОР
		|			КОГДА &ОтборПоПроектам
		|				ТОГДА ВЫБОР
		|						КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
		|							ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВременнаяТаблица.Запланированные) КАК Запланированные,
		|	СУММА(ВременнаяТаблица.Завершенные) КАК Завершенные,
		|	СУММА(ВременнаяТаблица.Просроченные) КАК Просроченные
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица";
	
	Запрос.УстановитьПараметр("ОтборПоПроектам", ОтборПоПроектам);
	Запрос.УстановитьПараметр("Ответственные", Ответственные);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("СписокПроектов", ?(ОтборПоПроектам, ПолучитьСписокПроектов(ТекущийПользователь), Новый Массив));

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Выборка);
	КонецЕсли;
		
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктураДанныеПоДопПараметрам(ТекущийПользователь, Ответственные, МенеджерСтарший = Ложь)
	
	Результат = Новый Структура("ЗаявкиОтГПТ, ЗаявкиНаСделку, ОчередиБронирования, ВыводВПул, ВыводВПродажу", 0, 0, 0, 0, 0);	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаЗвонок.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	ЗаявкаНаЗвонок.Проведен
	|	И ЗаявкаНаЗвонок.Ответственный В(&Ответственные)
	|	И ЗаявкаНаЗвонок.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано), ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться))
	|	И ЗаявкаНаЗвонок.Проект В(&СписокПроектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаСделку.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СписокЗаявокНаСделкуПоМенеджеру
	|ИЗ
	|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
	|ГДЕ
	|	ЗаявкаНаСделку.Проведен
	|	И ЗаявкаНаСделку.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И ЗаявкаНаСделку.Автор В(&Ответственные)
	|	И ЗаявкаНаСделку.Проект В(&СписокПроектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСделкиСрезПоследних.ЗаявкаНаСделку) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыСделки.СрезПоследних(
	|			,
	|			ЗаявкаНаСделку В
	|				(ВЫБРАТЬ
	|					ВТ_СписокЗаявокНаСделкуПоМенеджеру.Ссылка КАК Ссылка
	|				ИЗ
	|					ВТ_СписокЗаявокНаСделкуПоМенеджеру КАК ВТ_СписокЗаявокНаСделкуПоМенеджеру)) КАК СтатусыСделкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ДатаКонцаСрокаБронирования) КАК ДатаКонцаСрокаБронирования,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Ответственный КАК Ответственный,
	|	ВложенныйЗапрос.Клиент КАК Клиент,
	|	ВложенныйЗапрос.ДлительностьСрокаБронирования КАК ДлительностьСрокаБронирования,
	|	ВложенныйЗапрос.ОбъектНедвижимостиВладелец КАК ОбъектСтроительства,
	|	ВложенныйЗапрос.ОбъектНедвижимости КАК ОбъектНедвижимости
	|ПОМЕСТИТЬ ВТ_Брони
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДлительностьСрокаБронирования КАК ДлительностьСрокаБронирования,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДатаКонцаСрокаБронирования КАК ДатаКонцаСрокаБронирования,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК Регистратор,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Период КАК Период,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор.Ответственный КАК Ответственный,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Клиент КАК Клиент,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец КАК ОбъектНедвижимостиВладелец
	|	ИЗ
	|		РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(
	|				,
	|				Регистратор.Ответственный В (&Ответственные)
	|					И ДатаКонцаСрокаБронирования >= &НачалоДня) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
	|	ГДЕ
	|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДокументЗапрос.Проект В(&СписокПроектов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОчередьБронированияОстатки.ДокументБронирования.ДлительностьСрокаБронирования,
	|		ДАТАВРЕМЯ(1, 1, 1),
	|		ОчередьБронированияОстатки.ДокументБронирования,
	|		ОчередьБронированияОстатки.ДокументБронирования.Дата,
	|		ОчередьБронированияОстатки.ДокументБронирования.Ответственный,
	|		ОчередьБронированияОстатки.ДокументБронирования.Клиент,
	|		ОчередьБронированияОстатки.ОбъектНедвижимости,
	|		ОчередьБронированияОстатки.ОбъектНедвижимости.Владелец
	|	ИЗ
	|		РегистрНакопления.ОчередьБронирования.Остатки(, ДокументБронирования.Ответственный В (&Ответственные)) КАК ОчередьБронированияОстатки
	|	ГДЕ
	|		ОчередьБронированияОстатки.ДокументБронирования.Проект В(&СписокПроектов)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.Ответственный,
	|	ВложенныйЗапрос.Клиент,
	|	ВложенныйЗапрос.ДлительностьСрокаБронирования,
	|	ВложенныйЗапрос.ОбъектНедвижимости,
	|	ВложенныйЗапрос.ОбъектНедвижимостиВладелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Брони.Регистратор) КАК КоличествоДокументов
	|ИЗ
	|	ВТ_Брони КАК ВТ_Брони
	|;
	|
	//EXTCODE Шумилин Сергей 29.05.2018 {{ ---> 824941
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаВыводОНВПродажу.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ.ЗаявкаНаВыводОНВПродажу КАК ЗаявкаНаВыводОНВПродажу
	|ГДЕ
	|	НЕ ЗаявкаНаВыводОНВПродажу.ПометкаУдаления
	|	И ИСТИНА = ИСТИНА
	|
	|;
	|
	//<888805>, Басаргин (08.11.2018) {
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаВыводОНВПродажу.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	Документ.ЗаявкаНаВыводОНВПродажу КАК ЗаявкаНаВыводОНВПродажу
	|ГДЕ
	|	НЕ ЗаявкаНаВыводОНВПродажу.ПометкаУдаления
	|	И ЗаявкаНаВыводОНВПродажу.Статус = Значение(Перечисление.СтатусЗаявкиНаВыводОНВПродажу.СогласованиеЗаявки) 
	|	И ЗаявкаНаВыводОНВПродажу.ОбъектНедвижимости.Владелец.Проект В (&СписокПроектов)";
	//<888805> }	
			
	//Если МенеджерСтарший Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА = ИСТИНА" , " И ЗаявкаНаВыводОНВПродажу.Статус = Значение(Перечисление.СтатусЗаявкиНаВыводОНВПродажу.СогласованиеЗаявки) И ЗаявкаНаВыводОНВПродажу.ОбъектНедвижимости.Владелец.Проект В (&СписокПроектов)");
	//Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА = ИСТИНА" , " И ЗаявкаНаВыводОНВПродажу.Автор В (&Ответственные) И ЗаявкаНаВыводОНВПродажу.Статус <> Значение(Перечисление.СтатусЗаявкиНаВыводОНВПродажу.ВыполненаВОКМЦ) ");
	//КонецЕсли;
	//EXTCODE Шумилин Сергей 29.05.2018 <--- }} 
		
	ТекущаяДата = ТекущаяДата();
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецДня",  КонецДня(ТекущаяДата));
	
	Запрос.УстановитьПараметр("Ответственные",  Ответственные);
	Запрос.УстановитьПараметр("СписокПроектов", ПолучитьСписокПроектов(ТекущийПользователь));
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	//Заявки ГПТ
	ДобавитьЗначениеВРезультат(РезультатПакета, 0, Результат, "ЗаявкиОтГПТ");
	//Заявки на сделку
	ДобавитьЗначениеВРезультат(РезультатПакета, 2, Результат, "ЗаявкиНаСделку");
	//ОчередиБронирования
	ДобавитьЗначениеВРезультат(РезультатПакета, 4, Результат, "ОчередиБронирования");	
	//EXTCODE Шумилин Сергей 29.05.2018 {{ ---> 824941
	ДобавитьЗначениеВРезультат(РезультатПакета, 5, Результат, "ВыводВПул");
	//EXTCODE Шумилин Сергей 29.05.2018 <--- }} 
	//<888805>, Басаргин (08.11.2018) {
	ДобавитьЗначениеВРезультат(РезультатПакета, 6, Результат, "ВыводВПродажу");	
	//<888805> }	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТолькоМоиЗадачиПриИзменении(Элемент)
	ЗаполнитьЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПодборКвартирСсылкаНажатие(Элемент)
	
	КлючТекущегоВарианта = "ПодборОН";
	Если МенеджерФилиала ИЛИ Отчетность Тогда
		КлючТекущегоВарианта = "ПодборОН_БТИ";
	КонецЕсли;
	
	Отбор = Новый Структура("ПроектВидНедвижимости", ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.ЖилаяНедвижимость")); 
	ПараметрыФормы = Новый Структура("Отбор, КлючТекущегоВарианта", Отбор, КлючТекущегоВарианта);
	
	ОткрытьФорму("Отчет.Квартирограмма.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура НаправленыНаКонсультацию_РасчетыИпотекиНажатие(Элемент)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	СтруктураОтбора = Новый Структура;	
	СтруктураОтбора.Вставить("Ссылка", ПолучитьНаправленияНаконсультацию(ТекущийПользователь));
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Документ.РасчетИпотеки.Форма.ФормаСпискаУ", ПараметрыФормы, ЭтотОбъект, ЭтаФорма.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ИпотечныеПоказателиСотрудники(Команда)
	
	ПараметрыФормы = Новый Структура("КлючВарианта", "ВариантОтветственный");
	
	ОткрытьФорму("Отчет.ОтчетПоИпотечнымПоказателям.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИпотечныеПоказателиПроекты(Команда)
	
	ПараметрыФормы = Новый Структура("КлючВарианта", "ВариантПроект");
	
	ОткрытьФорму("Отчет.ОтчетПоИпотечнымПоказателям.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоВзаимодействиямЗУ_Подробный(Команда)
	
	ПараметрыФормы = Новый Структура("КлючВарианта", "ПодробныйЗУ");
	
	ОткрытьФорму("Отчет.ОтчетПоВзаимодействиям.Форма", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

#КонецОбласти

#Область Неиспользуемые

//&НаСервереБезКонтекста
//Функция ПолучитьСтруктураНаСервереМенеджер(Менеджер, ОтборПоОтветственному)

//	Результат = Новый Структура("Запланированные, Завершенные, Просроченные, ЗаявкиОтГПТ, ЗаявкиНаСделку, ОчередиБронирования", 0, 0, 0, 0, 0, 0);	

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК КоличествоДокументов
//		//|ИЗ
//		//|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		//|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		//|ГДЕ
//		//|	Взаимодействия.Ответственный В(&Ответственные)
//		//|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1)) МЕЖДУ &НачалоДня И &КонецДня
//		//|	И ВЫБОР
//		//|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|				ТОГДА ""Завершено""
//		//|			КОГДА Взаимодействия.Отменено
//		//|				ТОГДА ""Отменено""
//		//|			ИНАЧЕ ""Запланировано""
//		//|		КОНЕЦ = ""Запланировано""
//		//|	И ВЫБОР
//		//|			КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
//		//|				ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
//		//|			ИНАЧЕ ЛОЖЬ
//		//|		КОНЕЦ
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК КоличествоДокументов
//		//|ИЗ
//		//|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		//|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		//|ГДЕ
//		//|	Взаимодействия.Ответственный В(&Ответственные)
//		//|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1)) МЕЖДУ &НачалоДня И &КонецДня
//		//|	И ВЫБОР
//		//|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|				ТОГДА ""Завершено""
//		//|			КОГДА Взаимодействия.Отменено
//		//|				ТОГДА ""Отменено""
//		//|			ИНАЧЕ ""Запланировано""
//		//|		КОНЕЦ = ""Завершено""
//		//|	И ВЫБОР
//		//|			КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
//		//|				ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
//		//|			ИНАЧЕ ЛОЖЬ
//		//|		КОНЕЦ
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК КоличествоДокументов
//		//|ИЗ
//		//|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		//|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		//|ГДЕ
//		//|	Взаимодействия.Автор В(&Ответственные)
//		//|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < &НачалоДня
//		//|	И ВЫБОР
//		//|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|				ТОГДА ""Завершено""
//		//|			КОГДА Взаимодействия.Отменено
//		//|				ТОГДА ""Отменено""
//		//|			ИНАЧЕ ""Запланировано""
//		//|		КОНЕЦ = ""Запланировано""
//		//|	И ВЫБОР
//		//|			КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
//		//|				ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
//		//|			ИНАЧЕ ЛОЖЬ
//		//|		КОНЕЦ
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаЗвонок.Ссылка) КАК КоличествоДокументов
//		|ИЗ
//		|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
//		|ГДЕ
//		|	ЗаявкаНаЗвонок.Проведен
//		|	И ЗаявкаНаЗвонок.Ответственный В(&ТекущийПользователь)
//		|	И ЗаявкаНаЗвонок.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано), ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться))
//		|	И ЗаявкаНаЗвонок.Проект В(&СписокПроектов)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ЗаявкаНаСделку.Ссылка КАК Ссылка
//		|ПОМЕСТИТЬ ВТ_СписокЗаявокНаСделкуПоМенеджеру
//		|ИЗ
//		|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
//		|ГДЕ
//		|	ЗаявкаНаСделку.Проведен
//		|	И ЗаявкаНаСделку.Дата МЕЖДУ &НачалоДня И &КонецДня
//		|	И ЗаявкаНаСделку.Автор В(&ТекущийПользователь)
//		|	И ЗаявкаНаСделку.Проект В(&СписокПроектов)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСделкиСрезПоследних.ЗаявкаНаСделку) КАК КоличествоДокументов
//		|ИЗ
//		|	РегистрСведений.СтатусыСделки.СрезПоследних(
//		|			,
//		|			ЗаявкаНаСделку В
//		|				(ВЫБРАТЬ
//		|					ВТ_СписокЗаявокНаСделкуПоМенеджеру.Ссылка КАК Ссылка
//		|				ИЗ
//		|					ВТ_СписокЗаявокНаСделкуПоМенеджеру КАК ВТ_СписокЗаявокНаСделкуПоМенеджеру)) КАК СтатусыСделкиСрезПоследних
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	МАКСИМУМ(ВложенныйЗапрос.ДатаКонцаСрокаБронирования) КАК ДатаКонцаСрокаБронирования,
//		|	ВложенныйЗапрос.Регистратор КАК Регистратор,
//		|	ВложенныйЗапрос.Период КАК Период,
//		|	ВложенныйЗапрос.Ответственный КАК Ответственный,
//		|	ВложенныйЗапрос.Клиент КАК Клиент,
//		|	ВложенныйЗапрос.ДлительностьСрокаБронирования КАК ДлительностьСрокаБронирования,
//		|	ВложенныйЗапрос.ОбъектНедвижимостиВладелец КАК ОбъектСтроительства,
//		|	ВложенныйЗапрос.ОбъектНедвижимости КАК ОбъектНедвижимости
//		|ПОМЕСТИТЬ ВТ_Брони
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДлительностьСрокаБронирования КАК ДлительностьСрокаБронирования,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДатаКонцаСрокаБронирования КАК ДатаКонцаСрокаБронирования,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК Регистратор,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Период КАК Период,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор.Ответственный КАК Ответственный,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Клиент КАК Клиент,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец КАК ОбъектНедвижимостиВладелец
//		|	ИЗ
//		|		РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(
//		|				,
//		|				Регистратор.Ответственный В (&ТекущийПользователь)
//		|					И ДатаКонцаСрокаБронирования >= &НачалоДня) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
//		|	ГДЕ
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДокументЗапрос.Проект В(&СписокПроектов)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ОчередьБронированияОстатки.ДокументБронирования.ДлительностьСрокаБронирования,
//		|		ДАТАВРЕМЯ(1, 1, 1),
//		|		ОчередьБронированияОстатки.ДокументБронирования,
//		|		ОчередьБронированияОстатки.ДокументБронирования.Дата,
//		|		ОчередьБронированияОстатки.ДокументБронирования.Ответственный,
//		|		ОчередьБронированияОстатки.ДокументБронирования.Клиент,
//		|		ОчередьБронированияОстатки.ОбъектНедвижимости,
//		|		ОчередьБронированияОстатки.ОбъектНедвижимости.Владелец
//		|	ИЗ
//		|		РегистрНакопления.ОчередьБронирования.Остатки(, ДокументБронирования.Ответственный В (&ТекущийПользователь)) КАК ОчередьБронированияОстатки
//		|	ГДЕ
//		|		ОчередьБронированияОстатки.ДокументБронирования.Проект В(&СписокПроектов)) КАК ВложенныйЗапрос
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВложенныйЗапрос.Регистратор,
//		|	ВложенныйЗапрос.Период,
//		|	ВложенныйЗапрос.Ответственный,
//		|	ВложенныйЗапрос.Клиент,
//		|	ВложенныйЗапрос.ДлительностьСрокаБронирования,
//		|	ВложенныйЗапрос.ОбъектНедвижимости,
//		|	ВложенныйЗапрос.ОбъектНедвижимостиВладелец
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Брони.Регистратор) КАК КоличествоДокументов
//		|ИЗ
//		|	ВТ_Брони КАК ВТ_Брони";
//	
//	Если ОтборПоОтветственному Тогда
//		Запрос.УстановитьПараметр("Ответственные", Менеджер);
//	Иначе
//		Запрос.УстановитьПараметр("Ответственные", ПолучитьОтбор(Менеджер,,Истина));
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("НачалоДня",	НачалоДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("КонецДня",	КонецДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата()));
//	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ТекущаяДата()));
//	
//	Запрос.УстановитьПараметр("ТекущийПользователь", Менеджер);
//	Запрос.УстановитьПараметр("СписокПроектов", ПолучитьСписокПроектов(Менеджер));
//	
//	РезультатПакета = Запрос.ВыполнитьПакет();
//	
//	////Запланированные на текущий день взаимодействия
//	//ДобавитьЗначениеВРезультат(РезультатПакета, 0, Результат, "Запланированные");
//	////Завершеные на текущий день взаимодействия
//	//ДобавитьЗначениеВРезультат(РезультатПакета, 1, Результат, "Завершенные");
//	////Просроченные взаимодействия
//	//ДобавитьЗначениеВРезультат(РезультатПакета, 2, Результат, "Просроченные");
//	//Заявки ГПТ
//	ДобавитьЗначениеВРезультат(РезультатПакета, 3, Результат, "ЗаявкиОтГПТ");
//	//Заявки на сделку
//	ДобавитьЗначениеВРезультат(РезультатПакета, 5, Результат, "ЗаявкиНаСделку");
//	//ОчередиБронирования
//	ДобавитьЗначениеВРезультат(РезультатПакета, 7, Результат, "ОчередиБронирования");	
//	
//	Возврат Результат;	
//	
//КонецФункции // ПолучитьСтруктураНаСервере()()

//&НаСервереБезКонтекста
//Функция ПолучитьСтруктураНаСервере(Ответственные, ТекущийПользователь)

//	Результат = Новый Структура("Запланированные, Завершенные, Просроченные, ЗаявкиОтГПТ, ЗаявкиНаСделку, ОчередиБронирования", 0, 0, 0, 0, 0, 0);	

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		//"ВЫБРАТЬ
//		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК КоличествоДокументов
//		//|ИЗ
//		//|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		//|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		//|ГДЕ
//		//|	Взаимодействия.Ответственный В(&Ответственные)
//		//|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1)) МЕЖДУ &НачалоДня И &КонецДня
//		//|	И НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|	И НЕ Взаимодействия.Отменено
//		//|	И ВЫБОР
//		//|			КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
//		//|				ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
//		//|			ИНАЧЕ ЛОЖЬ
//		//|		КОНЕЦ
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК КоличествоДокументов
//		//|ИЗ
//		//|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		//|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		//|ГДЕ
//		//|	Взаимодействия.Ответственный В(&Ответственные)
//		//|	И ВЫБОР
//		//|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|					ИЛИ Взаимодействия.Отменено
//		//|				ТОГДА Взаимодействия.ДатаОкончания
//		//|			ИНАЧЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1))
//		//|		КОНЕЦ <= &КонецДня
//		//|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|	И НЕ Взаимодействия.Отменено
//		//|	И ВЫБОР
//		//|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) = ИСТИНА
//		//|					ИЛИ Взаимодействия.Отменено
//		//|				ТОГДА Взаимодействия.ДатаОкончания
//		//|			ИНАЧЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1))
//		//|		КОНЕЦ >= &НачалоДня
//		//|	И ВЫБОР
//		//|			КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
//		//|				ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
//		//|			ИНАЧЕ ЛОЖЬ
//		//|		КОНЕЦ
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		//|ВЫБРАТЬ
//		//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК КоличествоДокументов
//		//|ИЗ
//		//|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		//|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		//|ГДЕ
//		//|	Взаимодействия.Автор В(&Ответственные)
//		//|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < &НачалоДня
//		//|	И НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		//|	И НЕ Взаимодействия.Отменено
//		//|	И ВЫБОР
//		//|			КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
//		//|				ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект В (&СписокПроектов)
//		//|			ИНАЧЕ ЛОЖЬ
//		//|		КОНЕЦ
//		//|;
//		//|
//		//|////////////////////////////////////////////////////////////////////////////////
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкаНаЗвонок.Ссылка) КАК КоличествоДокументов
//		|ИЗ
//		|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
//		|ГДЕ
//		|	ЗаявкаНаЗвонок.Проведен
//		|	И ЗаявкаНаЗвонок.Ответственный В(&Ответственные)
//		|	И ЗаявкаНаЗвонок.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано), ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться))
//		|	И ЗаявкаНаЗвонок.Проект В(&СписокПроектов)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ЗаявкаНаСделку.Ссылка КАК Ссылка
//		|ПОМЕСТИТЬ ВТ_СписокЗаявокНаСделкуПоМенеджеру
//		|ИЗ
//		|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
//		|ГДЕ
//		|	ЗаявкаНаСделку.Проведен
//		|	И ЗаявкаНаСделку.Дата МЕЖДУ &НачалоДня И &КонецДня
//		|	И ЗаявкаНаСделку.Автор В(&Ответственные)
//		|	И ЗаявкаНаСделку.Проект В(&СписокПроектов)
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыСделкиСрезПоследних.ЗаявкаНаСделку) КАК КоличествоДокументов
//		|ИЗ
//		|	РегистрСведений.СтатусыСделки.СрезПоследних(
//		|			,
//		|			ЗаявкаНаСделку В
//		|				(ВЫБРАТЬ
//		|					ВТ_СписокЗаявокНаСделкуПоМенеджеру.Ссылка КАК Ссылка
//		|				ИЗ
//		|					ВТ_СписокЗаявокНаСделкуПоМенеджеру КАК ВТ_СписокЗаявокНаСделкуПоМенеджеру)) КАК СтатусыСделкиСрезПоследних
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	МАКСИМУМ(ВложенныйЗапрос.ДатаКонцаСрокаБронирования) КАК ДатаКонцаСрокаБронирования,
//		|	ВложенныйЗапрос.Регистратор КАК Регистратор,
//		|	ВложенныйЗапрос.Период КАК Период,
//		|	ВложенныйЗапрос.Ответственный КАК Ответственный,
//		|	ВложенныйЗапрос.Клиент КАК Клиент,
//		|	ВложенныйЗапрос.ДлительностьСрокаБронирования КАК ДлительностьСрокаБронирования,
//		|	ВложенныйЗапрос.ОбъектНедвижимостиВладелец КАК ОбъектСтроительства,
//		|	ВложенныйЗапрос.ОбъектНедвижимости КАК ОбъектНедвижимости
//		|ПОМЕСТИТЬ ВТ_Брони
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДлительностьСрокаБронирования КАК ДлительностьСрокаБронирования,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДатаКонцаСрокаБронирования КАК ДатаКонцаСрокаБронирования,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК Регистратор,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Период КАК Период,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор.Ответственный КАК Ответственный,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.Клиент КАК Клиент,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец КАК ОбъектНедвижимостиВладелец
//		|	ИЗ
//		|		РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(
//		|				,
//		|				Регистратор.Ответственный В (&Ответственные)
//		|					И ДатаКонцаСрокаБронирования >= &НачалоДня) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
//		|	ГДЕ
//		|		СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДокументЗапрос.Проект В(&СписокПроектов)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		ОчередьБронированияОстатки.ДокументБронирования.ДлительностьСрокаБронирования,
//		|		ДАТАВРЕМЯ(1, 1, 1),
//		|		ОчередьБронированияОстатки.ДокументБронирования,
//		|		ОчередьБронированияОстатки.ДокументБронирования.Дата,
//		|		ОчередьБронированияОстатки.ДокументБронирования.Ответственный,
//		|		ОчередьБронированияОстатки.ДокументБронирования.Клиент,
//		|		ОчередьБронированияОстатки.ОбъектНедвижимости,
//		|		ОчередьБронированияОстатки.ОбъектНедвижимости.Владелец
//		|	ИЗ
//		|		РегистрНакопления.ОчередьБронирования.Остатки(, ДокументБронирования.Ответственный В (&Ответственные)) КАК ОчередьБронированияОстатки
//		|	ГДЕ
//		|		ОчередьБронированияОстатки.ДокументБронирования.Проект В(&СписокПроектов)) КАК ВложенныйЗапрос
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ВложенныйЗапрос.Регистратор,
//		|	ВложенныйЗапрос.Период,
//		|	ВложенныйЗапрос.Ответственный,
//		|	ВложенныйЗапрос.Клиент,
//		|	ВложенныйЗапрос.ДлительностьСрокаБронирования,
//		|	ВложенныйЗапрос.ОбъектНедвижимости,
//		|	ВложенныйЗапрос.ОбъектНедвижимостиВладелец
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_Брони.Регистратор) КАК КоличествоДокументов
//		|ИЗ
//		|	ВТ_Брони КАК ВТ_Брони";
//	
//	ТекущаяДата = ТекущаяДата();
//	Запрос.УстановитьПараметр("НачалоДня",	  НачалоДня(ТекущаяДата));
//	Запрос.УстановитьПараметр("КонецДня",	  КонецДня(ТекущаяДата));
//	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата));
//	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(ТекущаяДата));
//	
//	Запрос.УстановитьПараметр("Ответственные", Ответственные);
//	Запрос.УстановитьПараметр("СписокПроектов", ПолучитьСписокПроектов(ТекущийПользователь));
//		
//	РезультатПакета = Запрос.ВыполнитьПакет();
//	
//	////Запланированные на текущий день взаимодействия
//	//ДобавитьЗначениеВРезультат(РезультатПакета, 0, Результат, "Запланированные");
//	////Завершеные на текущий день взаимодействия
//	//ДобавитьЗначениеВРезультат(РезультатПакета, 1, Результат, "Завершенные");
//	////Просроченные взаимодействия
//	//ДобавитьЗначениеВРезультат(РезультатПакета, 2, Результат, "Просроченные");
//	//Заявки ГПТ
//	ДобавитьЗначениеВРезультат(РезультатПакета, 3, Результат, "ЗаявкиОтГПТ");
//	//Заявки на сделку
//	ДобавитьЗначениеВРезультат(РезультатПакета, 5, Результат, "ЗаявкиНаСделку");
//	//ОчередиБронирования
//	ДобавитьЗначениеВРезультат(РезультатПакета, 7, Результат, "ОчередиБронирования");	
//	
//	Возврат Результат;	
//	
//КонецФункции // ПолучитьСтруктураНаСервере()()

//&НаСервереБезКонтекста
//Функция ПолучитьДанныеПоВзаимодействиям(ТекущийПользователь, ТолькоМоиЗадачи)
//	
//	СписокПользователей = Новый Массив;
//	Если ТолькоМоиЗадачи Тогда
//		СписокПользователей.Добавить(ТекущийПользователь);
//	Иначе
//		СписокПользователей = ПолучитьСписокСотрудников(ТекущийПользователь);
//	КонецЕсли;
//	
//	ПараметрыЗаполнения = Новый Структура("Запланированные, Завершенные, Просроченные", 0, 0, 0);	

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка) КАК Запланированные,
//		|	0 КАК Завершенные,
//		|	0 КАК Просроченные
//		|ПОМЕСТИТЬ ВременнаяТаблица
//		|ИЗ
//		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		|ГДЕ
//		|	Взаимодействия.Ответственный В(&Ответственные)
//		|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1)) МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
//		|	И ВЫБОР
//		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		|				ТОГДА ""Завершено""
//		|			КОГДА Взаимодействия.Отменено
//		|				ТОГДА ""Отменено""
//		|			ИНАЧЕ ""Запланировано""
//		|		КОНЕЦ = ""Запланировано""
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	0,
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка),
//		|	0
//		|ИЗ
//		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		|ГДЕ
//		|	Взаимодействия.Ответственный В(&Ответственные)
//		|	И ВЫБОР
//		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ) = ИСТИНА
//		|					ИЛИ Взаимодействия.Отменено = ИСТИНА
//		|				ТОГДА Взаимодействия.ДатаОкончания
//		|			ИНАЧЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1))
//		|		КОНЕЦ МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
//		|	И ВЫБОР
//		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		|				ТОГДА ""Завершено""
//		|			КОГДА Взаимодействия.Отменено
//		|				ТОГДА ""Отменено""
//		|			ИНАЧЕ ""Запланировано""
//		|		КОНЕЦ = ""Завершено""
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	0,
//		|	0,
//		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Взаимодействия.Ссылка)
//		|ИЗ
//		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
//		|		ПО Взаимодействия.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
//		|ГДЕ
//		|	Взаимодействия.Автор В(&Ответственные)
//		|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
//		|	И ВЫБОР
//		|			КОГДА ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, ЛОЖЬ)
//		|				ТОГДА ""Завершено""
//		|			КОГДА Взаимодействия.Отменено
//		|				ТОГДА ""Отменено""
//		|			ИНАЧЕ ""Запланировано""
//		|		КОНЕЦ = ""Запланировано""
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	СУММА(ВременнаяТаблица.Запланированные) КАК Запланированные,
//		|	СУММА(ВременнаяТаблица.Завершенные) КАК Завершенные,
//		|	СУММА(ВременнаяТаблица.Просроченные) КАК Просроченные
//		|ИЗ
//		|	ВременнаяТаблица КАК ВременнаяТаблица";

//	Запрос.УстановитьПараметр("Ответственные", СписокПользователей);
//	Запрос.УстановитьПараметр("Период",	ТекущаяДата());
//	
//	Результат = Запрос.Выполнить();
//	Если Не Результат.Пустой() Тогда
//		Выборка = Результат.Выбрать();
//		Выборка.Следующий();
//		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Выборка);
//	КонецЕсли;
//		
//	Возврат ПараметрыЗаполнения;
//	
//КонецФункции

#КонецОбласти
