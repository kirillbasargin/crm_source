
Функция ПолучитьПредставлениеПериода(ПараметрыОтчета, ТолькоДаты  = Ложь)
	
	ТекстПериод = "";
	
	Если ПараметрыОтчета.Свойство("НеДобавлятьПериод") И ПараметрыОтчета.НеДобавлятьПериод Тогда
		Возврат ТекстПериод;
	КонецЕсли; 
	
	Если ПараметрыОтчета.Свойство("Период") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
			ТекстПериод = ?(ТолькоДаты, "", " на ") + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.Свойство("НачалоПериода")
		И ПараметрыОтчета.Свойство("КонецПериода") Тогда
		
		НачалоПериода = ПараметрыОтчета.НачалоПериода;
		КонецПериода  = ПараметрыОтчета.КонецПериода;
		
		Если ЗначениеЗаполнено(КонецПериода) Тогда 
			Если КонецПериода >= НачалоПериода Тогда
				ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
			Иначе
				ТекстПериод = "";
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
			ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Функция ПолучитьТекстЗаголовкаОтчета(ПараметрыОтчета)
	
	ТекстЗаголовка = ПараметрыОтчета.Заголовок + ПолучитьПредставлениеПериода(ПараметрыОтчета);
	Возврат ТекстЗаголовка;
	
КонецФункции

Функция ПолучитьЗначениеПериодичности(НачалоПериода, КонецПериода) Экспорт
	
	Результат = Перечисления.Периодичность.Месяц;
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода) Тогда
		
		Разность = КонецПериода - НачалоПериода;
		Если Разность / 86400 < 45 Тогда
			Результат = Перечисления.Периодичность.День;
		Иначе
			Результат = Перечисления.Периодичность.Месяц; // месяц
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, Результат) Экспорт
	
	ПараметрыВывода = ПараметрыОтчета.НастройкиОтчета.ПараметрыВывода;
	
	ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ПараметрВывода <> Неопределено
		И (Не ПараметрВывода.Использование ИЛИ ПараметрВывода.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда
		ПараметрВывода.Использование = Истина;
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; // отключаем стандартный вывод заголовка
	КонецЕсли;
	
	ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	Если ПараметрВывода <> Неопределено
		И (Не ПараметрВывода.Использование ИЛИ ПараметрВывода.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда
		ПараметрВывода.Использование = Истина;
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; // отключаем стандартный вывод параметров
	КонецЕсли;
	
	ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
	Если ПараметрВывода <> Неопределено
		И (Не ПараметрВывода.Использование ИЛИ ПараметрВывода.Значение <> ТипВыводаТекстаКомпоновкиДанных.НеВыводить) Тогда
		ПараметрВывода.Использование = Истина;
		ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить; // отключаем стандартный вывод отбора
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	
	// Заголовок
	Если ПараметрыОтчета.ВыводитьЗаголовок 
		И ЗначениеЗаполнено(ПараметрыОтчета.Заголовок) Тогда
		ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ПолучитьТекстЗаголовкаОтчета(ПараметрыОтчета);
		Результат.Вывести(ОбластьЗаголовок);
		
		// Отбор
		ТекстОтбор = "";
		
		Если ПараметрыОтчета.Свойство("ПараметрыВключаемыеВТекстОтбора")
			И ТипЗнч(ПараметрыОтчета.ПараметрыВключаемыеВТекстОтбора) = Тип("Массив") Тогда
			
			Для Каждого Параметр Из ПараметрыОтчета.ПараметрыВключаемыеВТекстОтбора Цикл
				Если ТипЗнч(Параметр) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
					ИЛИ Не Параметр.Использование Тогда
					Продолжить;
				КонецЕсли;
				ТекстОтбор = ТекстОтбор + ?(ПустаяСтрока(ТекстОтбор), "", НСтр("ru = ' И '")) 
					+ СокрЛП(Параметр.ПредставлениеПользовательскойНастройки) + " Равно """ + СокрЛП(Параметр.Значение) + """";
				
			КонецЦикла;
		КонецЕсли;
		
		Для каждого ЭлементОтбора Из ПараметрыОтчета.НастройкиОтчета.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных")
				ИЛИ Не ЭлементОтбора.Использование
				ИЛИ Не ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки)
				ИЛИ ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
				Продолжить;
			КонецЕсли;
			ТекстОтбор = ТекстОтбор + ?(ПустаяСтрока(ТекстОтбор), "", НСтр("ru = ' И '")) 
				+ СокрЛП(ЭлементОтбора.ЛевоеЗначение) + " " + СокрЛП(ЭлементОтбора.ВидСравнения) + " """ + СокрЛП(ЭлементОтбора.ПравоеЗначение) + """";
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
		
		Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает формулу расчета и формат динамического периода.
//
// Параметры:
//		СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - СКД отчета
//		КомпоновщикНастроек - НастройкиКомпоновкиДанных - настройки отчета
//
Процедура НастроитьДинамическийПериод(СхемаКомпоновкиДанных, ПараметрыОтчета, ДополнятьПериод = Ложь) Экспорт
	
	НастройкиОтчета = ПараметрыОтчета.НастройкиОтчета;
	
	ПолеПараметр = Новый ПараметрКомпоновкиДанных("Периодичность");
	ПараметрПериодичность = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	
	Если ПараметрПериодичность = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрПериодичность.Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрПериодичность.Значение) Тогда
		ПараметрПериодичность.Значение = ПолучитьЗначениеПериодичности(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	ИскомоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти("ДинамическийПериод");
	
	Если ИскомоеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДлительностьПериода = ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрПериодичность.Значение);
	ИскомоеПоле.Выражение = "Период" + СтрокаДлительностьПериода;
	ИскомоеПоле.Заголовок = СтрокаДлительностьПериода;
	
	ПараметрОформленияФормат = ИскомоеПоле.Оформление.Элементы.Найти("Формат");
	ПараметрОформленияФормат.Значение = ФорматнаяСтрокаДинамическогоПериода(ПараметрПериодичность.Значение);
	ПараметрОформленияФормат.Использование = Истина;
	
	Если Не ДополнятьПериод Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("НачалоПериода") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("КонецПериода") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнениеПериода = ТипДополненияПериодаКомпоновкиДанных[СтрокаДлительностьПериода];
	ПолеДинамическийПериод = Новый ПолеКомпоновкиДанных("ДинамическийПериод");
	Группировки = ПолучитьГруппировки(НастройкиОтчета);
	Для Каждого Группировка Из Группировки Цикл
		Если Группировка.Значение.ПоляГруппировки.Элементы.Количество() = 1
			И Группировка.Значение.ПоляГруппировки.Элементы[0].Поле = ПолеДинамическийПериод Тогда
			ГруппировкаДинамическийПериод = Группировка.Значение.ПоляГруппировки.Элементы[0];
			ГруппировкаДинамическийПериод.ТипДополнения = ДополнениеПериода;
			ГруппировкаДинамическийПериод.НачалоПериода = ПараметрыОтчета.НачалоПериода;
			ГруппировкаДинамическийПериод.КонецПериода = ПараметрыОтчета.КонецПериода;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ФорматнаяСтрокаДинамическогоПериода(Периодичность) Экспорт
	
	ФорматнаяСтрока = "";
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yy'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yy'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='dd.MM.yy'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='MMM yy'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='q ""кв."" yy'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='ММ.yy'";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматнаяСтрока = "Л=ru; ДФ='yyyy'";
	КонецЕсли;
	
	Возврат ФорматнаяСтрока;
	
КонецФункции

Процедура ОбработатьДиаграммыОтчета(ПараметрыОтчета, ДокументРезультат) Экспорт
	
	Для Каждого Рисунок Из ДокументРезультат.Рисунки Цикл
		// Выводим надписи вертикально, если количество точек диаграмм больше 6
		Попытка
			Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Диаграмма
				И ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				
				Если ПараметрыОтчета.Свойство("ТипДиаграммы")
					И ПараметрыОтчета.ТипДиаграммы <> Неопределено
					И Рисунок.Объект.ТипДиаграммы <> ПараметрыОтчета.ТипДиаграммы Тогда
					Рисунок.Объект.ТипДиаграммы = ПараметрыОтчета.ТипДиаграммы;
				КонецЕсли;
				
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 6);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
				
			КонецЕсли;
		Исключение
		// При возникновении исключения не обрабатываем рисунок
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает размер рисунка с диаграммой отчета.
//
Процедура УстановитьРазмерДиаграммыОтчета(Рисунок) Экспорт

	Рисунок.Объект.ОтображатьЗаголовок = Ложь;
	Рисунок.Объект.ОбластьЛегенды.Низ = 0.90;
	Рисунок.Высота = 95;
	Рисунок.Ширина = 145;

КонецПроцедуры

Процедура УстановитьМакетОформленияОтчета(НастройкиОтчета) Экспорт
	
	ПараметрМакетОформления = ПолучитьПараметрВывода(НастройкиОтчета, "МакетОформления");
	Если ПараметрМакетОформления <> Неопределено
		И ПараметрМакетОформления.Использование
		И ЗначениеЗаполнено(ПараметрМакетОформления.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	МакетОформления = "УсловноеОформлениеСтрогий";
	
	УстановитьПараметрВывода(НастройкиОтчета, "МакетОформления", МакетОформления);
	
КонецПроцедуры

#Область НастройкиОтчетов

// Процедура включает родительские группировки в пользовательских настройках, если включена хоть одна дочерняя
//
// Параметры:
//		КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки отчета
//		ПользовательскиеНастройкиМодифицированы - Булево - обязательный к установке признак модификации польз. настроек отчета
//
Процедура ИсправитьНастройкиГруппировок(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы) Экспорт
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	Настройки = КомпоновщикНастроек.Настройки;
	
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		Если (ТипЗнч(ПользовательскаяНастройка) = Тип("ГруппировкаКомпоновкиДанных") 
			Или ТипЗнч(ПользовательскаяНастройка) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			Или ТипЗнч(ПользовательскаяНастройка) = Тип("ТаблицаКомпоновкиДанных"))
			И ПользовательскаяНастройка.Использование Тогда
			ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройка, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройка, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы)
	ИдентификаторПользовательскойНастройки = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
	
	Если Не ПустаяСтрока(ИдентификаторПользовательскойНастройки) Тогда
		ОбъектНастройки = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки);
	Иначе
		ОбъектНастройки = ПользовательскаяНастройка;
	КонецЕсли;
	РодительОбъектаНастройки = ОбъектНастройки.Родитель;
	
	Если ТипЗнч(РодительОбъектаНастройки) = Тип("ГруппировкаКомпоновкиДанных") 
		Или ТипЗнч(РодительОбъектаНастройки) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		Или ТипЗнч(РодительОбъектаНастройки) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ИдентификаторПользовательскойНастройкиРодителя = РодительОбъектаНастройки.ИдентификаторПользовательскойНастройки;
		
		Если Не ПустаяСтрока(ИдентификаторПользовательскойНастройкиРодителя) Тогда
			ПользовательскаяНастройкаРодитель = НайтиПользовательскуюНастройку(ПользовательскиеНастройки, ИдентификаторПользовательскойНастройкиРодителя);
			ПользовательскаяНастройкаРодитель.Использование = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
			
			ИсправитьНастройкиРодительскойГруппировки(ПользовательскаяНастройкаРодитель, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		Иначе
			ИсправитьНастройкиРодительскойГруппировки(РодительОбъектаНастройки, ПользовательскиеНастройки, Настройки, ПользовательскиеНастройкиМодифицированы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает список всех группировок компоновщика настроек
// 
// Параметры:
//		ЭлементСтруктуры - элемент структуры настройки СКД, настройка СКД или компоновщик настроек 
//		ПоказыватьГруппировкиТаблиц - признак добавления в список группировки колонок (по умолчанию Истина)
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = Истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции

// Добавляет вложенные группировки элемента структуры.
//
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = Истина)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки - НастройкиКомпоновкиДанных - Коллекции настроек.
//   ИдентификаторПользовательскойНастройки - Строка -
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки, Иерархия = Неопределено) Экспорт
	Если Иерархия <> Неопределено Тогда
		Иерархия.Добавить(Настройки);
	КонецЕсли;
	
	ТипНастройки = ТипЗнч(Настройки);
	
	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			
			Возврат Настройки;
			
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки, Иерархия);
			
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки, Иерархия);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;
			
			Если Иерархия <> Неопределено Тогда
				Иерархия.Удалить(Иерархия.ВГраница());
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки, Иерархия);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Иерархия <> Неопределено Тогда
		Иерархия.Удалить(Иерархия.ВГраница());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	// Поиск элемента с заданным значением свойства ИдентификаторПользовательскойНастройки (ИПН).
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки.Элементы);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		КоллекцияЭлементов = МассивГрупп.Получить(0);
		МассивГрупп.Удалить(0);
		
		Для Каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов не содержит ИПН.
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				// Не содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
			ИначеЕсли ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				// Найден нужный элемент.
				Возврат ПодчиненныйЭлемент;
			Иначе
				// Содержит ИПН; Коллекция вложенных элементов может содержать ИПН.
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.Элементы);
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент.ЗначенияВложенныхПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - Коллекция пользовательских настроек.
//   Идентификатор - Строка -
//
Функция НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор) Экспорт
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Получает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//
Функция ПолучитьПараметрВывода(Настройка, ИмяПараметра) Экспорт
	
	МассивПараметров   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	УровеньВложенности = МассивПараметров.Количество();
	
	Если УровеньВложенности > 1 Тогда
		ИмяПараметра = МассивПараметров[0];		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Иначе
		ЗначениеПараметра = Настройка.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	КонецЕсли;
	
	Если УровеньВложенности > 1 Тогда
		Для Индекс = 1 По УровеньВложенности - 1 Цикл
			ИмяПараметра = ИмяПараметра + "." + МассивПараметров[Индекс];
			ЗначениеПараметра = ЗначениеПараметра.ЗначенияВложенныхПараметров.Найти(ИмяПараметра); 
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;  
	
КонецФункции

// Устанавливает параметр вывода компоновщика настроек или настройки СКД
//
// Параметры:
//		КомпоновщикНастроекГруппировка - компоновщик настроек или настройка/группировка СКД
//		ИмяПараметра - имя параметра СКД
//		Значение - значение параметра вывода СКД
//		Использование - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
Функция УстановитьПараметрВывода(Настройка, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметрВывода(Настройка, ИмяПараметра);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Снять использование параметра пользовательской настройки компоновщика настроек
//
Процедура ОтключитьИспользованиеПользовательскойНастройки(КомпоновщикНастроек, Настройка) Экспорт
	
	ИскомаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Настройка);
	
	Если ИскомаяНастройка = Неопределено Тогда
		
		ПолеПоиска = Новый ПолеКомпоновкиДанных(Настройка);
		
		Для Каждого Настройка Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Настройка.ЛевоеЗначение = ПолеПоиска Тогда
				ИскомаяНастройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если ИскомаяНастройка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИскомаяНастройка.ИдентификаторПользовательскойНастройки);
	
	
	ПользовательскаяНастройка.Использование = Ложь;
	
КонецПроцедуры

// Устанавливает значение параметра пользовательской настройки компоновщика настроек
//
Процедура ПолучитьЗначениеПользовательскойНастройки(КомпоновщикНастроек, Настройка,ЗначениеНастройки) Экспорт
	
	ИскомаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Настройка);
	
	Если ИскомаяНастройка = Неопределено Тогда
		
		ПолеПоиска = Новый ПолеКомпоновкиДанных(Настройка);
		
		Для Каждого Настройка Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Настройка.ЛевоеЗначение = ПолеПоиска Тогда
				ИскомаяНастройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если ИскомаяНастройка = Неопределено Тогда
			ЗначениеНастройки = Неопределено;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИскомаяНастройка.ИдентификаторПользовательскойНастройки);
	
	Если ПользовательскаяНастройка = Неопределено Тогда
		ЗначениеНастройки = Неопределено;
	ИначеЕсли ПользовательскаяНастройка.Использование Тогда
		Если ТипЗнч(ПользовательскаяНастройка) =Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеНастройки = ПользовательскаяНастройка.ПравоеЗначение;
		Иначе
			ЗначениеНастройки = ПользовательскаяНастройка.Значение;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение параметра пользовательской настройки компоновщика настроек
//
Процедура УстановитьЗначениеПользовательскойНастройки(КомпоновщикНастроек, Настройка,ЗначениеНастройки) Экспорт
	
	ИскомаяНастройка = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(Настройка);
	
	Если ИскомаяНастройка = Неопределено Тогда
		
		ПолеПоиска = Новый ПолеКомпоновкиДанных(Настройка);
		
		Для Каждого Настройка Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Настройка.ЛевоеЗначение = ПолеПоиска Тогда
				ИскомаяНастройка = Настройка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		Если ИскомаяНастройка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПользовательскаяНастройка = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИскомаяНастройка.ИдентификаторПользовательскойНастройки);
	
	Если ТипЗнч(ПользовательскаяНастройка) =Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ПользовательскаяНастройка.ЛевоеЗначение = ПолеПоиска;
		ПользовательскаяНастройка.ПравоеЗначение = ЗначениеНастройки;
		
	Иначе
		ПользовательскаяНастройка.Значение = ЗначениеНастройки;
	КонецЕсли;
	
	ПользовательскаяНастройка.Использование = Истина;
	
КонецПроцедуры

//++ Юкаев Роман 20170205 ( //771232
Процедура РассылкаСМСПоОтчетуЕжедневнаяСМС() Экспорт
	
	ВидСообщения = НСтр("ru = 'Отправка СМС. Еженедельный отчет по СМС.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	//<845901>, Басаргин (16.07.2018) {
	//ПериодОтчета = НачалоДня(НачалоДня(ТекущаяДата()) - 1);
	ПериодОтчета = ТекущаяДата();
	//<845901> }
	
	ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начато регламентное задание рассылки ежедневного отчета по СМС за %1'"),
		ПериодОтчета));
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		
		ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,, "Не выполнены настройки отправки SMS.");
		
		ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено регламентное задание рассылки ежедневного отчета по СМС за %1'"), ПериодОтчета));
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВТ_Пользователи
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
		|		ПО ГруппыПользователейСостав.Ссылка = ГруппыПользователей.Ссылка
		|ГДЕ
		|	ГруппыПользователей.Наименование = ""Рассылка ежедневного отчета по СМС""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.НомерТелефона КАК НомерДляОтправки,
		|	ПользователиКонтактнаяИнформация.Ссылка КАК Контакт,
		|	ПользователиКонтактнаяИнформация.НомерТелефона КАК КакСвязаться,
		|	Пользователи.Представление КАК ПредставлениеКонтакта,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Исходящее) КАК СостояниеСообщения
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ПользователиКонтактнаяИнформация.Ссылка = Пользователи.Ссылка
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователя)
		|	И ПользователиКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Пользователи.Пользователь КАК Пользователь
		|			ИЗ
		|				ВТ_Пользователи КАК ВТ_Пользователи)";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,, "Нет номеров для отправки отчета!");
		Возврат;
	Иначе
		СписокНомеров = Результат.Выгрузить();
	КонецЕсли;
	
	//УПН
	ТекстЗапросаУНП = 
		//"ВЫБРАТЬ
		//|	АктуальноеСостояниеБюджетаСрезПоследних.СостояниеБП
		//|ПОМЕСТИТЬ вт_АктуализацияБюджета
		//|ИЗ
		//|	РегистрСведений.АктуальноеСостояниеБюджета.СрезПоследних(&ПериодДействия, ДатаНачалаПлана = &Период) КАК АктуальноеСостояниеБюджетаСрезПоследних
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ПланПродажБюджетированияОперативный.Проект КАК ПроектНСИ,
		//|	ПРЕДСТАВЛЕНИЕ(ПланПродажБюджетированияОперативный.Классификатор) КАК Классификатор,
		//|	ПланПродажБюджетированияОперативный.ПериодДействия КАК ПериодДействия,
		//|	ВЫРАЗИТЬ(ПланПродажБюджетированияОперативный.Значение КАК ЧИСЛО(15, 2)) КАК Значение
		//|ПОМЕСТИТЬ вт_СгруппированныйРезультат
		//|ИЗ
		//|	РегистрСведений.ПланПродажБюджетированияОперативный КАК ПланПродажБюджетированияОперативный
		//|ГДЕ
		//|	ПланПродажБюджетированияОперативный.Период = &Период
		//|	И ПланПродажБюджетированияОперативный.ПериодДействия = &Период
		//|	И ПланПродажБюджетированияОперативный.СостояниеБП В
		//|			(ВЫБРАТЬ
		//|				вт_АктуализацияБюджета.СостояниеБП
		//|			ИЗ
		//|				вт_АктуализацияБюджета КАК вт_АктуализацияБюджета)
		//|	И ПланПродажБюджетированияОперативный.Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиПланаПродаж.ПланРеализацииШт)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ОбъектыСтроительстваПроекта.Проект,
		//|	МАКСИМУМ(ОбъектыСтроительстваПроекта.ПроектУПН) КАК ПроектУПН
		//|ПОМЕСТИТЬ вт_СоответствиеПроектаНСИПроектуУПН
		//|ИЗ
		//|	РегистрСведений.ОбъектыСтроительстваПроекта КАК ОбъектыСтроительстваПроекта
		//|ГДЕ
		//|	ОбъектыСтроительстваПроекта.Проект В
		//|			(ВЫБРАТЬ
		//|				вт_СгруппированныйРезультат.ПроектНСИ
		//|			ИЗ
		//|				вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	ОбъектыСтроительстваПроекта.Проект
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	вт_СоответствиеПроектаНСИПроектуУПН.ПроектУПН,
		//|	вт_СгруппированныйРезультат.Классификатор,
		//|	СУММА(вт_СгруппированныйРезультат.Значение) КАК Значение
		//|ИЗ
		//|	вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат
		//|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СоответствиеПроектаНСИПроектуУПН КАК вт_СоответствиеПроектаНСИПроектуУПН
		//|		ПО вт_СгруппированныйРезультат.ПроектНСИ = вт_СоответствиеПроектаНСИПроектуУПН.Проект
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	вт_СоответствиеПроектаНСИПроектуУПН.ПроектУПН,
		//|	вт_СгруппированныйРезультат.Классификатор";
		
		"ВЫБРАТЬ
		|	АктуальноеСостояниеБюджетаСрезПоследних.СостояниеБП
		|ПОМЕСТИТЬ вт_АктуализацияБюджета
		|ИЗ
		|	РегистрСведений.АктуальноеСостояниеБюджета.СрезПоследних(&ПериодДействия, ДатаНачалаПлана = НАЧАЛОПЕРИОДА(&ПериодДействия, МЕСЯЦ)) КАК АктуальноеСостояниеБюджетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланПродажБюджетированияОперативный.Проект КАК ПроектУПН,
		|	ПРЕДСТАВЛЕНИЕ(ПланПродажБюджетированияОперативный.Классификатор) КАК Классификатор,
		|	ПланПродажБюджетированияОперативный.ПериодДействия КАК ПериодДействия,
		|	ВЫРАЗИТЬ(ПланПродажБюджетированияОперативный.Значение КАК ЧИСЛО(15, 2)) КАК Значение
		|ИЗ
		|	РегистрСведений.ПланПродажБюджетированияОперативный КАК ПланПродажБюджетированияОперативный
		|ГДЕ
		|	ПланПродажБюджетированияОперативный.Период = НАЧАЛОПЕРИОДА(&ПериодДействия, МЕСЯЦ)
		|	И ПланПродажБюджетированияОперативный.ПериодДействия = НАЧАЛОПЕРИОДА(&ПериодДействия, МЕСЯЦ)
		|	И ПланПродажБюджетированияОперативный.СостояниеБП В
		|			(ВЫБРАТЬ
		|				вт_АктуализацияБюджета.СостояниеБП
		|			ИЗ
		|				вт_АктуализацияБюджета КАК вт_АктуализацияБюджета)
		|	И ПланПродажБюджетированияОперативный.Показатель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПоказателиПланаПродаж.ПланРеализацииШт)";
				
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ПериодДействия", ПериодОтчета);
	ПараметрыЗапроса.Вставить("Период", 		НачалоМесяца(ПериодОтчета));
	
	ТаблицаРезультатовУПН = ПолучитьТаблицуДанныхИзУПН(Ложь, ТекстЗапросаУНП, ПараметрыЗапроса);
	ПодготовитьТаблицуДанныхИзУПН(ТаблицаРезультатовУПН);
	
	ТаблицаРезультатовУПН_DS = ПолучитьТаблицуДанныхИзУПН(Истина, ТекстЗапросаУНП, ПараметрыЗапроса);
	ПодготовитьТаблицуДанныхИзУПН(ТаблицаРезультатовУПН_DS);
	
	ТаблицаРезультатов = ТаблицаРезультатовУПН.Скопировать();
	Для каждого СтрокаТаблицыDS Из ТаблицаРезультатовУПН_DS Цикл
		НоваяСтрока = ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыDS); 	
	КонецЦикла;
	
	ТекстСМС = Формат(ПериодОтчета, "ДФ=dd.MM.yyyy") + " Филиал:";
	ТекстСМС = ТекстСМС + Символы.ПС;
	
	//встречи ЖН
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоВстречЗаПериод,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_КоличествоВстречВсего
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ДатаВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
		|	И Взаимодействия.ГруппаОтветственного.Наименование В (""Филиал"", ""Отдел сопровождения сделок"")
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоПервичныхВстреч,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_КоличествоПервичныхВстреч
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ДатаВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
		|	И Взаимодействия.АктивностьВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипАктивностиВзаимодействия.Первичное)
		|	И Взаимодействия.ГруппаОтветственного.Наименование = ""Филиал""
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_КоличествоВстречВсего.Проект КАК Проект,
		|	вт_КоличествоВстречВсего.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_ВсеПроекты
		|ИЗ
		|	вт_КоличествоВстречВсего КАК вт_КоличествоВстречВсего
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_КоличествоВстречВсего.Проект,
		|	вт_КоличествоВстречВсего.ТипОбъектаНедвижимости
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	вт_КоличествоПервичныхВстреч.Проект,
		|	вт_КоличествоПервичныхВстреч.ТипОбъектаНедвижимости
		|ИЗ
		|	вт_КоличествоПервичныхВстреч КАК вт_КоличествоПервичныхВстреч
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_КоличествоПервичныхВстреч.Проект,
		|	вт_КоличествоПервичныхВстреч.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сделки.Ссылка) КАК КоличествоСделокЗаПериод,
		|	ДокументЗаявкаНаСделку.Проект КАК Проект,
		//|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Тип КАК ТипОбъектаНедвижимости
		|	ДокументЗаявкаНаСделку.ДокументОснование.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_СделкиЗаПериодОтчета
		|ИЗ
		|	Справочник.Сделки КАК Сделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку КАК ДокументЗаявкаНаСделку
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку.ОбъектыНедвижимости КАК ЗаявкаНаСделкуОбъектыНедвижимости
		|			ПО ДокументЗаявкаНаСделку.Ссылка = ЗаявкаНаСделкуОбъектыНедвижимости.Ссылка
		|		ПО Сделки.ЗаявкаНаСделку = ДокументЗаявкаНаСделку.Ссылка
		|ГДЕ
		|	Сделки.ДатаСозданияСделки МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И НЕ Сделки.ПометкаУдаления
		|	И Сделки.СтатусСделки <> ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута)
		|	И НЕ ДокументЗаявкаНаСделку.Проект ЕСТЬ NULL
		|	И ДокументЗаявкаНаСделку.Проект В
		|			(ВЫБРАТЬ
		|				вт_ВсеПроекты.Проект КАК Проект
		|			ИЗ
		|				вт_ВсеПроекты КАК вт_ВсеПроекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументЗаявкаНаСделку.Проект,
		//|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Тип
		|	ДокументЗаявкаНаСделку.ДокументОснование.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сделки.Ссылка) КАК КоличествоСделокЗаМесяц,
		|	ДокументЗаявкаНаСделку.Проект КАК Проект,
		//|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Тип КАК ТипОбъектаНедвижимости
		|	ДокументЗаявкаНаСделку.ДокументОснование.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_СделкиЗаПериодМесяц
		|ИЗ
		|	Справочник.Сделки КАК Сделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку КАК ДокументЗаявкаНаСделку
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку.ОбъектыНедвижимости КАК ЗаявкаНаСделкуОбъектыНедвижимости
		|			ПО ДокументЗаявкаНаСделку.Ссылка = ЗаявкаНаСделкуОбъектыНедвижимости.Ссылка
		|		ПО Сделки.ЗаявкаНаСделку = ДокументЗаявкаНаСделку.Ссылка
		|ГДЕ
		|	Сделки.ДатаСозданияСделки МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И НЕ Сделки.ПометкаУдаления
		|	И Сделки.СтатусСделки <> ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута)
		|	И НЕ ДокументЗаявкаНаСделку.Проект ЕСТЬ NULL
		|	И ДокументЗаявкаНаСделку.Проект В
		|			(ВЫБРАТЬ
		|				вт_ВсеПроекты.Проект КАК Проект
		|			ИЗ
		|				вт_ВсеПроекты КАК вт_ВсеПроекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументЗаявкаНаСделку.Проект,
		//|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Тип
		|	ДокументЗаявкаНаСделку.ДокументОснование.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости) КАК КоличествоЗабронированных,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец.Проект КАК Проект,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Тип КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_ЗабронированныеНаТекущийМомент
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних(&Период1, ) КАК СтатусыОбъектовНедвижимостиСрезПоследних
		|ГДЕ
		|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Забронирован)
		|	И СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец.Проект В
		|			(ВЫБРАТЬ
		|				вт_ВсеПроекты.Проект КАК Проект
		|			ИЗ
		|				вт_ВсеПроекты КАК вт_ВсеПроекты)
		|	И СтатусыОбъектовНедвижимостиСрезПоследних.Регистратор.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец.Проект,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Тип
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ВсеПроекты.Проект КАК Проект,
		|	вт_ВсеПроекты.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
		|	ЕСТЬNULL(вт_КоличествоВстречВсего.КоличествоВстречЗаПериод, 0) КАК КоличествоВстречЗаПериод,
		|	ЕСТЬNULL(вт_КоличествоПервичныхВстреч.КоличествоПервичныхВстреч, 0) КАК КоличествоПервичныхВстреч,
		|	ЕСТЬNULL(вт_СделкиЗаПериодМесяц.КоличествоСделокЗаМесяц, 0) КАК КоличествоСделокЗаМесяц,
		|	ЕСТЬNULL(вт_СделкиЗаПериодОтчета.КоличествоСделокЗаПериод, 0) КАК КоличествоСделокЗаПериод,
		|	ЕСТЬNULL(вт_ЗабронированныеНаТекущийМомент.КоличествоЗабронированных, 0) КАК КоличествоЗабронированных
		|ИЗ
		|	вт_ВсеПроекты КАК вт_ВсеПроекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КоличествоВстречВсего КАК вт_КоличествоВстречВсего
		|		ПО вт_ВсеПроекты.Проект = вт_КоличествоВстречВсего.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_КоличествоВстречВсего.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КоличествоПервичныхВстреч КАК вт_КоличествоПервичныхВстреч
		|		ПО вт_ВсеПроекты.Проект = вт_КоличествоПервичныхВстреч.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_КоличествоПервичныхВстреч.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СделкиЗаПериодОтчета КАК вт_СделкиЗаПериодОтчета
		|		ПО вт_ВсеПроекты.Проект = вт_СделкиЗаПериодОтчета.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_СделкиЗаПериодОтчета.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СделкиЗаПериодМесяц КАК вт_СделкиЗаПериодМесяц
		|		ПО вт_ВсеПроекты.Проект = вт_СделкиЗаПериодМесяц.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_СделкиЗаПериодМесяц.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЗабронированныеНаТекущийМомент КАК вт_ЗабронированныеНаТекущийМомент
		|		ПО вт_ВсеПроекты.Проект = вт_ЗабронированныеНаТекущийМомент.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_ЗабронированныеНаТекущийМомент.ТипОбъектаНедвижимости
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проект
		|ИТОГИ ПО
		|	Проект";
	
	Запрос.УстановитьПараметр("Период", ПериодОтчета);
	Запрос.УстановитьПараметр("Период1", КонецДня(ПериодОтчета) + 1);
	
	Результат = Запрос.Выполнить();
	
	//ТекстСМС = ТекстСМС + "Количество встреч по ЖН: ";
	//ТекстСМС = ТекстСМС + "Недвижимость: " + Символы.ПС;
	
	Если Результат.Пустой() Тогда
		ТекстСМС = ТекстСМС + " нет данных";
		ТекстСМС = ТекстСМС + Символы.ПС;
	Иначе
		ВыборкаПроект = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПроект.Следующий() Цикл
			
			ТекстСМС = ТекстСМС + СокрЛП(ВыборкаПроект.Проект.Наименование) + ": ";
			
			Выборка = ВыборкаПроект.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТипОбъекта = Выборка.ТипОбъектаНедвижимости;
				СделокПлан = 0;
				
				Если ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость Тогда
					ТекстСМС = ТекстСМС + "ЖН: ";
				ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток Тогда
					ТекстСМС = ТекстСМС + "ЗУ: ";
				ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.Машиноместо Тогда
					ТекстСМС = ТекстСМС + "ММ: ";
				ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость Тогда
					ТекстСМС = ТекстСМС + "КН: ";
				ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость Тогда
					ТекстСМС = ТекстСМС + "НН: ";
				Иначе
					ТекстСМС = ТекстСМС + "Прочее:";
				КонецЕсли;
				
				ОтборЖН = Новый Структура("Проект, ТипОбъектаНедвижимости", ВыборкаПроект.Проект, Выборка.ТипОбъектаНедвижимости);

				СписокСтрок = ТаблицаРезультатов.НайтиСтроки(ОтборЖН);
				Если СписокСтрок.Количество() > 0 Тогда
					Для Каждого СтрокаСписка Из СписокСтрок Цикл
						СделокПлан = СделокПлан + СтрокаСписка.Значение;
					КонецЦикла;
				Иначе
					СделокПлан = 0;
				КонецЕсли;
				
				ТекстСМС = ТекстСМС + "Сделок-" + Формат(Выборка.КоличествоСделокЗаМесяц, "ЧН=0; ЧГ=0") + "/" + СделокПлан + ", ";
				ТекстСМС = ТекстСМС + "Встреч-" + Формат(Выборка.КоличествоВстречЗаПериод, "ЧН=0; ЧГ=0") + ", ";
				ТекстСМС = ТекстСМС + "Перв.-" + Формат(Выборка.КоличествоПервичныхВстреч, "ЧН=0; ЧГ=0") + ", ";
				ТекстСМС = ТекстСМС + "Сдел.-" + Формат(Выборка.КоличествоСделокЗаПериод, "ЧН=0; ЧГ=0") + ", ";
				ТекстСМС = ТекстСМС + "Бр-" + Формат(Выборка.КоличествоЗабронированных, "ЧН=0; ЧГ=0") + ", ";
				
				//ТекстСМС = ТекстСМС + "Встреч-" + Формат(Выборка.КоличествоВстречЗаПериод, "ЧГ=0") + ", ";
				//ТекстСМС = ТекстСМС + "Сделок план-" + Формат(0, "ЧГ=0") + "; ";
				ТекстСМС = ТекстСМС + Символы.ПС;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	СформироватьДокументСообщениеSMS(СписокНомеров, ТекстСМС);
	ТекстСМС = Формат(ПериодОтчета, "ДФ=dd.MM.yyyy");
	
	//ЗУ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоВстречЗаПериод,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_КоличествоВстречВсего
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ДатаВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
		|	И Взаимодействия.ГруппаОтветственного.Наименование В (""Земля розница"", ""Центральный офис"")
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости,
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоПервичныхВстреч,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости		
		|ПОМЕСТИТЬ вт_КоличествоПервичныхВстреч
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ДатаВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
		|	И Взаимодействия.АктивностьВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипАктивностиВзаимодействия.Первичное)
		|	И Взаимодействия.ГруппаОтветственного.Наименование В (""Земля розница"")
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоПервичныхВстречЦО,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости		
		|ПОМЕСТИТЬ вт_КоличествоПервичныхВстречЦО
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ДатаВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
		|	И Взаимодействия.АктивностьВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипАктивностиВзаимодействия.Первичное)
		|	И Взаимодействия.ГруппаОтветственного.Наименование В (""Центральный офис"")
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_КоличествоВстречВсего.Проект КАК Проект,
		|	вт_КоличествоВстречВсего.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_ВсеПроекты
		|ИЗ
		|	вт_КоличествоВстречВсего КАК вт_КоличествоВстречВсего
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_КоличествоВстречВсего.Проект,
		|	вт_КоличествоВстречВсего.ТипОбъектаНедвижимости
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	вт_КоличествоПервичныхВстреч.Проект,
		|	вт_КоличествоПервичныхВстреч.ТипОбъектаНедвижимости
		|ИЗ
		|	вт_КоличествоПервичныхВстреч КАК вт_КоличествоПервичныхВстреч
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_КоличествоПервичныхВстреч.Проект,
		|	вт_КоличествоПервичныхВстреч.ТипОбъектаНедвижимости
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	вт_КоличествоПервичныхВстречЦО.Проект,
		|	вт_КоличествоПервичныхВстречЦО.ТипОбъектаНедвижимости
		|ИЗ
		|	вт_КоличествоПервичныхВстречЦО КАК вт_КоличествоПервичныхВстречЦО
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_КоличествоПервичныхВстречЦО.Проект,
		|	вт_КоличествоПервичныхВстречЦО.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сделки.Ссылка) КАК КоличествоСделокЗаМесяц,
		|	ДокументЗаявкаНаСделку.Проект КАК Проект,
		//|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Тип КАК ТипОбъектаНедвижимости
		|	ДокументЗаявкаНаСделку.ДокументОснование.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_СделкиЗаПериодМесяц
		|ИЗ
		|	Справочник.Сделки КАК Сделки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку КАК ДокументЗаявкаНаСделку
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку.ОбъектыНедвижимости КАК ЗаявкаНаСделкуОбъектыНедвижимости
		|			ПО ДокументЗаявкаНаСделку.Ссылка = ЗаявкаНаСделкуОбъектыНедвижимости.Ссылка
		|		ПО Сделки.ЗаявкаНаСделку = ДокументЗаявкаНаСделку.Ссылка
		|ГДЕ
		|	Сделки.ДатаСозданияСделки МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И НЕ Сделки.ПометкаУдаления
		|	И Сделки.СтатусСделки <> ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута)
		|	И НЕ ДокументЗаявкаНаСделку.Проект ЕСТЬ NULL
		|	И ДокументЗаявкаНаСделку.Проект В
		|			(ВЫБРАТЬ
		|				вт_ВсеПроекты.Проект КАК Проект
		|			ИЗ
		|				вт_ВсеПроекты КАК вт_ВсеПроекты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументЗаявкаНаСделку.Проект,
		//|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Тип
		|	ДокументЗаявкаНаСделку.ДокументОснование.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости) КАК КоличествоЗабронированных,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец.Проект КАК Проект,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Тип КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_ЗабронированныеНаТекущийМомент
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних(&Период1, ) КАК СтатусыОбъектовНедвижимостиСрезПоследних
		|ГДЕ
		|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Забронирован)
		|	И СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец.Проект В
		|			(ВЫБРАТЬ
		|				вт_ВсеПроекты.Проект КАК Проект
		|			ИЗ
		|				вт_ВсеПроекты КАК вт_ВсеПроекты)
		|	И СтатусыОбъектовНедвижимостиСрезПоследних.Регистратор.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Владелец.Проект,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Тип
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ вт_СоставГруппПользователейДляОтбора
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка.Родитель.Наименование = ""Земля розница""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоЗапланированныхВстреч,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ПОМЕСТИТЬ вт_КоличествоЗапланированныхВстреч
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.ПериодВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Запланировано)
		|	И (Взаимодействия.ГруппаОтветственного.Наименование В (""Земля розница"", ""Центральный офис"")
		|			ИЛИ ВЫРАЗИТЬ(Взаимодействия.Взаимодействие КАК Документ.Встреча).Автор В
		|				(ВЫБРАТЬ
		|					вт_СоставГруппПользователейДляОтбора.Пользователь КАК Пользователь
		|				ИЗ
		|					вт_СоставГруппПользователейДляОтбора КАК вт_СоставГруппПользователейДляОтбора))
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ВсеПроекты.Проект КАК Проект,
		|	вт_ВсеПроекты.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
		|	ЕСТЬNULL(вт_КоличествоВстречВсего.КоличествоВстречЗаПериод, 0) КАК КоличествоВстречЗаПериод,
		|	ЕСТЬNULL(вт_КоличествоПервичныхВстреч.КоличествоПервичныхВстреч, 0) КАК КоличествоПервичныхВстречЗУ,
		|	ЕСТЬNULL(вт_СделкиЗаПериодМесяц.КоличествоСделокЗаМесяц, 0) КАК КоличествоСделокЗаМесяц,
		|	ЕСТЬNULL(вт_ЗабронированныеНаТекущийМомент.КоличествоЗабронированных, 0) КАК КоличествоЗабронированных,
		|	ЕСТЬNULL(вт_КоличествоЗапланированныхВстреч.КоличествоЗапланированныхВстреч, 0) КАК КоличествоЗапланированныхВстреч,
		|	ЕСТЬNULL(вт_КоличествоПервичныхВстречЦО.КоличествоПервичныхВстречЦО, 0) КАК КоличествоПервичныхВстречЦО
		|ИЗ
		|	вт_ВсеПроекты КАК вт_ВсеПроекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КоличествоВстречВсего КАК вт_КоличествоВстречВсего
		|		ПО вт_ВсеПроекты.Проект = вт_КоличествоВстречВсего.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_КоличествоВстречВсего.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КоличествоПервичныхВстреч КАК вт_КоличествоПервичныхВстреч
		|		ПО вт_ВсеПроекты.Проект = вт_КоличествоПервичныхВстреч.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_КоличествоПервичныхВстреч.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СделкиЗаПериодМесяц КАК вт_СделкиЗаПериодМесяц
		|		ПО вт_ВсеПроекты.Проект = вт_СделкиЗаПериодМесяц.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_СделкиЗаПериодМесяц.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЗабронированныеНаТекущийМомент КАК вт_ЗабронированныеНаТекущийМомент
		|		ПО вт_ВсеПроекты.Проект = вт_ЗабронированныеНаТекущийМомент.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_ЗабронированныеНаТекущийМомент.ТипОбъектаНедвижимости
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КоличествоЗапланированныхВстреч КАК вт_КоличествоЗапланированныхВстреч
		|		ПО вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_КоличествоЗапланированныхВстреч.ТипОбъектаНедвижимости
		|			И вт_ВсеПроекты.Проект = вт_КоличествоЗапланированныхВстреч.Проект
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КоличествоПервичныхВстречЦО КАК вт_КоличествоПервичныхВстречЦО
		|		ПО вт_ВсеПроекты.Проект = вт_КоличествоПервичныхВстречЦО.Проект
		|			И вт_ВсеПроекты.ТипОбъектаНедвижимости = вт_КоличествоПервичныхВстречЦО.ТипОбъектаНедвижимости
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проект";
	
	Запрос.УстановитьПараметр("Период", ПериодОтчета);
	Запрос.УстановитьПараметр("Период1", КонецДня(ПериодОтчета) + 1);
	
	Результат = Запрос.Выполнить();
	
	ТекстСМС = ТекстСМС + " ЗУ:";
	ТекстСМС = ТекстСМС + Символы.ПС;
	
	Если Результат.Пустой() Тогда
		ТекстСМС = ТекстСМС + " нет данных";
	Иначе
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			
			ТекстСМС = ТекстСМС + СокрЛП(Выборка.Проект.Наименование) + ": ";
			
			СделокПлан = 0;
			
			ОтборЖН = Новый Структура("Проект, ТипОбъектаНедвижимости", Выборка.Проект, Выборка.ТипОбъектаНедвижимости);

			СписокСтрок = ТаблицаРезультатов.НайтиСтроки(ОтборЖН);
			Если СписокСтрок.Количество() > 0 Тогда
				Для Каждого СтрокаСписка Из СписокСтрок Цикл
					СделокПлан = СделокПлан + СтрокаСписка.Значение;
				КонецЦикла;
			Иначе
				СделокПлан = 0;
			КонецЕсли;
			
			ТекстСМС = ТекстСМС + "Сделок-" + Формат(Выборка.КоличествоСделокЗаМесяц, "ЧН=0; ЧГ=0") + "/" + Формат(СделокПлан, "ЧН=0; ЧГ=0") + ", ";
			
			ТекстСМС = ТекстСМС + "Встреч-" + Формат(Выборка.КоличествоВстречЗаПериод, "ЧН=0; ЧГ=0") + ", ";
			ТекстСМС = ТекстСМС + "Перв.ОПО-" + Формат(Выборка.КоличествоПервичныхВстречЗУ, "ЧН=0; ЧГ=0") + ", ";
			ТекстСМС = ТекстСМС + "Перв.ЦО-" + Формат(Выборка.КоличествоПервичныхВстречЦО, "ЧН=0; ЧГ=0") + ", ";
			ТекстСМС = ТекстСМС + "Назначено встреч ЦО-" + Формат(Выборка.КоличествоЗапланированныхВстреч, "ЧН=0; ЧГ=0") + ". ";
			ТекстСМС = ТекстСМС + "Бр.-" + Формат(Выборка.КоличествоЗабронированных, "ЧН=0; ЧГ=0") + ", ";
			ТекстСМС = ТекстСМС + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	СформироватьДокументСообщениеSMS(СписокНомеров, ТекстСМС);
	ТекстСМС = Формат(ПериодОтчета, "ДФ=dd.MM.yyyy");
	
	//Звонки
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Взаимодействия.Взаимодействие) КАК КоличествоЗвонковЗаПериодВГПТ,
		|	Взаимодействия.Проект КАК Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
		|		ПО Взаимодействия.ГруппаОтветственного = ГруппыПользователей.Ссылка
		|ГДЕ
		|	Взаимодействия.ДатаВзаимодействия МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
		|	И Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.ТелефонныйЗвонок)
		|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
		|	И Взаимодействия.АктивностьВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипАктивностиВзаимодействия.Первичное)
		|	И ЕСТЬNULL(ГруппыПользователей.Наименование, """") = ""ГПТ""
		|
		|СГРУППИРОВАТЬ ПО
		|	Взаимодействия.Проект,
		//|	Взаимодействия.ТипОбъектаНедвижимости
		|	Взаимодействия.Предмет.ТипОбъектаНедвижимости
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипОбъектаНедвижимости,
		|	Проект
		|ИТОГИ
		|	СУММА(КоличествоЗвонковЗаПериодВГПТ)
		|ПО
		|	ТипОбъектаНедвижимости";
	
	Запрос.УстановитьПараметр("Период", ПериодОтчета);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ТекстСМС = ТекстСМС + " ГПТ: нет данных";
		ТекстСМС = ТекстСМС + Символы.ПС;
	Иначе
		ТекстСМС = ТекстСМС + " ГПТ:";
		ТекстСМС = ТекстСМС + Символы.ПС;
		
		ВыборкаТипОН = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипОН.Следующий() Цикл
			ТипОбъекта = ВыборкаТипОН.ТипОбъектаНедвижимости;
			
			Если ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость Тогда
				ТекстСМС = ТекстСМС + "ЖН-" + Формат(ВыборкаТипОН.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + ": ";
			ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток Тогда
				ТекстСМС = ТекстСМС + "ЗУ-" + Формат(ВыборкаТипОН.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + ": ";
			ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.Машиноместо Тогда
				ТекстСМС = ТекстСМС + "ММ-" + Формат(ВыборкаТипОН.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + ": ";
			ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость Тогда
				ТекстСМС = ТекстСМС + "КН-" + Формат(ВыборкаТипОН.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + ": ";
			ИначеЕсли ТипОбъекта = Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость Тогда
				ТекстСМС = ТекстСМС + "НН-" + Формат(ВыборкаТипОН.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + ": ";
			Иначе
				ТекстСМС = ТекстСМС + "Прочее-" + Формат(ВыборкаТипОН.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + ": ";
			КонецЕсли;
			
			Выборка = ВыборкаТипОН.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ТекстСМС = ТекстСМС + СокрЛП(Выборка.Проект.Наименование) + "-" + Формат(Выборка.КоличествоЗвонковЗаПериодВГПТ, "ЧН=0; ЧГ=0") + "; ";
			КонецЦикла;
			ТекстСМС = ТекстСМС + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	СформироватьДокументСообщениеSMS(СписокНомеров, ТекстСМС);
	
	ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено регламентное задание рассылки ежедневного отчета по СМС за %1.'"), ПериодОтчета));
	
КонецПроцедуры

Процедура СформироватьДокументСообщениеSMS(Выгрузка, Текст);
	
	НД = Документы.СообщениеSMS.СоздатьДокумент();
	
	НД.Дата = ТекущаяДата();
	НД.Адресаты.Загрузить(Выгрузка);
	НД.Тема = "Еженедельный отчет по СМС";
	НД.ДатаКогдаОтправить = НД.Дата + 60;
	НД.ТекстСообщения = Текст;
	НД.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая;
	НД.Комментарий = "Сформирован автоматически";
	НД.Ответственный = Справочники.Пользователи.Робот;
	НД.ОтправлятьВТранслите = Ложь;
	НД.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
	
	НД.Записать();
	
КонецПроцедуры

Функция ПолучитьТаблицуДанныхИзУПН(БазаDS = Ложь, ТекстЗапросаУНП, ПараметрыЗапроса) //ВАЖНО Процедура из модуля отчета ОтчетЕжедневнаяСтатистика

	//МассивВходящихПараметров
	МассивВП = Новый Массив;
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ПутьКДанным", "ПроектУПН");    
	
	ПрограммныйКод = """Результат = Строка(Параметр.Ссылка)""";    
	СтруктураПолей.Вставить("Выражение", "ОбщегоНазначения.ВычислитьПрограммныйКод("+ПрограммныйКод+",ПроектУПН)");
	МассивВП.Добавить(СтруктураПолей);
	
	ПроксиСервер 	= Неопределено;
	ИмяСервиса 		= "RandomQuery";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, БазаDS, ИмяСервиса);	
	
	ФлагОшибки 	= Ложь;
	
	Попытка
		ДанныеXDTO = ПроксиСервер.ExecuteQuery(ТекстЗапросаУНП, СериализаторXDTO.ЗаписатьXDTO(ПараметрыЗапроса), 90, СериализаторXDTO.ЗаписатьXDTO(МассивВП));
		
		СтруктураВозврата = СериализаторXDTO.ПрочитатьXDTO(ДанныеXDTO);        
		Если НЕ СтруктураВозврата = Неопределено Тогда 
			ОписаниеОшибки     	= СтруктураВозврата.ТекстОшибки;
			ФлагОшибки        	= СтруктураВозврата.Ошибка;
		Иначе
			ФлагОшибки 	= Истина;
			Отказ 		= Истина;
		КонецЕсли;
		
	Исключение
		Результат 	= ОписаниеОшибки();
		ФлагОшибки 	= Истина;
	КонецПопытки;											
	
	Если ФлагОшибки Тогда
		
		ТекстСообщения = "Возникла ошибка при обработке выполнения произвольного запроса к базе УНП" + ?(ПустаяСтрока(ОписаниеОшибки), "", ": " + ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		Если Не ПустаяСтрока(СтруктураВозврата.РезультатЗапроса)Тогда
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXML.УстановитьСтроку(СтруктураВозврата.РезультатЗапроса);
			ХранилищеЗначенияТаблицаЗначений = ПрочитатьXML(ЧтениеXML,Тип("ХранилищеЗначения"));
			Если Не ХранилищеЗначенияТаблицаЗначений = Неопределено Тогда 
				ТаблицаРезультатов = ХранилищеЗначенияТаблицаЗначений.Получить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;

КонецФункции

Процедура ПодготовитьТаблицуДанныхИзУПН(ТаблицаРезультатов)

	ТаблицаРезультатов.Колонки.Добавить("Проект", 					Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТаблицаРезультатов.Колонки.Добавить("ТипОбъектаНедвижимости", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектовНедвижимости"));

	ТипыОбъектовНедвижимости = Новый Соответствие;
	ТипыОбъектовНедвижимости.Вставить("Продажа жилых объектов НОВЫЕ сделки", 					Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость);
	ТипыОбъектовНедвижимости.Вставить("Продажа коммерческих объектов НОВЫЕ сделки", 			Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость);
	ТипыОбъектовНедвижимости.Вставить("Продажа машиномест НОВЫЕ сделки", 						Перечисления.ВидыОбъектовНедвижимости.Машиноместо);
	ТипыОбъектовНедвижимости.Вставить("Продажа ЗУ с коммуникациями и без подряда НОВЫЕ сделки", Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток);
	
	//НаборЗаписей = РегистрыСведений.СоответствиеПроектовУПНПроектамCRM.СоздатьНаборЗаписей();
	НаборЗаписей = РегистрыСведений.СопоставлениеПроектовCRMПроектамНСИ.СоздатьНаборЗаписей();
	
	Для каждого СтрокаТЧ Из ТаблицаРезультатов Цикл
		СтрокаТЧ.ТипОбъектаНедвижимости = ТипыОбъектовНедвижимости[СтрокаТЧ.Классификатор];		
			
		НаборЗаписей.Отбор.ПроектНСИ.Установить(Справочники.ПроектыНСИ.НайтиПоНаименованию(СтрокаТЧ.ПроектУПН));
		НаборЗаписей.Прочитать(); 		
		Если НаборЗаписей.Количество() > 0 Тогда
			СтрокаТЧ.Проект = НаборЗаписей[0].ПроектCRM;
		КонецЕсли;
		//СтрокаТЧ.Проект = Справочники.Проекты.НайтиПоНаименованию(СтрокаТЧ.ПроектУПН);
	КонецЦикла;	
	
	ТаблицаРезультатов.Колонки.Удалить("Классификатор");
	ТаблицаРезультатов.Колонки.Удалить("ПроектУПН");
	
	Индекс = ТаблицаРезультатов.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		Если НЕ ЗначениеЗаполнено(ТаблицаРезультатов[Индекс].Проект)
				ИЛИ НЕ ЗначениеЗаполнено(ТаблицаРезультатов[Индекс].ТипОбъектаНедвижимости) Тогда
			ТаблицаРезультатов.Удалить(Индекс);						
		КонецЕсли;
		Индекс = Индекс - 1;
		
	КонецЦикла;		
	
КонецПроцедуры
//-- Юкаев Роман 20170205 )

#КонецОбласти

