#Область ПрограммныйИнтерфейс

Процедура РегламентноеЗаданиеПоАктуализацииСтатусовБронирования() Экспорт

	ПериодПроверки 	= ТекущаяДата();	
	
	ВыполнитьСнятиеБронирования(ПериодПроверки);
	//Корректировать документы будем на 1 секунду позже, чтобы были корректные записи в регистре "Статусы объектов недвижимости"
	ВыполнитьКорректировкуОчередиБронирования(ПериодПроверки + 1);

КонецПроцедуры

Процедура РегламентноеЗаданиеПоКорректировкеСтатусаЗапроса() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументЗаявкаНаСделку.Ссылка КАК ЗаявкаНаСделку,
	|	ДокументЗаявкаНаСделку.Дата КАК Дата,
	|	ДокументЗаявкаНаСделку.ДокументОснование КАК ДокументЗапрос,
	|	ДокументЗаявкаНаСделку.ДокументОснование.Статус КАК Статус,
	|	ДокументЗаявкаНаСделку.ДокументОснование.РасшифровкаСтатуса КАК РасшифровкаСтатуса,
	|	ДокументЗаявкаНаСделку.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ЗаявкаНаСделку КАК ДокументЗаявкаНаСделку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзменениеСтатусаСтадииЗапроса КАК ИзменениеСтатусаСтадииЗапроса
	|		ПО ДокументЗаявкаНаСделку.ДокументОснование = ИзменениеСтатусаСтадииЗапроса.Запрос
	|			И (ИзменениеСтатусаСтадииЗапроса.Стадия = ЗНАЧЕНИЕ(Перечисление.СтадииЗапроса.Сделка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСделки.СрезПоследних КАК СтатусыСделкиСрезПоследних
	|		ПО ДокументЗаявкаНаСделку.Ссылка = СтатусыСделкиСрезПоследних.ЗаявкаНаСделку
	|			И (СтатусыСделкиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.Отказ))
	|ГДЕ
	|	ИзменениеСтатусаСтадииЗапроса.Запрос ЕСТЬ NULL
	|	И НЕ СтатусыСделкиСрезПоследних.Статус ЕСТЬ NULL
	|	И ДокументЗаявкаНаСделку.Проведен
	|	И НЕ ДокументЗаявкаНаСделку.ДокументОснование.Представление ЕСТЬ NULL";


	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Период 			= Выборка.Дата;		
			НаборЗаписей 	= РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Период);
			НаборЗаписей.Отбор.Запрос.Установить(Выборка.ДокументЗапрос);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Период = Период;
			НоваяЗапись.Запрос = Выборка.ДокументЗапрос;
			
			//<792882>, Басаргин (19.03.2018) {
			Если НЕ НоваяЗапись.Стадия = Перечисления.СтадииЗапроса.Сделка Тогда
				НоваяЗапись.Статус = Перечисления.СтатусыЗапроса.Завершено;
				НоваяЗапись.РасшифровкаСтатуса = Справочники.ПричиныСтатусовЗапроса.ПустаяСсылка();
			КонецЕсли;
			//<792882> }
			
			НоваяЗапись.Стадия = Перечисления.СтадииЗапроса.Сделка;
			
			НаборЗаписей.Записать();
			
			СкорректироватьСтадиюДокументаЗапроса(Выборка.ДокументЗапрос.ПолучитьОбъект(), Перечисления.СтадииЗапроса.Сделка, Ложь);
		
		КонецЦикла;	
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сделки.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	Сделки.ЗаявкаНаСделку.ДокументОснование КАК Запрос
	|ПОМЕСТИТЬ вт_ИсходныеДанные
	|ИЗ
	|	Справочник.Сделки КАК Сделки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос КАК ДанныеДляКорректировкиСтатусовДокументаЗапрос
	|		ПО (ДанныеДляКорректировкиСтатусовДокументаЗапрос.ОснованиеДляИзмененияСтатуса = Сделки.ЗаявкаНаСделку)
	|ГДЕ
	|	Сделки.СтатусСделки = ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута)
	|	И НЕ Сделки.ПометкаУдаления
	|	И НЕ Сделки.ЗаявкаНаСделку.Представление ЕСТЬ NULL
	|	И ДанныеДляКорректировкиСтатусовДокументаЗапрос.ОснованиеДляИзмененияСтатуса ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыСделкиСрезПоследних.ЗаявкаНаСделку,
	|	СтатусыСделкиСрезПоследних.ЗаявкаНаСделку.ДокументОснование
	|ИЗ
	|	РегистрСведений.СтатусыСделки.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.Отказ)) КАК СтатусыСделкиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос КАК ДанныеДляКорректировкиСтатусовДокументаЗапрос
	|		ПО СтатусыСделкиСрезПоследних.ЗаявкаНаСделку = ДанныеДляКорректировкиСтатусовДокументаЗапрос.ОснованиеДляИзмененияСтатуса
	|ГДЕ
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.ОснованиеДляИзмененияСтатуса ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ИсходныеДанные.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	вт_ИсходныеДанные.Запрос КАК Запрос
	|ИЗ
	|	вт_ИсходныеДанные КАК вт_ИсходныеДанные";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОснованиеДляИзмененияСтатуса.Установить(Выборка.ЗаявкаНаСделку);
			НоваяЗапись 								= НаборЗаписей.Добавить();
			НоваяЗапись.ОснованиеДляИзмененияСтатуса 	= Выборка.ЗаявкаНаСделку;
			НоваяЗапись.Запрос 							= Выборка.Запрос;
			НаборЗаписей.Записать();
			
			СкорректироватьСтадиюДокументаЗапроса(Выборка.Запрос.ПолучитьОбъект(), Перечисления.СтадииЗапроса.Переговоры);
	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузкаДанныхОбУсловияхКредитования() Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствениеftpОбъектамКонфигурации.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ИмяУсловия.Установить("ВыгрузкаУсловийКредитования");
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияКредитованияСрезПоследних.Банк,
		|	УсловияКредитованияСрезПоследних.СтавкаБазовая,
		|	УсловияКредитованияСрезПоследних.СтавкаГосподдержка,
		|	УсловияКредитованияСрезПоследних.ПервоначальныйВзнос,
		|	УсловияКредитованияСрезПоследних.СрокКредитования,
		|	УсловияКредитованияСрезПоследних.ДополнительныеРасходы,
		|	УсловияКредитованияСрезПоследних.ДосрочноеПогашение,
		|	УсловияКредитованияСрезПоследних.ЛоготипБанка
		|ПОМЕСТИТЬ вт_АктуальныеУсловияКредитования
		|ИЗ
		|	РегистрСведений.УсловияКредитования.СрезПоследних(
		|			{(&Период)},
		|			Проект = &Проект
		|				И Банк.ЛатинскоеНаименование <> """") КАК УсловияКредитованияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РанжированияБанковПоПроектам.Ссылка,
		|	РанжированияБанковПоПроектам.Проект
		|ПОМЕСТИТЬ вт_АктуальныйДокументРанжировки
		|ИЗ
		|	Документ.РанжированияБанковПоПроектам КАК РанжированияБанковПоПроектам
		|ГДЕ
		|	РанжированияБанковПоПроектам.Проведен
		|	И РанжированияБанковПоПроектам.Проект = &Проект
		|	И НАЧАЛОПЕРИОДА(РанжированияБанковПоПроектам.Дата, ДЕНЬ) <= &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	РанжированияБанковПоПроектам.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_АктуальныеУсловияКредитования.Банк КАК Банк,
		|	вт_АктуальныеУсловияКредитования.СтавкаБазовая КАК СтавкаБазовая,
		|	вт_АктуальныеУсловияКредитования.СтавкаГосподдержка КАК СтавкаГосподдержка,
		|	вт_АктуальныеУсловияКредитования.ПервоначальныйВзнос КАК ПервоначальныйВзнос,
		|	вт_АктуальныеУсловияКредитования.СрокКредитования КАК СрокКредитования,
		|	вт_АктуальныеУсловияКредитования.Банк.ЛатинскоеНаименование КАК БанкЛатинскоеНаименование,
		|	РанжированияБанковПоПроектамРанжированиеБанков.Порядок КАК Порядок
		|ИЗ
		|	вт_АктуальныеУсловияКредитования КАК вт_АктуальныеУсловияКредитования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РанжированияБанковПоПроектам.РанжированиеБанков КАК РанжированияБанковПоПроектамРанжированиеБанков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_АктуальныйДокументРанжировки КАК вт_АктуальныйДокументРанжировки
		|			ПО РанжированияБанковПоПроектамРанжированиеБанков.Ссылка = вт_АктуальныйДокументРанжировки.Ссылка
		|		ПО вт_АктуальныеУсловияКредитования.Банк = РанжированияБанковПоПроектамРанжированиеБанков.Банк
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Проект", Запись.ОбъектБД);
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
				
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			АдресФайлаJSON = КаталогВременныхФайлов() + Запись.ОбъектБД.Наименование + ".json";
			
			Выборка = РезультатЗапроса.Выбрать();
			
			МассивБанков = Новый Массив;
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.ОткрытьФайл(АдресФайлаJSON,,,Новый ПараметрыЗаписиJSON(,Символы.Таб));	
			
			Пока Выборка.Следующий() Цикл
				
				СтруктураЗаписи = Новый Структура("БанкЛатинскоеНаименование, СтавкаБазовая, СтавкаГосподдержка, ПервоначальныйВзнос, СрокКредитования");
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
				МассивБанков.Добавить(СтруктураЗаписи);		
				
			КонецЦикла; 
			
			ЗаписатьJSON(ЗаписьJSON, МассивБанков);
			
			ЗаписьJSON.Закрыть();
			
			ИмяСервераFTP 		= Запись.ftp.Наименование;
			ИмяПользователяFTP 	= Запись.ftp.login;
			ПарольFTP 			= Запись.ftp.Password;
			Порт 				= 21;    
			ТекущийКаталогFTP 	= Запись.ftp.ТекущийКаталог;
			
			Сервер = Новый FTPСоединение(СокрЛП(ИмяСервераFTP),Порт, 
			СокрЛП(ИмяПользователяFTP), 
			СокрЛП(ПарольFTP),,);
			
			Попытка 
				Сервер.УстановитьТекущийКаталог(ТекущийКаталогFTP);//папка на ftp сервере в которую загружаем
			Исключение
			КонецПопытки;
			
			//СписокФайлов = Сервер.НайтиФайлы("bank_conditions.json", "*.json", истина);
			
			Сервер.Записать(АдресФайлаJSON, СокрЛП("bank_conditions.json"));			
			
		КонецЕсли; 	
		
	КонецЦикла;
	
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкорректироватьСтадиюДокументаЗапроса(ДокументЗапрос, Стадия, ОбменДаннымиЗагрузка = Истина)
	
	ЗапросОбъект 						= ДокументЗапрос;
	ЗапросОбъект.Стадия 				= Стадия;
	ЗапросОбъект.ОбменДанными.Загрузка 	= ОбменДаннымиЗагрузка;
	
	//<792882>, Басаргин (19.03.2018) {
	Если Стадия = Перечисления.СтадииЗапроса.Сделка Тогда
		ЗапросОбъект.ДополнительныеСвойства.Вставить("АвторВерсии", ЗапросОбъект.Ответственный);	
		ЗапросОбъект.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);
	КонецЕсли;
	//<792882> }
	
	Попытка
		ЗапросОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ЗаписьЖурналаРегистрации("РегламентноеЗаданиеПоКорректировкеСтатусаЗапроса", 
		УровеньЖурналаРегистрации.Ошибка, 
		Метаданные.Документы.Запрос, 
		ДокументЗапрос.Ссылка,
		"При коректировке стадии запроса произошла ошибка: " + ОписаниеОшибки());				
	КонецПопытки;		

КонецПроцедуры

Процедура ВыполнитьСнятиеБронирования(ПериодПроверки)
	
	//С истёкшим сроком бронирования. МассивОН заполняем для дальнейших действий и информирования пользователей.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости
	|ПОМЕСТИТЬ вт_СписокОНЗабронированныхНаТекущийМомент
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних КАК СтатусыОбъектовНедвижимостиСрезПоследних
	|ГДЕ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Забронирован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости.Код КАК КодОбъектаНедвижимости,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_СписокОНЗабронированныхНаТекущийМомент.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_СписокОНЗабронированныхНаТекущийМомент КАК вт_СписокОНЗабронированныхНаТекущийМомент)) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
	|ГДЕ
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДатаКонцаСрокаБронирования <= &ДатаПроверки
	|	И СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацииБронирования.Бронирование)";
	
	Запрос.УстановитьПараметр("ДатаПроверки", ПериодПроверки);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументСнятияБронирования 									= Выборка.Регистратор.Скопировать();
			ДокументСнятияБронирования.Дата								= ПериодПроверки;
			ДокументСнятияБронирования.ВидОперации 						= Перечисления.ВидыОперацииБронирования.СнятиеБронирования;
			ДокументСнятияБронирования.ОснованиеДляСнятияБронирования   = Выборка.Регистратор;
			//ДокументСнятияБронирования.ДатаКонцаСрокаБронирования 		= ПериодПроверки;
			//ДокументСнятияБронирования.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);
			
			Попытка
				ДокументСнятияБронирования.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
				ЗаписьЖурналаРегистрации("РегламентноеЗаданиеСнятиеОНСБронирования", 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.Бронирование, 
				ДокументСнятияБронирования.Ссылка,
				"При снятии с бронирования """ + Выборка.КодОбъектаНедвижимости + """ произошла ошибка: " + ОписаниеОшибки());	
			КонецПопытки;
						
		КонецЦикла;			
		
	КонецЕсли;
	
	//Для документов по ОН, который теперь находится в статусах, при которых необходимо убрать очередь бронирования.
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ вт_СписокОНЗабронированныхНаТекущийМомент
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних КАК СтатусыОбъектовНедвижимостиСрезПоследних
	|ГДЕ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Резерв), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Продан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.ПереданДольщику), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Переуступка), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.ВОформлении))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьБронированияОстатки.ДокументБронирования КАК ДокументБронирования,
	|	ОчередьБронированияОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости
	|ПОМЕСТИТЬ вт_Бронирования
	|ИЗ
	|	РегистрНакопления.ОчередьБронирования.Остатки(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_СписокОНЗабронированныхНаТекущийМомент.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_СписокОНЗабронированныхНаТекущийМомент КАК вт_СписокОНЗабронированныхНаТекущийМомент)) КАК ОчередьБронированияОстатки
	|ГДЕ
	|	ОчередьБронированияОстатки.ДокументБронирования.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацииБронирования.Бронирование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Бронирования.ДокументБронирования КАК ДокументБронирования,
	|	вт_СписокОНЗабронированныхНаТекущийМомент.Период КАК ДатаЗаявкиНаСделку,
	|	вт_СписокОНЗабронированныхНаТекущийМомент.ОбъектНедвижимости.Код КАК КодОбъектаНедвижимости
	|ИЗ
	|	вт_Бронирования КАК вт_Бронирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СписокОНЗабронированныхНаТекущийМомент КАК вт_СписокОНЗабронированныхНаТекущийМомент
	|		ПО вт_Бронирования.ОбъектНедвижимости = вт_СписокОНЗабронированныхНаТекущийМомент.ОбъектНедвижимости";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументСнятияБронирования 									= Выборка.ДокументБронирования.Скопировать();
			ДокументСнятияБронирования.Дата								= Выборка.ДатаЗаявкиНаСделку - 1;
			ДокументСнятияБронирования.ВидОперации 						= Перечисления.ВидыОперацииБронирования.СнятиеБронирования;
			ДокументСнятияБронирования.ОснованиеДляСнятияБронирования   = Выборка.ДокументБронирования;
			//ДокументСнятияБронирования.ДатаКонцаСрокаБронирования 		= ПериодПроверки;
			//ДокументСнятияБронирования.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);
			
			Попытка
				ДокументСнятияБронирования.Записать(РежимЗаписиДокумента.Проведение);	
			Исключение
				ЗаписьЖурналаРегистрации("РегламентноеЗаданиеСнятиеОНСБронирования", 
				УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Документы.Бронирование, 
				ДокументСнятияБронирования.Ссылка,
				"При снятии с бронирования (статус ""Оформление"") """ + Выборка.КодОбъектаНедвижимости + """ произошла ошибка: " + ОписаниеОшибки());	
			КонецПопытки;
			
		КонецЦикла;			
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьКорректировкуОчередиБронирования(ПериодПроверки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыНедвижимостиДляАктуализацииОчередиБронирования.ОбъектНедвижимости КАК ОбъектНедвижимости
	|ПОМЕСТИТЬ вт_СписокОН
	|ИЗ
	|	РегистрСведений.ОбъектыНедвижимостиДляАктуализацииОчередиБронирования КАК ОбъектыНедвижимостиДляАктуализацииОчередиБронирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьБронированияОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	МИНИМУМ(ОчередьБронированияОстатки.ДокументБронирования) КАК ДокументБронирования
	|ИЗ
	|	РегистрНакопления.ОчередьБронирования.Остатки(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_СписокОН.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_СписокОН КАК вт_СписокОН)) КАК ОчередьБронированияОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьБронированияОстатки.ОбъектНедвижимости";
	
	РезультатЗапроса = Запрос.Выполнить();	

	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		МассивОН = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			ДокументБронирования = Выборка.ДокументБронирования.ПолучитьОбъект();		
			
			Если ЗначениеЗаполнено(ДокументБронирования.Проект) Тогда
				ДокументБронирования.Дата							= ПериодПроверки;
				ДокументБронирования.ДлительностьСрокаБронирования 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументБронирования.Проект, "ДлительностьБронирования");
				//ДокументБронирования.ДатаНачалаСрокаБронирования 	= ПериодПроверки;
				//ДокументБронирования.ДатаКонцаСрокаБронирования 	= ПериодПроверки + 86400 * ДокументБронирования.ДлительностьСрокаБронирования;
			КонецЕсли;
			
			ДокументБронирования.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);
			
			Попытка
				ДокументБронирования.Записать(РежимЗаписиДокумента.Проведение);	
				МассивОН.Добавить(Выборка.ОбъектНедвижимости);
			Исключение
				//
			КонецПопытки;
						
		КонецЦикла;	
		
		ПараметрыФоновогоЗаданияРассылки = Новый Массив;
		ПараметрыФоновогоЗаданияРассылки.Добавить(МассивОН);
		
		ФоновыеЗадания.Выполнить("CRMРегаментныеЗадания.ВыполнитьРассылкуПисемПоРезультатамСнятияБронирования",
									ПараметрыФоновогоЗаданияРассылки,
									Новый УникальныйИдентификатор,
									"Выполнение рассылки пользователям о корректировки очереди бронирования");
		
		//ВыполнитьРассылкуПисемПоРезультатамСнятияБронирования(МассивОН);
		
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.ОбъектыНедвижимостиДляАктуализацииОчередиБронирования.СоздатьНаборЗаписей();		
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ВыполнитьРассылкуПисемПоРезультатамСнятияБронирования(МассивОН) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьБронированияОстатки.ДокументБронирования.Ответственный КАК Ответственный,
	|	ОчередьБронированияОстатки.ДокументБронирования.Проект КАК Проект,
	|	ОчередьБронированияОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ОчередьБронированияОстатки.ДокументБронирования.ДокументЗапрос КАК ДокументЗапрос,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК СозданныйДокументБронирования
	|ИЗ
	|	РегистрНакопления.ОчередьБронирования.Остатки(, ОбъектНедвижимости В (&МассивОбъектовНедвижимости)) КАК ОчередьБронированияОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(, ОбъектНедвижимости В (&МассивОбъектовНедвижимости)) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
	|		ПО ОчередьБронированияОстатки.ОбъектНедвижимости = СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости";
	
	Запрос.УстановитьПараметр("МассивОбъектовНедвижимости", МассивОН);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СистемнаяУчетнаяЗаписьEMAIL = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;			
			EMAILАдрес 					= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Ответственный, 
																										Справочники.ВидыКонтактнойИнформации.EmailПользователя);
			
			Тело = "Объект недвижимости """ + Выборка.ОбъектНедвижимости + """ по проекту """ + Выборка.Проект + """ стал доступен для бронирования!" + Символы.ПС + "
			 		|На текущий момент он автоматически забронирован следующим по очереди. Созданный документ бронирования: " + ПолучитьНавигационнуюСсылку(Выборка.СозданныйДокументБронирования) + Символы.ПС + "
					|Ссылка документа запрос: " + ПолучитьНавигационнуюСсылку(Выборка.ДокументЗапрос);
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("Кому", EMAILАдрес);
			ПараметрыСообщения.Вставить("Тема", "Объект недвижимости """ + Выборка.ОбъектНедвижимости + """ стал доступен для бронирования");
			ПараметрыСообщения.Вставить("Тело", Тело);
			
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗаписьEMAIL, ПараметрыСообщения);
			Исключение
				//ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;		
				
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

//++ Юкаев Роман 20180220 (// 
Процедура СформироватьДокумент(ТекущаяДата, КогдаОтправлять, МаркетинговоеМероприятие, Клиент, Запрос, ТекстСообщения, ПривязкаКЗапросу, ОднимДокументом, Тема = "") Экспорт
	
	ВидСообщения = НСтр("ru = 'Формирование документов СМС.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	СсылкаНаДокумент = Документы.СообщениеSMS.ПолучитьСсылку();
	
	НовыйДокумент = Документы.СообщениеSMS.СоздатьДокумент();
	НовыйДокумент.УстановитьСсылкуНового(СсылкаНадокумент);
	
	Если Не ОднимДокументом Тогда
		Если ПривязкаКЗапросу Тогда
			Если ЗначениеЗаполнено(Запрос) Тогда
			
				НС = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
				НС.Отбор.Взаимодействие.Установить(СсылкаНадокумент);
				
				Запись = НС.Добавить();
				Запись.Взаимодействие = СсылкаНаДокумент;
				Запись.Предмет = Запрос;
				
				Попытка
					НС.Записать();
				Исключение
					ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,, "Не удалось записать предмет к документу " + Строка(НовыйДокумент));
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДата;
	НовыйДокумент.Автор = Пользователи.ТекущийПользователь();
	НовыйДокумент.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовыйДокумент.ДатаКогдаОтправить = КогдаОтправлять;
	НовыйДокумент.Комментарий = "Сформирвано автоматически";
	НовыйДокумент.МаркетинговоеМероприятие = МаркетинговоеМероприятие;
	
	НовыйДокумент.Ответственный = Пользователи.ТекущийПользователь();
	НовыйДокумент.Отменено = Ложь;
	НовыйДокумент.ОтправлятьВТранслите = Ложь;
	НовыйДокумент.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
	
	НовыйДокумент.ТекстСообщения = ТекстСообщения;
	НовыйДокумент.Тема = ?(ПустаяСтрока(Тема), "Рассылка по маркетинговому мероприятию """ + МаркетинговоеМероприятие + """ от " + Строка(НовыйДокумент.Дата), Тема);
	
	СписокУчастников = "";
	
	Если ОднимДокументом Тогда
		Для Каждого СтрКлиент Из Клиент Цикл
			НоваяСтрока = НовыйДокумент.Адресаты.Добавить();
			НоваяСтрока.КакСвязаться = СокрЛП(СтрКлиент.Клиент.ОсновнойТелефон);
			НоваяСтрока.Контакт = СтрКлиент.Клиент;
			НоваяСтрока.НомерДляОтправки = НоваяСтрока.КакСвязаться;
			НоваяСтрока.ПредставлениеКонтакта = Строка(СтрКлиент.Клиент);
			НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее;
			СписокУчастников = СписокУчастников + НоваяСтрока.ПредставлениеКонтакта + ";";
		КонецЦикла;
		СписокУчастников = Лев(СписокУчастников, СтрДлина(СписокУчастников) - 1);
	Иначе
		НоваяСтрока = НовыйДокумент.Адресаты.Добавить();
		НоваяСтрока.КакСвязаться = СокрЛП(Клиент.ОсновнойТелефон);
		НоваяСтрока.Контакт = Клиент;
		НоваяСтрока.НомерДляОтправки = НоваяСтрока.КакСвязаться;
		НоваяСтрока.ПредставлениеКонтакта = Строка(Клиент);
		НоваяСтрока.СостояниеСообщения = Перечисления.СостоянияСообщенияSMS.Исходящее;
		
		СписокУчастников = Строка(Клиент);
	КонецЕсли;
	
	НовыйДокумент.СписокУчастников = СписокУчастников;
	
	Попытка
		НовыйДокумент.Записать();
	Исключение
		Если ПривязкаКЗапросу Тогда
			Если ЗначениеЗаполнено(Запрос) Тогда
				НС.Очистить();
				НС.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,, "Не удалось сформировать документ по клиенту " + Строка(Клиент) + " - " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СформироватьДокументыСМСВФоне(ПараметрыЗадания) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Если ПараметрыЗадания.ОднимДокументом Тогда
		СформироватьДокумент(ТекущаяДата, ПараметрыЗадания.Дата, ПараметрыЗадания.Мероприятие, ПараметрыЗадания.Клиенты, Неопределено, ПараметрыЗадания.Текст, ПараметрыЗадания.СЗапросом, Истина);
	Иначе
		Для Каждого Клиент Из ПараметрыЗадания.Клиенты Цикл
			СформироватьДокумент(ТекущаяДата, ПараметрыЗадания.Дата, ПараметрыЗадания.Мероприятие, Клиент.Клиент, Клиент.Запрос, ПараметрыЗадания.Текст, ПараметрыЗадания.СЗапросом, ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыЗаявкаНаЗвонокВФоне(ПараметрыЗадания) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого Клиент Из ПараметрыЗадания.Клиенты Цикл
		СформироватьЗвонкиНаСервере(ТекущаяДата, Клиент.Клиент, ПараметрыЗадания.Проект, ПараметрыЗадания.Пользователь, ПараметрыЗадания.Мероприятие, ПараметрыЗадания.Дата, ПараметрыЗадания.СЗапросом, Клиент.Запрос);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗвонкиНаСервере(ТекущаяДата, Клиент, Проект, Пользователь, Мероприятие, Дата, ПривязкаКЗапросу, Запрос)
	
	ВидСообщения = НСтр("ru = 'Формирование документов ЗаявкаНаЗвонок.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	НовыйДокумент = Документы.ЗаявкаНаЗвонок.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяДата;
	НовыйДокумент.Контакт = Клиент;
	НовыйДокумент.Проект = Проект;
	НовыйДокумент.МаркетинговоеМероприятие = Мероприятие;
	НовыйДокумент.Автор = Пользователь;

	НовыйДокумент.ДатаРаспределения = Дата; 
	
	НовыйДокумент.ТипВызова = Перечисления.ТипыВызовов.УстнаяЗаявка;
	НовыйДокумент.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
	НовыйДокумент.ГруппаРаспределения = Перечисления.ГруппыРаспределенияЗаявок.ГПТ;
	НовыйДокумент.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;
	НовыйДокумент.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет4;
	
	//<789123>, Басаргин (28.03.2018) {
	НовыйДокумент.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.МассовыйОбзвонКлиентов;	
	НовыйДокумент.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
	НовыйДокумент.ДеньОбработки = 1;
	//<789123> }
	
	Если ПривязкаКЗапросу Тогда
		Если ЗначениеЗаполнено(Запрос) Тогда
			НовыйДокумент.ПредметВзаимодействия = Запрос;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		НовыйДокумент.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,, "Не удалось сформировать документ по клиенту " + Клиент + " - " + ОписаниеОшибки());
		//Сообщить("Не удалось сформировать документ по клиенту " + СтрКлиент.Клиент + " - " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

//-- Юкаев Роман 20180220 )

#КонецОбласти