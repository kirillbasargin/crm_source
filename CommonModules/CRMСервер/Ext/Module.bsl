
#Область СлужебныйПрограммныйИнтерфейс

// Процедура инициализирует параметр сеанса ЭтоПервыйЗапуск
//
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	//EXTCODE Шумилин Сергей 23.03.2017 {{ ---> В целях отладки RLS
	//ПараметрыСеанса.ОтладкаЗапросовRLS  = Документы.ЗапланированноеВзаимодействие.ПолучитьСсылку(Новый УникальныйИдентификатор("f54f2bad-0fad-11e7-922d-78e3b506986f"));
	ПараметрыСеанса.ПроверяющийЗаданияПользователь = Константы.ПроверяющийПользователь.Получить();
	//EXTCODE Шумилин Сергей 23.03.2017 <--- }}                                                          
	
КонецПроцедуры //УстановкаПараметровСеанса_ЭтоПервыйЗапуск()

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииУсловногоОформления

// Процедура устанавливает условное оформление в динамических списках
// для колонки "Дата"
//
Процедура УстановитьОформлениеКолонкиДата(ДинСписок) Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата"
			ИЛИ ЭлементУсловногоОформления.Представление = "Формат поля Дата (сегодня - только время)" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементОформления = ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "Формат поля Дата (сегодня - только время)";
	ЭлементОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата";
	
	ЭлементОформления.Использование = Истина;
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=Ч:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	
КонецПроцедуры // УстановитьОформлениеКолонкиДата()

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияШапкиДокумента

// Устарела. Следует использовать Объект.Заполнить(ДанныеЗаполнения)
Процедура ЗаполнитьШапкуДокумента(Объект,
	ВидОперации = "",
	ПараметрЗначениеКопирования = Неопределено,
	ПараметрОснование = Неопределено,
	РазрешеноПроведение = Неопределено,
	ДанныеЗаполнения = Неопределено) Экспорт
	
	Объект.Заполнить(ДанныеЗаполнения);
	
КонецПроцедуры

// Функция возвращает предопределенную организацию.
//
Функция ПолучитьПредопределеннуюОрганизацию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе	
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции // ПолучитьПредопределеннуюОрганизацию()	

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

//EXTCODE Шумилин Сергей 13.12.2017 {{ --->
Процедура ПодключитьсяКСервису(Сервис, ПроектБазыДомостроителя, ИмяСервиса) Экспорт
	
    УстановитьПривилегированныйРежим(Истина);
    СтруктураПароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("СтандартныеПодсистемы.УправлениеДоступом", "ИмяПользователяУПНДляWebСервисов, ПарольПользователяУПНДляWebСервисов");
    УстановитьПривилегированныйРежим(Ложь);
	
	ИмяПользователя		= СтруктураПароли.ИмяПользователяУПНДляWebСервисов;
	ПарольПользователя	= СтруктураПароли.ПарольПользователяУПНДляWebСервисов;
	
	//Если ПроектБазыДомостроителя Тогда
	// 	АдресСервиса		= Константы.АдресСервисаМК_УПН.Получить() + MKService.1cws?wsdl;//"http://mosrlusql03/KE_UPN_DS_ostatki/ws/MKService.1cws?wsdl";
	//Иначе	
	//	АдресСервиса		= Константы.АдресСервисаМК_УПН_DS.Получить();//"http://mosrlusql03.absgroup.ru/UPN_test_exchange/ws/MKService.1cws?wsdl";//"http://mosrlusql03.absgroup.ru/UPN_TEST_REMNEV_UO/ws/MKService.1cws?wsdl";//"http://mosrlu1c01/WebUPN/ws/ReportCRM.1cws?wsdl";//"http://mosrlu1c01/WebUPN/ws/ReportCRM.1cws?wsdl";	
	//КонецЕсли;
	
	Если ПроектБазыДомостроителя <> Неопределено И ПроектБазыДомостроителя Тогда 	
		АдресСервиса = Константы.АдресСервисаМК_УПН_DS.Получить() + ИмяСервиса + ".1cws?wsdl"; //Тест 
	Иначе 
		АдресСервиса = Константы.АдресСервисаМК_УПН.Получить() + ИмяСервиса + ".1cws?wsdl"; //Тест
	КонецЕсли;
	
	
    Определение 		= Новый WSОпределения(АдресСервиса, ИмяПользователя, ПарольПользователя);
	Сервис 				= Новый WSПрокси(Определение, "http://v8.1c.ru/8.1/data/core", ИмяСервиса, ИмяСервиса + "Soap");
	Сервис.Пользователь = ИмяПользователя;
	Сервис.Пароль		= ПарольПользователя; 
	
КонецПроцедуры
//EXTCODE Шумилин Сергей 13.12.2017 <--- }} 

//EXTCODE Шумилин Сергей 07.12.2017 {{ --->
Процедура ПослеЗаписиВзаимодействияНаСервере(ТекущийОбъект, ФормаВзаимодействия, ПараметрыЗаписи) Экспорт	
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("Отказ") И НЕ ТекущийОбъект.ДополнительныеСвойства.Отказ Тогда
		
		РегистрыСведений.Взаимодействия.ЗаписатьВзаимодействие(ТекущийОбъект);
		
		//Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.Встреча") ИЛИ ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		//	Если ФормаВзаимодействия.Рассмотрено Тогда  
		//		РегистрыСведений.Взаимодействия.ОбработатьЗаявкуПоВзаимодействию(ТекущийОбъект.Ссылка, ТекущийОбъект.Ответственный);
		//	КонецЕсли;
		//	Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда  
		//		УправлениеТелефониейСервер.УстановитьКонтактЗвонкаИзВзаимодействия(ТекущийОбъект.Ссылка);
		//	КонецЕсли;
		//КонецЕсли;
		//Если ТекущийОбъект.Отменено Тогда
		//	РегистрыСведений.Взаимодействия.ОтменитьЗаявкуПоВзаимодействию(ТекущийОбъект.Ссылка, ТекущийОбъект.Ответственный);		
		//КонецЕсли;
		
		//УправлениеЗаявкамиНаЗвонок.ОбработкаЗаявкиНаЗвонокПриЗаписиВзаимодействия(ТекущийОбъект); //Вынесено в РегистрыСведений.Взаимодействия.ЗаписатьВзаимодействие()
		
	КонецЕсли;
		
	ПараметрыЗаписи.Вставить("ИзменилсяПризнакРассмотрено", ФормаВзаимодействия.АБ_ИзменилсяПризнакРассмотрено);
	ПараметрыЗаписи.Вставить("РольМенеджерФилиала",			УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , Пользователи.ТекущийПользователь()));
	СписокКлиентов = Новый СписокЗначений;
	Если ТипЗнч(ФормаВзаимодействия.Предмет) = Тип("ДокументСсылка.Запрос") И ЗначениеЗаполнено(ФормаВзаимодействия.Предмет) Тогда
		СтрПараметрыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФормаВзаимодействия.Предмет, "Статус,Участники");
		ПараметрыЗаписи.Вставить("СтатусЗапроса", СтрПараметрыЗапроса.Статус); 
		ВыборкаУчастники = СтрПараметрыЗапроса.Участники.Выбрать();
		Пока ВыборкаУчастники.Следующий() Цикл
			СписокКлиентов.Добавить(ВыборкаУчастники.Клиент,,ВыборкаУчастники.Основной);		
		КонецЦикла;
	Иначе
		ПараметрыЗаписи.Вставить("СтатусЗапроса", Перечисления.СтатусыЗапроса.ПустаяСсылка());
	КонецЕсли;
	ПараметрыЗаписи.Вставить("МассивКлиентов", СписокКлиентов);

КонецПроцедуры

//EXTCODE Шумилин Сергей 07.12.2017 <--- }} 

//<789123>, Басаргин (14.03.2018) {
Процедура ПередЗаписьюВзаимодействияНаСервере(ТекущийОбъект, ФормаВзаимодействия = Неопределено, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(ТекущийОбъект.Ссылка);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекущийСтатус", РегистрыСведений.Взаимодействия.ПолучитьТекущийСтатусВзаимодействия(ТекущийОбъект.Ссылка, СтруктураРеквизитов));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекущееРассмотретьПосле", СтруктураРеквизитов.РассмотретьПосле);	
	
КонецПроцедуры
//<789123> }

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ОбъектСОшибкой, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь, МассивСообщений = Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		// Платформа 8.2.15
		
	Иначе
		
		Если ИмяТабличнойЧасти <> Неопределено Тогда
			Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
		ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
			Сообщение.Поле = Поле;
		КонецЕсли;
		
		Сообщение.УстановитьДанные(ОбъектСОшибкой);
		
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
	// Розница.ОтрицательныеОстатки
	Если МассивСообщений <> Неопределено Тогда
		МассивСообщений.Добавить(Новый Структура("Текст, Поле", Сообщение.Текст, Сообщение.Поле));
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибке()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокументаПоСсылке(ИмяРеквизита, СсылкаНаДокумент) Экспорт

	МетаданныеДокумента = СсылкаНаДокумент.Метаданные();
	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - УправляемаяФорма, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Функция возвращает связанных Сотрудников пользователя для переданной записи
//
// Пользователь - (Справочник.Пользователи) Пользователь, для которого получаем таблицы значений с записями
//
Функция ПолучитьСотрудниковПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПользователя.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
		|ГДЕ
		|	СотрудникиПользователя.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиПользователя.Сотрудник.Наименование";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат Результат;
	
КонецФункции // ПолучитьСотрудниковПользователя()

// Процедура устанавливает условное оформление.
//
Процедура ВыделитьЖирнымОсновнойЭлемент(ВыбранныйЭлемент, Список, ИмяНастройки = "ОсновнойЭлемент") Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыбранныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВыбранныйЭлемент;
	
	ШрифтВыделения = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтВыделения);
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяНастройки;
	ЭлементУсловногоОформления.Представление = "Выделение основного элемента";
	
КонецПроцедуры

// Функция получает наибольший общий делитель двух чисел.
//
Функция ПолучитьНОД(а, б)
	
	Возврат ?(б = 0, а, ПолучитьНОД(б, а % б));
	
КонецФункции // ПолучитьНОД()

// Функция получает наибольший общий делитель для массива.
//
Функция ПолучитьНОДДляМассива(МассивЧисел, Кратность) Экспорт
	
	Если МассивЧисел.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	НОД = МассивЧисел[0] * Кратность;
	
	Для каждого Сч Из МассивЧисел Цикл
		НОД = ПолучитьНОД(НОД, Сч * Кратность);
	КонецЦикла;
	
	Возврат НОД;
	
КонецФункции // ПолучитьНОДДляМассива()

// Функция проверяет установлен ли пользователю профиль.
//
Функция ПользователюУстановленПрофиль(Пользователь = Неопределено, ИдентификаторПрофиля = "", Профиль = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;

	Если Профиль = Неопределено Тогда
		Профиль = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторПрофиля));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Профиль", Профиль);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	(НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь
	|	И (ГруппыДоступаПользователи.Ссылка.Профиль = &Профиль
	|			ИЛИ ГруппыДоступаПользователи.Ссылка.Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПользователюУстановленПрофиль()

// Функция проверяет административные права пользователей
//
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	// Используется как замена:
	// УправлениеНебольшойФирмойСервер.ПользователюУстановленПрофиль(, , ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор"))
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь, ПроверятьПраваАдминистрированияСистемы, УчитыватьПривилегированныйРежим);
	
КонецФункции //ЭтоПолноправныйПользователь()

// Процедура добавляет значения структуры в список значений
//
// СписокЗначений - список значений, в который будут добавлены значения структуры;
// СтруктураСоЗначениями - структура значения которой будут добавлены в список значений;
// ДобавлятьДубликаты - флаг, который регулирует добавление 
//
Процедура ЗначенияСтруктурыВСписокЗначений(СписокЗначений, СтруктураСоЗначениями, ДобавлятьДубликаты = Ложь) Экспорт
	
	Для каждого ЭлементСтруктуры Из СтруктураСоЗначениями Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСтруктуры.Значение) ИЛИ 
			(НЕ ДобавлятьДубликаты И НЕ СписокЗначений.НайтиПоЗначению(ЭлементСтруктуры.Значение) = Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокЗначений.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры // ЗначенияСтруктурыВСписокЗначений()

// По указанному контрагенту получает контактные лица этого контрагента
//
Функция ПолучитьКонтактныеЛицаКонтрагента(Контрагент) Экспорт
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	Запрос = Новый Запрос("Выбрать * Из Справочник.КонтактныеЛица Как КонтактныеЛица Где КонтактныеЛица.Владелец = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СписокКонтактныхЛиц.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СписокКонтактныхЛиц;
	
КонецФункции // ПолучитьКонтактныеЛицаКонтрагента()

// Подписка на события при копировании документа.
//
Процедура ПриКопированииОбъекта(Источник) Экспорт
	
	Если НЕ ПустаяСтрока(Источник.Комментарий) Тогда
		Источник.Комментарий = "";
	КонецЕсли;
	
КонецПроцедуры // ПриКопированииОбъекта()

// Получает текст разделителя для формирования пакетного запроса.
//
Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

// Возвращает массив заказов, полученных из указанных документов
Функция МассивЗаказов(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктВыполненныхРаботРаботыИУслуги.ЗаказПокупателя КАК Заказ
	|ПОМЕСТИТЬ Вт_Заказы
	|ИЗ
	|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
	|ГДЕ
	|	АктВыполненныхРаботРаботыИУслуги.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервированиеЗапасов.ЗаказПокупателя
	|ИЗ
	|	Документ.РезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	РезервированиеЗапасов.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Заказ
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетПереработчика.ДокументОснование
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|ГДЕ
	|	ОтчетПереработчика.Ссылка В(&МассивДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вт_Заказы.Заказ
	|ИЗ
	|	Вт_Заказы КАК Вт_Заказы");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ") Цикл
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",", Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Функция - Ссылка на двоичные данные файла.
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка - ссылка на справочник с именем "*ПрисоединенныеФайлы".
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, который
//                       используется при получении двоичных данных файла.
// 
// Возвращаемое значение:
//   - Строка - адрес во временном хранилище; 
//   - Неопределено, если не удалось получить данные.
//
Функция СсылкаНаДвоичныеДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции // СсылкаНаДвоичныеДанныеФайла()

// Функция возвращает двоичные данные используя API БСП.
//
// Назначение функции:
//  проглот ВызватьИсключение, рекомендуется использовать в тех случаях,
//  когда отсутствие файла не должно блокировать работу систему. 
//
//  Например, если нет данных картинки для номенклатуры, 
//  Формирование прайс-листа останавливаться не должно.
//
Функция ПолучитьДвоичныеДанныеФайла(ФайлКартинки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Возврат ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ФайлКартинки);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ПолучитьДвоичныеДанныеФайла()

//EXTCODE Шумилин Сергей 07.06.2017 {{ --->
// См. ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаДляОбъектаВзаимодействия(Объект, Таблица) Экспорт
	
	// Логика ограничения следующая: объект доступен если доступен  "Автор" или "Ответственный".
	// Логика "ИЛИ" реализуется через различные номера наборов.
	
	НомерНабора = 1;
	
	СтрокаТаб 					= Таблица.Добавить();
	СтрокаТаб.НомерНабора     	= НомерНабора;
	СтрокаТаб.ЗначениеДоступа 	= Объект.Автор;
	
	// Ограничение по "Ответственный".
	Если ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
		|	И СоставыГруппПользователей.Используется";
		Запрос.УстановитьПараметр("ГруппаПользователей", Объект.Ответственный);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НомерНабора = НомерНабора + 1;
				
				СтрокаТаб 					= Таблица.Добавить();
				СтрокаТаб.НомерНабора     	= НомерНабора;
				СтрокаТаб.ЗначениеДоступа 	= Выборка.Пользователь;					
			
			КонецЦикла;
			
		КонецЕсли;
			
	Иначе
		
		НомерНабора = НомерНабора + 1;
		
		СтрокаТаб 					= Таблица.Добавить();
		СтрокаТаб.НомерНабора     	= НомерНабора;
		СтрокаТаб.ЗначениеДоступа 	= Объект.Ответственный;			
	
	КонецЕсли;
	
КонецПроцедуры
//EXTCODE Шумилин Сергей 07.06.2017 <--- }} 

//EXTCODE Шумилин Сергей 08.06.2017 {{ --->
Функция ПроверитьВозможностьРедактированияДокументовВзаимодействия(Автор, Ответственный) Экспорт

	ТекПользователь = Пользователи.ТекущийПользователь();
	
	Если Автор = ТекПользователь Тогда	
		Возврат Истина;			
	КонецЕсли;
	
	// Ограничение по "Ответственный".
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
		|	И СоставыГруппПользователей.Используется";
		Запрос.УстановитьПараметр("ГруппаПользователей", Ответственный);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			//Можно обратиться через точку, у групп пользователь всего один реквизит
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Пользователь = ТекПользователь Тогда	
					Возврат Истина;			
				КонецЕсли;			
				
			КонецЦикла;
		
		КонецЕсли;
		
	Иначе
		
		Если Ответственный = ТекПользователь Тогда	
			Возврат Истина;			
		КонецЕсли;		
	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//EXTCODE Шумилин Сергей 08.06.2017 <--- }} 

//EXTCODE Шумилин Сергей 27.09.2017 {{ --->
Функция НаличиеДокументаВзаимодействияТелефонныйЗвонок(Знач ДокументЗапрос, Знач Клиент, Знач Телефония_ID_Звонка = "") Экспорт

	//Проверяем, если из телефонии запрос открыт, то есть ли уже по этому ID зарегистрированный звонок
	Если НЕ ПустаяСтрока(Телефония_ID_Звонка) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЗапросовЗвонкам.ДатаСвязи КАК ДатаСвязи,
		|	СоответствиеЗапросовЗвонкам.Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
		|ГДЕ
		|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
		|	И СоответствиеЗапросовЗвонкам.ID_Звонка = &ID_Звонка
		|	И НЕ СоответствиеЗапросовЗвонкам.Взаимодействие = ЗНАЧЕНИЕ(Документ.ТелефонныйЗвонок.ПустаяСсылка)";
		Запрос.УстановитьПараметр("Запрос", 	ДокументЗапрос);
		Запрос.УстановитьПараметр("ID_Звонка", 	Телефония_ID_Звонка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат ОбработатьРезультатВозвратаПоПоискуДокументовВзаимодействия(РезультатЗапроса);
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ТелефонныйЗвонок.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Рассмотрено
	|	И ТелефонныйЗвонок.ДатаОкончания МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И ТелефонныйЗвонок.АбонентКонтакт = &АбонентКонтакт
	|	И ТелефонныйЗвонок.Ответственный = &Менеджер
	|	И НЕ ТелефонныйЗвонок.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Предмет", 		ДокументЗапрос);
	Запрос.УстановитьПараметр("АбонентКонтакт", Клиент);
	Запрос.УстановитьПараметр("Менеджер", 		ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбработатьРезультатВозвратаПоПоискуДокументовВзаимодействия(РезультатЗапроса);
	
КонецФункции

Функция НаличиеДокументаВзаимодействияВстреча(Знач ДокументЗапрос, Знач Клиент) Экспорт

	Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
    |ИЗ
    |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Встреча.Участники КАК ВстречаУчастники
    |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ВстречаУчастники.Ссылка
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Встреча КАК Встреча
    |		ПО (ВстречаУчастники.Ссылка = Встреча.Ссылка)
    |ГДЕ
    |	ПредметыПапкиВзаимодействий.Рассмотрено
    |	И Встреча.ДатаОкончания МЕЖДУ &НачалоПериода И &КонецПериода
    |	И ПредметыПапкиВзаимодействий.Предмет = &Предмет
    |	И ВстречаУчастники.Контакт = &АбонентКонтакт
    |	И Встреча.Ответственный = &Менеджер
    |	И НЕ Встреча.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Предмет", 		ДокументЗапрос);
	Запрос.УстановитьПараметр("АбонентКонтакт", Клиент);
	Запрос.УстановитьПараметр("Менеджер", 		ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбработатьРезультатВозвратаПоПоискуДокументовВзаимодействия(РезультатЗапроса);	

КонецФункции

Функция НаличиеЗапланированногоДокументаТелефонногоЗвонка(Знач ДокументЗапрос, Знач Клиент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_ГруппыПользователя
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
	|		ПО ГруппыПользователейСостав.Ссылка = ГруппыПользователей.Ссылка
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Менеджер
	|	И НЕ ГруппыПользователей.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ вт_СоставГруппПользователей
	|ИЗ
	|	вт_ГруппыПользователя КАК вт_ГруппыПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО вт_ГруппыПользователя.Ссылка = ГруппыПользователейСостав.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ТелефонныйЗвонок.Ссылка
	|ГДЕ
	|	НЕ ПредметыПапкиВзаимодействий.Рассмотрено
	|	И НЕ ПредметыПапкиВзаимодействий.Взаимодействие.Отменено	
	//|	И ТелефонныйЗвонок.АбонентКонтакт = &АбонентКонтакт
	|	И ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И (ТелефонныйЗвонок.Ответственный В
	|				(ВЫБРАТЬ
	|					вт_ГруппыПользователя.Ссылка КАК Ссылка
	|				ИЗ
	|					вт_ГруппыПользователя КАК вт_ГруппыПользователя)
	|			ИЛИ ТелефонныйЗвонок.Ответственный В
	|				(ВЫБРАТЬ
	|					вт_СоставГруппПользователей.Пользователь КАК Пользователь
	|				ИЗ
	|					вт_СоставГруппПользователей КАК вт_СоставГруппПользователей)
	|			ИЛИ ТелефонныйЗвонок.Ответственный = &Менеджер)
	|	И НЕ ТелефонныйЗвонок.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Предмет", 		ДокументЗапрос);
	//Запрос.УстановитьПараметр("АбонентКонтакт", Клиент);
	Запрос.УстановитьПараметр("Менеджер", 		ПользователиКлиентСервер.ТекущийПользователь());
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ОбработатьРезультатВозвратаПоПоискуДокументовВзаимодействия(РезультатЗапроса);

КонецФункции 

Функция НаличиеЗапланированногоДокументаВстреча(Знач ДокументЗапрос, Знач Клиент) Экспорт
 		
	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_ГруппыПользователя
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей КАК ГруппыПользователей
	|		ПО ГруппыПользователейСостав.Ссылка = ГруппыПользователей.Ссылка
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Менеджер
	|	И НЕ ГруппыПользователей.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ вт_СоставГруппПользователей
	|ИЗ
	|	вт_ГруппыПользователя КАК вт_ГруппыПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО вт_ГруппыПользователя.Ссылка = ГруппыПользователейСостав.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Встреча.Участники КАК ВстречаУчастники
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ВстречаУчастники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Встреча КАК Встреча
	|		ПО (ВстречаУчастники.Ссылка = Встреча.Ссылка)
	|ГДЕ
	|	НЕ ПредметыПапкиВзаимодействий.Рассмотрено
	|	И НЕ ПредметыПапкиВзаимодействий.Взаимодействие.Отменено
	|	И ПредметыПапкиВзаимодействий.Предмет = &Предмет
	//|	И ВстречаУчастники.Контакт = &АбонентКонтакт
	|	И (Встреча.Ответственный В
	|				(ВЫБРАТЬ
	|					вт_ГруппыПользователя.Ссылка КАК Ссылка
	|				ИЗ
	|					вт_ГруппыПользователя КАК вт_ГруппыПользователя)
	|			ИЛИ Встреча.Ответственный В
	|				(ВЫБРАТЬ
	|					вт_СоставГруппПользователей.Пользователь КАК Пользователь
	|				ИЗ
	|					вт_СоставГруппПользователей КАК вт_СоставГруппПользователей)
	|			ИЛИ Встреча.Ответственный = &Менеджер)
	|	И НЕ Встреча.ПометкаУдаления";	
			
	Запрос.УстановитьПараметр("Предмет", 		ДокументЗапрос);
	//Запрос.УстановитьПараметр("АбонентКонтакт", Клиент);
	Запрос.УстановитьПараметр("Менеджер", 		ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Возврат ОбработатьРезультатВозвратаПоПоискуДокументовВзаимодействия(РезультатЗапроса);

КонецФункции 

Функция ОбработатьРезультатВозвратаПоПоискуДокументовВзаимодействия(РезультатЗапроса)
	
	Результат = Новый Структура("Результат, ДокументВзаимодействие", Ложь, Неопределено);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		Результат.Результат = Истина;
		
		Выборка 							= РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.ДокументВзаимодействие 	= Выборка.Взаимодействие;
		
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Процедура СкорректироватьДвиженияПоСтадииСтатусуЗапроса(Знач ДокументЗапрос, Знач ДокументВзаимодействие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Период КАК Период,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Запрос КАК Запрос,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Стадия КАК Стадия,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Статус КАК Статус,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.РасшифровкаСтатуса КАК РасшифровкаСтатуса,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.ДокументВзаимодействия КАК ДокументВзаимодействия,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ИзменениеСтатусаСтадииЗапроса.СрезПоследних(, Запрос = &Запрос) КАК ИзменениеСтатусаСтадииЗапросаСрезПоследних
	|ГДЕ
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.ДокументВзаимодействия = НЕОПРЕДЕЛЕНО
	|	И ИзменениеСтатусаСтадииЗапросаСрезПоследних.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("Запрос", 		ДокументЗапрос);
	Запрос.УстановитьПараметр("Ответственный", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВзаимодействие, "Ответственный"));	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Запрос.Установить(Выборка.Запрос);
		
		НаборЗаписей.Прочитать();
		
		НаборЗаписей[0].ДокументВзаимодействия = ДокументВзаимодействие;		
		НаборЗаписей.Записать();
	
	КонецЕсли;
		
КонецПроцедуры

Процедура СкорректироватьКонтактнуюИнформациюВСМС(ВзаимодействиеСМС) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Ссылка,
	|	Клиенты.ОсновнойТелефон КАК ОсновнойТелефон
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка В(&Адресаты)";
	Запрос.УстановитьПараметр("Адресаты", ВзаимодействиеСМС.Адресаты.ВыгрузитьКолонку("Контакт"));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = ВзаимодействиеСМС.Адресаты.Найти(Выборка.Ссылка);
			Если СтрокаТЧ <> Неопределено Тогда
				СтрокаТЧ.КакСвязаться 		= Выборка.ОсновнойТелефон;
				СтрокаТЧ.НомерДляОтправки 	= Выборка.ОсновнойТелефон;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//EXTCODE Шумилин Сергей 27.09.2017 <--- }} 

//EXTCODE Шумилин Сергей 18.09.2017 {{ --->
// Мутабельные значения

Функция СериализоватьМутабельныеЗначения (пМутабельныеЗначения) Экспорт 
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(пМутабельныеЗначения, Новый СжатиеДанных(9)), НазначениеТипаXML.Явное);
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // СериализоватьМутабельныеЗначения()

Функция  ДесериализоватьМутабельныеЗначения(пМутабельныеЗначения) Экспорт 
		
	Если Не ПустаяСтрока(пМутабельныеЗначения)Тогда
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(пМутабельныеЗначения);
		ХранилищеЗначенияТаблицаЗначений  = ПрочитатьXML(ЧтениеXML,Тип("ХранилищеЗначения"));
		Если Не ХранилищеЗначенияТаблицаЗначений = Неопределено Тогда 
			Возврат ХранилищеЗначенияТаблицаЗначений.Получить();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ДесериализоватьпМутабельныеЗначения()

//EXTCODE Шумилин Сергей 18.09.2017 <--- }} 

//EXTCODE Шумилин Сергей 22.09.2017 {{ ---> Из последней версии БСП процедуры были убраны

////////////////////////////////////////////////////////////////////////////////
// Условное оформление управляемой формы.

// Формирует структуру, описывающую элемент условного оформления.
//   Используется перед вызовом ДобавитьЭлементУсловногоОформления().
//
// Возвращаемое значение:
//   Структура - Шаблон, описывающий элемент условного оформления.
//       Подробнее см. значение 2го параметра функции ДобавитьЭлементУсловногоОформления().
//
Функция ИнструкцияУсловногоОформления() Экспорт
	Возврат Новый Структура("Отборы, Оформление, Поля", Новый Соответствие, Новый Соответствие, "");
КонецФункции

// Добавляет элемент условного оформления в форму согласно его описанию в параметре Инструкция.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которую необходимо добавить условное оформление.
//   Инструкция - Структура - Описание элемента условного оформления.
//       * Поля - Строка - Имена элементов формы, разделенные запятыми, для которых применяется оформление.
//           Например: "Поле1, Поле2".
//       * Отборы - Соответствие - Фильтр для применения этого оформления.
//           ** Ключ - Строка - Полное имя реквизита формы, по которому выполняется отбор условного оформления.
//           ** Значение - Произвольный - Значение условного оформления.
//               - Произвольный, кроме указанных ниже -
//                   Используется для условия "Равно".
//                   В ПравоеЗначение записывается значение Значение,
//                   а в ВидСравнения устанавливается ВидСравненияКомпоновкиДанных.Равно.
//               - Массив - 
//                   Используется для условия "В списке".
//                   В ПравоеЗначение записывается Значение (массив),
//                   а в ВидСравнения записывается ВидСравненияКомпоновкиДанных.ВСписке.
//               - ВидСравненияКомпоновкиДанных - 
//                   Используется для установки условия без значения (например, ВидСравненияКомпоновкиДанных.Заполнено).
//                   В ПравоеЗначение ничего не записывается,
//                   а в ВидСравнения записывается Значение.
//               - Структура - Используется во всех остальных случаях.
//                   *** Вид - Имя ключа системного перечисления "ВидСравненияКомпоновкиДанных".
//                   *** Значение - Значение, которое будет записано в правое значение.
//                   В ПравоеЗначение записывается Структура.Значение,
//                   а в ВидСравнения записывается ВидСравненияКомпоновкиДанных[Структура.Вид].
//       * Оформление - Соответствие - Как оформлять указанные поля.
//           ** Ключ - Строка - Имя параметра оформления компоновки данных.
//           ** Значение - Произвольный - Значение параметра.
//           Имена параметров и их значения см. в синтакс-помощнике: "ОформлениеКомпоновкиДанных", блок "Описание".
//
// Например:
//   
//   Пример № 1 - подсветка строк серым цветом (таблица называется "ВариантыОтчета").
//	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
//	Инструкция.Поля = "ВариантыОтчета, ВариантыОтчетаНаименование";
//	Инструкция.Отборы.Вставить("ВариантыОтчета.Пользовательский", Ложь);
//	Инструкция.Оформление.Вставить("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
//	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
//   
//   Пример № 2 - скрытие строк дерева (таблица называется "ДеревоВариантовОтчета").
//	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
//	Инструкция.Поля = "ДеревоВариантовОтчета, ДеревоВариантовОтчетаПредставление, ДеревоВариантовОтчетаАвтор";
//	Инструкция.Отборы.Вставить("ДеревоВариантовОтчета.СкрытОтбором", Истина);
//	Инструкция.Оформление.Вставить("Видимость", Ложь);
//	Инструкция.Оформление.Вставить("Отображать", Ложь);
//	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
//   
//   Пример № 3 - недоступность полей.
//	Инструкция = СтандартныеПодсистемыСервер.ИнструкцияУсловногоОформления();
//	Инструкция.Отборы.Вставить("Отборы.ЭтоРаздел", Истина);
//	Инструкция.Поля = "ОтборыУсловие, ОтборыЗначение, ОтборыПредставлениеЗначения, ОтборыИндексКартинкиДоступа, ОтборыЗаголовок";
//	Инструкция.Оформление.Вставить("ТолькоПросмотр", Истина);
//	СтандартныеПодсистемыСервер.ДобавитьЭлементУсловногоОформления(ЭтотОбъект, Инструкция);
//
// Возвращаемое значение:
//   ЭлементУсловногоОформленияКомпоновкиДанных - Добавленный элемент.
//
Функция ДобавитьЭлементУсловногоОформления(Форма, Инструкция) Экспорт
	ЭлементУсловногоОформленияКД = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияКД.Использование = Истина;
	
	ВариантыОтчетов.ДополнитьОтборыИзСтруктуры(ЭлементУсловногоОформленияКД.Отбор, Инструкция.Отборы);
	
	Для Каждого КлючИЗначение Из Инструкция.Оформление Цикл
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ),
			КлючИЗначение.Значение);
	КонецЦикла;
	
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	Поля = Инструкция.Поля;
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтрРазделить(Поля, ",", Ложь);
	КонецЕсли;
	Для Каждого Поле Из Поля Цикл
		ИмяЭлемента = СокрЛП(Поле);
		ПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ПолеКД.Использование = Истина;
		ПолеКД.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		Если РежимОтладки И Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Шаблон = НСтр("ru = 'Ошибка добавления условного оформления: Не найден элемент ""%1"".'");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяЭлемента);
			Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементУсловногоОформленияКД;
КонецФункции

//EXTCODE Шумилин Сергей 22.09.2017 <--- }} 

#КонецОбласти

#Область ПроцедурыИФункции

// Функция получает таблицу из временной таблицы.
//
Функция ТаблицаИзВременнойТаблицы(МенеджерВременныхТаблиц, Таблица) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ *
	|	ИЗ " + Таблица + " КАК Таблица");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ТаблицаИзВременнойТаблицы()

// Процедура определяет ситуацию, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в это м случае
// присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументСсылка - ссылка на документ,из которого вызвана процедура 
//  НоваяДатаДокумента - новая дата документа 
//  НачальнаяДатаДокумента - начальная дата документа 
//
// Возвращаемое значение:
//  Число - разность дат.
//
Функция ПроверитьНомерДокумента(ДокументСсылка, НоваяДатаДокумента, НачальнаяДатаДокумента) Экспорт
	
	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументСсылка.Метаданные().ПериодичностьНомера;
	
	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(НоваяДатаДокумента);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачальнаяДатаДокумента - НоваяДатаДокумента;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Возврат РазностьДат;
	
КонецФункции // ПроверитьНомерДокумента()

Функция ОбработкаВыводаЯчейки_Квартирограмма(Знач Текст) Экспорт
	
	МассивСтрок = СтрРазделить(Текст, "-", Ложь);		
	Если МассивСтрок.Количество() = 2 Тогда
		Знч_Мин = Формат(Число(СокрЛП(?(НЕ ЗначениеЗаполнено(МассивСтрок[0]), "0", МассивСтрок[0]))), "ЧДЦ=; ЧРГ=' '; ЧН=0");
		Знч_Макс = Формат(Число(СокрЛП(?(НЕ ЗначениеЗаполнено(МассивСтрок[1]), "0", МассивСтрок[1]))), "ЧДЦ=; ЧРГ=' '; ЧН=0");
		МаксДлина = Макс(СтрДлина(Знч_Мин), СтрДлина(Знч_Макс));
		Для й = СтрДлина(Знч_Мин) По МаксДлина Цикл
			Знч_Мин = " " + Знч_Мин;		
		КонецЦикла;
		Для й = СтрДлина(Знч_Макс) По МаксДлина Цикл
			Знч_Макс = " " + Знч_Макс;		
		КонецЦикла;		
		Текст = Знч_Мин + " - " + Знч_Макс;
	КонецЕсли;	
	
	Возврат Текст;	
	
КонецФункции

Функция ПолучитьПредставлениеСекции(Знач Текст) Экспорт
	
	Представление = "";
	
	Пока НЕ СтрНайти("1234567890", Прав(Текст, 1)) И СтрДлина(Текст) > 0 Цикл
		Текст = Лев(Текст, СтрДлина(Текст) - 1);		
	КонецЦикла;
	
	Пока СтрНайти("1234567890", Прав(Текст, 1)) И СтрДлина(Текст) > 0 Цикл
		Представление = Прав(Текст, 1) + Представление;
		Текст = Лев(Текст, СтрДлина(Текст) - 1);			
	КонецЦикла;
	
	Возврат Представление;	
	
КонецФункции

Функция ВывестиНомерКвартирыБТИ(НомерКвартиры, СтроительныйНомер) Экспорт	
	Возврат ?(СтроительныйНомер = "", НомерКвартиры, НомерКвартиры + "/" + СтроительныйНомер);	
КонецФункции

Функция ВывестиПлощадьБТИ(ПлощадьПроектная, Площадь, СтроительныйНомер, ВариантБТИ = Истина) Экспорт
	
	Если НЕ ВариантБТИ Тогда
		Возврат Площадь;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(СтроительныйНомер), Строка(ПлощадьПроектная) + "/" + Строка(Площадь), Площадь);
	
КонецФункции

Функция ПолучитьНазначение_СГазом() Экспорт	
	Возврат Справочники.НазначениеОбъектовНедвижимости.НайтиПоНаименованию("з/у_с газом", Истина);	
КонецФункции

Функция ПолучитьНазначение_БезГаза() Экспорт
	Возврат Справочники.НазначениеОбъектовНедвижимости.НайтиПоНаименованию("з/у_без газа", Истина);	
КонецФункции

Функция ПолучитьГруппуАвтора(ДатаВзаимодействия, Ответственный) Экспорт
	
	ГруппаОтветственного = Справочники.ГруппыПользователей.ПустаяСсылка();
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ГруппаОтветственного = Ответственный;
	ИначеЕсли ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СоставыГруппПользователейИсторияИзмений.ГруппаПользователей КАК Группа
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователейИсторияИзмений.СрезПоследних КАК СоставыГруппПользователейИсторияИзмений
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ДатаВзаимодействия >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
		|			ИНАЧЕ &ДатаВзаимодействия >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
		|					И &ДатаВзаимодействия < СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы
		|		КОНЕЦ
		|	И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоставыГруппПользователейИсторияИзмений.ГруппаПользователей";
			
		Запрос.УстановитьПараметр("ДатаВзаимодействия", ДатаВзаимодействия);
		Запрос.УстановитьПараметр("Пользователь", Ответственный);
		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ГруппаОтветственного = ВыборкаДетальныеЗаписи.Группа;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаОтветственного) Тогда
		Пока ЗначениеЗаполнено(ГруппаОтветственного.Родитель) Цикл
			ГруппаОтветственного = ГруппаОтветственного.Родитель;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ГруппаОтветственного;
		
КонецФункции

#КонецОбласти

#Область РаботаСОбъектомСхемаЗапроса

// Функция - Найти поле доступной таблицы схемы запроса
//
// Параметры:
//  ДоступнаяТаблица - ДоступнаяТаблицаСхемыЗапроса	 - таблица в которой выполняется поиск
//  ИмяПоля			 - Строка - имя искомого поля
//  ТипПоля			 - Тип - возможные значения "ДоступноеПолеСхемыЗапроса", "ДоступнаяВложеннаяТаблицаСхемыЗапроса".
//  					Если параметр задан, то поиск выполняется только по полям указанного типа
// Возвращаемое значение:
//  ДоступноеПолеСхемыЗапроса,ДоступнаяВложеннаяТаблицаСхемыЗапроса - найденное поле
Функция НайтиПолеДоступнойТаблицыСхемыЗапроса(ДоступнаяТаблица, ИмяПоля, ТипПоля = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого Поле Из ДоступнаяТаблица.Поля Цикл
		Если Поле.Имя = ИмяПоля И (ТипПоля = Неопределено Или (ТипЗнч(Поле) = ТипПоля)) Тогда
			Результат = Поле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Найти источник схемы запроса
//
// Параметры:
//  Источники		 - ИсточникиСхемыЗапроса 	 - источники в которых выполняется поиск
//  ПсевдонимТаблицы - Строка	 - псевдоним искомой таблицы
//  ТипТаблицы		 - Тип - возможные значения "ТаблицаСхемыЗапроса", "ВложенныйЗапросСхемыЗапроса", "ОписаниеВременнойТаблицыСхемыЗапроса".
//  					Если параметр задан, то поиск выполняется только по источникам указанного типа
// Возвращаемое значение:
//  ИсточникСхемыЗапроса - найденный источник
Функция НайтиИсточникСхемыЗапроса(Источники, ПсевдонимТаблицы, ТипТаблицы = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого Источник Из Источники Цикл
		Если Источник.Источник.Псевдоним = ПсевдонимТаблицы И (ТипТаблицы = Неопределено Или (ТипЗнч(Источник.Источник) = ТипТаблицы)) Тогда
			Результат = Источник;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

// Запускает выполнение процедуры в фоновом задании.
// По аналогии с ДлительныеОперации.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "ОжидатьЗавершения".
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//  ОжидатьЗавершения       - Булево - признак ожидания завершения задания за время вызова 
//                           (2 сек. для обычной скорости клиентского соединения, 4 сек. для низкой)
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, ОжидатьЗавершения = Истина) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ЗапущеноЗаданий = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки()
		Или ЗапущеноЗаданий > 0 Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,
			ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);

		Если ОжидатьЗавершения Тогда
			ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
			Попытка
				Задание.ОжидатьЗавершения(ВремяОжидания);
			Исключение
				// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
			КонецПопытки;
		КонецЕсли;
			
		Статус = ДлительныеОперации.ОперацияВыполнена(Задание.УникальныйИдентификатор);
		Результат.ЗаданиеВыполнено = Статус.Статус = "Выполнено";
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
