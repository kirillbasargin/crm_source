
//======================================================================================================================
//Загрузка данных CoMagic
//======================================================================================================================

Функция ПодключитьсяКCoMagic(Login, Password) Экспорт
		
	КлючСессии = ПолучитьКлючСессии(Login, Password);
	
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
		ВызватьИсключение "Access denied.";		
	Иначе
		Возврат КлючСессии;
	КонецЕсли; 	
		
КонецФункции

Функция ОтключитьсяОтCoMagic(КлючСессии) Экспорт
		
	Возврат ЗавершитьСессию(КлючСессии);
		
КонецФункции

Функция ПолучитьДоступныеРК(КлючСессии) Экспорт 
	
	 СписокРекламныхКомпаний = ПолучитьСписокРекламныхКомпаний(КлючСессии);
	 Список_НастройкиРК = Новый Массив;
	 
	 Для каждого РК Из СписокРекламныхКомпаний Цикл
		 Список_НастройкиРК.Добавить(Новый Структура("Код, Наименование, Настройки", РК.id, РК.name, Неопределено)); //ПолучитьНастройкиРК(КлючСессии, РК.id)
	 КонецЦикла; 
	 
	 Возврат Список_НастройкиРК;
	 
 КонецФункции  

Функция ПолучениеИнформацииОЗвонках(КлючСессии, ПериодНачало, ПериодОкончание, Ошибки = "") Экспорт
	 
	 Если НЕ ЗначениеЗаполнено(ПериодНачало) Тогда
	 	ПериодНачало = НачалоДня(ТекущаяДата());
	 КонецЕсли; 
	 
	 Если НЕ ЗначениеЗаполнено(ПериодОкончание) Тогда
		 ПериодОкончание = КонецДня(ТекущаяДата());
	 КонецЕсли; 
	 
	 Возврат ПолучитьТаблицуЗвонков(КлючСессии, ПериодНачало, ПериодОкончание, Ошибки);		
	 
КонецФункции
 
Функция ПолучениеИнформацииОЗаявках(КлючСессии, ПериодНачало, ПериодОкончание, Ошибки = "") Экспорт
	 
	 Если НЕ ЗначениеЗаполнено(ПериодНачало) Тогда
		 ПериодНачало = НачалоДня(ТекущаяДата());
	 КонецЕсли; 
	 
	 Если НЕ ЗначениеЗаполнено(ПериодОкончание) Тогда
		 ПериодОкончание = КонецДня(ТекущаяДата());
	 КонецЕсли; 
	 
	 Возврат ПолучитьТаблицуЗаявок(КлючСессии, ПериодНачало, ПериодОкончание, Ошибки);		
	 
КонецФункции
 
//======================================================================================================================
//REST API CoMagic v1.
//======================================================================================================================

Функция СтандартныйПутьRestAPI()
	
	Возврат "https://api.comagic.ru/api/";
	
КонецФункции 

Функция GetResponse(Метод, URL, Параметры, Версия = "v1/", ContentType = "application/x-www-form-urlencoded", Кодировка = "utf-8", Ошибки = "")

	ВремФайл = ПолучитьИмяВременногоФайла("txt");

	Попытка
	
		WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
		
		URL = СтандартныйПутьRestAPI() + Версия + URL;
		Если НЕ Сред(URL, СтрДлина(URL) - 1, 1) = "/" Тогда
			URL = URL + "/";	
		КонецЕсли;
		
		WinHttp.Open(Метод, URL, 0);        
		WinHttp.setRequestHeader("Content-type", ContentType + ";" + "charset=" + Кодировка);
		
		//<>, Басаргин (27.07.2016) {
		//WinHttp.setRequestHeader("Accept", "application/xml");
		//<> }
		
		СтрокаПараметры = "";
		Если ТипЗнч(Параметры) = Тип("Массив") ИЛИ ТипЗнч(Параметры) = Тип("Структура") Тогда
			Для каждого Параметр Из Параметры Цикл
				СтрокаПараметры = СтрокаПараметры + Параметр.Ключ + "=" + Параметр.Значение + "&";		
			КонецЦикла;
			СтрокаПараметры = Лев(СтрокаПараметры, СтрДлина(СтрокаПараметры) - 1);
		ИначеЕсли ТипЗнч(Параметры) = Тип("Строка") Тогда 
			СтрокаПараметры = Параметры;
		КонецЕсли; 
		
		WinHttp.Send(СтрокаПараметры);        
					
		ТелоОтвета = WinHttp.ResponseBody();    
		
		StreamOut = Новый COMОбъект("ADODB.Stream");
		StreamTypeEnum = Новый Структура("adTypeBinary, adTypeText", 1, 2);
		ConnectModeEnum = Новый Структура(
		"adModeRead, adModeReadWrite, adModeRecursive, adModeShareDenyNone,
		|adModeShareDenyRead, adModeShareDenyWrite, adModeShareExclusive, 
		|adModeUnknown, adModeWrite", 1, 3, 4194304, 16, 4, 8, 12, 0, 2);
		
		SaveOptionsEnum = Новый Структура("adSaveCreateNotExist, adSaveCreateOverWrite", 1, 2);
		StreamOut.Type = StreamTypeEnum.adTypeBinary;
		StreamOut.Mode = ConnectModeEnum.adModeReadWrite; 
		
		StreamOut.Open();
		StreamOut.Write(ТелоОтвета); 
		StreamOut.SaveToFile(ВремФайл, SaveOptionsEnum.adSaveCreateOverWrite); //"2" - перезапись файла
		StreamOut.Close();
		
		ТД = Новый ТекстовыйДокумент();
		ТД.Прочитать(ВремФайл, КодировкаТекста.UTF8);
		
		УдалитьФайлы(ВремФайл);
		
		Возврат ТД.ПолучитьТекст();
		
	Исключение
		//Сообщить(ОписаниеОшибки());	
		Ошибки = Ошибки + Символы.ПС + "Ошибка метода " + Метод + " / " + URL + " / " + СтрокаПараметры + ": " + ОписаниеОшибки();
		УдалитьФайлы(ВремФайл);	
	КонецПопытки;
	
КонецФункции 

Функция ПолучитьКлючСессии(login, password)
	
	Параметры = Новый Структура();
	Параметры.Вставить("login", login);
	Параметры.Вставить("password", password);

	Авторизация_Ответ = GetResponse("POST", "login", Параметры, "");
	Результат = ПреобразоватьJSONОтвет(Авторизация_Ответ, Ложь);
		
	Если НЕ Результат = Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат Результат.session_key;	
	КонецЕсли; 
		
КонецФункции

Функция ЗавершитьСессию(КлючСессии)
	
	Параметры = Новый Структура();
	Параметры.Вставить("session_key", КлючСессии);

	ЗавершитьСессию_Ответ = GetResponse("GET", "logout", Параметры, "");
	
	Возврат НЕ ПреобразоватьJSONОтвет(ЗавершитьСессию_Ответ, Ложь) = Неопределено;
	
КонецФункции
 
Функция ПолучитьТаблицуЗвонков(КлючСессии, ПериодНачало, ПериодОкончание, Ошибки = "")
	
	Параметры = Новый Структура();
	Параметры.Вставить("session_key", КлючСессии);
	Параметры.Вставить("date_from", Формат(ПериодНачало, "ДФ=yyyy-MM-dd") + "%20" +  Формат(НачалоДня(ПериодНачало), "ДЛФ=T"));
	Параметры.Вставить("date_till", Формат(ПериодОкончание, "ДФ=yyyy-MM-dd") + "%20" +  Формат(КонецДня(ПериодОкончание), "ДЛФ=T"));
	
	//<614324>, Басаргин (16.05.2017) {
	//ТаблицаЗвонков_Ответ = GetResponse("GET", "call", Параметры);
	//Возврат ПреобразоватьJSONОтвет(ТаблицаЗвонков_Ответ);

	ТаблицаЗвонков_Ответ = GetResponse("GET", "call", Параметры, , , , Ошибки);
		
	Результат = Неопределено;
	Попытка
		//Результат = ПреобразоватьJSONОтвет(ТаблицаЗвонков_Ответ);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТаблицаЗвонков_Ответ);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	
		Если ТипЗнч(Результат) = Тип("Структура") И (Результат.Свойство("success") И Результат.success И Результат.Свойство("data")) Тогда  	
			ДекодироватьРекурсивно(Результат.data);	
			
			Возврат Результат.data;
		КонецЕсли;
				
	Исключение
	    Ошибки = Ошибки + Символы.ПС + " Ошибка формирования таблицы звонков: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;	
	//<614324> }
	
КонецФункции

Функция ПолучитьТаблицуЗаявок(КлючСессии, ПериодНачало, ПериодОкончание, Ошибки = "")
		
	Параметры = Новый Структура();
	Параметры.Вставить("session_key", КлючСессии);
	Параметры.Вставить("date_from", Формат(ПериодНачало, "ДФ=yyyy-MM-dd") + "%20" +  Формат(НачалоДня(ПериодНачало), "ДЛФ=T"));
	Параметры.Вставить("date_till", Формат(ПериодОкончание, "ДФ=yyyy-MM-dd") + "%20" +  Формат(КонецДня(ПериодОкончание), "ДЛФ=T"));
	
	//<614324>, Басаргин (16.05.2017) {
	//ТаблицаЗаявок_Ответ = GetResponse("GET", "offline_message", Параметры);
    //Возврат ПреобразоватьJSONОтвет(ТаблицаЗаявок_Ответ);
	
	ТаблицаЗаявок_Ответ = GetResponse("GET", "offline_message", Параметры, , , , Ошибки);
		
	Результат = Неопределено;
	Попытка
		////<очистка message>, Басаргин (26.07.2016) {
		//ОчиститьMessage(ТаблицаЗаявок_Ответ);	
		////<очистка message> }		
		//Результат = ПреобразоватьJSONОтвет(ТаблицаЗаявок_Ответ);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТаблицаЗаявок_Ответ);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Если ТипЗнч(Результат) = Тип("Структура") И (Результат.Свойство("success") И Результат.success И Результат.Свойство("data")) Тогда  	
			ДекодироватьРекурсивно(Результат.data);	
			
			Возврат Результат.data;
		КонецЕсли;
				
	Исключение
	    Ошибки = Ошибки + Символы.ПС + " Ошибка формирования таблицы заявок: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	//<614324> }
 	
КонецФункции

Процедура ОчиститьMessage(ТаблицаЗвонков_Ответ)
	
	Поз = Найти(ТаблицаЗвонков_Ответ, """message"": ");
	СтрокаПоиска = "";
	Если Поз Тогда
		к = 0;
		//Поз = Поз + СтрДлина("""message"": ");
		Нач = Поз + СтрДлина("""message"": ");
		Кон = Нач;
		Для к = Нач По СтрДлина(ТаблицаЗвонков_Ответ) Цикл
			Если Сред(ТаблицаЗвонков_Ответ, к, 1) = ":" И Сред(ТаблицаЗвонков_Ответ, к - 1, 1) = """" Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 		
		Пока к >= Нач Цикл
			Если Сред(ТаблицаЗвонков_Ответ, к, 1) = "," Тогда
				Прервать;	
			КонецЕсли;
			к = к - 1;
		КонецЦикла;		
		Если к >= Нач Тогда
			//ТаблицаЗвонков_Ответ = СтрЗаменить(ТаблицаЗвонков_Ответ, Сред(ТаблицаЗвонков_Ответ, Поз, к - Поз), "null");
			ТаблицаЗвонков_Ответ = СтрЗаменить(ТаблицаЗвонков_Ответ, Сред(ТаблицаЗвонков_Ответ, Поз, к - Поз), """message_test"": null");
			ОчиститьMessage(ТаблицаЗвонков_Ответ);	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСписокРекламныхКомпаний(КлючСессии, Ошибки = "")
	
	Параметры = Новый Структура();
	Параметры.Вставить("session_key", КлючСессии);
	
	//<614324>, Басаргин (16.05.2017) {
	//СписокРекламныхКомпаний_Ответ = GetResponse("GET", "ac", Параметры);
    //Возврат ПреобразоватьJSONОтвет(СписокРекламныхКомпаний_Ответ);
	
	СписокРекламныхКомпаний_Ответ = GetResponse("GET", "ac", Параметры, , , , Ошибки);
	
	Результат = Неопределено;
	Попытка
		Результат = ПреобразоватьJSONОтвет(СписокРекламныхКомпаний_Ответ);
	Исключение
	    Ошибки = Ошибки + Символы.ПС + " Ошибка формирования списка рекламных кампаний: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;	
	//<614324> }
	
КонецФункции
 
Функция ПолучитьНастройкиРК(КлючСессии, ID)
	
	Параметры = Новый Структура();
	Параметры.Вставить("session_key", КлючСессии);
	Параметры.Вставить("id", ID);
	
	НастройкиРК_Ответ = GetResponse("GET", "ac_condition", Параметры);
	
	Возврат ПреобразоватьJSONОтвет(НастройкиРК_Ответ);
	
КонецФункции

Функция ПолучитьИнфоПоПоситителю(КлючСессии, ID)
	
	Параметры = Новый Структура();
	Параметры.Вставить("session_key", КлючСессии);
	
	ИнфоПоПоситителю_Ответ = GetResponse("GET", "visitor/" + ID, Параметры);
	
	Возврат ПреобразоватьJSONОтвет(ИнфоПоПоситителю_Ответ);
	
КонецФункции

Процедура ДекодироватьРекурсивно(Строка)
	
	Если ТипЗнч(Строка) = Тип("Структура") Тогда
		Для каждого Элемент Из Строка Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				ДекодироватьРекурсивно(Элемент.Значение);	
			Иначе
				Если Найти(Строка[Элемент.Ключ], "%") = 1 Тогда
					Строка[Элемент.Ключ] = ДекодироватURL(Строка[Элемент.Ключ]);	
				Иначе
					ДекодироватьЮникод(Строка[Элемент.Ключ]);
				КонецЕсли; 				
			КонецЕсли;  
		КонецЦикла; 		
	ИначеЕсли ТипЗнч(Строка) = Тип("Массив") Тогда 
		Для каждого СтрокаМассив Из Строка Цикл
			ДекодироватьРекурсивно(СтрокаМассив);	
		КонецЦикла;
	ИначеЕсли ТипЗнч(Строка) = Тип("КлючИЗначение") Тогда
		ДекодироватьРекурсивно(Строка.Значение);		
	//ИначеЕсли ТипЗнч(Строка) = Тип("Строка") Тогда
	//	Если Найти(Строка, "%") = 1 Тогда
	//		Строка = ДекодироватURL(Строка);	
	//	Иначе
	//		ДекодироватьЮникод(Строка);
	//	КонецЕсли; 			
	Иначе
		Возврат;	
	КонецЕсли; 
		
КонецПроцедуры

Функция ПреобразоватьJSONОтвет(Ответ, Декодировать = Истина, Универсально = Ложь, ИмяДанных = "") Экспорт
	
	Если ЗначениеЗаполнено(Ответ) Тогда
		//<>, Басаргин (15.08.2016) {
		Результат = ЗаполнитьСтруктуруИзОтветаJSON(Ответ);
		Если Универсально Тогда
			Если ТипЗнч(Результат) = Тип("Структура") И (ЗначениеЗаполнено(ИмяДанных) И Результат.Свойство(ИмяДанных)) Тогда				
				Если Декодировать Тогда
					ДекодироватьРекурсивно(Результат[ИмяДанных]);
				КонецЕсли;				
				Возврат Результат[ИмяДанных];
			ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И НЕ ЗначениеЗаполнено(ИмяДанных) Тогда
				Если Декодировать Тогда
					ДекодироватьРекурсивно(Результат);
				КонецЕсли;				
				Возврат Результат;				
			Иначе
				ВызватьИсключение "Ошибка формата JSON";
			КонецЕсли;			
		Иначе 
			Если ТипЗнч(Результат) = Тип("Структура") И (Результат.Свойство("success") И Результат.success = "true" ИЛИ НЕ Результат.Свойство("success") И Результат.Свойство("data")) Тогда  	
				Если Декодировать Тогда
					ДекодироватьРекурсивно(Результат.data);
				КонецЕсли;			
				Возврат Результат.data;
			ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("success") И Результат.success = "false" Тогда
				Если Результат.Свойство("message") Тогда
					Возврат "Ошибка: " + Результат.message;
				КонецЕсли;			
			Иначе
				ВызватьИсключение "Ошибка формата JSON";				
			КонецЕсли; 			
		КонецЕсли;		
		//<> }
	КонецЕсли; 
			
КонецФункции

//Функция ПреобразоватьJSONОтвет(Ответ, Декодировать = Истина)
//	
//	Если ЗначениеЗаполнено(Ответ) Тогда
//		Результат = ЗаполнитьСтруктуруИзОтветаJSON(Ответ);
//		Если ТипЗнч(Результат) = Тип("Структура") И (Результат.Свойство("success") И Результат.success = "true" ИЛИ НЕ Результат.Свойство("success") И Результат.Свойство("data")) Тогда  	
//			Если Декодировать Тогда
//				ДекодироватьРекурсивно(Результат.data);
//			КонецЕсли;			
//			Возврат Результат.data;
//		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("success") И Результат.success = "false" Тогда
//			Если Результат.Свойство("message") Тогда
//				Возврат "Ошибка: " + Результат.message;
//			КонецЕсли;			
//		Иначе
//			ВызватьИсключение "Ошибка формата JSON";			
//		КонецЕсли; 
//	КонецЕсли; 
//			
//КонецФункции
 
//======================================================================================================================
//Encode-Decode 
//======================================================================================================================

Функция ДекодироватURL(Знач Строка="") 
	
	//only 32-bit
	//Попытка
	//ScrCtrl = Новый COMОбъект("MSScriptControl.ScriptControl"); 
	//ScrCtrl.Language = "JScript"; 
	//Сообщение = ScrCtrl.eval("var uri='"+Строка+"'; decodeURIComponent(uri);"); 
	//Исключение
	//КонецПопытки;
	Возврат URL_Декодер(Строка); 
	
КонецФункции

Функция URL_Декодер(Знач URL_Строка)
	
	Алфавит = "абвгдеёжзийклмнопрстуфхцчшщьыъэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ+ =/""&|\@#%^:?`{}[]$";
	Соответствие = Новый Соответствие; 

 	Массив = Новый Массив;
	Массив.Добавить("%D0%B0"); 
	Массив.Добавить("%D0%B1"); 
	Массив.Добавить("%D0%B2"); 
	Массив.Добавить("%D0%B3"); 
	Массив.Добавить("%D0%B4"); 
	Массив.Добавить("%D0%B5"); 
	Массив.Добавить("%D1%91"); 
	Массив.Добавить("%D0%B6"); 
	Массив.Добавить("%D0%B7"); 
	Массив.Добавить("%D0%B8"); 
	Массив.Добавить("%D0%B9"); 
	Массив.Добавить("%D0%BA"); 
	Массив.Добавить("%D0%BB"); 
	Массив.Добавить("%D0%BC"); 
	Массив.Добавить("%D0%BD"); 
	Массив.Добавить("%D0%BE"); 
	Массив.Добавить("%D0%BF"); 
	Массив.Добавить("%D1%80"); 
	Массив.Добавить("%D1%81"); 
	Массив.Добавить("%D1%82"); 
	Массив.Добавить("%D1%83"); 
	Массив.Добавить("%D1%84"); 
	Массив.Добавить("%D1%85"); 
	Массив.Добавить("%D1%86"); 
	Массив.Добавить("%D1%87"); 
	Массив.Добавить("%D1%88"); 
	Массив.Добавить("%D1%89"); 
	Массив.Добавить("%D1%8C"); 
	Массив.Добавить("%D1%8B"); 
	Массив.Добавить("%D1%8A"); 
	Массив.Добавить("%D1%8D"); 
	Массив.Добавить("%D1%8E"); 
	Массив.Добавить("%D1%8F"); 
	Массив.Добавить("%D0%90"); 
	Массив.Добавить("%D0%91"); 
	Массив.Добавить("%D0%92"); 
	Массив.Добавить("%D0%93"); 
	Массив.Добавить("%D0%94"); 
	Массив.Добавить("%D0%95"); 
	Массив.Добавить("%D0%81"); 
	Массив.Добавить("%D0%96"); 
	Массив.Добавить("%D0%97"); 
	Массив.Добавить("%D0%98"); 
	Массив.Добавить("%D0%99"); 
	Массив.Добавить("%D0%9A"); 
	Массив.Добавить("%D0%9B"); 
	Массив.Добавить("%D0%9C"); 
	Массив.Добавить("%D0%9D"); 
	Массив.Добавить("%D0%9E"); 
	Массив.Добавить("%D0%9F"); 
	Массив.Добавить("%D0%A0"); 
	Массив.Добавить("%D0%A1"); 
	Массив.Добавить("%D0%A2"); 
	Массив.Добавить("%D0%A3"); 
	Массив.Добавить("%D0%A4"); 
	Массив.Добавить("%D0%A5"); 
	Массив.Добавить("%D0%A6"); 
	Массив.Добавить("%D0%A7"); 
	Массив.Добавить("%D0%A8"); 
	Массив.Добавить("%D0%A9"); 
	Массив.Добавить("%D0%AC"); 
	Массив.Добавить("%D0%AB"); 
	Массив.Добавить("%D0%AA"); 
	Массив.Добавить("%D0%AD"); 
	Массив.Добавить("%D0%AE"); 
	Массив.Добавить("%D0%AF");	
	Массив.Добавить("%2B");
	Массив.Добавить("%20");
	Массив.Добавить("%3D");
	Массив.Добавить("%2F");
	Массив.Добавить("%22");
	Массив.Добавить("%26");
	Массив.Добавить("%7C");
	Массив.Добавить("%5C");
   	Массив.Добавить("%40");
	Массив.Добавить("%23");
	Массив.Добавить("%25");
	Массив.Добавить("%5E");
	Массив.Добавить("%3A");
    Массив.Добавить("%3F"); 
    Массив.Добавить("%60");
	Массив.Добавить("%7B");
	Массив.Добавить("%7D");
	Массив.Добавить("%5B");
	Массив.Добавить("%5D");
	Массив.Добавить("%24");
   
	Для й = 0 По СтрДлина(Алфавит) - 1  Цикл
		Соответствие.Вставить(Массив[й], Сред(Алфавит, й + 1, 1));
	КонецЦикла; 

	ДекодСтрока = URL_Строка;
	Для каждого КлючИЗначение Из Соответствие Цикл
		ДекодСтрока = СтрЗаменить(ДекодСтрока, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 	
	
	Возврат ДекодСтрока;
	
КонецФункции

Функция ДекодироватьЮникод(Строка)
	
	Результат = "";
    Попытка
        Рег = Новый COMОбъект("VBScript.RegExp");
        Рег.IgnoreCase = Истина;
        Рег.Global = Истина;
        Рег.Multiline = Ложь;
        Рег.Pattern = "u[0-9a-f]+";
        Колекция = Рег.Execute(Строка);
        Для Каждого Элемент Из Колекция Цикл
            Если СтрДЛина(Элемент.value) = 1 Тогда
                Продолжить;
            КонецЕсли;                    
            КодСимвола = ПереводЧислаИз16в10(Сред(ВРег(Элемент.value), 2));
            Символ = Символ(КодСимвола);
            Строка = СтрЗаменить(Строка, "\" + Элемент.value, Символ); 
        КонецЦикла;
        Результат = Строка;
    Исключение
        Результат = "";
        Сообщить("Ошибка преобразования из Unicode", СтатусСообщения.Внимание);
    КонецПопытки;
    
    Возврат Результат;
	
КонецФункции

Функция ПереводЧислаИз16в10(Знач Значение) 
	
	СтруктураЧисел = Новый Соответствие;
	СтруктураЧисел.Вставить("0", 0);
	СтруктураЧисел.Вставить("1", 1);
	СтруктураЧисел.Вставить("2", 2);
	СтруктураЧисел.Вставить("3", 3);
	СтруктураЧисел.Вставить("4", 4);
	СтруктураЧисел.Вставить("5", 5);
	СтруктураЧисел.Вставить("6", 6);
	СтруктураЧисел.Вставить("7", 7);
	СтруктураЧисел.Вставить("8", 8);
	СтруктураЧисел.Вставить("9", 9);
	СтруктураЧисел.Вставить("A", 10);
	СтруктураЧисел.Вставить("B", 11);
	СтруктураЧисел.Вставить("C", 12);
	СтруктураЧисел.Вставить("D", 13);
	СтруктураЧисел.Вставить("E", 14);
	СтруктураЧисел.Вставить("F", 15);
	
	Результат = 0;
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = СокрЛП(Строка(Значение));
	КонецЕсли;
	
	МаксРазрядЦелых = 0;
	МаксРазрядЦелых = СтрДлина(Значение) - 1;
	
	н = МаксРазрядЦелых;
	Ин = 1;
	Пока н >= 0 Цикл
		ТекЗначение = СтруктураЧисел.Получить(Сред(Значение, Ин, 1)) * Pow(16, н);
		Результат = Результат + ТекЗначение;
		н = н - 1;
		Ин = Ин + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КодСимволаASCII(Символ) 
	
	КодUNICODE = КодСимвола(Символ); 
	Если ((КодUNICODE > 1039) И (КодUNICODE < 1104)) Тогда 
		Возврат (КодUNICODE - 848); 
	ИначеЕсли КодUNICODE = 8470 Тогда 
		Возврат 185; 
	ИначеЕсли КодUNICODE = 1105 Тогда 
		Возврат 184; 
	ИначеЕсли КодUNICODE = 1025 Тогда 
		Возврат 168; 
	Иначе 
		Возврат КодUNICODE; 
	КонецЕсли;
	
КонецФункции

Функция UNOCODE2ASCII(КодUNICODE)
	
	Возврат КодСимволаASCII(Символ(КодUNICODE));
	
КонецФункции

Функция ASCII2UNOCODE(КодASCII)
	
	Если ((КодASCII > 191) И (КодASCII < 256)) Тогда
        Возврат (КодASCII + 848);
    ИначеЕсли КодASCII = 185 Тогда
        Возврат 8470;
    ИначеЕсли КодASCII = 184 Тогда
        Возврат 1105;
    ИначеЕсли КодASCII = 168 Тогда
        Возврат 1025;
    Иначе
        Возврат КодASCII;
	КонецЕсли;
	
КонецФункции

Функция WebHexToInt(HexChar)
	
	Если HexChar < "0" Тогда
		Result = КодСимволаASCII(HexChar) + 256 - КодСимволаASCII("0");
	ИначеЕсли HexChar <= Символ( ASCII2UNOCODE(КодСимволаASCII("A") - 1) ) Тогда 
		Result = КодСимволаASCII(HexChar) - КодСимволаASCII("0");
	ИначеЕсли HexChar <= Символ( ASCII2UNOCODE(КодСимволаASCII("a") - 1) ) Тогда 
		Result = КодСимволаASCII(HexChar) - КодСимволаASCII("A") + 10;
	Иначе
		Result = КодСимволаASCII(HexChar) - КодСимволаASCII("a") + 10;
	КонецЕсли;
	
	Возврат Result;
	
КонецФункции 

Функция URLDecode_PascalEdition(S)
	
	Перем i, idx, len, n_coded;	
	
	len = 0;
	n_coded = 0;
	
	Для i = 1 По СтрДлина(S) Цикл
		Если n_coded >= 1 Тогда
			n_coded = n_coded + 1;
			Если n_coded >= 3 Тогда
				n_coded = 0;
			КонецЕсли; 
		Иначе
			len = len + 1;
			Если Сред(S, i, 1) = "%" Тогда
				n_coded = 1;
			КонецЕсли; 
		КонецЕсли;
		 		
	КонецЦикла; 
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(len);
	Result = "";//Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	idx = 0;
	n_coded = 0;
	Для i = 1 По СтрДлина(S) Цикл
		Если n_coded >= 1 Тогда
			n_coded = n_coded + 1;
			Если n_coded >= 3 Тогда
				Result = Result + Символ(ASCII2UNOCODE((WebHexToInt(Сред(S, i - 1, 1)) * 16 + WebHexToInt(Сред(S, i, 1))) % 256));
				//Result[idx] = Символ(ASCII2UNOCODE((WebHexToInt(Сред(S, i - 1, 1)) * 16 + WebHexToInt(Сред(S, i, 1))) % 256));
				n_coded = 0;
			КонецЕсли; 
		Иначе
			idx = idx + 1;
			Если Сред(S, i, 1) = "%" Тогда
				n_coded = 1;
			ИначеЕсли Сред(S, i, 1) = "+" Тогда 
				//Result[idx] = " ";
				Result = Result + " ";
			Иначе
				//Result[idx] = Сред(S, i, 1);
				Result = Result + Сред(S, i, 1);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Result;
	
КонецФункции

Функция ВставитьПоИндексу(Строка, Индекс, Символ)
	Возврат Лев(Строка, Индекс - 1) + Символ + Сред(Строка, Индекс + 1);
КонецФункции

Функция URLEncode(стр)
	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

Функция URLDecode_ASCII(value)
	
	//%2B%D1%86%D0%B5%D0%BD%D1%8B%20%2B%D0%B2%D0%BD%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%20%2B2016
	table = "%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F%10%11%12%13%14" +
	"%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20%21%22%23%24%25%26%27%28" +
	"%29%2A%2B%2C%2D%2E%2F%30%31%32%33%34%35%36%37%38%39%3A%3B%3C" +
	"%3D%3E%3F%40%41%42%43%44%45%46%47%48%49%4A%4B%4C%4D%4E%4F%50" +
	"%51%52%53%54%55%56%57%58%59%5A%5B%5C%5D%5E%5F%60%61%62%63%64" +
	"%65%66%67%68%69%6A%6B%6C%6D%6E%6F%70%71%72%73%74%75%76%77%78" +
	"%79%7A%7B%7C%7D%7E%7F%80%81%82%83%84%85%86%87%88%89%8A%8B%8C" +
	"%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A%9B%9C%9D%9E%9F%A0" +
	"%A1%A2%A3%A4%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%B3%B4" +
	"%B5%B6%B7%B8%B9%BA%BB%BC%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8" +
	"%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D7%D8%D9%DA%DB%DC" +
	"%DD%DE%DF%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0" +
	"%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FB%FC%FD%FE%FF";
	
	result = "";        	
	length = СтрДлина(value);        
	
	Для i = 1 По length Цикл        
		symbol = Сред(value, i, 1 );        
		code = КодСимвола( symbol );    
		//code = КодСимволаASCII(symbol);
		result = result + Сред(table, code * 3 + 1, 3);        
	КонецЦикла;
	
	Возврат result;
	
КонецФункции

Функция ПреобразоватьвСистему(Число10, Система) 
	
	Если система > 36 или система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
	
КонецФункции

//======================================================================================================================
//Обработка JSON 
//======================================================================================================================

Функция ЗаполнитьСтруктуруИзОтветаJSON(Знач ТекстJSON)
	Результат = Новый Структура;
	
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", """");
	ТекстJSON = СтрЗаменить(ТекстJSON, """", "");
	
	ЗаменитьДинамическиеПараметры(ТекстJSON);

	Если Лев(ТекстJSON, 1) = "{" Тогда
		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");
	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		
		Результат.Вставить("Значение", МассивДанных);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

Процедура ЗаменитьДинамическиеПараметры(ТекстJSON)
	
	ДинамическиеПараметры = ПолучитьВсеДинамическиеПараметры();
	Для каждого Параметр Из ДинамическиеПараметры Цикл
		ТекстJSON = СтрЗаменить(НРег(ТекстJSON), НРег(Параметр), "null"); //Сред(Сред(Параметр, 1),2, СтрДлина(Параметр) - 2)	
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьВсеДинамическиеПараметры()
	
	//Яндекс.Директ
	ДинамическиеПараметры = Новый Массив;
	ДинамическиеПараметры.Добавить("{source_type}");
	ДинамическиеПараметры.Добавить("{source}");
	ДинамическиеПараметры.Добавить("{position_type}");
	ДинамическиеПараметры.Добавить("{keyword}");
	ДинамическиеПараметры.Добавить("{addphrases}");
	ДинамическиеПараметры.Добавить("{param1}");
	ДинамическиеПараметры.Добавить("{param2}");
	ДинамическиеПараметры.Добавить("{campaign_id}");
	ДинамическиеПараметры.Добавить("{ad_id}");
	ДинамическиеПараметры.Добавить("{phrase_id}");
	ДинамическиеПараметры.Добавить("{retargeting_id}");
	ДинамическиеПараметры.Добавить("{GBID}");
	
	//<662957>, Басаргин (23.05.2017) {
	ДинамическиеПараметры.Добавить("{PARAM127}");
	ДинамическиеПараметры.Добавить("{PHRASE}");
	ДинамическиеПараметры.Добавить("{POS}");
	ДинамическиеПараметры.Добавить("{PTYPE}");
	ДинамическиеПараметры.Добавить("{SRC}");
	ДинамическиеПараметры.Добавить("{STYPE}");
	ДинамическиеПараметры.Добавить("{BM}");
	ДинамическиеПараметры.Добавить("{DEVICE_TYPE}");
	//<662957> }
	
	//<>, Басаргин (01.06.2017) {
	ДинамическиеПараметры.Добавить("{banner_id}");
	ДинамическиеПараметры.Добавить("{position}");
	//<> }
	
	//Google Adwords
	ДинамическиеПараметры.Добавить("{network}");
	ДинамическиеПараметры.Добавить("{placement}");
	ДинамическиеПараметры.Добавить("{adposition}");
	ДинамическиеПараметры.Добавить("{creative}");
	ДинамическиеПараметры.Добавить("{matchtype}");
	ДинамическиеПараметры.Добавить("{device}");
	ДинамическиеПараметры.Добавить("{devicemodel}");
	ДинамическиеПараметры.Добавить("{adwords_producttargetid}");

	//<>, Басаргин (23.08.2016) {
	ДинамическиеПараметры.Добавить("[be]");
	//<> }
	
	Возврат ДинамическиеПараметры;
		
КонецФункции

Функция СформироватьСтрокуJSONИзМассива(Объект)
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент + """";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """"; // Строка(Элемент) + """";//
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
	СтрокаJSON = "{";
	
	Для каждого Элемент Из Объект Цикл
		Если Элемент.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент.Значение + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """"; //Строка(Элемент.Значение) + """";// !!!
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "}";
КонецФункции

Функция СформироватьСтрокуJSON(Объект)
	
	СтрокаJSON = "";
	
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	КонецЕсли;
	
	Возврат СтрокаJSON;
	
КонецФункции

Функция КорректироватьКлюч(ИмяЗначения)
	
	СтрВозврат = "";
	Для й = 1 По СтрДлина(ИмяЗначения) Цикл
		Если СтрокаНаписанаРусскимиИлиЛатинскими(Сред(ИмяЗначения, й, 1)) И НЕ Сред(ИмяЗначения, й, 1) = " " И НЕ Сред(ИмяЗначения, й, 1) = "-"  ИЛИ Сред(ИмяЗначения, й, 1) = "_" Тогда //И НЕ Сред(ИмяЗначения, й, 1) = "-"
			СтрВозврат = СтрВозврат + Сред(ИмяЗначения, й, 1);
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат СтрВозврат;
	
КонецФункции
 
Функция СтрокаНаписанаРусскимиИлиЛатинскими(Знач СтрокаПараметр)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	КоличествоСимволов = СтрДлина(СтрокаПараметр);
	
	Если  КоличествоСимволов > 0 Тогда
		
		ПервыйСимвол = КодСимвола(Лев(СтрокаПараметр,1)); 
		Русские = (ПервыйСимвол >= 192) или (ПервыйСимвол = 184) или (ПервыйСимвол = 168);
		
		СписокДопустимыхЗначений = Новый Соответствие;
		СписокДопустимыхЗначений.Вставить(184,Истина);   // ё
		СписокДопустимыхЗначений.Вставить(168,Истина);   // Ё
		СписокДопустимыхЗначений.Вставить(45,Истина);   //  "-"

		Для Сч = 1 По КоличествоСимволов Цикл
			
			Код = КодСимвола(Сред(СтрокаПараметр,Сч));   
			
			// Большие латинские буквы: 65 - 90
			// Маленькие латинские буквы: 97 - 122
			// Русские буквы: 192 и больше
			
			//русские:
			Если Русские Тогда
				
				Если (СписокДопустимыхЗначений[Код] = Неопределено) и (Код < 192)  Тогда
					Возврат Ложь;
				КонецЕсли;

			// латинские:	
			ИначеЕсли (Код <> 45) и ((Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122))  Тогда    
				Возврат Ложь;
			КонецЕсли;
				
		КонецЦикла;
		
		Возврат Истина;

	Иначе 	
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)
	
	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));	
	НомерЗначения = 0;
	
	Пока ТекстJSON <> "" Цикл
		ПервыйСимвол = Лев(ТекстJSON, 1);
		Если ПервыйСимвол = "{" Тогда
			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			ИначеЕсли ТипДанных = "Массив" Тогда
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "[" Тогда
			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
			
			Если ТипДанных = "Структура" Тогда
				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;
			Иначе
				Результат.Добавить(Значение);
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда
			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			Если Лев(ТекстJSON, 1) = "," Тогда
				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));
			КонецЕсли;
			
			Возврат;
		Иначе
			Если ТипДанных = "Структура" Тогда
				
				Поз = Найти(ТекстJSON, ":");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз-1));
				//<>, Басаргин К.И.(26.05.2016) {
				ИмяЗначения = КорректироватьКлюч(ИмяЗначения);
				//<> }
				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда
					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");
				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда
					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");
				Иначе
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);
						Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда  						
							Поз = Сч;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Поз = 0 Тогда
						Значение = ТекстJSON;
						ТекстJSON = "";
					Иначе
						Значение = Лев(ТекстJSON, Поз-1);
						ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
					КонецЕсли;
					
					Значение = СокрЛП(Значение);
				КонецЕсли;
				
				Результат.Вставить(ИмяЗначения, Значение);    // ИмяЗначения = "ua_client_id" И Значение = "1261649220.1455893904"  /  ИмяЗначения = "wait_time" И Значение = "6" / ИмяЗначения = "last_query"
			ИначеЕсли ТипДанных = "Массив" Тогда
				Поз = 0;
				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
					Символ = Сред(ТекстJSON, Сч, 1);
					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда
						Поз = Сч;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Поз = 0 Тогда
					Значение = ТекстJSON;
					ТекстJSON = "";
				Иначе
					Значение = Лев(ТекстJSON, Поз-1);
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));
				КонецЕсли;
				
				Значение = СокрЛП(Значение);
				
				Результат.Добавить(Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////Тест
//Процедура Winhttp_Test(ПериодНачало, ПериодОкончание) Экспорт 
//	
//	КлючСессии = ПолучитьКлючСессии("vnukovo-city@i-brand.ru", "8aI5uG9T");

//	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда
//		Сообщить("Access denied!");
//		Возврат;
//	Иначе
//		Сообщить("Сессия " + КлючСессии + " начата");
//	КонецЕсли; 
//	
//	СписокРекламныхКомпаний = ПолучитьСписокРекламныхКомпаний(КлючСессии);
//	Список_НастройкиРК = Новый Массив;
//	
//	Для каждого РК Из СписокРекламныхКомпаний Цикл
//		Список_НастройкиРК.Добавить(Новый Структура("РК, Настройки", РК.id, ПолучитьНастройкиРК(КлючСессии, РК.id)));
//	КонецЦикла; 
//				 
//	ТаблицаЗвонков = ПолучитьТаблицуЗвонков(КлючСессии, ПериодНачало, ПериодОкончание);	
//	Список_ИнфоПоПоситителям = Новый Массив;
//	
//	Для каждого Звонок Из ТаблицаЗвонков Цикл
//		Список_ИнфоПоПоситителям.Добавить(Новый Структура("Посититель, Инфо", Звонок.visitor_id, ПолучитьИнфоПоПоситителю(КлючСессии, Звонок.visitor_id)));
//	КонецЦикла; 
//	
//	Если ЗавершитьСессию(КлючСессии) Тогда
//		Сообщить("Сессия " + КлючСессии + " завершена");
//	КонецЕсли;
//	
//КонецПроцедуры	

