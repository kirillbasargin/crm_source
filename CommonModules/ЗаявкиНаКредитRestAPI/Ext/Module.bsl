
//======================================================================================================================
//Методы
//======================================================================================================================

Функция ОтправитьЗаявкуПоПочте(ПараметрыAPI, Заявка, Вложения, ПочтовыйАдресОтправителя = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username;
		Заявка_Структура = СобратьДанныеПочтовойЗаявки(Заявка, ПочтовыйАдресОтправителя);
		Если НЕ Заявка_Структура = Неопределено Тогда
			Если Ошибки = "" Тогда
				ОтправитьИпотечнуюЗаявкуПоПочте(СобратьСтруктуруПисьмаДляОтправкиПочтовойЗаявки(Заявка_Структура, ПараметрыAPI), , Ошибки); 
				Если Ошибки = "" Тогда
					Возврат 1;//Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьАвторизацию(ПараметрыAPI, TGT = "", ST = "", Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "") Экспорт  //ПользовательПрокси = "", ПарольПрокси = ""
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	
	Если Не ПараметрыПодключения = Неопределено Тогда
		
		Стенд = ?(Тест, ПараметрыПодключения.ТестовыйСтенд, ПараметрыПодключения.ПродуктивныйСтенд);
		Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
		Прокси = ПараметрыПодключения.Прокси;
		
		TGT = ПолучитьTGT(Стенд, "/cas/rest/v1/api/tickets", ПараметрыПодключения.username, ПараметрыПодключения.password, Истина, Ошибки, Прокси); 
		Если НЕ ЗначениеЗаполнено(TGT) Тогда				
			Ошибки = Ошибки + Символы.ПС + "Ошибка получения TGT. Обратитесь к администратору";			
			Возврат Ложь;
		КонецЕсли;
		
		ST = ПолучитьST(Стенд, Стенд_Token, "/cas/rest/v1/api/tickets", TGT, Истина, Ошибки, Прокси);
		Если НЕ ЗначениеЗаполнено(ST) Тогда							
			Ошибки = Ошибки + Символы.ПС + "Ошибка получения ST. Обратитесь к администратору";
			Возврат Ложь;
		КонецЕсли;	
		
		Token = ПолучитьToken(Стенд_Token, "/part/api/v1/auth/token", ST, Истина, Ошибки, Прокси);
		Если НЕ ЗначениеЗаполнено(Token) Тогда							
			Ошибки = Ошибки + Символы.ПС + "Ошибка получения Token. Обратитесь к администратору";
			Возврат Ложь;
		КонецЕсли;	
		
		X_Auth_User = СоздатьСтрокуBase64(ПараметрыПодключения.username);
		
		Попытка			
			РегМен = РегистрыСведений.ИсторияАвторизацииСбербанкОнлайн.СоздатьМенеджерЗаписи();
			РегМен.Username = ПараметрыПодключения.username;
			РегМен.Стенд_Token = Стенд_Token;
			РегМен.Прочитать();
			РегМен.Username = ПараметрыПодключения.username;
			РегМен.Стенд_Token = Стенд_Token;
			РегМен.Token = Token;
			РегМен.X_Auth_User = X_Auth_User;
			РегМен.Записать();
		Исключение
		КонецПопытки;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция Разлогиниться(ПараметрыAPI, Тест = Ложь, Ошибки = "") Экспорт 
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	Если ПараметрыПодключения = Неопределено Тогда	
		Возврат Неопределено;	
	КонецЕсли;
	
	Стенд = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
	Прокси = ПараметрыПодключения.Прокси;
		
	Метод = "/part/api/v1/auth/logout";
	Таймаут = Истина;
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	Token = "";
	X_Auth_User = "";
	
	ПараметрыАвторизации = ПолучитьАктуальныеПараметрыАвторизации(ПараметрыПодключения.username, Стенд);
	Если НЕ ПараметрыАвторизации = Неопределено Тогда
		Token = ПараметрыАвторизации.Token;
		X_Auth_User = ПараметрыАвторизации.X_Auth_User;
	КонецЕсли;
		
	ЗаголовокHTTP = Новый Соответствие();
	//ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");
	Если ЗначениеЗаполнено(Token) И ЗначениеЗаполнено(X_Auth_User) Тогда
		ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
		ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTP.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			тЧтение.Закрыть();
			
			Возврат "success";
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
КонецФункции

Функция ОтправитьЗаявку(ПараметрыAPI, Заявка, ПочтовыйАдресОтправителя = "", Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username;
		Заявка_Структура = СобратьДанныеЗаявки(Заявка, ПочтовыйАдресОтправителя);
		Если НЕ Заявка_Структура = Неопределено Тогда
			ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
			Если Ошибки = "" Тогда
				Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
				Прокси = ПараметрыПодключения.Прокси;
				ID_Заявки = ОтправитьДляОбработки(Заявка_Структура, Стенд_Token, "/part/api/v4/request/create", Token, X_Auth_User, Истина, Ошибки, Прокси);
				Если Ошибки = "" Тогда
					Возврат ID_Заявки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеОЗаявке(ПараметрыAPI, ID_Заявки, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			ДанныеОЗаявке = ПолучитьДанныеОЗаявкеДляОбработки(ID_Заявки, Стенд_Token, "/part/api/v6/request/get", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ДанныеОЗаявке;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьФайлКЗаявке(ПараметрыAPI, ID_Заявки, Файл, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ДоступныеФорматы = ПолучитьСписокОграниченийРасширенийФайлов();
	Если НЕ ДоступныеФорматы = Неопределено Тогда
		Если ДоступныеФорматы.Найти(Файл.Расширение) = Неопределено Тогда
			Ошибки = "Файл с расширением " + Файл.Расширение + " не доступен для загрузки.";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			Данные = ОтправитьПрикрепленныйФайл(ID_Заявки, Файл, Стенд_Token, "/part/api/v2/request/addDocument" + "?id=" + СтрЗаменить(ID_Заявки, Символы.НПП, ""), Token, X_Auth_User, Истина, Ошибки, Ложь, Прокси);		
			Если Ошибки = "" Тогда
				Данные.create_date = ПривестиСтрокуКДате(Данные.create_date);
				Возврат Данные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьКомментарийКЗаявке(ПараметрыAPI, ID_Заявки, Комментарий, ПочтовыйАдресОтправителя = "", Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username;
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);		
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			ID_Коментария = ОтправитьКомментарий(ID_Заявки, Комментарий, ПочтовыйАдресОтправителя, Стенд_Token, "/part/api/v2/request/addComment", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ID_Коментария;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИзменитьСтатусЗаявки(ПараметрыAPI, СтатусЗаявки, ID_Заявки, КомментарииСтатуса = "", Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);		
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			ИдентификаторЗаявкиНаКредит = ИзменитьСтатус(ID_Заявки, СтатусЗаявки.Код, КомментарииСтатуса, Стенд_Token, "/part/api/v1/request/setStatus", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ИдентификаторЗаявкиНаКредит;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИзменитьЗаявку(ПараметрыAPI, Заявка, ID_Заявки, ПочтовыйАдресОтправителя = "", Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username;
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);		
		Если Ошибки = "" Тогда
			Заявка_Структура = СобратьДанныеЗаявки(Заявка, ПочтовыйАдресОтправителя);
			Если НЕ Заявка_Структура = Неопределено Тогда
				Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
				Прокси = ПараметрыПодключения.Прокси;
				ID_Заявки_Возврат = ИзменитьДанные(Заявка_Структура, Стенд_Token, "/part/api/v1/request/update?id=" + СтрЗаменить(ID_Заявки, Символы.НПП, ""), Token, X_Auth_User, Истина, Ошибки, Прокси);
				Если Ошибки = "" Тогда
					Возврат ID_Заявки_Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДоступныхАгентов(ПараметрыAPI, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			ДоступныеАгенты = ДоступныеАгенты(Стенд_Token, "/part/api/v1/partner/users", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ДоступныеАгенты;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеФайла(ПараметрыAPI, Путь, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "", АдресФайла = "")  Экспорт //тест
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			Данные = ДоступКДокументам(Стенд_Token, СтрЗаменить(Путь, "document", "token_document"), Token, X_Auth_User, Истина, Ошибки, Прокси, АдресФайла); 
			Если Ошибки = "" Тогда
				Возврат Данные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьАктивностьСессии(ПараметрыAPI, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "") Экспорт  
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, , , Истина);
	Если Не ПараметрыПодключения = Неопределено Тогда	
		Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
		Прокси = ПараметрыПодключения.Прокси;
		Если Token = "" И X_Auth_User = "" Тогда
			ПараметрыАвторизации = ПолучитьАктуальныеПараметрыАвторизации(ПараметрыПодключения.username, Стенд_Token);
			Если НЕ ПараметрыАвторизации = Неопределено Тогда
				Token = ПараметрыАвторизации.Token;
				X_Auth_User = ПараметрыАвторизации.X_Auth_User;
			КонецЕсли;
		КонецЕсли;
		Данные = ЦелевойЗапрос(Стенд_Token,"/part/api/v1/partner/estate_selections", Token, X_Auth_User, Истина, Ошибки, Прокси); //?(Token = "", _Token, Token), ?(X_Auth_User = "", _X_Auth_User, X_Auth_User)
		Если Ошибки = "" И НЕ Данные = Неопределено Тогда			
			ДатаАктивности = ПривестиСтрокуКДате(СтрЗаменить(Данные, "+03:00", ""), "T"); 				
			Если ЗначениеЗаполнено(ДатаАктивности) И ДатаАктивности > ТекущаяДата() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;		
		ВыполнитьАвторизацию(ПараметрыAPI, , , Token, X_Auth_User, Тест, Ошибки);
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьОтделенияБанков(ПараметрыAPI, Тест = Ложь, Таймаут = Истина) Экспорт  
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если ПараметрыПодключения = Неопределено Тогда	
		Возврат Неопределено;	
	КонецЕсли;
	
	Стенд = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
	Прокси = ПараметрыПодключения.Прокси;
	
	Метод = "/part/api/v2/reference/all";
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);	
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			data = тДанные.data.office;
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;			
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции

//Регламентно
Функция ПроверкаСтатусовИпотечныхЗаявок_Регламентно() Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.Ссылка КАК Ссылка,
	|	ИпотечнаяЗаявка.РекомендуемыйБанк КАК РекомендуемыйБанк,
	|	ИпотечнаяЗаявка.ОтделениеБанка КАК ОтделениеБанка,
	|	ИпотечнаяЗаявка.СтатусЗаявки.Код КАК КодСтатуса,
	|	ИпотечнаяЗаявка.КомментарийСтатуса КАК КомментарийСтатуса,
	|	ИпотечнаяЗаявка.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	|	ИпотечнаяЗаявка.ID_Заявки КАК ID_Заявки,
	|	ИпотечнаяЗаявка.Черновик КАК Черновик,
	|	ИпотечнаяЗаявка.ТестоваяЗаявка КАК Тест,
	|	ИпотечнаяЗаявка.sum_approved КАК sum_approved,
	|	ИпотечнаяЗаявка.УспешнаяОтправка КАК УспешнаяОтправка,
	|	ИпотечнаяЗаявка.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ИпотечнаяЗаявка.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПараметрыПодключенияAPIИпотечныхБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.ПараметрыПодключенияAPIИпотечныхБанков.ПустаяСсылка)) КАК ПараметрыAPI
	|ИЗ
	|	Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК ИпотечныеБанки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
	|			ПО ИпотечныеБанки.ПараметрыПодключения = ПараметрыПодключенияAPIИпотечныхБанков.Ссылка
	|		ПО ИпотечнаяЗаявка.РекомендуемыйБанк = ИпотечныеБанки.Ссылка
	|ГДЕ
	|	ИпотечнаяЗаявка.УспешнаяОтправка
	|	И ИпотечнаяЗаявка.Проведен
	|	И НЕ ИпотечнаяЗаявка.ПометкаУдаления
	|	И ИпотечнаяЗаявка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияИпотечныхЗаявок.Отправка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИпотечнаяЗаявка.МоментВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПисьмаКОтправке = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ПараметрыAPI) Тогда
				Продолжить;
			КонецЕсли;
			Ошибки = "";
			ДанныеОЗаявке = ПолучитьДанныеОЗаявке(Выборка.ПараметрыAPI, Выборка.ID_Заявки, , , Выборка.Тест, Ошибки);
			Если НЕ Ошибки = "" Тогда
				СоздатьЗаписьЛога(Выборка.Ссылка, Ошибки);
				Продолжить;	
			КонецЕсли;
			Если НЕ ДанныеОЗаявке = Неопределено И ТипЗнч(ДанныеОЗаявке) = Тип("Структура") Тогда
				//Если НЕ Выборка.КодСтатуса = ДанныеОЗаявке.status  
				//	ИЛИ (ДанныеОЗаявке.Свойство("sum_approved") И ЗначениеЗаполнено(ДанныеОЗаявке.sum_approved) И НЕ СтрЗаменить(Выборка.sum_approved, Символы.НПП, "") = СтрЗаменить(ДанныеОЗаявке.sum_approved, Символы.НПП, "")) Тогда
				    Модифицированность = Ложь;
					Объект = Выборка.Ссылка.ПолучитьОбъект();
					Если НЕ Объект = Неопределено Тогда
						УстановитьОбновляемыеЗначения(ДанныеОЗаявке, Объект, Модифицированность);	
					КонецЕсли;						
				//КонецЕсли;
				ОтправлятьОповещение = Ложь;
				Если ДанныеОЗаявке.Свойство("status_history") И НЕ ДанныеОЗаявке.status_history = Неопределено Тогда
					КомментарийСтатуса = "";
					ЗаполнитьИсториюСтатусов(ДанныеОЗаявке.status_history, Выборка.Ссылка, КомментарийСтатуса, ОтправлятьОповещение);	
					Если НЕ Объект = Неопределено И НЕ Объект.КомментарийСтатуса = КомментарийСтатуса Тогда
						Объект.КомментарийСтатуса = КомментарийСтатуса;
						Модифицированность = Истина;
						ОтправлятьОповещение = Истина;
					КонецЕсли;
				КонецЕсли;				
				Если Модифицированность Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;				
				Если ОтправлятьОповещение Тогда
					Попытка
						ПисьмаКОтправке.Добавить(СобратьСтруктуруПисьмаДляМенеджера(Объект));
					Исключение
					КонецПопытки;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		Если ПисьмаКОтправке.Количество() Тогда
			Для каждого Письмо Из ПисьмаКОтправке Цикл
				ОтправитьОповещениеОбИзмененииСтатуса(Письмо);
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

//======================================================================================================================
//API
//======================================================================================================================

Функция ЦелевойЗапрос(Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTPОтвет = HTTP.Получить(ЗапросHTTP, ); //ФайлРезультата
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		Возврат HTTPОтвет.Заголовки.Получить("X-Token-Expire"); // 2017-04-05T14:19:14+03:00		
		
	КонецЕсли;	
			
КонецФункции

Функция ДоступКДокументам(Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено, АдресФайла = "") 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	//ЗаголовокHTTP.Вставить("Content-Type", "application/json"); //; charset=utf-8
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTPОтвет = HTTP.Получить(ЗапросHTTP, ); //ФайлРезультата
	Исключение
		Ошибки = "Ошибка подключения к " + Стенд;
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда
		
		ИмяФайла = "";
		Для каждого Заголовок Из HTTPОтвет.Заголовки Цикл
			Если Заголовок.Ключ = "Content-Disposition" Тогда
				СтрНач = Найти(Заголовок.Значение, "filename=""");
				Если СтрНач > 0 Тогда
					й = СтрНач + 10;
					Пока й < СтрДлина(Заголовок.Значение) Цикл
						Если Сред(Заголовок.Значение, й, 1) = """" Тогда
							Прервать;
						КонецЕсли;
						ИмяФайла = ИмяФайла + Сред(Заголовок.Значение, й, 1);
						й = й + 1;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
				
		ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		Если НЕ ДвоичныеДанные = Неопределено И ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			Расширение = "";
			ВремРез = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайла, ".");
			Если ВремРез.Количество() Тогда
				Расширение = ВремРез[ВремРез.Количество() - 1];
				ФайлРезультата = СтрЗаменить(ФайлРезультата, ".tmp", "." + ВремРез[ВремРез.Количество() - 1]);
			КонецЕсли;				
			ДвоичныеДанные.Записать(ФайлРезультата);
			
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресФайла);
			
			Возврат Новый Структура("Адрес, ИмяФайла, Расширение", Адрес, ИмяФайла, Расширение);								
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + " Не удалось скачать файл (" + HTTPОтвет.КодСостояния + ")";
	КонецЕсли;
	
КонецФункции

Функция ДоступныеАгенты(Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			data = тДанные.data;
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
КонецФункции

Функция ИзменитьДанные(Заявка, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Заявка, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json"); //; charset=utf-8
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	//ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			id = тДанные.data.id;
			тЧтение.Закрыть();
			
			Возврат id;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
КонецФункции

Функция ИзменитьСтатус(ID_Заявки, ID_Статуса, Комментарий, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	Структура = Новый Структура();
	Структура.Вставить("comment", Комментарий);
	Структура.Вставить("request_id", ID_Заявки);
	Структура.Вставить("status_id", ID_Статуса);
		
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Структура, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда 
						Для каждого ЭлементМассив Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + ЭлементМассив + Символы.ПС;
						КонецЦикла;
					Иначе
					    Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			id = тДанные.data.id;
			тЧтение.Закрыть();
			
			Возврат id;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
КонецФункции

Функция ОтправитьКомментарий(ID_Заявки, Комментарий, ПочтовыйАдресОтправителя, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	Структура = Новый Структура();
	Структура.Вставить("text", Комментарий);
	Структура.Вставить("request_id", ID_Заявки);
	Структура.Вставить("email", ПочтовыйАдресОтправителя);
		
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Структура, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			id = тДанные.data.id;
			тЧтение.Закрыть();
			
			Возврат id;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
КонецФункции

Функция ОтправитьПрикрепленныйФайл(ID_Заявки, ПрикрепляемыйФайл, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", КодироватьBase64 = Ложь, Прокси = Неопределено)
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
	
	Boundary = "----" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); // 
	
	ИмяФайлаДляЗагрузки = ПолучитьПутьКФайлу(ПрикрепляемыйФайл);
	
	Если ИмяФайлаДляЗагрузки = "" Тогда
		Ошибки = "Не установлен путь к файлу";
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаДляЗагрузки);
	Если НЕ Файл.Существует() Тогда
		Ошибки = "Файл " + ИмяФайлаДляЗагрузки + " не существует.";
		Возврат Неопределено; 
	КонецЕсли; 
	
	ДопустимыйРазмерФайлаВБайтах = 20971520;	
	Если Файл.Размер() > ДопустимыйРазмерФайлаВБайтах Тогда 
		Ошибки = "Размер файла " + ИмяФайлаДляЗагрузки + " превышает допустимый.";
		Возврат Неопределено; 
	КонецЕсли;
	
	ИмяФайлаДляСервера = Файл.ИмяБезРасширения;	
	//Если СтрокаНаписанаПоРусски(ИмяФайлаДляСервера) Тогда
		ИмяФайлаДляСервера = СтрЗаменить(Транслит(ИмяФайлаДляСервера), "№", "");//Перекодировка(ИмяФайлаДляСервера);
	//КонецЕсли;
	
	ИмяФайлаДляСервера = ИмяФайлаДляСервера + Файл.Расширение;
	
	РасширениеФайлаДляСервера = СтрЗаменить(Сред(Файл.Расширение, 2), ".", "");
	
	ПапкаВременныхФайлов = КаталогВременныхФайлов();
	ИмяФайлаОтправки = ПапкаВременныхФайлов + Boundary + ".txt";
	
	Если КодироватьBase64 Тогда
		// base64_decode()	
		СодержимоеФайла = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДляЗагрузки)); 
		ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
		ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename=""" + ИмяФайлаДляСервера + """"); 
		//ФайлОтправки.ЗаписатьСтроку("Content-Type: " + ПолучитьСоответствиеMimeType(РасширениеФайлаДляСервера) + Символы.ПС);
		ФайлОтправки.ЗаписатьСтроку(""); 
		ФайлОтправки.ЗаписатьСтроку(СодержимоеФайла); 
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary + "--"); 
		ФайлОтправки.Закрыть();	
	Иначе	
		//стандарт
		МассивФайловДляОбъединения = Новый Массив;
		
		ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
		ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь); //КодировкаТекста.UTF8 ANSI
		ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
		//На сервере: $_FILES['datafile']['name'] 
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename=""" + ИмяФайлаДляСервера + """"); 
		//ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: " + ПолучитьСоответствиеMimeType(РасширениеФайлаДляСервера) + Символы.ПС); //"application/x-octet-stream" 
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: ");
		ФайлОтправкиНачало.ЗаписатьСтроку(""); 
		ФайлОтправкиНачало.Закрыть(); 
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало); 
			
		ИмяФайлаДляЗагрузкиВременный = ПолучитьИмяВременногоФайла("tmp"); 
		КопироватьФайл(ИмяФайлаДляЗагрузки, ИмяФайлаДляЗагрузкиВременный); //КопироватьФайл(<ИмяФайлаИсточника>, <ИмяФайлаПриемника>) 
		МассивФайловДляОбъединения.Добавить(ИмяФайлаДляЗагрузкиВременный);
		//ФайлДляЗагрузкиВременный = Новый Файл(ИмяФайлаДляЗагрузкиВременный);
		
		ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
		ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
		
		//ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); //&&& 
		
		ФайлОтправкиКонец.ЗаписатьСтроку(""); 
		ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--"); 
		ФайлОтправкиКонец.Закрыть(); 
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
		
		ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки); //ОбъединитьФайлы(<ИменаЧастей>, <ИмяРезультирующегоФайла>) 			
		//ИмяФайлаОтправки - Результирующий POST запрос
	КонецЕсли;
	
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());	
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary); //charset=utf-8; 	
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
		
	Попытка
		HTTP.ОтправитьДляОбработки(ИмяФайлаОтправки, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайлаОтправки); 
		Если НЕ КодироватьBase64 Тогда 
		    Для каждого ЭлементМассива Из МассивФайловДляОбъединения Цикл 
				Попытка
					УдалитьФайлы(ЭлементМассива); 
				Исключение	
				КонецПопытки;
		    КонецЦикла; 
		КонецЕсли; 	
				
		Возврат Неопределено;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаОтправки); 
	Если НЕ КодироватьBase64 Тогда 
		Для каждого ЭлементМассива Из МассивФайловДляОбъединения Цикл 
			Попытка
				УдалитьФайлы(ЭлементМассива); 
			Исключение	
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли; 	
		
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда	
			data = тДанные.data;			
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть()
	
КонецФункции

Функция ПолучитьДанныеОЗаявкеДляОбработки(ID_Заявки, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод + "?id=" + СтрЗаменить(ID_Заявки, Символы.НПП, ""), ЗаголовокHTTP); 
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);	
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			data = тДанные.data;
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть()
	
КонецФункции

Функция ОтправитьДляОбработки(Заявка, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Заявка, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			id = тДанные.data.id;
			тЧтение.Закрыть();
			
			Возврат id;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
КонецФункции
 
Функция ПолучитьToken(Стенд, Метод, ST, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));  
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод + "?ticket=" + ST); //ЗаголовокHTTP
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);	
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат "";
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			Token = тДанные.data.token;
			тЧтение.Закрыть();
			
			Возврат Token;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();

	Возврат "";
	
КонецФункции

Функция ПолучитьST(Стенд, Стенд_Token, Метод, TGT, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));  
	
	Структура = Новый Структура();
	Структура.Вставить("service", "https://" + Стенд_Token + "/part/api/"); //"sberbank-partner.ru" "qa.sberbank-partner.ru"
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Структура, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод + "/" + TGT, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат "";
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	
		Если тДанные.success И тДанные.Свойство("data") Тогда
			ST = тДанные.data.ticket;
			тЧтение.Закрыть();
			
			Возврат ST;
		ИначеЕсли НЕ тДанные.success И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.Свойство("status") И тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.Свойство("status") И тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();

	Возврат "";
	
КонецФункции

Функция ПолучитьTGT(Стенд, Метод, ИмяПальзователя, Пароль, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Структура = Новый Структура();
	Структура.Вставить("username", ИмяПальзователя);
	Структура.Вставить("password", Пароль);
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Структура, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат "";
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	
		Если тДанные.success И тДанные.Свойство("data") Тогда
			TGT = тДанные.data.ticket;
			тЧтение.Закрыть();
			
			Возврат TGT;
		ИначеЕсли НЕ тДанные.success И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.Свойство("status") И тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.Свойство("status") И тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть();
	
	Возврат "";
	
КонецФункции

//======================================================================================================================
//Вспомогательное
//======================================================================================================================

Функция СобратьДанныеПочтовойЗаявки(Заявка, agent_email) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.ФИОКлиента КАК ФИОКлиента,
	|	ИпотечнаяЗаявка.НомерТелефонаКлиента КАК НомерТелефонаКлиента,
	|	ИпотечнаяЗаявка.EmailКлиента КАК EmailКлиента,
	|	ИпотечнаяЗаявка.ДатаПодачиЗаявки КАК ДатаПодачиЗаявки,
	|	ИпотечнаяЗаявка.РекомендуемыйБанк КАК РекомендуемыйБанк,
	|	ИпотечнаяЗаявка.ОтделениеБанка КАК ОтделениеБанка,
	|	ИпотечнаяЗаявка.Проект КАК Проект,
	|	ИпотечнаяЗаявка.ВидОбъектаНедвижимости КАК ВидОбъектаНедвижимости,
	|	ИпотечнаяЗаявка.Ответственный КАК Ответственный,
	|	ИпотечнаяЗаявка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|ГДЕ
	|	ИпотечнаяЗаявка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		ТЗ = РезультатЗапроса.Выгрузить();
		ЗаявкаСтруктура = Новый Структура();
		Для каждого КолонкаТЗ Из ТЗ.Колонки Цикл
			ЗаявкаСтруктура.Вставить(КолонкаТЗ.Имя, ТЗ[0][КолонкаТЗ.Имя]);
		КонецЦикла; 
		
		Возврат ЗаявкаСтруктура;
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьИпотечнуюЗаявкуПоПочте(ПараметрыПисьма = Неопределено, УчетнаяЗапись = Неопределено, Ошибки = "") Экспорт
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			?(УчетнаяЗапись = Неопределено, МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), УчетнаяЗапись), ПараметрыПисьма);
	Исключение
		Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке ипотечной заявки на почту: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправитьОповещениеОбИзмененииСтатуса.ОтправитьИпотечнуюЗаявкуПоПочте'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			Ошибки);			  
	КонецПопытки;
	
КонецПроцедуры

Функция СобратьСтруктуруПисьмаДляОтправкиПочтовойЗаявки(Объект, ПараметрыAPI) Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, Объект.Ответственный);	
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	МассивАдресатов = Новый Массив;	                                                                                       
	АдресПочты = ?(ЗначениеЗаполнено(ПараметрыПодключения.АдресДляРассылки), ПараметрыПодключения.АдресДляРассылки, АдресЭлектроннойПочты(Объект.Ответственный));
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		МассивАдресатов.Добавить(АдресПочты);
	КонецЕсли;

	Если МассивАдресатов.Количество() Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Кому", ПолучитьСтрокуИзМассиваПодстрок(МассивАдресатов, ";"));
		Копии = Новый Массив;
		Если ЗначениеЗаполнено(ПараметрыПодключения.АдресДляРассылки_common) Тогда
			Копии.Добавить(Новый Структура("Адрес, Представление", ПараметрыПодключения.АдресДляРассылки_common, ПараметрыПодключения.АдресДляРассылки_common));  
			ПараметрыСообщения.Вставить("Копии", Копии);
		КонецЕсли;
		ПараметрыСообщения.Вставить("ОбрабатыватьТексты", Ложь);
		ПараметрыСообщения.Вставить("Тема", "~~" + Объект.РекомендуемыйБанк + ". Заявка клиента " + Объект.ФИОКлиента + ", проект " + Объект.Проект); 		
		ПараметрыСообщения.Вставить("ТипТекста", "HTML");
		ПараметрыСообщения.Вставить("Тело", ПодготовитьТелоПисьмаДляОтправкиПочтовойЗаявки(Объект));
		ПараметрыСообщения.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Высокая);
		ПараметрыСообщения.Вставить("Вложения", ПолучитьСоответствияВложенийПисьмаДляОтправкиПочтовойЗаявки(Объект.Ссылка));
		
		Возврат ПараметрыСообщения;
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСоответствияВложенийПисьмаДляОтправкиПочтовойЗаявки(ИпотечнаяЗаявка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		РасширениеДляФайловПодписи = 
		        МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	Иначе
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
		
	СоотвВложения = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	"""" КАК ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.ИпотечнаяЗаявкаПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
		
	Запрос.УстановитьПараметр("ВладелецФайла", ИпотечнаяЗаявка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВложения = РезультатЗапроса[0].Выбрать();
	
	НомерОтображаемогоВложения = 1;
	Пока ВыборкаВложения.Следующий() Цикл
		ИмяФайла = ВыборкаВложения.ПолноеНаименование + ?(ВыборкаВложения.Расширение = "", "", "." + ВыборкаВложения.Расширение);
		Если ПустаяСтрока(ВыборкаВложения.ИДФайлаЭлектронногоПисьма) Тогда
			СоотвВложения.Вставить(ИмяФайла, РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка));
			НомерОтображаемогоВложения = НомерОтображаемогоВложения + 1;
		Иначе
			СтруктураДанныеВложения = Новый Структура;
			СтруктураДанныеВложения.Вставить("ДвоичныеДанные", РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаВложения.Ссылка));
			СтруктураДанныеВложения.Вставить("Идентификатор", ВыборкаВложения.ИДФайлаЭлектронногоПисьма);
			СоотвВложения.Вставить(ИмяФайла, СтруктураДанныеВложения);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
			МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
			ЭлектронныеПодписиВладельца = МодульЭлектроннаяПодпись.УстановленныеПодписи(ВыборкаВложения.Ссылка);
			
			НомерСтроки = 1;
			Для каждого ЭП Из ЭлектронныеПодписиВладельца Цикл				
				СоотвВложения.Вставить(ВыборкаВложения.ПолноеНаименование + "-DS("+ НомерСтроки + ")." 
				+ РасширениеДляФайловПодписи, ЭП.Подпись);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат СоотвВложения;
	
КонецФункции

Функция ПодготовитьТелоПисьмаДляОтправкиПочтовойЗаявки(Объект) Экспорт
	
	ЗаголовокПисьма = Строка(Объект.Ссылка);
	
	СтруктураПисьма = Новый ТаблицаЗначений;
	СтруктураПисьма.Колонки.Добавить("Ключ", ,"Ключ");
	СтруктураПисьма.Колонки.Добавить("Значение", ,"Значение");
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "ФИО клиента";
	Стр.Значение = Объект.ФИОКлиента;
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Телефон клиента";
	Стр.Значение = Объект.НомерТелефонаКлиента;		
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Почта клиента";
	Стр.Значение = Объект.EmailКлиента;
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Дата отправки заявки в банк";
	Стр.Значение = Объект.ДатаПодачиЗаявки;		
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Банк";
	Стр.Значение = Объект.РекомендуемыйБанк;		
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Отделение банка";
	Стр.Значение = Объект.ОтделениеБанка;
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Проект";
	Стр.Значение = Объект.Проект;
	
	Стр = СтруктураПисьма.Добавить();
	Стр.Ключ = "Вид объекта недвижимости";
	Стр.Значение = Объект.ВидОбъектаНедвижимости;			
			
	ТекстHTML = "<p>Добрый день.</p>"; //+<br> 
	
	Для каждого СтрокаКомментарий Из Объект.КомментарииЗаявки Цикл
		Если СтрокаКомментарий.Отправлять Тогда
			ТекстHTML = ТекстHTML + "<p>" + СтрокаКомментарий.Комментарий + ".</p>";
		КонецЕсли;
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "<table border=""2"" bordercolor=""black"" cellpadding=""3"" cellspacing=""0"" style=""font-size: 9pt; margin-left: 40px;"">" + 
	"<caption>" + ЗаголовокПисьма + "</caption>" + 
	"<tbody>"; 
	
	Для каждого ЭлементСтруктуры Из СтруктураПисьма Цикл
		ТекстHTML = ТекстHTML +
		"<tr>" +
		"<td >" + ЭлементСтруктуры.Ключ + "</td>" + 
		"<td >" + Строка(ЭлементСтруктуры.Значение) + "</td>" +  
		"</tr>";	
	КонецЦикла;
	
	ТекстHTML = ТекстHTML +														
	"</tbody>" +
	"</table>" +
	"<p>&nbsp;</p>";
	
	Возврат ТекстHTML;
	
КонецФункции

Функция ПолучитьГруппыПользователя(Пользователь = Неопределено) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ГруппыПользователейСостав.Ссылка КАК Группа
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Группа");
		//Выборка = РезультатЗапроса.Выбрать();
		//Если Выборка.Количество() > 1 Тогда
		//	Возврат ПолучитьОсновнГруппуПользователя(?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));	
		//Иначе
		//	Если Выборка.Следующий() Тогда
		//		Возврат Выборка.Группа;	
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОсновнойОбъектПользователя(Пользователь = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОсновныеОбъектыДоступаПользователей.ОбъектДоступа КАК ОбъектДоступа
	|ИЗ
	|	РегистрСведений.ОсновныеОбъектыДоступаПользователей КАК ОсновныеОбъектыДоступаПользователей
	|ГДЕ
	|	ОсновныеОбъектыДоступаПользователей.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ОбъектДоступа;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыПодключения(ПараметрыAPI, Ответственный = Неопределено, ВыводитьПараметры = Ложь, ДляАвторизации = Ложь) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПараметрыПодключенияAPI.Ссылка.username КАК username_common,
	|	ПараметрыПодключенияAPI.Ссылка.password КАК password_common,
	|	ПараметрыПодключенияAPI.Ссылка.АдресДляРассылки КАК АдресДляРассылки_common,
	|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд КАК ПродуктивныйСтенд,
	|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд КАК ТестовыйСтенд,
	|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд_Token КАК ПродуктивныйСтенд_Token,
	|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд_Token КАК ТестовыйСтенд_Token,
	|	ПараметрыПодключенияAPI.ИспользоватьПрокси КАК ИспользоватьПрокси,
	|	ПараметрыПодключенияAPI.ПротоколПрокси КАК ПротоколПрокси,
	|	ПараметрыПодключенияAPI.ПроксиСервер КАК ПроксиСервер,
	|	ПараметрыПодключенияAPI.ПортПрокси КАК ПортПрокси,
	|	ПараметрыПодключенияAPI.ИмяПользователяПрокси КАК ИмяПользователяПрокси,
	|	ПараметрыПодключенияAPI.ПарольПрокси КАК ПарольПрокси,
	|	ПараметрыПодключенияAPI.ИспользоватьАутентификациюОСПрокси КАК ИспользоватьАутентификациюОСПрокси,
	|	ПараметрыПодключенияAPI.ГруппаПользователя КАК ГруппаПользователя,
	|	ПараметрыПодключенияAPI.username КАК username,
	|	ПараметрыПодключенияAPI.password КАК password,
	|	ПараметрыПодключенияAPI.АдресДляРассылки КАК АдресДляРассылки,
	|	ИСТИНА КАК Использование
	|ИЗ
	|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков.НастройкиПравДоступаПользователей КАК ПараметрыПодключенияAPI
	|ГДЕ
	|	ПараметрыПодключенияAPI.Ссылка = &ПараметрыAPI
	|	И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)
	|	И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПодключенияAPIИпотечныхБанков.username,
	|	ПараметрыПодключенияAPIИпотечныхБанков.password,
	|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд_Token,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд_Token,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПротоколПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПроксиСервер,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПортПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИмяПользователяПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ПарольПрокси,
	|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьАутентификациюОСПрокси,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
	|ГДЕ
	|	ПараметрыПодключенияAPIИпотечныхБанков.Ссылка = &ПараметрыAPI";	
		
	ГруппыПользователя = ПолучитьГруппыПользователя(Ответственный);
	Если ГруппыПользователя = Неопределено ИЛИ НЕ ГруппыПользователя.Количество() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)", "И ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");
	Иначе
		Если ГруппыПользователя.Количество() > 1 Тогда
			ОбъектДоступа = ПолучитьОсновнойОбъектПользователя(Ответственный);
			Если ЗначениеЗаполнено(ОбъектДоступа) Тогда
				Запрос.УстановитьПараметр("ОбъектДоступа", ОбъектДоступа);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ГруппаПользователя В(&ГруппыПользователя)", "");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПодключенияAPI.ОбъектДоступа = &ОбъектДоступа", "");	
		КонецЕсли;
		Запрос.УстановитьПараметр("ГруппыПользователя", ГруппыПользователя);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПараметрыAPI", ПараметрыAPI);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтруктураПараметры = Новый Структура("username, password, username_common, password_common, АдресДляРассылки_common, ПродуктивныйСтенд, ТестовыйСтенд, ПродуктивныйСтенд_Token, ТестовыйСтенд_Token, Прокси, ГруппаПользователя, ПроксиСервер, АдресДляРассылки");
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметры, Выборка);
			Если Выборка.ИспользоватьПрокси Тогда
				Прокси = Новый ИнтернетПрокси;
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
				Прокси.Установить(Выборка.ПротоколПрокси, Выборка.ПроксиСервер, Выборка.ПортПрокси, Выборка.ИмяПользователяПрокси, Выборка.ПарольПрокси, Выборка.ИспользоватьАутентификациюОСПрокси); //Прокси.Установить("https", "mosrfrfw01.absgroup.ru", "8080", , , Истина); 
				СтруктураПараметры.Прокси = Прокси;
			КонецЕсли;
			Если НЕ Выборка.Использование ИЛИ ДляАвторизации Тогда
				СтруктураПараметры.username = Выборка.username_common;
				СтруктураПараметры.password = Выборка.password_common;
			КонецЕсли;				
		КонецЕсли;
		
		Если ВыводитьПараметры Тогда
			Для каждого Элемент Из СтруктураПараметры Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Ключ + " : " + Элемент.Значение);	
			КонецЦикла;
		КонецЕсли;
		
		Возврат СтруктураПараметры;	
	КонецЕсли;
	
КонецФункции

Функция СобратьДанныеЗаявки(Заявка, agent_email)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.НомерТелефонаКлиента КАК phone,
	|	ИпотечнаяЗаявка.EmailКлиента КАК email,
	|	ИпотечнаяЗаявка.СерияНомерПаспорта КАК passport,
	|	ИпотечнаяЗаявка.ВидОбъектаНедвижимости.Код КАК object_type_id,
	|	ИпотечнаяЗаявка.ФИОКлиента КАК name,
	|	ИпотечнаяЗаявка.СуммаКредитаВРублях КАК sum_request,
	|	ИпотечнаяЗаявка.ПредполагаемаяСтоимостьОН КАК sum_supposes,
	|	ИпотечнаяЗаявка.ДатаРожденияКлиента КАК born_date,
	|	ИпотечнаяЗаявка.АдресФактическогоПроживания КАК residential_address,
	|	ИпотечнаяЗаявка.АдресМестаРаботы КАК work_address,
	|	ИпотечнаяЗаявка.ЦИК КАК office_id,
	|	ИпотечнаяЗаявка.Черновик КАК is_draft,
	|	ИпотечнаяЗаявка.ТестоваяЗаявка КАК is_training,
	//|	ИпотечнаяЗаявка.Комментарий КАК comment,
	//|	ИпотечнаяЗаявка.Ответственный.EMAIL КАК responsible_agent_email
	//<681202>, Басаргин (06.07.2017) {
	|	ИпотечнаяЗаявка.ЗамещающийАгент.EMAIL КАК responsible_agent_email
	//<681202> }
	|ИЗ
	|	Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|ГДЕ
	|	ИпотечнаяЗаявка.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаявкаСтруктура = Новый Структура("phone, email, passport, object_type_id, name, sum_request, sum_supposes, born_date, residential_address, work_address, office_id, is_draft, is_training, agent_email, external_id, comment");
			ЗаполнитьЗначенияСвойств(ЗаявкаСтруктура, Выборка); 
			ЗаявкаСтруктура.born_date = Формат(Выборка.born_date, "ДФ=yyyy-MM-dd");
			ЗаявкаСтруктура.agent_email = agent_email;			
			ЗаявкаСтруктура.external_id = Строка(Заявка.УникальныйИдентификатор());
			//Если ЗаявкаСтруктура.is_training Тогда
			//	ЗаявкаСтруктура.Удалить("comment");
			//КонецЕсли;
			//<681202>, Басаргин (06.07.2017) {
			Если ЗначениеЗаполнено(Выборка.responsible_agent_email) Тогда
				ЗаявкаСтруктура.Вставить("responsible_agent_email", Выборка.responsible_agent_email);
			КонецЕсли;
			//<681202> }
			Возврат ЗаявкаСтруктура;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СоздатьСтрокуBase64(Строка) Экспорт
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	ЗаписьТекста.Записать(Строка);
	ЗаписьТекста.Закрыть();
	
	ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	СтрокаBase64 = Base64Строка(ДД_Файла);
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат СтрокаBase64;
	
КонецФункции

Функция ПолучитьПутьКФайлу(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Файл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Возврат "";
	КонецЕсли;

	Том = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "Том");
	ПутьКФайлу = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ПутьКФайлу");
	
	Возврат Том.ПолныйПутьWindows + Файл.ПутьКФайлу; 
	
КонецФункции

Функция ПривестиСтрокуКДате(СтрокаДата, Разделитель = " ") Экспорт //"2017-04-04 16:07:28", "2017-04-05T14:19:14+03:00"
	
	Попытка
		ДиВ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДата, Разделитель);
		cтрГМД = ДиВ[0];
		стрВ = ДиВ[1];
		ГМД = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(cтрГМД, "-");
		стрДата = Формат(Дата(ГМД[0],ГМД[1],ГМД[2]), "ДЛФ=Д"); 
		
		Возврат Дата(стрДата + " " + стрВ);		
	Исключение
		Возврат Дата(1, 1, 1);
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСоответствиеMimeType(Расширение) Экспорт 
	
	СоответствиеТипов = Новый Соответствие;
	
	//new
	СоответствиеТипов.Вставить("au", "audio/basic");
	СоответствиеТипов.Вставить("avi", "video/msvideo, video/avi, video/x-msvideo");
	СоответствиеТипов.Вставить("bmp", "image/bmp");
	СоответствиеТипов.Вставить("bz2", "application/x-bzip2");
	СоответствиеТипов.Вставить("css", "text/css");
	СоответствиеТипов.Вставить("dtd", "application/xml-dtd");
	СоответствиеТипов.Вставить("doc", "application/msword");
	СоответствиеТипов.Вставить("docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	СоответствиеТипов.Вставить("dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template");
	СоответствиеТипов.Вставить("es", "application/ecmascript");
	СоответствиеТипов.Вставить("exe", "application/octet-stream");
	СоответствиеТипов.Вставить("gif", "image/gif");
	СоответствиеТипов.Вставить("gz", "application/x-gzip");
	СоответствиеТипов.Вставить("hqx", "application/mac-binhex40");
	СоответствиеТипов.Вставить("html", "text/html");
	СоответствиеТипов.Вставить("jar", "application/java-archive");
	СоответствиеТипов.Вставить("jpg", "image/jpeg");
	СоответствиеТипов.Вставить("js", "application/x-javascript");
	СоответствиеТипов.Вставить("midi", "audio/x-midi");
	СоответствиеТипов.Вставить("mp3", "audio/mpeg");
	СоответствиеТипов.Вставить("mpeg", "video/mpeg");
	СоответствиеТипов.Вставить("ogg", "audio/vorbis, application/ogg");
	СоответствиеТипов.Вставить("pdf", "application/pdf");
	СоответствиеТипов.Вставить("pl", "application/x-perl");
	СоответствиеТипов.Вставить("png", "image/png");
	СоответствиеТипов.Вставить("potx", "application/vnd.openxmlformats-officedocument.presentationml.template");
	СоответствиеТипов.Вставить("ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow");
	СоответствиеТипов.Вставить("ppt", "application/vnd.ms-powerpointtd>");
	СоответствиеТипов.Вставить("pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation");
	СоответствиеТипов.Вставить("ps", "application/postscript");
	СоответствиеТипов.Вставить("qt", "video/quicktime");
	СоответствиеТипов.Вставить("ra", "audio/x-pn-realaudio, audio/vnd.rn-realaudio");
	СоответствиеТипов.Вставить("ram", "audio/x-pn-realaudio, audio/vnd.rn-realaudio");
	СоответствиеТипов.Вставить("rdf", "application/rdf, application/rdf+xml");
	СоответствиеТипов.Вставить("rtf", "application/rtf");
	СоответствиеТипов.Вставить("sgml", "text/sgml");
	СоответствиеТипов.Вставить("sit", "application/x-stuffit");
	СоответствиеТипов.Вставить("sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide");
	СоответствиеТипов.Вставить("svg", "image/svg+xml");
	СоответствиеТипов.Вставить("swf", "application/x-shockwave-flash");
	СоответствиеТипов.Вставить("tar.gz", "application/x-tar");
	СоответствиеТипов.Вставить("tgz", "application/x-tar");
	СоответствиеТипов.Вставить("tiff", "image/tiff");
	СоответствиеТипов.Вставить("tsv", "text/tab-separated-values");
	СоответствиеТипов.Вставить("txt", "text/plain");
	СоответствиеТипов.Вставить("wav", "audio/wav, audio/x-wav");
	СоответствиеТипов.Вставить("xlam", "application/vnd.ms-excel.addin.macroEnabled.12");
	СоответствиеТипов.Вставить("xls", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12");
	СоответствиеТипов.Вставить("xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	СоответствиеТипов.Вставить("xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template");
	СоответствиеТипов.Вставить("xml", "application/xml");
	СоответствиеТипов.Вставить("zip", "application/zip, application/x-compressed-zip");	
	
	
	
	//old
	СоответствиеТипов.Вставить("123", "application/vnd.lotus-1-2-3");
	СоответствиеТипов.Вставить("3ds", "image/x-3ds");
	СоответствиеТипов.Вставить("669", "audio/x-mod");
	СоответствиеТипов.Вставить("a", "application/x-archive");
	СоответствиеТипов.Вставить("abw", "application/x-abiword");
	СоответствиеТипов.Вставить("ac3", "audio/ac3");
	СоответствиеТипов.Вставить("adb", "text/x-adasrc");
	СоответствиеТипов.Вставить("ads", "text/x-adasrc");
	СоответствиеТипов.Вставить("afm", "application/x-font-afm");
	СоответствиеТипов.Вставить("ag", "image/x-applix-graphics");
	СоответствиеТипов.Вставить("ai", "application/illustrator");
	СоответствиеТипов.Вставить("aif", "audio/x-aiff");
	СоответствиеТипов.Вставить("aifc", "audio/x-aiff");
	СоответствиеТипов.Вставить("aiff", "audio/x-aiff");
	СоответствиеТипов.Вставить("al", "application/x-perl");
	СоответствиеТипов.Вставить("arj", "application/x-arj");
	СоответствиеТипов.Вставить("as", "application/x-applix-spreadsheet");
	СоответствиеТипов.Вставить("asc", "text/plain");
	СоответствиеТипов.Вставить("asf", "video/x-ms-asf");
	СоответствиеТипов.Вставить("asp", "application/x-asp");
	СоответствиеТипов.Вставить("asx", "video/x-ms-asf");
	СоответствиеТипов.Вставить("au", "audio/basic");
	СоответствиеТипов.Вставить("avi", "video/x-msvideo");
	СоответствиеТипов.Вставить("aw", "application/x-applix-word");
	СоответствиеТипов.Вставить("bak", "application/x-trash");
	СоответствиеТипов.Вставить("bcpio", "application/x-bcpio");
	СоответствиеТипов.Вставить("bdf", "application/x-font-bdf");
	СоответствиеТипов.Вставить("bib", "text/x-bibtex");
	СоответствиеТипов.Вставить("bin", "application/octet-stream");
	СоответствиеТипов.Вставить("blend", "application/x-blender");
	СоответствиеТипов.Вставить("blender", "application/x-blender");
	СоответствиеТипов.Вставить("bmp", "image/bmp");
	СоответствиеТипов.Вставить("bz", "application/x-bzip");
	СоответствиеТипов.Вставить("bz2", "application/x-bzip");
	СоответствиеТипов.Вставить("c", "text/x-csrc");
	СоответствиеТипов.Вставить("c++", "text/x-c++src");
	СоответствиеТипов.Вставить("cc", "text/x-c++src");
	СоответствиеТипов.Вставить("cdf", "application/x-netcdf");
	СоответствиеТипов.Вставить("cdr", "application/vnd.corel-draw");
	СоответствиеТипов.Вставить("cer", "application/x-x509-ca-cert");
	СоответствиеТипов.Вставить("cert", "application/x-x509-ca-cert");
	СоответствиеТипов.Вставить("cgi", "application/x-cgi");
	СоответствиеТипов.Вставить("cgm", "image/cgm");
	СоответствиеТипов.Вставить("chrt", "application/x-kchart");
	СоответствиеТипов.Вставить("class", "application/x-java");
	СоответствиеТипов.Вставить("cls", "text/x-tex");
	СоответствиеТипов.Вставить("cpio", "application/x-cpio");
	СоответствиеТипов.Вставить("cpp", "text/x-c++src");
	СоответствиеТипов.Вставить("crt", "application/x-x509-ca-cert");
	СоответствиеТипов.Вставить("cs", "text/x-csharp");
	СоответствиеТипов.Вставить("csh", "application/x-shellscript");
	СоответствиеТипов.Вставить("css", "text/css");
	СоответствиеТипов.Вставить("cssl", "text/css");
	СоответствиеТипов.Вставить("csv", "text/x-comma-separated-values");
	СоответствиеТипов.Вставить("cur", "image/x-win-bitmap");
	СоответствиеТипов.Вставить("cxx", "text/x-c++src");
	СоответствиеТипов.Вставить("dat", "video/mpeg");
	СоответствиеТипов.Вставить("dbf", "application/x-dbase");
	СоответствиеТипов.Вставить("dc", "application/x-dc-rom");
	СоответствиеТипов.Вставить("dcl", "text/x-dcl");
	СоответствиеТипов.Вставить("dcm", "image/x-dcm");
	СоответствиеТипов.Вставить("deb", "application/x-deb");
	СоответствиеТипов.Вставить("der", "application/x-x509-ca-cert");
	СоответствиеТипов.Вставить("desktop", "application/x-desktop");
	СоответствиеТипов.Вставить("dia", "application/x-dia-diagram");
	СоответствиеТипов.Вставить("diff", "text/x-patch");
	СоответствиеТипов.Вставить("djv", "image/vnd.djvu");
	СоответствиеТипов.Вставить("djvu", "image/vnd.djvu");
	//СоответствиеТипов.Вставить("doc", "application/vnd.ms-word");
	СоответствиеТипов.Вставить("dsl", "text/x-dsl");
	СоответствиеТипов.Вставить("dtd", "text/x-dtd");
	СоответствиеТипов.Вставить("dvi", "application/x-dvi");
	СоответствиеТипов.Вставить("dwg", "image/vnd.dwg");
	СоответствиеТипов.Вставить("dxf", "image/vnd.dxf");
	СоответствиеТипов.Вставить("egon", "application/x-egon");
	СоответствиеТипов.Вставить("el", "text/x-emacs-lisp");
	СоответствиеТипов.Вставить("eps", "image/x-eps");
	СоответствиеТипов.Вставить("epsf", "image/x-eps");
	СоответствиеТипов.Вставить("epsi", "image/x-eps");
	СоответствиеТипов.Вставить("etheme", "application/x-e-theme");
	СоответствиеТипов.Вставить("etx", "text/x-setext");
	СоответствиеТипов.Вставить("exe", "application/x-ms-dos-executable");
	СоответствиеТипов.Вставить("ez", "application/andrew-inset");
	СоответствиеТипов.Вставить("f", "text/x-fortran");
	СоответствиеТипов.Вставить("fig", "image/x-xfig");
	СоответствиеТипов.Вставить("fits", "image/x-fits");
	СоответствиеТипов.Вставить("flac", "audio/x-flac");
	СоответствиеТипов.Вставить("flc", "video/x-flic");
	СоответствиеТипов.Вставить("fli", "video/x-flic");
	СоответствиеТипов.Вставить("flw", "application/x-kivio");
	СоответствиеТипов.Вставить("fo", "text/x-xslfo");
	СоответствиеТипов.Вставить("g3", "image/fax-g3");
	СоответствиеТипов.Вставить("gb", "application/x-gameboy-rom");
	СоответствиеТипов.Вставить("gcrd", "text/x-vcard");
	СоответствиеТипов.Вставить("gen", "application/x-genesis-rom");
	СоответствиеТипов.Вставить("gg", "application/x-sms-rom");
	СоответствиеТипов.Вставить("gif", "image/gif");
	СоответствиеТипов.Вставить("glade", "application/x-glade");
	СоответствиеТипов.Вставить("gmo", "application/x-gettext-translation");
	СоответствиеТипов.Вставить("gnc", "application/x-gnucash");
	СоответствиеТипов.Вставить("gnucash", "application/x-gnucash");
	СоответствиеТипов.Вставить("gnumeric", "application/x-gnumeric");
	СоответствиеТипов.Вставить("gra", "application/x-graphite");
	СоответствиеТипов.Вставить("gsf", "application/x-font-type1");
	СоответствиеТипов.Вставить("gtar", "application/x-gtar");
	СоответствиеТипов.Вставить("gz", "application/x-gzip");
	СоответствиеТипов.Вставить("h", "text/x-chdr");
	СоответствиеТипов.Вставить("h++", "text/x-chdr");
	СоответствиеТипов.Вставить("hdf", "application/x-hdf");
	СоответствиеТипов.Вставить("hh", "text/x-c++hdr");
	СоответствиеТипов.Вставить("hp", "text/x-chdr");
	СоответствиеТипов.Вставить("hpgl", "application/vnd.hp-hpgl");
	СоответствиеТипов.Вставить("hs", "text/x-haskell");
	СоответствиеТипов.Вставить("htm", "text/html");
	СоответствиеТипов.Вставить("html", "text/html");
	СоответствиеТипов.Вставить("icb", "image/x-icb");
	СоответствиеТипов.Вставить("ico", "image/x-ico");
	СоответствиеТипов.Вставить("ics", "text/calendar");
	СоответствиеТипов.Вставить("idl", "text/x-idl");
	СоответствиеТипов.Вставить("ief", "image/ief");
	СоответствиеТипов.Вставить("iff", "image/x-iff");
	СоответствиеТипов.Вставить("ilbm", "image/x-ilbm");
	СоответствиеТипов.Вставить("iso", "application/x-cd-image");
	СоответствиеТипов.Вставить("it", "audio/x-it");
	СоответствиеТипов.Вставить("jar", "application/x-jar");
	СоответствиеТипов.Вставить("java", "text/x-java");
	СоответствиеТипов.Вставить("jng", "image/x-jng");
	СоответствиеТипов.Вставить("jp2", "image/jpeg2000");
	СоответствиеТипов.Вставить("jpe", "image/jpeg");
	СоответствиеТипов.Вставить("jpeg", "image/jpeg");
	СоответствиеТипов.Вставить("jpg", "image/jpeg");
	СоответствиеТипов.Вставить("jpr", "application/x-jbuilder-project");
	СоответствиеТипов.Вставить("jpx", "application/x-jbuilder-project");
	СоответствиеТипов.Вставить("js", "application/x-javascript");
	СоответствиеТипов.Вставить("karbon", "application/x-karbon");
	СоответствиеТипов.Вставить("kdelnk", "application/x-desktop");
	СоответствиеТипов.Вставить("kfo", "application/x-kformula");
	СоответствиеТипов.Вставить("kil", "application/x-killustrator");
	СоответствиеТипов.Вставить("kon", "application/x-kontour");
	СоответствиеТипов.Вставить("kpm", "application/x-kpovmodeler");
	СоответствиеТипов.Вставить("kpr", "application/x-kpresenter");
	СоответствиеТипов.Вставить("kpt", "application/x-kpresenter");
	СоответствиеТипов.Вставить("kra", "application/x-krita");
	СоответствиеТипов.Вставить("ksp", "application/x-kspread");
	СоответствиеТипов.Вставить("kud", "application/x-kugar");
	СоответствиеТипов.Вставить("kwd", "application/x-kword");
	СоответствиеТипов.Вставить("kwt", "application/x-kword");
	СоответствиеТипов.Вставить("la", "application/x-shared-library-la");
	СоответствиеТипов.Вставить("lha", "application/x-lha");
	СоответствиеТипов.Вставить("lhs", "text/x-literate-haskell");
	СоответствиеТипов.Вставить("lhz", "application/x-lhz");
	СоответствиеТипов.Вставить("log", "text/x-log");
	СоответствиеТипов.Вставить("ltx", "text/x-tex");
	СоответствиеТипов.Вставить("lwo", "image/x-lwo");
	СоответствиеТипов.Вставить("lwob", "image/x-lwo");
	СоответствиеТипов.Вставить("lws", "image/x-lws");
	СоответствиеТипов.Вставить("lyx", "application/x-lyx");
	СоответствиеТипов.Вставить("lzh", "application/x-lha");
	СоответствиеТипов.Вставить("lzo", "application/x-lzop");
	СоответствиеТипов.Вставить("m", "text/x-objcsrc");
	СоответствиеТипов.Вставить("m15", "audio/x-mod");
	СоответствиеТипов.Вставить("m3u", "audio/x-mpegurl");
	СоответствиеТипов.Вставить("man", "application/x-troff-man");
	СоответствиеТипов.Вставить("md", "application/x-genesis-rom");
	СоответствиеТипов.Вставить("me", "text/x-troff-me");
	СоответствиеТипов.Вставить("mgp", "application/x-magicpoint");
	СоответствиеТипов.Вставить("mid", "audio/midi");
	СоответствиеТипов.Вставить("midi", "audio/midi");
	СоответствиеТипов.Вставить("mif", "application/x-mif");
	СоответствиеТипов.Вставить("mkv", "application/x-matroska");
	СоответствиеТипов.Вставить("mm", "text/x-troff-mm");
	СоответствиеТипов.Вставить("mml", "text/mathml");
	СоответствиеТипов.Вставить("mng", "video/x-mng");
	СоответствиеТипов.Вставить("moc", "text/x-moc");
	СоответствиеТипов.Вставить("mod", "audio/x-mod");
	СоответствиеТипов.Вставить("moov", "video/quicktime");
	СоответствиеТипов.Вставить("mov", "video/quicktime");
	СоответствиеТипов.Вставить("movie", "video/x-sgi-movie");
	СоответствиеТипов.Вставить("mp2", "video/mpeg");
	СоответствиеТипов.Вставить("mp3", "audio/x-mp3");
	СоответствиеТипов.Вставить("mpe", "video/mpeg");
	СоответствиеТипов.Вставить("mpeg", "video/mpeg");
	СоответствиеТипов.Вставить("mpg", "video/mpeg");
	СоответствиеТипов.Вставить("ms", "text/x-troff-ms");
	СоответствиеТипов.Вставить("msod", "image/x-msod");
	СоответствиеТипов.Вставить("msx", "application/x-msx-rom");
	СоответствиеТипов.Вставить("mtm", "audio/x-mod");
	СоответствиеТипов.Вставить("n64", "application/x-n64-rom");
	СоответствиеТипов.Вставить("nc", "application/x-netcdf");
	СоответствиеТипов.Вставить("nes", "application/x-nes-rom");
	СоответствиеТипов.Вставить("nsv", "video/x-nsv");
	СоответствиеТипов.Вставить("o", "application/x-object");
	СоответствиеТипов.Вставить("obj", "application/x-tgif");
	СоответствиеТипов.Вставить("oda", "application/oda");
	СоответствиеТипов.Вставить("ogg", "application/ogg");
	СоответствиеТипов.Вставить("old", "application/x-trash");
	СоответствиеТипов.Вставить("oleo", "application/x-oleo");
	СоответствиеТипов.Вставить("p", "text/x-pascal");
	СоответствиеТипов.Вставить("p12", "application/x-pkcs12");
	СоответствиеТипов.Вставить("p7s", "application/pkcs7-signature");
	СоответствиеТипов.Вставить("pas", "text/x-pascal");
	СоответствиеТипов.Вставить("patch", "text/x-patch");
	СоответствиеТипов.Вставить("pbm", "image/x-portable-bitmap");
	СоответствиеТипов.Вставить("pcd", "image/x-photo-cd");
	СоответствиеТипов.Вставить("pcf", "application/x-font-pcf");
	СоответствиеТипов.Вставить("pcl", "application/vnd.hp-pcl");
	СоответствиеТипов.Вставить("pdb", "application/vnd.palm");
	СоответствиеТипов.Вставить("pdf", "application/pdf");
	СоответствиеТипов.Вставить("pem", "application/x-x509-ca-cert");
	СоответствиеТипов.Вставить("perl", "application/x-perl");
	СоответствиеТипов.Вставить("pfa", "application/x-font-type1");
	СоответствиеТипов.Вставить("pfb", "application/x-font-type1");
	СоответствиеТипов.Вставить("pfx", "application/x-pkcs12");
	СоответствиеТипов.Вставить("pgm", "image/x-portable-graymap");
	СоответствиеТипов.Вставить("pgn", "application/x-chess-pgn");
	СоответствиеТипов.Вставить("pgp", "application/pgp");
	СоответствиеТипов.Вставить("php", "application/x-php");
	СоответствиеТипов.Вставить("php3", "application/x-php");
	СоответствиеТипов.Вставить("php4", "application/x-php");
	СоответствиеТипов.Вставить("pict", "image/x-pict");
	СоответствиеТипов.Вставить("pict1", "image/x-pict");
	СоответствиеТипов.Вставить("pict2", "image/x-pict");
	СоответствиеТипов.Вставить("pl", "application/x-perl");
	СоответствиеТипов.Вставить("pls", "audio/x-scpls");
	СоответствиеТипов.Вставить("pm", "application/x-perl");
	СоответствиеТипов.Вставить("png", "image/png");
	СоответствиеТипов.Вставить("pnm", "image/x-portable-anymap");
	СоответствиеТипов.Вставить("po", "text/x-gettext-translation");
	СоответствиеТипов.Вставить("pot", "text/x-gettext-translation-template");
	СоответствиеТипов.Вставить("ppm", "image/x-portable-pixmap");
	СоответствиеТипов.Вставить("pps", "application/vnd.ms-powerpoint");
	СоответствиеТипов.Вставить("ppt", "application/vnd.ms-powerpoint");
	СоответствиеТипов.Вставить("ppz", "application/vnd.ms-powerpoint");
	СоответствиеТипов.Вставить("ps", "application/postscript");
	СоответствиеТипов.Вставить("psd", "image/x-psd");
	СоответствиеТипов.Вставить("psf", "application/x-font-linux-psf");
	СоответствиеТипов.Вставить("psid", "audio/prs.sid");
	СоответствиеТипов.Вставить("pw", "application/x-pw");
	СоответствиеТипов.Вставить("py", "application/x-python");
	СоответствиеТипов.Вставить("pyc", "application/x-python-bytecode");
	СоответствиеТипов.Вставить("pyo", "application/x-python-bytecode");
	СоответствиеТипов.Вставить("qif", "application/x-qw");
	СоответствиеТипов.Вставить("qt", "video/quicktime");
	СоответствиеТипов.Вставить("qtvr", "video/quicktime");
	СоответствиеТипов.Вставить("ra", "audio/x-pn-realaudio");
	СоответствиеТипов.Вставить("ram", "audio/x-pn-realaudio");
	СоответствиеТипов.Вставить("rar", "application/x-rar");
	СоответствиеТипов.Вставить("ras", "image/x-cmu-raster");
	СоответствиеТипов.Вставить("rdf", "text/rdf");
	СоответствиеТипов.Вставить("rej", "application/x-reject");
	СоответствиеТипов.Вставить("rgb", "image/x-rgb");
	СоответствиеТипов.Вставить("rle", "image/rle");
	СоответствиеТипов.Вставить("rm", "audio/x-pn-realaudio");
	СоответствиеТипов.Вставить("roff", "application/x-troff");
	СоответствиеТипов.Вставить("rpm", "application/x-rpm");
	СоответствиеТипов.Вставить("rss", "text/rss");
	СоответствиеТипов.Вставить("rtf", "application/rtf");
	СоответствиеТипов.Вставить("rtx", "text/richtext");
	СоответствиеТипов.Вставить("s3m", "audio/x-s3m");
	СоответствиеТипов.Вставить("sam", "application/x-amipro");
	СоответствиеТипов.Вставить("scm", "text/x-scheme");
	СоответствиеТипов.Вставить("sda", "application/vnd.stardivision.draw");
	СоответствиеТипов.Вставить("sdc", "application/vnd.stardivision.calc");
	СоответствиеТипов.Вставить("sdd", "application/vnd.stardivision.impress");
	СоответствиеТипов.Вставить("sdp", "application/vnd.stardivision.impress");
	СоответствиеТипов.Вставить("sds", "application/vnd.stardivision.chart");
	СоответствиеТипов.Вставить("sdw", "application/vnd.stardivision.writer");
	СоответствиеТипов.Вставить("sgi", "image/x-sgi");
	СоответствиеТипов.Вставить("sgl", "application/vnd.stardivision.writer");
	СоответствиеТипов.Вставить("sgm", "text/sgml");
	СоответствиеТипов.Вставить("sgml", "text/sgml");
	СоответствиеТипов.Вставить("sh", "application/x-shellscript");
	СоответствиеТипов.Вставить("shar", "application/x-shar");
	СоответствиеТипов.Вставить("siag", "application/x-siag");
	СоответствиеТипов.Вставить("sid", "audio/prs.sid");
	СоответствиеТипов.Вставить("sik", "application/x-trash");
	СоответствиеТипов.Вставить("slk", "text/spreadsheet");
	СоответствиеТипов.Вставить("smd", "application/vnd.stardivision.mail");
	СоответствиеТипов.Вставить("smf", "application/vnd.stardivision.math");
	СоответствиеТипов.Вставить("smi", "application/smil");
	СоответствиеТипов.Вставить("smil", "application/smil");
	СоответствиеТипов.Вставить("sml", "application/smil");
	СоответствиеТипов.Вставить("sms", "application/x-sms-rom");
	СоответствиеТипов.Вставить("snd", "audio/basic");
	СоответствиеТипов.Вставить("so", "application/x-sharedlib");
	СоответствиеТипов.Вставить("spd", "application/x-font-speedo");
	СоответствиеТипов.Вставить("sql", "text/x-sql");
	СоответствиеТипов.Вставить("src", "application/x-wais-source");
	СоответствиеТипов.Вставить("stc", "application/vnd.sun.xml.calc.template");
	СоответствиеТипов.Вставить("std", "application/vnd.sun.xml.draw.template");
	СоответствиеТипов.Вставить("sti", "application/vnd.sun.xml.impress.template");
	СоответствиеТипов.Вставить("stm", "audio/x-stm");
	СоответствиеТипов.Вставить("stw", "application/vnd.sun.xml.writer.template");
	СоответствиеТипов.Вставить("sty", "text/x-tex");
	СоответствиеТипов.Вставить("sun", "image/x-sun-raster");
	СоответствиеТипов.Вставить("sv4cpio", "application/x-sv4cpio");
	СоответствиеТипов.Вставить("sv4crc", "application/x-sv4crc");
	СоответствиеТипов.Вставить("svg", "image/svg+xml");
	СоответствиеТипов.Вставить("swf", "application/x-shockwave-flash");
	СоответствиеТипов.Вставить("sxc", "application/vnd.sun.xml.calc");
	СоответствиеТипов.Вставить("sxd", "application/vnd.sun.xml.draw");
	СоответствиеТипов.Вставить("sxg", "application/vnd.sun.xml.writer.global");
	СоответствиеТипов.Вставить("sxi", "application/vnd.sun.xml.impress");
	СоответствиеТипов.Вставить("sxm", "application/vnd.sun.xml.math");
	СоответствиеТипов.Вставить("sxw", "application/vnd.sun.xml.writer");
	СоответствиеТипов.Вставить("sylk", "text/spreadsheet");
	СоответствиеТипов.Вставить("t", "application/x-troff");
	СоответствиеТипов.Вставить("tar", "application/x-tar");
	СоответствиеТипов.Вставить("tcl", "text/x-tcl");
	СоответствиеТипов.Вставить("tcpalette", "application/x-terminal-color-palette");
	СоответствиеТипов.Вставить("tex", "text/x-tex");
	СоответствиеТипов.Вставить("texi", "text/x-texinfo");
	СоответствиеТипов.Вставить("texinfo", "text/x-texinfo");
	СоответствиеТипов.Вставить("tga", "image/x-tga");
	СоответствиеТипов.Вставить("tgz", "application/x-compressed-tar");
	СоответствиеТипов.Вставить("theme", "application/x-theme");
	СоответствиеТипов.Вставить("tif", "image/tiff");
	СоответствиеТипов.Вставить("tiff", "image/tiff");
	СоответствиеТипов.Вставить("tk", "text/x-tcl");
	СоответствиеТипов.Вставить("torrent", "application/x-bittorrent");
	СоответствиеТипов.Вставить("tr", "application/x-troff");
	СоответствиеТипов.Вставить("ts", "application/x-linguist");
	СоответствиеТипов.Вставить("tsv", "text/tab-separated-values");
	СоответствиеТипов.Вставить("ttf", "application/x-font-ttf");
	СоответствиеТипов.Вставить("txt", "text/plain");
	СоответствиеТипов.Вставить("tzo", "application/x-tzo");
	СоответствиеТипов.Вставить("ui", "application/x-designer");
	СоответствиеТипов.Вставить("uil", "text/x-uil");
	СоответствиеТипов.Вставить("ult", "audio/x-mod");
	СоответствиеТипов.Вставить("uni", "audio/x-mod");
	СоответствиеТипов.Вставить("uri", "text/x-uri");
	СоответствиеТипов.Вставить("url", "text/x-uri");
	СоответствиеТипов.Вставить("ustar", "application/x-ustar");
	СоответствиеТипов.Вставить("vcf", "text/x-vcalendar");
	СоответствиеТипов.Вставить("vcs", "text/x-vcalendar");
	СоответствиеТипов.Вставить("vct", "text/x-vcard");
	СоответствиеТипов.Вставить("vob", "video/mpeg");
	СоответствиеТипов.Вставить("voc", "audio/x-voc");
	СоответствиеТипов.Вставить("vor", "application/vnd.stardivision.writer");
	СоответствиеТипов.Вставить("vpp", "application/x-extension-vpp");
	СоответствиеТипов.Вставить("wav", "audio/x-wav");
	СоответствиеТипов.Вставить("wb1", "application/x-quattropro");
	СоответствиеТипов.Вставить("wb2", "application/x-quattropro");
	СоответствиеТипов.Вставить("wb3", "application/x-quattropro");
	СоответствиеТипов.Вставить("wk1", "application/vnd.lotus-1-2-3");
	СоответствиеТипов.Вставить("wk3", "application/vnd.lotus-1-2-3");
	СоответствиеТипов.Вставить("wk4", "application/vnd.lotus-1-2-3");
	СоответствиеТипов.Вставить("wks", "application/vnd.lotus-1-2-3");
	СоответствиеТипов.Вставить("wmf", "image/x-wmf");
	СоответствиеТипов.Вставить("wml", "text/vnd.wap.wml");
	СоответствиеТипов.Вставить("wmv", "video/x-ms-wmv");
	СоответствиеТипов.Вставить("wpd", "application/vnd.wordperfect");
	СоответствиеТипов.Вставить("wpg", "application/x-wpg");
	СоответствиеТипов.Вставить("wri", "application/x-mswrite");
	СоответствиеТипов.Вставить("wrl", "model/vrml");
	СоответствиеТипов.Вставить("xac", "application/x-gnucash");
	СоответствиеТипов.Вставить("xbel", "application/x-xbel");
	СоответствиеТипов.Вставить("xbm", "image/x-xbitmap");
	СоответствиеТипов.Вставить("xcf", "image/x-xcf");
	СоответствиеТипов.Вставить("xhtml", "application/xhtml+xml");
	СоответствиеТипов.Вставить("xi", "audio/x-xi");
	СоответствиеТипов.Вставить("xla", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlc", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xld", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xll", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlm", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xls", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlt", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlw", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xm", "audio/x-xm");
	СоответствиеТипов.Вставить("xmi", "text/x-xmi");
	СоответствиеТипов.Вставить("xml", "text/xml");
	СоответствиеТипов.Вставить("xpm", "image/x-xpixmap");
	СоответствиеТипов.Вставить("xsl", "text/x-xslt");
	СоответствиеТипов.Вставить("xslfo", "text/x-xslfo");
	СоответствиеТипов.Вставить("xslt", "text/x-xslt");
	СоответствиеТипов.Вставить("xwd", "image/x-xwindowdump");
	СоответствиеТипов.Вставить("z", "application/x-compress");
	СоответствиеТипов.Вставить("zabw", "application/x-abiword");
	//СоответствиеТипов.Вставить("zip", "application/zip");
	СоответствиеТипов.Вставить("zoo", "application/x-zoo");	
	
	MimeType = СоответствиеТипов.Получить(Расширение);
	Если MimeType = Неопределено Тогда
		MimeType = "application/x-octet-stream";
	КонецЕсли;
	
	//MimeType = "application/x-octet-stream";
	Возврат MimeType;
	
КонецФункции

Функция ЭтоРусскаяБуква(С) Экспорт
    Возврат Найти("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯ", ВРег(С))<>0;	
КонецФункции

Функция СтрокаНаписанаПоРусски(Знач СтрокаПараметр) Экспорт 

    СтрокаПараметр = СокрЛП(СтрокаПараметр);    

    СписокДопустимыхЗначений = Новый СписокЗначений;
    СписокДопустимыхЗначений.Добавить(184); 
    СписокДопустимыхЗначений.Добавить(168);
    СписокДопустимыхЗначений.Добавить(45);
    СписокДопустимыхЗначений.Добавить(46);
    СписокДопустимыхЗначений.Добавить(32);
    СписокДопустимыхЗначений.Добавить(48);
    СписокДопустимыхЗначений.Добавить(49);
    СписокДопустимыхЗначений.Добавить(50);
    СписокДопустимыхЗначений.Добавить(51);
    СписокДопустимыхЗначений.Добавить(52);
    СписокДопустимыхЗначений.Добавить(53);
    СписокДопустимыхЗначений.Добавить(54);
    СписокДопустимыхЗначений.Добавить(55);
    СписокДопустимыхЗначений.Добавить(56);
    СписокДопустимыхЗначений.Добавить(57);

    Для Сч=1 По СтрДлина(СтрокаПараметр) Цикл
        Код = КодСимвола(СтрокаПараметр, Сч);
        Если (Код<192) И (СписокДопустимыхЗначений.НайтиПоЗначению(Код) = Неопределено) Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла;

    Возврат Истина;
	
КонецФункции

Функция Транслит(Знач Текст) Экспорт

	Текст = СтрЗаменить(Текст, "а","a");
    Текст = СтрЗаменить(Текст, "б","b");
    Текст = СтрЗаменить(Текст, "в","v");
    Текст = СтрЗаменить(Текст, "г","g");
    Текст = СтрЗаменить(Текст, "д","d");
    Текст = СтрЗаменить(Текст, "е","e");
    Текст = СтрЗаменить(Текст, "ё","e");
    Текст = СтрЗаменить(Текст, "ж","zh");
    Текст = СтрЗаменить(Текст, "з","z");
    Текст = СтрЗаменить(Текст, "и","i");
    Текст = СтрЗаменить(Текст, "к","k");
    Текст = СтрЗаменить(Текст, "л","l");
    Текст = СтрЗаменить(Текст, "м","m");
    Текст = СтрЗаменить(Текст, "н","n");
    Текст = СтрЗаменить(Текст, "о","o");
    Текст = СтрЗаменить(Текст, "п","p");
    Текст = СтрЗаменить(Текст, "р","r");
    Текст = СтрЗаменить(Текст, "с","s");
    Текст = СтрЗаменить(Текст, "т","t");
    Текст = СтрЗаменить(Текст, "у","u");
    Текст = СтрЗаменить(Текст, "ф","f");
    Текст = СтрЗаменить(Текст, "х","h");
    Текст = СтрЗаменить(Текст, "ч","ch");
    Текст = СтрЗаменить(Текст, "ш","sh");
    Текст = СтрЗаменить(Текст, "щ","sch");
    Текст = СтрЗаменить(Текст, "ъ","");
    Текст = СтрЗаменить(Текст, "ь","'");
    Текст = СтрЗаменить(Текст, "э","e");
    Текст = СтрЗаменить(Текст, "ю","yu");
    Текст = СтрЗаменить(Текст, "й","i");
    Текст = СтрЗаменить(Текст, "ц","c");
    Текст = СтрЗаменить(Текст, "я","ya");
    Текст = СтрЗаменить(Текст, "ы","i");
    Текст = СтрЗаменить(Текст, "А","A");
    Текст = СтрЗаменить(Текст, "Б","B");
    Текст = СтрЗаменить(Текст, "В","V");
    Текст = СтрЗаменить(Текст, "Г","G");
    Текст = СтрЗаменить(Текст, "Д","D");
    Текст = СтрЗаменить(Текст, "Е","E");
    Текст = СтрЗаменить(Текст, "Ё","E");
    Текст = СтрЗаменить(Текст, "Ж","Zh");
    Текст = СтрЗаменить(Текст, "З","Z");
    Текст = СтрЗаменить(Текст, "И","I");
    Текст = СтрЗаменить(Текст, "К","K");
    Текст = СтрЗаменить(Текст, "Л","L");
    Текст = СтрЗаменить(Текст, "М","M");
    Текст = СтрЗаменить(Текст, "Н","N");
    Текст = СтрЗаменить(Текст, "О","O");
    Текст = СтрЗаменить(Текст, "П","P");
    Текст = СтрЗаменить(Текст, "Р","R");
    Текст = СтрЗаменить(Текст, "С","S");
    Текст = СтрЗаменить(Текст, "Т","T");
    Текст = СтрЗаменить(Текст, "У","U");
    Текст = СтрЗаменить(Текст, "Ф","F");
    Текст = СтрЗаменить(Текст, "Х","H");
    Текст = СтрЗаменить(Текст, "Ч","Ch");
    Текст = СтрЗаменить(Текст, "Ш","Sh");
    Текст = СтрЗаменить(Текст, "Щ","Sch");
    Текст = СтрЗаменить(Текст, "Ъ","");
    Текст = СтрЗаменить(Текст, "Ь","");
    Текст = СтрЗаменить(Текст, "Ы","I");
    Текст = СтрЗаменить(Текст, "Ц","C");
    Текст = СтрЗаменить(Текст, "Э","E");
    Текст = СтрЗаменить(Текст, "Ю","Yu");
    Текст = СтрЗаменить(Текст, "Я","Ya");
    Текст = СтрЗаменить(Текст, "Й","I"); 
    
    Возврат Текст;
	
КонецФункции

Процедура УстановитьОбновляемыеЗначения(Данные, Объект, Модифицированность = Ложь) Экспорт
	
	//Модифицированность = Ложь;
	
	Если Данные.Свойство("status") Тогда //И НЕ Объект.СтатусЗаявки.Код = Данные.status 
		Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.НайтиПоКоду(Данные.status);
		Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ВозвратНаДоработку") ИЛИ НЕ ЗначениеЗаполнено(Объект.СтатусЗаявки) Тогда
			Объект.УспешнаяОтправка = Ложь;
		Иначе	
			Объект.УспешнаяОтправка = Истина;	
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус заявки обновлен на " + Объект.СтатусЗаявки);
		Объект.ДатаУстановкиСтатуса = ТекущаяДата();		
		Если Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.Отказ 
			ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.ОтказКлиента
			ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.НеКредитуем Тогда 
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		ИначеЕсли Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитОдобрен ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитВыдан Тогда
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		ИначеЕсли Объект.ПараметрыПодключения.ТолькоОтправкаПисем Тогда
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ОтправленаПоПочте");			
		Иначе
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка");			
		КонецЕсли;		
		Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитОдобрен")
			ИЛИ Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитВыдан") Тогда
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Одобрение");
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОдобрениеБанка");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		ИначеЕсли Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.Отказ")
			ИЛИ Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.НеКредитуем") Тогда
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");			
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказБанка");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		ИначеЕсли Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ОтказКлиента") Тогда
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");			
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказКлиентаОтРассмотрения");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		Иначе
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.ПустаяСсылка");
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка");
			Объект.ДатаРешенияБанка = Неопределено;
		КонецЕсли;		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Данные.Свойство("sum_approved") И ЗначениеЗаполнено(Данные.sum_approved) И НЕ СтрЗаменить(Объект.sum_approved, Символы.НПП, "") = СтрЗаменить(Данные.sum_approved, Символы.НПП, "") Тогда
		Попытка
			Объект.sum_approved = Число(Данные.sum_approved);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Одобренная сумма кредита в рублях обновлена на " + Объект.sum_approved);
			Модифицированность = Истина;
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
	//<transactID>, Басаргин (11.08.2017) {
	Если Данные.Свойство("transactID") И ЗначениеЗаполнено(Данные.transactID) И НЕ СокрЛП(Объект.transactID) = СокрЛП(Данные.transactID) Тогда
		Попытка
			Объект.transactID = Данные.transactID;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("transactID = " + Объект.transactID);
			Модифицированность = Истина;
		Исключение	
		КонецПопытки;
	КонецЕсли;	
	//<transactID> }	
		
	//Если ЗначениеЗаполнено(Данные.partner_office_id) И НЕ Объект.partner_office_id = Данные.partner_office_id Тогда
	//	Объект.partner_office_id = Данные.partner_office_id;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("partner_office_id обновлен на " + Объект.partner_office_id);
	//	Модифицированность = Истина;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Данные.agent_id) И НЕ Объект.agent_id = Данные.agent_id Тогда
	//	Объект.agent_id = Данные.agent_id;
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("agent_id обновлен на " + Объект.agent_id);
	//	Модифицированность = Истина;
	//КонецЕсли;
		
	//Если Модифицированность Тогда
	//	Объект.Записать();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсториюСтатусов(МассивСтатусов, ИпотечнаяЗаявка, АктуальныйКомментарий = "", Модифицированность = Ложь) Экспорт
		
	РегНаб = РегистрыСведений.ИсторияСтатусовИпотечныхЗаявок.СоздатьНаборЗаписей();
	РегНаб.Отбор.ИпотечнаяЗаявка.Установить(ИпотечнаяЗаявка);
	РегНаб.Прочитать();
	
	Для каждого Элемент Из МассивСтатусов Цикл
		Попытка				
			Date = ЗаявкиНаКредитRestAPI.ПривестиСтрокуКДате(Элемент.date);
			Status = Справочники.СтатусыИпотечныхЗаявок.НайтиПоКоду(Элемент.status, Истина);					
			Если НЕ ЗаписьЕстьВНаборе(РегНаб, Date, Status) Тогда		
				НовЗапись = РегНаб.Добавить();
				НовЗапись.ИпотечнаяЗаявка = ИпотечнаяЗаявка;
				НовЗапись.Date = Date;
				НовЗапись.Status = Status;
				НовЗапись.Comment = Элемент.Comment;
				
				АктуальныйКомментарий = Элемент.Comment;
				Модифицированность = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;			
	
	ТЗ_История = РегНаб.Выгрузить();
	Если ТЗ_История.Количество() Тогда
		ТЗ_История.Сортировать("Date Desc");
		Если НЕ АктуальныйКомментарий = ТЗ_История[0].Comment Тогда
			АктуальныйКомментарий = ТЗ_История[0].Comment;
		КонецЕсли;
	КонецЕсли;	
		
	Если РегНаб.Модифицированность() Тогда //НЕ РегНаб.Выбран()
		РегНаб.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписьЕстьВНаборе(Набор, Date, Status) Экспорт
	
	Для каждого Запись Из Набор Цикл	
		Если Status = Запись.Status И Date = Запись.Date Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура СоздатьЗаписьЛога(ИпотечнаяЗаявка, Ошибки = "")
	
	Попытка
		МенеджерЗаписи = РегистрыСведений.ЛогПолучениеДанныхЗаявокНаКредит.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Дата = ТекущаяДата();
		МенеджерЗаписи.Ошибки = Ошибки;
		МенеджерЗаписи.ИпотечнаяЗаявка = ИпотечнаяЗаявка;
		//МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.Записать();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

Функция ПолучитьАктуальныеПараметрыАвторизации(Username, Стенд_Token = "")

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияАвторизацииСбербанкОнлайнСрезПоследних.X_Auth_User,
	|	ИсторияАвторизацииСбербанкОнлайнСрезПоследних.Token
	|ИЗ
	|	РегистрСведений.ИсторияАвторизацииСбербанкОнлайн КАК ИсторияАвторизацииСбербанкОнлайнСрезПоследних
	|ГДЕ
	|	ИсторияАвторизацииСбербанкОнлайнСрезПоследних.Username = &Username
	|	И ИсторияАвторизацииСбербанкОнлайнСрезПоследних.Стенд_Token = &Стенд_Token";
	
	Запрос.УстановитьПараметр("Username", Username);
	Если ЗначениеЗаполнено(Стенд_Token) Тогда
		Запрос.УстановитьПараметр("Стенд_Token", Стенд_Token);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИсторияАвторизацииСбербанкОнлайнСрезПоследних.Стенд_Token = &Стенд_Token", "");
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка	= РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Новый Структура("X_Auth_User, Token", Выборка.X_Auth_User, Выборка.Token);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция Перекодировка(Стр="", Кодировка="windows-1251")
	
	Стрим = Новый COMОбъект("Adodb.Stream");
    Стрим.Type = 2;
    Стрим.Mode= 3;
    Стрим.charset="windows-1251";
    Стрим.Open();
    Стрим.WriteText(Стр);
    Стрим.Position=0;
    Стрим.charset=Кодировка;
    Рез=Стрим.ReadText(-1);
    Стрим.Close();
	
    Возврат Рез;
	
КонецФункции

Функция ПолучитьСписокОграниченийРасширенийФайлов() Экспорт
	
	Текст = "png, jpeg, jpg, gif, bmp, rar, zip, 7z, xls, xlsx, doc, docx, word, excel, pdf";
	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ", ");
	
	Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки, Неопределено);
		
КонецФункции

Функция СобратьСтруктуруПисьмаДляМенеджера(Объект, ЗапросНаОдобрение = Ложь) Экспорт
	
	ПараметрыAPI = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РекомендуемыйБанк, "ПараметрыПодключения");
	Если НЕ ЗначениеЗаполнено(ПараметрыAPI) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI, Объект.Ответственный);	
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	МассивАдресатов = Новый Массив;	
	АдресПочты = ?(ЗначениеЗаполнено(ПараметрыПодключения.АдресДляРассылки), ПараметрыПодключения.АдресДляРассылки, АдресЭлектроннойПочты(Объект.Ответственный));
	Если ЗначениеЗаполнено(АдресПочты) Тогда
		МассивАдресатов.Добавить(АдресПочты);
	КонецЕсли;

	Если МассивАдресатов.Количество() Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Кому", ПолучитьСтрокуИзМассиваПодстрок(МассивАдресатов, ";"));
		Копии = Новый Массив;
		Если ЗначениеЗаполнено(ПараметрыПодключения.АдресДляРассылки_common) Тогда
			Копии.Добавить(Новый Структура("Адрес, Представление", ПараметрыПодключения.АдресДляРассылки_common, ПараметрыПодключения.АдресДляРассылки_common));  //ПараметрыПодключения.username_common
			ПараметрыСообщения.Вставить("Копии", Копии);
		КонецЕсли;
		ПараметрыСообщения.Вставить("ОбрабатыватьТексты", Ложь);
		ПараметрыСообщения.Вставить("Тема", "" + Объект.РекомендуемыйБанк + ". Заявка клиента " + Объект.ФИОКлиента + ", переведена в статус «" + Объект.СтатусЗаявки + "»"); //"~~Изменение статуса ипотечной заявки ID = " + СтрЗаменить(Объект.ID_Заявки, Символы.НПП, "")		
		ПараметрыСообщения.Вставить("ТипТекста", "HTML");
		ПараметрыСообщения.Вставить("Тело", ?(ЗапросНаОдобрение, ПодготовитьТелоПисьмаМенеджеру_ЗапросНаОдобрение(Объект), ПодготовитьТелоПисьмаМенеджеру(Объект)));
		ПараметрыСообщения.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Высокая);
		
		Возврат ПараметрыСообщения;
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция АдресЭлектроннойПочты(Получатель) Экспорт
	
	Адрес = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Адрес = ЭлектроннаяПочтаВнешнегоПользователя(Получатель);
		КонецЕсли;
	КонецЕсли;
	        
	Если НЕ ЗначениеЗаполнено(Адрес) Тогда
		Если НЕ ЗначениеЗаполнено(Адрес) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Получатель.ИдентификаторПользователяИБ);
			Если НЕ ПользовательИБ = Неопределено Тогда
				ПользовательОС = СокрЛП(ПользовательИБ.ПользовательОС);
				Если СтрНайти(ПользовательОС, "\\ABSGROUP\") > 0 Тогда
				 	Адрес = СтрЗаменить(ПользовательОС, "\\ABSGROUP\", "") + "@absgroup.ru";
				ИначеЕсли СтрНайти(ПользовательОС, "ABSGROUP\") > 0 Тогда
				 	Адрес = СтрЗаменить(ПользовательОС, "ABSGROUP\", "") + "@absgroup.ru";
				КонецЕсли;			
		    КонецЕсли;		
		КонецЕсли;			
	КонецЕсли;		
			
	Возврат Адрес;
	
КонецФункции

Функция ЭлектроннаяПочтаВнешнегоПользователя(Получатель)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		Возврат МодульУправлениеКонтактнойИнформациейСлужебный.ПервоеЗначениеКонтактнойИнформацииОбъектаПоТипу(
			Получатель.ОбъектАвторизации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПодготовитьТелоПисьмаМенеджеру(Объект, Режим = "HTML")
	
	Если Режим = "HTML" Тогда
		ЗаголовокПисьма = Строка(Объект);
		
		СтруктураПисьма = Новый ТаблицаЗначений;
		СтруктураПисьма.Колонки.Добавить("Ключ",,"Ключ");
		СтруктураПисьма.Колонки.Добавить("Значение",,"Значение");
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "ФИО клиента";
		Стр.Значение = Объект.ФИОКлиента;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Телефон клиента";
		Стр.Значение = Объект.НомерТелефонаКлиента;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Почта клиента";
		Стр.Значение = Объект.EmailКлиента;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Дата отправки заявки в банк";
		Стр.Значение = Объект.ДатаПодачиЗаявки;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Банк";
		Стр.Значение = Объект.РекомендуемыйБанк;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Отделение банка";
		Стр.Значение = Справочники.ОтделенияИпотечныхБанков.НайтиПоРеквизиту("ID", Объект.ЦИК, , Объект.РекомендуемыйБанк);
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Текущий статус заявки";
		Стр.Значение = Объект.СтатусЗаявки;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Дата установки текущего статуса";
		Стр.Значение = Объект.ДатаУстановкиСтатуса;		
		
		Если Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитОдобрен Тогда
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Сумма кредита запрошенная";
			Стр.Значение = Объект.СуммаКредитаВРублях;	
			
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Сумма кредита одобренная";
			Стр.Значение = Объект.sum_approved;	
		Иначе
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Комментарий статуса";
			Стр.Значение = Объект.КомментарийСтатуса;			
		КонецЕсли;
		
		ТекстHTML = "<table border=""2"" bordercolor=""black"" cellpadding=""3"" cellspacing=""0"" style=""font-size: 9pt; margin-left: 40px;"">" + 
						"<caption>" + ЗаголовокПисьма + "</caption>" + 
							"<tbody>"; //+
							
								//"<tr align=""center"">" + 
								//	"<td height=""40"">Измененные реквизиты</td>" +
								//	"<td height=""40"">Старое значение</td>" +
								//"</tr>";
													
		Для каждого ЭлементСтруктуры Из СтруктураПисьма Цикл
			ТекстHTML = ТекстHTML +
			"<tr>" +
				"<td >" + ЭлементСтруктуры.Ключ + "</td>" + 
				"<td >" + Строка(ЭлементСтруктуры.Значение) + "</td>" +  
			"</tr>";	
		КонецЦикла;
		
		ТекстHTML = ТекстHTML +														
				"</tbody>" +
			"</table>" +
		"<p>&nbsp;</p>";
		
		Возврат ТекстHTML;
	Иначе
		Тело = "Добрый день, " + Объект.Ответственный + "! " + Символы.ПС;
		Тело = Тело + "Уведомляем Вас о смене статуса заявки на кредит в " + Объект.РекомендуемыйБанк + ". " + Символы.ПС + Символы.ВК;
		Тело = Тело + "Клиент " + Объект.ФИОКлиента + "(" + Объект.НомерТелефонаКлиента + "). " + Символы.ПС;
		Тело = Тело + "Статус Ипотечной заявки № " + Объект.Номер + " от " + Объект.Дата + " изменен на <" + Объект.СтатусЗаявки + ">. "; 
		Если ЗначениеЗаполнено(Объект.КомментарийСтатуса) Тогда
			Тело = Тело + Символы.ПС + "Комментарий: " + Объект.КомментарийСтатуса + ". ";	
		КонецЕсли;		
		Если Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитОдобрен Тогда
			Тело = Тело + Символы.ПС + "Запрашиваемая сумма кредита: " + Объект.СуммаКредитаВРублях + " руб.";
			Тело = Тело + Символы.ПС + "Одобренная сумма кредита: " + Объект.sum_approved + " руб.";		
		КонецЕсли;
		
		Возврат Тело;
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьОповещениеОбИзмененииСтатуса(ПараметрыПисьма = Неопределено, УчетнаяЗапись = Неопределено) Экспорт
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			?(УчетнаяЗапись = Неопределено, МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), УчетнаяЗапись), ПараметрыПисьма);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОтправитьОповещениеОбИзмененииСтатуса.Уведомление о смене статусов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке уведомления о смене статусов ипотечных заявок: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));			  
	КонецПопытки;
	
КонецПроцедуры

//<Отчетность>, Басаргин (14.06.2017) {
Функция ПолучитьСтатистику(Стенд, Cookie, ПериодНачало, ПериодОкончание, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Метод = "/stats/" + "?from=" + Формат(ПериодНачало,"ДФ=yyyy-MM-dd") + "&to=" + Формат(ПериодОкончание,"ДФ=yyyy-MM-dd");
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	HTTPОтвет = Неопределено;
	Попытка
		HTTPОтвет = HTTP.Получить(ЗапросHTTP, ФайлРезультата);
	Исключение
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка получения статистики";
		
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				data = тДанные.result;
				тЧтение.Закрыть();
				
				Возврат data;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;
	
КонецФункции

Функция ЗаписьКлиентовКомпании(Стенд, Cookie, ФИО_Дольщиков, deal_type, employee, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
				
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Метод = "/client/";
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	clients = Новый Массив;
	
	Дольщики = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ФИО_Дольщиков, ";");	
	Если НЕ Дольщики.Количество() Тогда 
		clients.Добавить(Новый Структура("external_id, deal_type, employee", СокрЛП(ФИО_Дольщиков), deal_type, employee));		
	Иначе
		Для каждого external_id Из Дольщики Цикл
			clients.Добавить(Новый Структура("external_id, deal_type, employee", СокрЛП(external_id), deal_type, employee));
		КонецЦикла;
	КонецЕсли;

	СтруктураЗапроса = Новый Структура("clients", clients);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	//ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 	
	HTTPОтвет = Неопределено;
	Попытка
		//HTTPОтвет = HTTP.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		HTTPОтвет = HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение			
		//тЧтение = Новый ЧтениеJSON;
		//тЧтение.ОткрытьФайл(ФайлРезультата);
		//тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);

		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка записи клиентов компании";
		
		Возврат Ложь;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				id = тДанные.result[0].id;
				тЧтение.Закрыть();
				
				Возврат id;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьОшибкиЗагрузки(Стенд, Cookie, ID, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Метод = "/errors/" + "?session=" + СтрЗаменить(ID, Символы.НПП, "") + "";
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	HTTPОтвет = Неопределено;
	Попытка
		HTTPОтвет = HTTP.Получить(ЗапросHTTP, ФайлРезультата);
	Исключение
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				data = тДанные.result.items;
				тЧтение.Закрыть();
				
				Возврат data;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;
	
КонецФункции

Функция ЗаписьСделок(Стенд, Cookie, Сделка, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
				
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Метод = "/deals/";
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	addresses = Новый Массив;
	addresses.Добавить(Сделка.АдресОфисаПродаж);	
	
	deals = Новый Массив;		
	Если Сделка.ТипСделки = 2 Тогда
		deals.Добавить(Новый Структура("external_id, inn, request_date, office, employee, price, addresses, deal_type", Строка(Сделка.Сделка.УникальныйИдентификатор()), Сделка.ИНН, Сделка.ДатаДоговораСтрокой, Сделка.ID_Офиса, Сделка.ID_Ответственного, Сделка.СуммаСделки, addresses, Сделка.ТипСделки)); // Сделка.СуммаСделки
	Иначе
		deals.Добавить(Новый Структура("external_id, inn, request_date, office, employee, price, addresses, deal_type, bank", Строка(Сделка.Сделка.УникальныйИдентификатор()), Сделка.ИНН, Сделка.ДатаДоговораСтрокой, Сделка.ID_Офиса, Сделка.ID_Ответственного, Сделка.СуммаСделки, addresses, Сделка.ТипСделки, Сделка.Банк)); // Сделка.СуммаСделки
	КонецЕсли;	
	
	СтруктураЗапроса = Новый Структура("deals", deals);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	//ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 	
	HTTPОтвет = Неопределено;
	Попытка
		//HTTPОтвет = HTTP.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		HTTPОтвет = HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение			
		//тЧтение = Новый ЧтениеJSON;
		//тЧтение.ОткрытьФайл(ФайлРезультата);
		//тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);

		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка записи сделки";
		
		Возврат 0;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				id = тДанные.result.id;
				тЧтение.Закрыть();
				
				Возврат id;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;		
	
	Возврат 0;
	
КонецФункции

Функция ЗаписьСотрудниковКомпании(Стенд, Cookie, external_id, full_name, office, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
				
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Метод = "/employee/";
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	employees = Новый Массив;
	employees.Добавить(Новый Структура("external_id, full_name, office", external_id, full_name, office));
	
	СтруктураЗапроса = Новый Структура("employees", employees);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	//ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 	
	HTTPОтвет = Неопределено;
	Попытка
		//HTTPОтвет = HTTP.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		HTTPОтвет = HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение			
		//тЧтение = Новый ЧтениеJSON;
		//тЧтение.ОткрытьФайл(ФайлРезультата);
		//тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);

		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка записи сотрудника компании";
		
		Возврат Ложь;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				id = тДанные.result[0].id;
				тЧтение.Закрыть();
				
				Возврат id;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаписьОфисов(Стенд, Cookie, external_id, address, company, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
				
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	Метод = "/office/";
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	offices = Новый Массив;
	offices.Добавить(Новый Структура("external_id, address, company", external_id, address, company));
	
	СтруктураЗапроса = Новый Структура("offices", offices);
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	//ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 	
	HTTPОтвет = Неопределено;
	Попытка
		//HTTPОтвет = HTTP.ОтправитьДляОбработки(ЗапросHTTP, ФайлРезультата);
		HTTPОтвет = HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение			
		//тЧтение = Новый ЧтениеJSON;
		//тЧтение.ОткрытьФайл(ФайлРезультата);
		//тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);

		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка записи офиса";
		
		Возврат Ложь;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				id = тДанные.result[0].id;
				тЧтение.Закрыть();
				
				Возврат id;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;		
	
	Возврат Ложь;
	
КонецФункции
	
Функция ПолучитьТипыСделок(Стенд, Метод, Cookie, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	HTTPОтвет = Неопределено;
	Попытка
		HTTPОтвет = HTTP.Получить(ЗапросHTTP, ФайлРезультата);
	Исключение
		
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				data = тДанные.result.items;
				тЧтение.Закрыть();
				Возврат data;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьБанки(Стенд, Метод, Cookie, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("Cookie", Cookie);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	HTTPОтвет = Неопределено;
	Попытка
		HTTPОтвет = HTTP.Получить(ЗапросHTTP, ФайлРезультата);
	Исключение
		
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		
		Возврат Неопределено;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("success") Тогда	           
			Если тДанные.success И тДанные.Свойство("result") Тогда
				data = тДанные.result.items;
				тЧтение.Закрыть();
				Возврат data;
			Иначе
				Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		тЧтение.Закрыть();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКуки(Стенд, Метод, СтруктураЗапроса, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) Экспорт 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	
	HTTPОтвет = Неопределено;	
	Попытка
		HTTPОтвет = HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		Ошибки = Ошибки + " не удалось получить значение session_id";
		Возврат "";
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда		
		Set_Cookie = HTTPОтвет.Заголовки.Получить("Set-Cookie");
		ПозНач = Найти(Set_Cookie, "session_id=");
		Cookie = "";
		Для й = ПозНач По СтрДлина(Set_Cookie) Цикл
			Если Сред(Set_Cookie, й, 1) = ";" Тогда
				Прервать;	
			КонецЕсли;
			Cookie = Cookie + Сред(Set_Cookie, й, 1);
		КонецЦикла;
		
		//отладка
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		
		Возврат Cookie;
	КонецЕсли;
			
КонецФункции

Процедура СоздатьЗаписьЛогаОтчетности(Сделка, ID, Ошибки = "") Экспорт
	
	Попытка
		МенеджерЗаписи = РегистрыСведений.ЛогОшибокВыгрузкиОтчетности.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Дата = ТекущаяДата();
		МенеджерЗаписи.Сделка = Сделка;
		МенеджерЗаписи.Ошибки = Ошибки;
		МенеджерЗаписи.ID = ID;
		МенеджерЗаписи.Записать();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры
//<Отчетность> }

//<Запрос на одобрение>, Басаргин (11.08.2017) {
Функция ВыполнитьПоискКлиента(ПараметрыAPI, ПолеПоиска, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт

	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			РезультатыПоиска = ПолучитьРезультатыПоискаКлиента(ПолеПоиска, Стенд_Token, "/part/api/v1/request/client", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат РезультатыПоиска;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросНаОдобрение(ПараметрыAPI, НомерТранзакта, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username; //"ipoteka@su22.ru";//
		Если ЗначениеЗаполнено(НомерТранзакта) Тогда
			ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
			Если Ошибки = "" Тогда
				Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
				Прокси = ПараметрыПодключения.Прокси;  //, reserveAgent
				СтруктураЗапроса = Новый Структура("transactId, training, agent", НомерТранзакта, Тест, Новый Структура("email", ПочтовыйАдресОтправителя)); //, Новый Структура("email", ПочтовыйАдресОтправителя)
				ID_Запроса = СоздатьЗапросНаОдобрение(СтруктураЗапроса, Стенд_Token, "/part/api/v1/approval/requests", Token, X_Auth_User, Истина, Ошибки, Прокси);
				Если Ошибки = "" Тогда
					Возврат ID_Запроса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьФайлКЗапросуНаОдобрение(ПараметрыAPI, ID_Заявки, Файл, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ДоступныеФорматы = ПолучитьСписокОграниченийРасширенийФайлов();
	Если НЕ ДоступныеФорматы = Неопределено Тогда
		Если ДоступныеФорматы.Найти(Файл.Расширение) = Неопределено Тогда
			Ошибки = "Файл с расширением " + Файл.Расширение + " не доступен для загрузки.";
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			Данные = ОтправитьПрикрепленныйФайлКЗапросуНаОдобрение(ID_Заявки, Файл, Стенд_Token, "/part/api/v1/approval/requests/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/addDocument", Token, X_Auth_User, Истина, Ошибки, Ложь, Прокси);		
			Если Ошибки = "" Тогда
				Данные.create_date = ПривестиСтрокуКДате(Данные.create_date);
				Возврат Данные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьКомментарийКЗапросуНаОдобрение(ПараметрыAPI, ID_Запроса, ID_ЗаявкиНаКредит, Комментарий, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username; //"ipoteka@su22.ru";//ПараметрыПодключения.username;
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);		
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			Структура = Новый Структура();
			Структура.Вставить("comment", Комментарий);
			Структура.Вставить("email", ПочтовыйАдресОтправителя);
			Структура.Вставить("id", ID_Запроса); //ID_ЗаявкиНаКредит???
			ID_Коментария = ОтправитьКомментарийКЗапросуНаОдобрение(ID_Запроса, Структура, Стенд_Token, "/part/api/v1/approval/requests/" + СтрЗаменить(ID_Запроса, Символы.НПП, "") + "/addComment", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ID_Коментария;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИзменитьСтатусЗапросаНаОдобрение(ПараметрыAPI, СтатусЗаявки, ID_Заявки, КомментарииСтатуса = "", Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПочтовыйАдресОтправителя = ПараметрыПодключения.username; //"ipoteka@su22.ru";//ПараметрыПодключения.username;
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);		
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			Структура = Новый Структура();
			Структура.Вставить("comment", КомментарииСтатуса);
			Структура.Вставить("id", ID_Заявки);
			Структура.Вставить("email", ПочтовыйАдресОтправителя);
			Структура.Вставить("statusId", СтатусЗаявки.Код);
			ИдентификаторЗаявкиНаКредит = УстановитьСтатусЗапросаНаОдобрение(Структура, Стенд_Token, "/part/api/v1/approval/requests/" + СтрЗаменить(ID_Заявки, Символы.НПП, "") + "/status", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ИдентификаторЗаявкиНаКредит;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеЗапросаНаОдобрение(ПараметрыAPI, ID_Заявки, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			ДанныеЗапроса = ПолучитьДанныеЗапросаНаОдобренияДляОбработки(ID_Заявки, Стенд_Token, "/part/api/v1/approval/requests/" + СтрЗаменить(ID_Заявки, Символы.НПП, ""), Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ДанныеЗапроса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокЗапросовНаОдобрение(ПараметрыAPI, Token = "", X_Auth_User = "", Тест = Ложь, Ошибки = "")  Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ПараметрыAPI);
	Если Не ПараметрыПодключения = Неопределено Тогда			
		ПроверитьАктивностьСессии(ПараметрыAPI, Token, X_Auth_User, Тест, Ошибки);
		Если Ошибки = "" Тогда
			Стенд_Token = ?(Тест, ПараметрыПодключения.ТестовыйСтенд_Token, ПараметрыПодключения.ПродуктивныйСтенд_Token);
			Прокси = ПараметрыПодключения.Прокси;
			ЗапросовыНаОдобрение = СписокЗапросовНаОдобрение(Стенд_Token, "/part/api/v1/approval/requests", Token, X_Auth_User, Истина, Ошибки, Прокси);
			Если Ошибки = "" Тогда
				Возврат ЗапросовыНаОдобрение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьИсториюСтатусовЗапросаНаОдобрение(МассивСтатусов, ЗапросНаОдобрение, АктуальныйКомментарий = "", Модифицированность = Ложь) Экспорт
		
	РегНаб = РегистрыСведений.ИсторияСтатусовИпотечныхЗаявок.СоздатьНаборЗаписей();
	РегНаб.Отбор.ИпотечнаяЗаявка.Установить(ЗапросНаОдобрение);
	РегНаб.Прочитать();
	
	Для каждого Элемент Из МассивСтатусов Цикл
		Попытка				
			Date = (Дата(1970,1,1,0,0,0) + Элемент.date);
			Status = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.НайтиПоКоду(Элемент.statusId, Истина);					
			Если НЕ ЗаписьЕстьВНаборе(РегНаб, Date, Status) Тогда		
				НовЗапись = РегНаб.Добавить();
				НовЗапись.ИпотечнаяЗаявка = ЗапросНаОдобрение;
				НовЗапись.Date = Date;
				НовЗапись.Status = Status;
				НовЗапись.Comment = Элемент.Comment;
				НовЗапись.ID = Элемент.ID;
				
				АктуальныйКомментарий = Элемент.Comment;
				Модифицированность = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;			
	
	ТЗ_История = РегНаб.Выгрузить();
	Если ТЗ_История.Количество() Тогда
		ТЗ_История.Сортировать("Date Desc");
		Если НЕ АктуальныйКомментарий = ТЗ_История[0].Comment Тогда
			АктуальныйКомментарий = ТЗ_История[0].Comment;
		КонецЕсли;
	КонецЕсли;		
	
	Если РегНаб.Модифицированность() Тогда //НЕ РегНаб.Выбран()
		РегНаб.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьКомментарииЗапросаНаОдобрение(Коллекция_Comments, КомментарииЗаявки, Модифицированность = Ложь) Экспорт
		
	Для каждого Элемент Из Коллекция_Comments Цикл
		СтрокиКомментариев = КомментарииЗаявки.НайтиСтроки(Новый Структура("ID", Элемент.ID));
		Если СтрокиКомментариев.Количество() Тогда
			Для каждого Строка Из СтрокиКомментариев Цикл
				Если НЕ Строка.Комментарий = Элемент.comment
					ИЛИ НЕ Строка.date = Элемент.date Тогда
					Модифицированность = Истина;
				Иначе
					Продолжить;
				КонецЕсли;				
				ЗаполнитьЗначенияСвойств(Строка, Элемент);
				Строка.Комментарий = Элемент.comment;
				Строка.ДатаОтправки = (Дата(1970, 1, 1, 0, 0, 0) + Элемент.date);
				Строка.Отправлять = Ложь;
			КонецЦикла;
		Иначе
			СтрокаКомментариев = КомментарииЗаявки.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаКомментариев, Элемент);
			СтрокаКомментариев.Комментарий = Элемент.comment;
			СтрокаКомментариев.ДатаОтправки = (Дата(1970, 1, 1, 0, 0, 0) + Элемент.date);	
			СтрокаКомментариев.Отправлять = Ложь;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;	
	КомментарииЗаявки.Сортировать("date");

	Возврат КомментарииЗаявки;
	
КонецФункции

Функция ПодготовитьТелоПисьмаМенеджеру_ЗапросНаОдобрение(Объект, Режим = "HTML") Экспорт
	
	Если Режим = "HTML" Тогда
		ЗаголовокПисьма = Строка(Объект);
		
		СтруктураПисьма = Новый ТаблицаЗначений;
		СтруктураПисьма.Колонки.Добавить("Ключ",,"Ключ");
		СтруктураПисьма.Колонки.Добавить("Значение",,"Значение");
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "ФИО клиента";
		Стр.Значение = Объект.ФИОКлиента;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Телефон клиента";
		Стр.Значение = Объект.НомерТелефонаКлиента;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Почта клиента";
		Стр.Значение = Объект.EmailКлиента;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Дата отправки запроса в банк";
		Стр.Значение = Объект.ДатаПодачиЗаявки;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Банк";
		Стр.Значение = Объект.РекомендуемыйБанк;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Отделение банка";
		Стр.Значение = Объект.ОтделениеБанка;
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Текущий статус заявки";
		Стр.Значение = Объект.СтатусЗаявки;		
		
		Стр = СтруктураПисьма.Добавить();
		Стр.Ключ = "Дата установки текущего статуса";
		Стр.Значение = Объект.ДатаУстановкиСтатуса;		
		
		Если Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.ОбъектСоответствуетТребованиямБанка Тогда
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Сумма кредита запрошенная";
			Стр.Значение = Объект.СуммаКредитаВРублях;	
			
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Сумма кредита одобренная";
			Стр.Значение = Объект.sum_approved;	
		Иначе
			Стр = СтруктураПисьма.Добавить();
			Стр.Ключ = "Комментарий статуса";
			Стр.Значение = Объект.КомментарийСтатуса;			
		КонецЕсли;
				
		ТекстHTML = "<table border=""2"" bordercolor=""black"" cellpadding=""3"" cellspacing=""0"" style=""font-size: 9pt; margin-left: 40px;"">" + 
						"<caption>" + ЗаголовокПисьма + "</caption>" + 
							"<tbody>"; //+
							
								//"<tr align=""center"">" + 
								//	"<td height=""40"">Измененные реквизиты</td>" +
								//	"<td height=""40"">Старое значение</td>" +
								//"</tr>";
													
		Для каждого ЭлементСтруктуры Из СтруктураПисьма Цикл
			ТекстHTML = ТекстHTML +
			"<tr>" +
				"<td >" + ЭлементСтруктуры.Ключ + "</td>" + 
				"<td >" + Строка(ЭлементСтруктуры.Значение) + "</td>" +  
			"</tr>";	
		КонецЦикла;
		
		ТекстHTML = ТекстHTML +														
				"</tbody>" +
			"</table>" +
		"<p>&nbsp;</p>";
		
		Возврат ТекстHTML;
	Иначе
		Тело = "Добрый день, " + Объект.Ответственный + "! " + Символы.ПС;
		Тело = Тело + "Уведомляем Вас о смене статуса запроса на одобрение в " + Объект.РекомендуемыйБанк + ". " + Символы.ПС + Символы.ВК;
		Тело = Тело + "Клиент " + Объект.ФИОКлиента + "(" + Объект.НомерТелефонаКлиента + "). " + Символы.ПС;
		Тело = Тело + "Статус Запроса на одобрение № " + Объект.Номер + " от " + Объект.Дата + " изменен на <" + Объект.СтатусЗаявки + ">. "; 
		Если ЗначениеЗаполнено(Объект.КомментарийСтатуса) Тогда
			Тело = Тело + Символы.ПС + "Комментарий: " + Объект.КомментарийСтатуса + ". ";	
		КонецЕсли;		
		
		Возврат Тело;
	КонецЕсли;
	
КонецФункции

//======================================================================================================================
//API
//======================================================================================================================

Функция ПолучитьРезультатыПоискаКлиента(ПолеПоиска, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод + "?search=" + СтрЗаменить(СокрЛП(ПолеПоиска), " ", "%20"), ЗаголовокHTTP); 
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);	
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			data = тДанные.data;
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть()
	
КонецФункции

Функция СоздатьЗапросНаОдобрение(СтруктураЗапроса, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗапроса, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("code") Тогда	           
			Если ЗначениеЗаполнено(тДанные.code) Тогда
				Если тДанные.Свойство("error") И ТипЗнч(тДанные.error) = Тип("Структура") Тогда
					Для каждого Элемент Из тДанные.error Цикл
						Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
							Для каждого Эл Из Элемент.Значение Цикл
								Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
							КонецЦикла;
						Иначе
							Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
						КонецЕсли;
					КонецЦикла;                                                                              
				ИначеЕсли тДанные.Свойство("error") И ТипЗнч(тДанные.error) = Тип("Массив") Тогда
					Для каждого Элемент Из тДанные.error Цикл
						Если ТипЗнч(Элемент.message) = Тип("Массив") Тогда
							Для каждого Эл Из Элемент.message Цикл
								Ошибки = Ошибки + Элемент.fieldName + " : " + Эл + Символы.ПС;	
							КонецЦикла;
						Иначе
							Ошибки = Ошибки + Элемент.fieldName + " : " + Элемент.message + Символы.ПС;
						КонецЕсли;
					КонецЦикла;					
				Иначе
					Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Ошибка отправки заявки";	
				КонецЕсли;
			Иначе
				Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка отправки заявки";
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка отправки заявки";
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("code") Тогда	           
		Если НЕ ЗначениеЗаполнено(тДанные.code) Тогда
			Если тДанные.Свойство("data") Тогда
				id = тДанные.data.id;
				тЧтение.Закрыть();
				
				Возврат id;
			Иначе
				Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка отправки заявки";				
			КонецЕсли;
		Иначе
			Если тДанные.Свойство("error") И ТипЗнч(тДанные.error) = Тип("Массив") Тогда
				Для каждого Элемент Из тДанные.error Цикл
					Если ТипЗнч(Элемент.Message) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.message Цикл
							Ошибки = Ошибки + Элемент.fieldName + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.fieldName + " : " + Элемент.message + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Ошибка отправки заявки";	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка отправки заявки";		
	КонецЕсли;
	тЧтение.Закрыть();

КонецФункции

Функция ОтправитьКомментарийКЗапросуНаОдобрение(ID_Заявки, Структура, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	
	//Структура = Новый Структура();
	//Структура.Вставить("text", Комментарий);
	//Структура.Вставить("request_id", ID_Заявки);
	//Структура.Вставить("email", ПочтовыйАдресОтправителя);
		
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Структура, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	Попытка
		HTTP.ОтправитьДляОбработки(ФайлЗапроса, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда	
			id = тДанные.data.id;			
			тЧтение.Закрыть();
		
			Возврат id;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка отправки комментария";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка отправки комментария";
	КонецЕсли;
	тЧтение.Закрыть()	
	
КонецФункции

Функция ОтправитьПрикрепленныйФайлКЗапросуНаОдобрение(ID_Заявки, ПрикрепляемыйФайл, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", КодироватьBase64 = Ложь, Прокси = Неопределено)
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
	
	Boundary = "----" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); // 
	
	ИмяФайлаДляЗагрузки = ПолучитьПутьКФайлу(ПрикрепляемыйФайл);
	
	Если ИмяФайлаДляЗагрузки = "" Тогда
		Ошибки = "Не установлен путь к файлу";
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаДляЗагрузки);
	Если НЕ Файл.Существует() Тогда
		Ошибки = "Файл " + ИмяФайлаДляЗагрузки + " не существует.";
		Возврат Неопределено; 
	КонецЕсли; 
	
	ДопустимыйРазмерФайлаВБайтах = 20971520;	
	Если Файл.Размер() > ДопустимыйРазмерФайлаВБайтах Тогда 
		Ошибки = "Размер файла " + ИмяФайлаДляЗагрузки + " превышает допустимый.";
		Возврат Неопределено; 
	КонецЕсли;
	
	ИмяФайлаДляСервера = Файл.ИмяБезРасширения;	
	//Если СтрокаНаписанаПоРусски(ИмяФайлаДляСервера) Тогда
		ИмяФайлаДляСервера = СтрЗаменить(Транслит(ИмяФайлаДляСервера), "№", "");//Перекодировка(ИмяФайлаДляСервера);
	//КонецЕсли;
	
	ИмяФайлаДляСервера = ИмяФайлаДляСервера + Файл.Расширение;
	
	РасширениеФайлаДляСервера = СтрЗаменить(Сред(Файл.Расширение, 2), ".", "");
	
	ПапкаВременныхФайлов = КаталогВременныхФайлов();
	ИмяФайлаОтправки = ПапкаВременныхФайлов + Boundary + ".txt";
	
	Если КодироватьBase64 Тогда
		// base64_decode()	
		СодержимоеФайла = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДляЗагрузки)); 
		ФайлОтправки = Новый ЗаписьТекста(ИмяФайлаОтправки, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
		ФайлОтправки.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename=""" + ИмяФайлаДляСервера + """"); 
		//ФайлОтправки.ЗаписатьСтроку("Content-Type: " + ПолучитьСоответствиеMimeType(РасширениеФайлаДляСервера) + Символы.ПС);
		ФайлОтправки.ЗаписатьСтроку(""); 
		ФайлОтправки.ЗаписатьСтроку(СодержимоеФайла); 
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary); 
		ФайлОтправки.ЗаписатьСтроку("--" + Boundary + "--"); 
		ФайлОтправки.Закрыть();	
	Иначе	
		//стандарт
		МассивФайловДляОбъединения = Новый Массив;
		
		ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt"); 
		ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь); //КодировкаТекста.UTF8 ANSI
		ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary); 
		//На сервере: $_FILES['datafile']['name'] 
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""document""; filename=""" + ИмяФайлаДляСервера + """"); 
		//ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: " + ПолучитьСоответствиеMimeType(РасширениеФайлаДляСервера) + Символы.ПС); //"application/x-octet-stream" 
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Type: ");
		ФайлОтправкиНачало.ЗаписатьСтроку(""); 
		ФайлОтправкиНачало.Закрыть(); 
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало); 
			
		ИмяФайлаДляЗагрузкиВременный = ПолучитьИмяВременногоФайла("tmp"); 
		КопироватьФайл(ИмяФайлаДляЗагрузки, ИмяФайлаДляЗагрузкиВременный); //КопироватьФайл(<ИмяФайлаИсточника>, <ИмяФайлаПриемника>) 
		МассивФайловДляОбъединения.Добавить(ИмяФайлаДляЗагрузкиВременный);
		//ФайлДляЗагрузкиВременный = Новый Файл(ИмяФайлаДляЗагрузкиВременный);
		
		ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt"); 
		ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь); 
		
		//ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary); //&&& 
		
		ФайлОтправкиКонец.ЗаписатьСтроку(""); 
		ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--"); 
		ФайлОтправкиКонец.Закрыть(); 
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец); 
		
		ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки); //ОбъединитьФайлы(<ИменаЧастей>, <ИмяРезультирующегоФайла>) 			
		//ИмяФайлаОтправки - Результирующий POST запрос
	КонецЕсли;
	
	ФайлОтправки = Новый Файл(ИмяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());	
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary); //charset=utf-8; 	
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
		
	Попытка
		HTTP.ОтправитьДляОбработки(ИмяФайлаОтправки, Метод, ФайлРезультата, ЗаголовокHTTP);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайлаОтправки); 
		Если НЕ КодироватьBase64 Тогда 
		    Для каждого ЭлементМассива Из МассивФайловДляОбъединения Цикл 
				Попытка
					УдалитьФайлы(ЭлементМассива); 
				Исключение	
				КонецПопытки;
		    КонецЦикла; 
		КонецЕсли; 	
				
		Возврат Неопределено;
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаОтправки); 
	Если НЕ КодироватьBase64 Тогда 
		Для каждого ЭлементМассива Из МассивФайловДляОбъединения Цикл 
			Попытка
				УдалитьФайлы(ЭлементМассива); 
			Исключение	
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли; 	
		
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда	
			data = тДанные.data;			
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка отправки файла";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка отправки файла";
	КонецЕсли;
	тЧтение.Закрыть()	
	
КонецФункции

Функция УстановитьСтатусЗапросаНаОдобрение(Структура, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
	
	ФайлЗапроса = ПолучитьИмяВременногоФайла("json");
	
	тНастройкиСериализации = Новый НастройкиСериализацииJSON;
	тНастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	тНастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
			
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.ОткрытьФайл(ФайлЗапроса, , , Новый ПараметрыЗаписиJSON( ПереносСтрокJSON.Авто, Символы.Таб) );
	ЗаписатьJSON(ЗаписьJSON, Структура, тНастройкиСериализации);//, "ФункцияПреобразования", ЭтотОбъект); 
	ЗаписьJSON.Закрыть();	
	
	ФайлОтправки = Новый Файл(ФайлЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	ЗаголовокHTTP.Вставить("Content-Length", РазмерФайлаОтправки);
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	ЗапросHTTP.УстановитьИмяФайлаТела(ФайлЗапроса);	
	
	Попытка
		//HTTPОтвет = HTTP.Изменить(ЗапросHTTP);
		HTTP.ВызватьHTTPМетод("PATCH", ЗапросHTTP, ФайлРезультата);
	Исключение		
		Ошибки = Ошибки + Символы.ПС + "Ошибка установки статуса запроса на одобрение объекта:" + ОписаниеОшибки();		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			id = тДанные.data.id;
			тЧтение.Закрыть();
			
			Возврат id;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка  изменения статуса";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка изменения статуса";
	КонецЕсли;
	тЧтение.Закрыть();	
	
	//Тело = HTTPОтвет.ПолучитьТелоКакСтроку();
	//
	//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
	//ТекстовыйФайлОтвет.УстановитьТекст(Тело);
	//ТекстовыйФайлОтвет.Записать(ФайлРезультата, КодировкаТекста.UTF8);		
	//
	//Попытка
	//	тЧтение = Новый ЧтениеJSON;
	//	тЧтение.ОткрытьФайл(ФайлРезультата);
	//	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	//	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
	//		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
	//			id = тДанные.data.id;
	//			тЧтение.Закрыть();
	//			
	//			Возврат id;
	//		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
	//			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
	//		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
	//			Для каждого Элемент Из тДанные.data Цикл
	//				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
	//					Для каждого Эл Из Элемент.Значение Цикл
	//						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
	//					КонецЦикла;
	//				Иначе
	//					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
	//				КонецЕсли;
	//			КонецЦикла;
	//		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
	//			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
	//		Иначе
	//			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка  изменения статуса";
	//		КонецЕсли;
	//	Иначе
	//		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка изменения статуса";
	//	КонецЕсли;
	//	тЧтение.Закрыть();
	//Исключение		
	//	Ошибки = Ошибки + Символы.ПС + "Ошибка установки статуса запроса на одобрение объекта:" + ОписаниеОшибки();	
	//	Возврат Неопределено;
	//КонецПопытки;
	
КонецФункции

Функция ПолучитьДанныеЗапросаНаОдобренияДляОбработки(ID_Заявки, Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут));
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);
	
	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);	
	Исключение
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	
		Если тДанные.status = "success" И тДанные.Свойство("data") Тогда
			data = тДанные.data;
			тЧтение.Закрыть();
			
			Возврат data;
		ИначеЕсли НЕ тДанные.status = "success" И тДанные.Свойство("error") И тДанные.Свойство("code") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.error;
		ИначеЕсли тДанные.status = "fail" И тДанные.Свойство("data") Тогда
			Для каждого Элемент Из тДанные.data Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
					Для каждого Эл Из Элемент.Значение Цикл
						Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
					КонецЦикла;
				Иначе
					Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
			Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
		Иначе
			Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + Символы.ПС + "Неизвестная ошибка";
	КонецЕсли;
	тЧтение.Закрыть()
	
КонецФункции

Функция СписокЗапросовНаОдобрение(Стенд, Метод, Token, X_Auth_User, Таймаут = Истина, Ошибки = "", Прокси = Неопределено) 
	
	HTTP = ?(Прокси = Неопределено,  Новый HTTPСоединение(Стенд, , , , , Таймаут),  Новый HTTPСоединение(Стенд, , , , Прокси, Таймаут)); 
		
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Host", Стенд);
	ЗаголовокHTTP.Вставить("Cache-Control", "no-cache");	
	ЗаголовокHTTP.Вставить("X-Auth-Token", Token);	
	ЗаголовокHTTP.Вставить("X-Auth-User", X_Auth_User);

	ЗапросHTTP = Новый HTTPЗапрос(Метод, ЗаголовокHTTP); 
	
	Попытка
		HTTP.Получить(ЗапросHTTP, ФайлРезультата);
	Исключение
		//ТекстовыйФайлОтвет = Новый ТекстовыйДокумент;
		//ТекстовыйФайлОтвет.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
		//СтрокаОтветСервера = ТекстовыйФайлОтвет.ПолучитьТекст();		
		
		тЧтение = Новый ЧтениеJSON;
		тЧтение.ОткрытьФайл(ФайлРезультата);
		тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
		Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("status") Тогда	           
			Если тДанные.status = "fail" И тДанные.Свойство("data") Тогда
				Для каждого Элемент Из тДанные.data Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.Значение Цикл
							Ошибки = Ошибки + Элемент.Ключ + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.Ключ + " : " + Элемент.Значение + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли тДанные.status = "error" И тДанные.Свойство("message") Тогда
				Ошибки = Ошибки + тДанные.code + " : " + тДанные.message;
			КонецЕсли;
		Иначе
			Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка";
		КонецЕсли;
		
		Возврат Неопределено;
	КонецПопытки;
	
	тЧтение = Новый ЧтениеJSON;
	тЧтение.ОткрытьФайл(ФайлРезультата);
	тДанные = ПрочитатьJSON(тЧтение, Ложь);//, , , "ФункцияВосстановления", ЭтотОбъект);
	Если ТипЗнч(тДанные) = Тип("Структура") И тДанные.Свойство("code") Тогда	           
		Если НЕ ЗначениеЗаполнено(тДанные.code) Тогда
			Если тДанные.Свойство("data") Тогда
				data = тДанные.data;
				тЧтение.Закрыть();
				
				Возврат data;
			Иначе
				Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка отправки комментария";				
			КонецЕсли;
		Иначе
			Если тДанные.Свойство("error") И ТипЗнч(тДанные.error) = Тип("Массив") Тогда
				Для каждого Элемент Из тДанные.error Цикл
					Если ТипЗнч(Элемент.Message) = Тип("Массив") Тогда
						Для каждого Эл Из Элемент.message Цикл
							Ошибки = Ошибки + Элемент.fieldName + " : " + Эл + Символы.ПС;	
						КонецЦикла;
					Иначе
						Ошибки = Ошибки + Элемент.fieldName + " : " + Элемент.message + Символы.ПС;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Ошибка отправки комментария";	
			КонецЕсли;
		КонецЕсли;
	Иначе
		Ошибки = Ошибки + ОписаниеОшибки() + Символы.ПС + "Неизвестная ошибка отправки комментария";		
	КонецЕсли;	
	тЧтение.Закрыть();
	
КонецФункции

Процедура УстановитьОбновляемыеЗначения_ЗапросНаОдобрение(Данные, Объект, Модифицированность = Ложь) Экспорт
	
	Если Данные.Свойство("status") Тогда // И НЕ Объект.СтатусЗаявки.Код = Данные.status 
		Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.НайтиПоКоду(Данные.status);
		Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыЗаявокНаОдобрениеОбъекта.ВозвратНаДоработку") ИЛИ НЕ ЗначениеЗаполнено(Объект.СтатусЗаявки) Тогда
			Объект.УспешнаяОтправка = Ложь;
		Иначе
			Объект.УспешнаяОтправка = Истина;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус заявки обновлен на " + Объект.СтатусЗаявки);
		Объект.ДатаУстановкиСтатуса = ТекущаяДата();		
		Если Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.ОбъектНеСоответствуетТребованиямБанка 
			ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.ОтказКлиента
			ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.НеКредитуем Тогда 
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ");
		ИначеЕсли Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.ОбъектСоответствуетТребованиямБанка ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.ОбъектСоответствуетПриУсловии Тогда
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение");
		Иначе
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка");			
		КонецЕсли;		
		Модифицированность = Истина;
		Если НЕ Данные.Свойство("history") Тогда
			РегНаб = РегистрыСведений.ИсторияСтатусовИпотечныхЗаявок.СоздатьНаборЗаписей();
			РегНаб.Отбор.ИпотечнаяЗаявка.Установить(Объект.Ссылка);		
			РегНаб.Прочитать();		
			Попытка				
				Date = ТекущаяДата();
				Status = Справочники.СтатусыЗаявокНаОдобрениеОбъекта.НайтиПоКоду(Данные.status, Истина);					
				Если НЕ ЗаявкиНаКредитRestAPI.ЗаписьЕстьВНаборе(РегНаб, Date, Status) Тогда		
					НовЗапись = РегНаб.Добавить();
					НовЗапись.ИпотечнаяЗаявка = Объект.Ссылка;
					НовЗапись.Date = Date;
					НовЗапись.Status = Status;			
				КонецЕсли;
				Если РегНаб.Модифицированность() Тогда
					РегНаб.Записать(Истина);
				КонецЕсли;			
			Исключение				
			КонецПопытки;								
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.Свойство("requestId") И НЕ Объект.ID_ЗаявкиНаКредит = Данные.requestId Тогда
		Объект.ID_ЗаявкиНаКредит = Данные.requestId;		
	КонецЕсли;
	
	Если Данные.Свойство("approvalId") И НЕ Объект.approvalId = Данные.approvalId Тогда
		Попытка
			Объект.approvalId = Данные.approvalId;
		Исключение
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

//Регламентно
Функция ПроверкаСтатусовЗапросовНаОдобрение_Регламентно() Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечнаяЗаявка.Ссылка КАК Ссылка,
	|	ИпотечнаяЗаявка.РекомендуемыйБанк КАК РекомендуемыйБанк,
	|	ИпотечнаяЗаявка.ОтделениеБанка КАК ОтделениеБанка,
	|	ИпотечнаяЗаявка.СтатусЗаявки.Код КАК КодСтатуса,
	|	ИпотечнаяЗаявка.КомментарийСтатуса КАК КомментарийСтатуса,
	|	ИпотечнаяЗаявка.ДатаУстановкиСтатуса КАК ДатаУстановкиСтатуса,
	|	ИпотечнаяЗаявка.ID_Заявки КАК ID_Заявки,
	|	ИпотечнаяЗаявка.Черновик КАК Черновик,
	|	ИпотечнаяЗаявка.ТестоваяЗаявка КАК Тест,
	|	ИпотечнаяЗаявка.УспешнаяОтправка КАК УспешнаяОтправка,
	|	ИпотечнаяЗаявка.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ИпотечнаяЗаявка.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПараметрыПодключенияAPIИпотечныхБанков.Ссылка, ЗНАЧЕНИЕ(Справочник.ПараметрыПодключенияAPIИпотечныхБанков.ПустаяСсылка)) КАК ПараметрыAPI
	|ИЗ
	|	Документ.ЗапросНаОдобрениеОбъекта КАК ИпотечнаяЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК ИпотечныеБанки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
	|			ПО ИпотечныеБанки.ПараметрыПодключения = ПараметрыПодключенияAPIИпотечныхБанков.Ссылка
	|		ПО ИпотечнаяЗаявка.РекомендуемыйБанк = ИпотечныеБанки.Ссылка
	|ГДЕ
	|	ИпотечнаяЗаявка.УспешнаяОтправка
	|	И ИпотечнаяЗаявка.Проведен
	|	И НЕ ИпотечнаяЗаявка.ПометкаУдаления
	|	И ИпотечнаяЗаявка.СостояниеЗаявки = ЗНАЧЕНИЕ(Перечисление.СостоянияИпотечныхЗаявок.Отправка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИпотечнаяЗаявка.МоментВремени";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПисьмаКОтправке = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ПараметрыAPI) Тогда
				Продолжить;
			КонецЕсли;
			Ошибки = "";
			ДанныеОЗаявке = ПолучитьДанныеЗапросаНаОдобрение(Выборка.ПараметрыAPI, Выборка.ID_Заявки, , , Выборка.Тест, Ошибки);
			Если НЕ Ошибки = "" Тогда
				СоздатьЗаписьЛога(Выборка.Ссылка, Ошибки);
				Продолжить;	
			КонецЕсли;
			Если НЕ ДанныеОЗаявке = Неопределено И ТипЗнч(ДанныеОЗаявке) = Тип("Структура") Тогда
				Модифицированность = Ложь;
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Если НЕ Объект = Неопределено Тогда
					УстановитьОбновляемыеЗначения_ЗапросНаОдобрение(ДанныеОЗаявке, Объект, Модифицированность);	
				КонецЕсли;	
				ОтправлятьОповещение = Ложь;
				Если ДанныеОЗаявке.Свойство("history") И НЕ ДанныеОЗаявке.history = Неопределено Тогда
					КомментарийСтатуса = "";
					ЗаполнитьИсториюСтатусовЗапросаНаОдобрение(ДанныеОЗаявке.history, Объект.Ссылка, КомментарийСтатуса, ОтправлятьОповещение);
					Если НЕ Объект.КомментарийСтатуса = КомментарийСтатуса Тогда
						Объект.КомментарийСтатуса = КомментарийСтатуса;
						Модифицированность = Истина;
						ОтправлятьОповещение = Истина;
					КонецЕсли;	
				КонецЕсли;
				Если ДанныеОЗаявке.Свойство("comments") И НЕ ДанныеОЗаявке.comments = Неопределено Тогда
					Комментарии = ЗаполнитьКомментарииЗапросаНаОдобрение(ДанныеОЗаявке.comments, Объект.КомментарииЗаявки.Выгрузить());
					Если НЕ Комментарии = Неопределено Тогда
						Объект.КомментарииЗаявки.Загрузить(Комментарии);
						Модифицированность = Истина;	
					КонецЕсли;
				КонецЕсли;
				Если Модифицированность Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;				
				Если ОтправлятьОповещение Тогда
					Попытка
						ПисьмаКОтправке.Добавить(СобратьСтруктуруПисьмаДляМенеджера(Объект, Истина));
					Исключение
					КонецПопытки;
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		Если ПисьмаКОтправке.Количество() Тогда
			Для каждого Письмо Из ПисьмаКОтправке Цикл
				ОтправитьОповещениеОбИзмененииСтатуса(Письмо);
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции
//<Запрос на одобрение> }
