
Функция ОтправитьНовуюЗаявкуНаСервере(Объект, Пользователь) Экспорт
	
	//Получить подключение
	Подключение = ПолучитьПодключение(Пользователь);
	
	//Если есть вложения то необходимо их отправить в банк
	Вложения = ОтправитьВложенияВБанк(Подключение, Объект);
	
	//Сформировать текст запроса
	ТекстЗапроса = ПолучитьТекстЗапросаДляНовойЗаявки(Объект, "Новая", Вложения);
	
	//ОтправитьЗапрос
	Если Подключение = Неопределено Или ТекстЗапроса = Неопределено Тогда
		ТекстРезультата = ?(Подключение = Неопределено, "Не удалось подключиться к банку.", "Не удалось сформировать текст запроса в банк.");
		Результат = Новый Структура("Текст, Статус", ТекстРезультата, Ложь)
	Иначе
		Результат = ОтправитьЗапрос(Подключение, ТекстЗапроса);
	КонецЕсли;
	
	//Возвращаем результат
	Возврат Результат;
	
КонецФункции

Функция ОтправитьВложенияВБанк(Подключение, Объект)    //-----
	
	Если Объект.ПрикрепленныеФайлы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		
		ДоступныеФорматы = ПолучитьСписокОграниченийРасширенийФайлов();
				
		МассивВложений = Новый Массив;
		
		Для Каждого Документ Из Объект.ПрикрепленныеФайлы Цикл
			Если ДоступныеФорматы <> Неопределено И ДоступныеФорматы.Найти(Документ.Файл.Расширение) = Неопределено Тогда
					Сообщить("Файл с расширением " + Документ.Файл.Расширение + " не доступен для загрузки.");
					Возврат Неопределено;
			КонецЕсли;
			//Если сессия активна, то отправляем файлы
			Если ПроверитьАктивностьСессии(Подключение) Тогда
			
			
				ИдентификаторДокумента = ОтправитьДокумент(Подключение, Документ);
				МассивВложений.Добавить(ИдентификаторДокумента);
			Иначе
				Сообщить("Не удалось отправить файлы в банк.");
			КонецЕсли;
		КонецЦикла;
		
		Возврат ОбработкаJSON.JSON(МассивВложений);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьАктивностьСессии(Подключение)
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьДокумент(Подключение, Документ)
	
	//Заглушка
	
	Возврат Документ.УникальныйИдентификатор;
	
КонецФункции

Функция ПолучитьПодключение(Пользователь)
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(Пользователь);
	
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Метод = ПолучитьМетод(ПараметрыПодключения, "authorize");
		Запрос = Новый HTTPЗапрос(Метод);
		
		Попытка
			Ответ = ПараметрыПодключения.Соединение.Получить(Запрос);
		Исключение
			Сообщить("Не удалось установить соединение с сервером");
			Возврат Неопределено;
		КонецПопытки;
		
		Если Ответ.КодОтвета = "302" Тогда
			URI = СтруктураURI(Ответ.Заголовки.Получить("Location"));
		Иначе
			Сообщить("Некорректный ответ сервера.");
			Возврат Неопределено;
		КонецЕсли;
		
		//Проверка
		Если URI.state <> ПараметрыПодключения.state Тогда
			Сообщить("Получен некорректный параметр state от сервера.");
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыПодключения.Вставить("code", URI.code);
		
		//Запрос токенов доступа
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Host", 			"https://auth.raiffeisen.ru");
		Заголовки.Вставить("Content-Type",  "application/x-www-form-urlencoded");
		Заголовки.Вставить("Authorization", "Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW");    //????
		
	    Метод = ПолучитьМетод(Неопределено, "token");
		
		Тело = "grant_type=" 		+ "authorization_code"
				+ "&client_id=" 	+ ПараметрыПодключения.client_id
				+ "&code=" 			+ URI.code
				+ "&redirect_uri=" 	+ ПараметрыПодключения.redirect_uri
				+ "&code_verifier=" + ПараметрыПодключения.code_verifier;
		
		Запрос = Новый HTTPЗапрос(Метод, Заголовки);
		Запрос.УстановитьТелоИзСтроки(Тело);
		
		Попытка
			Результат = ПараметрыПодключения.Соединение.ОтправитьДляОбработки(Запрос);
		Исключение
			Сообщить("Не удалось получить ключи доступа.");
			Возврат Неопределено;
		КонецПопытки;
		
		СтруктураОтвета = РазобратьСтандартныйJSON(Результат);
		
		ПараметрыПодключения.Вставить("access_token", СтруктураОтвета.access_token);
		ПараметрыПодключения.Вставить("id_token", 	  СтруктураОтвета.id_token);
		
		//Проверить ключи
		РезультатПроверкиКлючей = ПроверитьПолученныеКлючи(ПараметрыПодключения);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	СтрокаСоединения = СтрокаURI;
	
	Сервер = "";
	Позиция = Найти(СтрокаСоединения, "?");
	Если Позиция > 0 Тогда
		Сервер = Лев(СтрокаСоединения, Позиция - 1);
		СтрокаСоединения = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	code = "";
	Позиция = Найти(СтрокаСоединения, "&");
	Если Позиция > 0 Тогда
		code = Сред(СтрокаСоединения, 6, Позиция - 1);
		СтрокаСоединения = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	state = "";
	Позиция = Найти(СтрокаСоединения, "=");
	Если Позиция > 0 Тогда
		state = Сред(СтрокаСоединения, 7);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Сервер", Сервер);
	Результат.Вставить("code", code);
	Результат.Вставить("state", state);
	Результат.Вставить("СтрокаURI", СтрокаURI);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьПолученныеКлючи(СтруктураПараметров)
	
	access_token = СтруктураПараметров.access_token;
	id_token 	 = СтруктураПараметров.id_token;
	
	Метод = ПолучитьМетод(Неопределено, "end-point");
	
	Запрос = Новый HTTPЗапрос(Метод);
		
	Попытка
		Ответ = СтруктураПараметров.Соединение.Получить(Запрос);
	Исключение
		Сообщить("Не удалось получить открытый ключ от банка.");
		Возврат Неопределено;
	КонецПопытки;
	
	//Разбор токенов и проверка
	Возврат Истина;
	
КонецФункции

Функция РазобратьСтандартныйJSON(Текст)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(Текст);
	
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьПараметрыПодключения(Пользователь)
	
	КонтрольныйКод = ПолучитьКонтрольныйКод();
	
	КодОтклика = ПолучитьКодОтклика(КонтрольныйКод);
	
	Соединение = ПолучитьСоединение(Пользователь);
	
	Если Соединение = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		Параметры = Новый Структура;
		Параметры.Вставить("Соединение", Соединение);
		Параметры.Вставить("code_verifier", КонтрольныйКод);
		Параметры.Вставить("code_challenge", КодОтклика);
		
		//Параметры должны быть в справочнике
		Параметры.Вставить("scope", "openid"); //Уточнить
		Параметры.Вставить("response_type", "code");
		Параметры.Вставить("client_id", "test");
		Параметры.Вставить("redirect_uri", "https%3A%2F%2Fdomen%2F");     //Уточнить
		Параметры.Вставить("state", Строка(Новый УникальныйИдентификатор));
		Параметры.Вставить("nonce", Строка(Новый УникальныйИдентификатор));
		Параметры.Вставить("prompt", "login");    // или "none"
		Параметры.Вставить("code_challenge_method", "S256");
		Параметры.Вставить("max_age", "86400");
		//
		
		Возврат Параметры;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМетод(Параметры, Ключ)
	
	Если Ключ = "authorize" Тогда
		
		Метод = "/authorize?scope=" 		+ Параметры.scope
				+ "&client_id=" 			+ Параметры.client_id
				+ "&response_type=" 		+ Параметры.response_type
				+ "&redirect_uri=" 			+ Параметры.redirect_uri
				+ "&state=" 				+ Параметры.state
				+ "&nonce=" 				+ Параметры.nonce
				+ "&prompt=" 				+ Параметры.prompt
				+ "&code_challenge=" 		+ Параметры.code_challenge
				+ "&code_challenge_method=" + Параметры.code_challenge_method
				+ "&max_age=" 				+ Параметры.max_age;
		
	ИначеЕсли Ключ = "token" Тогда
		Метод = "/token";
	ИначеЕсли Ключ = "end-point" Тогда
		Метод = "/jwks.json";
	ИначеЕсли Ключ = "create" Тогда
		Метод = "/create";
	Иначе
		Метод = "";
	КонецЕсли;
	
	Возврат Метод;
	
КонецФункции

Функция ПараметрыAPI()
	
	Параметры = Константы.ПараметрыAPIRaiffeisen.Получить();
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьСоединение(Пользователь)
	
	ПараметрыAPIRaiffeisen = ПараметрыAPI();
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения(ПараметрыAPIRaiffeisen, Пользователь);
	
	Если ПараметрыСоединения = Неопределено Тогда
		HTTPСоединение = Неопределено;
	Иначе
		HTTPСоединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, , , , ПараметрыСоединения.Прокси, Истина, Новый ЗащищенноеСоединениеOpenSSL());
	КонецЕсли;
	
	Возврат HTTPСоединение;
	
КонецФункции

Функция ПолучитьПараметрыСоединения(Параметры, Пользователь)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ГруппыПользователейСостав.Ссылка КАК Группа,
				|	ГруппыПользователейСостав.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ ВТ_СписокГрупп
				|ИЗ
				|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
				|ГДЕ
				|	ГруппыПользователейСостав.Пользователь = &Пользователь
				|
				|СГРУППИРОВАТЬ ПО
				|	ГруппыПользователейСостав.Ссылка,
				|	ГруппыПользователейСостав.Пользователь
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Группа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_СписокГрупп.Группа) КАК Группа,
				|	ВТ_СписокГрупп.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ ВТ_КоличествоГрупп
				|ИЗ
				|	ВТ_СписокГрупп КАК ВТ_СписокГрупп
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_СписокГрупп.Пользователь
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОсновныеОбъектыДоступаПользователей.ОбъектДоступа КАК ОсновнойОбъект,
				|	ОсновныеОбъектыДоступаПользователей.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ ВТ_Объект
				|ИЗ
				|	РегистрСведений.ОсновныеОбъектыДоступаПользователей КАК ОсновныеОбъектыДоступаПользователей
				|ГДЕ
				|	ОсновныеОбъектыДоступаПользователей.Пользователь = &Пользователь
				|
				|СГРУППИРОВАТЬ ПО
				|	ОсновныеОбъектыДоступаПользователей.ОбъектДоступа,
				|	ОсновныеОбъектыДоступаПользователей.Пользователь
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПараметрыПодключенияAPI.Ссылка.username КАК username_common,
				|	ПараметрыПодключенияAPI.Ссылка.password КАК password_common,
				|	ПараметрыПодключенияAPI.Ссылка.АдресДляРассылки КАК АдресДляРассылки_common,
				|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд КАК ПродуктивныйСтенд,
				|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд КАК ТестовыйСтенд,
				|	ПараметрыПодключенияAPI.Ссылка.ПродуктивныйСтенд_Token КАК ПродуктивныйСтенд_Token,
				|	ПараметрыПодключенияAPI.Ссылка.ТестовыйСтенд_Token КАК ТестовыйСтенд_Token,
				|	ПараметрыПодключенияAPI.ИспользоватьПрокси КАК ИспользоватьПрокси,
				|	ПараметрыПодключенияAPI.ПротоколПрокси КАК ПротоколПрокси,
				|	ПараметрыПодключенияAPI.ПроксиСервер КАК ПроксиСервер,
				|	ПараметрыПодключенияAPI.ПортПрокси КАК ПортПрокси,
				|	ПараметрыПодключенияAPI.ИмяПользователяПрокси КАК ИмяПользователяПрокси,
				|	ПараметрыПодключенияAPI.ПарольПрокси КАК ПарольПрокси,
				|	ПараметрыПодключенияAPI.ИспользоватьАутентификациюОСПрокси КАК ИспользоватьАутентификациюОСПрокси,
				|	ПараметрыПодключенияAPI.ГруппаПользователя КАК ГруппаПользователя,
				|	ПараметрыПодключенияAPI.username КАК username,
				|	ПараметрыПодключенияAPI.password КАК password,
				|	ПараметрыПодключенияAPI.АдресДляРассылки КАК АдресДляРассылки,
				|	ИСТИНА КАК Использование
				|ИЗ
				|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков.НастройкиПравДоступаПользователей КАК ПараметрыПодключенияAPI
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоГрупп КАК ВТ_КоличествоГрупп
				|		ПО (ИСТИНА)
				|ГДЕ
				|	ПараметрыПодключенияAPI.Ссылка = &Параметры
				|	И ПараметрыПодключенияAPI.ГруппаПользователя В
				|			(ВЫБРАТЬ
				|				ВТ_СписокГрупп.Группа КАК Группа
				|			ИЗ
				|				ВТ_СписокГрупп КАК ВТ_СписокГрупп)
				|	И ВЫБОР
				|			КОГДА ВТ_КоличествоГрупп.Группа ЕСТЬ NULL
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ВЫБОР
				|					КОГДА ВТ_КоличествоГрупп.Группа = 1
				|						ТОГДА ПараметрыПодключенияAPI.ОбъектДоступа В
				|								(ВЫБРАТЬ
				|									ВТ_Объект.ОсновнойОбъект КАК ОсновнойОбъект
				|								ИЗ
				|									ВТ_Объект КАК ВТ_Объект)
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		КОНЕЦ
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПараметрыПодключенияAPIИпотечныхБанков.username,
				|	ПараметрыПодключенияAPIИпотечныхБанков.password,
				|	ПараметрыПодключенияAPIИпотечныхБанков.АдресДляРассылки,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ПродуктивныйСтенд_Token,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ТестовыйСтенд_Token,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьПрокси,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ПротоколПрокси,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ПроксиСервер,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ПортПрокси,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ИмяПользователяПрокси,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ПарольПрокси,
				|	ПараметрыПодключенияAPIИпотечныхБанков.ИспользоватьАутентификациюОСПрокси,
				|	NULL,
				|	NULL,
				|	NULL,
				|	NULL,
				|	ЛОЖЬ
				|ИЗ
				|	Справочник.ПараметрыПодключенияAPIИпотечныхБанков КАК ПараметрыПодключенияAPIИпотечныхБанков
				|ГДЕ
				|	ПараметрыПодключенияAPIИпотечныхБанков.Ссылка = &Параметры";	
		
	Запрос.УстановитьПараметр("Параметры", Параметры);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		СтруктураПараметры = Новый Структура("username, 
												|password, 
												|username_common, 
												|password_common, 
												|АдресДляРассылки_common, 
												|ПродуктивныйСтенд, 
												|ТестовыйСтенд, 
												|ПродуктивныйСтенд_Token, 
												|ТестовыйСтенд_Token, 
												|Прокси, 
												|ГруппаПользователя, 
												|ПроксиСервер, 
												|АдресДляРассылки");
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметры, Выборка);
			Если Выборка.ИспользоватьПрокси Тогда
				
				Прокси = Новый ИнтернетПрокси;
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
				Прокси.Установить(Выборка.ПротоколПрокси, Выборка.ПроксиСервер, Выборка.ПортПрокси, 
									Выборка.ИмяПользователяПрокси, Выборка.ПарольПрокси, Выборка.ИспользоватьАутентификациюОСПрокси);
				//Прокси.Установить("https", "mosrfrfw01.absgroup.ru", "8080", , , Истина);
				
				СтруктураПараметры.Прокси = Прокси;
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтруктураПараметры;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКонтрольныйКод()
	
	НГСЧ = Новый ГенераторСлучайныхЧисел(255);
	НГСЧ2 = Новый ГенераторСлучайныхЧисел(НГСЧ.СлучайноеЧисло(1, 255));
	
	ДлинаСтроки = НГСЧ2.СлучайноеЧисло(46, 126);
	
	//Первый символ всегда буква A-Z
	пЧисло = НГСЧ.СлучайноеЧисло(65, 90);
	КонтрольныйКод = Символ(пЧисло);
	
	Для Счетчик = 1 По ДлинаСтроки Цикл
		
		Вариант = НГСЧ2.СлучайноеЧисло(0, 4);
		Если Вариант = 0 Тогда // точка
			КонтрольныйКод = КонтрольныйКод + ".";
		ИначеЕсли Вариант = 1 Тогда //A-Z
			пЧисло = НГСЧ.СлучайноеЧисло(65, 90);
			КонтрольныйКод = КонтрольныйКод + Символ(пЧисло);
		ИначеЕсли Вариант = 2 Тогда //a-z
			пЧисло = НГСЧ.СлучайноеЧисло(97, 122);
			КонтрольныйКод = КонтрольныйКод + Символ(пЧисло);
		ИначеЕсли Вариант = 3 Тогда //0-9
			пЧисло = НГСЧ.СлучайноеЧисло(0, 9);
			КонтрольныйКод = КонтрольныйКод + Строка(пЧисло);
		Иначе //нижнее подчеркивание
			КонтрольныйКод = КонтрольныйКод + "_";
		КонецЕсли;
	КонецЦикла;
	
	//Последний символ всегда буква A-Z
	пЧисло = НГСЧ.СлучайноеЧисло(65, 90);
	КонтрольныйКод = КонтрольныйКод + Символ(пЧисло);
	
	Возврат КонтрольныйКод;
	
КонецФункции

Функция ПолучитьКодОтклика(КонтрольныйКод)

	ТекстUTF8 = Новый ТекстовыйДокумент;
	ТекстUTF8.УстановитьТипФайла(КодировкаТекста.ANSI);
	ТекстUTF8.УстановитьТекст(КонтрольныйКод);
	
	ТекстANSI = ТекстUTF8.ПолучитьТекст();
	
	КодОтклика = Base64Строка(ХешСтрокаSHA256(ТекстANSI));
	
	Возврат КодОтклика;

КонецФункции

Функция ПолучитьТекстЗапросаДляНовойЗаявки(Объект, Ключ, Вложения)
	
	Если Ключ = "Новая" Тогда
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Объект.ФИОКлиента);
		
		ПараметрыКлиента = Новый Структура;
		ПараметрыКлиента.Вставить("birthDate", Объект.ДатаРожденияКлиента);
		ПараметрыКлиента.Вставить("firstName", ФИО.Имя);
		ПараметрыКлиента.Вставить("lastName", ФИО.Фамилия);
		ПараметрыКлиента.Вставить("middleName", ФИО.Отчество);
		ПараметрыКлиента.Вставить("phone", СокрЛП(Объект.НомерТелефонаКлиента));
		
		СтрокаПараметровКлиента = ОбработкаJSON.JSON(ПараметрыКлиента);
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("paths", Новый Структура("applications, attachments", СтрокаПараметровКлиента, Вложения));
		
		Возврат ОбработкаJSON.JSON(СтруктураПараметров);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьМассивВложений(Объект)
	
	
	
	
	
	Возврат Неопределено;

КонецФункции

Функция ПолучитьПутьКФайлу(Файл)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Файл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Возврат "";
	КонецЕсли;

	Том = Файл.Том;
	
	Возврат Том.ПолныйПутьWindows + Файл.ПутьКФайлу; 
	
КонецФункции

Функция ПолучитьСписокОграниченийРасширенийФайлов() Экспорт
	
	Текст = "png,jpeg,jpg,gif,bmp,rar,zip,7z,xls,xlsx,doc,docx,word,excel,pdf";
	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	
	Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки, Неопределено);
		
КонецФункции

Функция ХешСтрокаSHA256(ИсходнаяСтрока)
	
	Хеш = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеш.Добавить(ИсходнаяСтрока);	
	
	Возврат Хеш.ХешСумма;
	
КонецФункции

Функция ОтправитьЗапрос(Подключение, ТекстЗапроса)
	
	HTTPЗапрос = Новый HTTPЗапрос("/"); //метод???? 
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8);
	
	Ответ = Подключение.Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
	
	
	Возврат Новый Структура("Текст, Статус", "Не удалось отправить запрос в банк", Ложь);
	
КонецФункции
