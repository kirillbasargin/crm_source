
#Область СлужебныйПрограммныйИнтерфейс

// Формирует структуру таблиц проверок и групп проверок для дальнейшего использования.
//
// Возвращаемое значение:
//    Структура со значениями:
//       * ГруппыПроверок - ТаблицаЗначений - Таблица групп проверок.
//       * Проверки       - ТаблицаЗначений - Таблица проверок.
//
Функция ПроверкиВеденияУчета() Экспорт
	
	ГруппыПроверок = НоваяТаблицаГруппПроверок();
	Проверки       = НоваяТаблицаПроверок();
	
	СистемныеПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПрикладныхПроверок(ГруппыПроверок, Проверки);
	
	Возврат Новый Структура("ГруппыПроверок, Проверки", ГруппыПроверок, Проверки);
	
КонецФункции

// Возвращает массив типов, включающий в себя все возможные объектные типы конфигурации.
//
// Возвращаемое значение:
//    Массив - Массив объектных типов.
//
Функция ОписаниеТипаВсеОбъекты() Экспорт
	
	МассивТипов = Новый Массив;
	
	МассивВидовМетаданных = Новый Массив;
	МассивВидовМетаданных.Добавить(Метаданные.Документы);
	МассивВидовМетаданных.Добавить(Метаданные.Справочники);
	МассивВидовМетаданных.Добавить(Метаданные.ПланыОбмена);
	МассивВидовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	МассивВидовМетаданных.Добавить(Метаданные.ПланыСчетов);
	МассивВидовМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	МассивВидовМетаданных.Добавить(Метаданные.Задачи);
	
	Для Каждого ВидМетаданных Из МассивВидовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			
			РазделенноеИмя = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".");
			Если РазделенноеИмя.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивТипов.Добавить(Тип(РазделенноеИмя.Получить(0) + "Объект." + РазделенноеИмя.Получить(1)));
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает массив типов, включающий в тип "Строка", "Массив" и "СправочникСсылка.ВидыПроверок"
// для проверки параметров методов, работающих с видами проверок.
//
// Возвращаемое значение:
//    Массив - Массив объектных типов.
//
Функция ОписаниеТипаВидПроверки() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыПроверок"));
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает структуру типов параметров проверки.
//
// Возвращаемое значение:
//    Структура - Структура со свойствами:
//      * Идентификатор                     - Строка - Строковый идентификатор проверки.
//      * Представление                     - Строка - Пользовательское представление проверки.
//      * ИдентификаторРегламентногоЗадания - Строка - Строковый идентификатор регламентного задания,
//                                            соответствующего проверке.
//      * ДатаНачалаПроверки                - Дата - Пороговая дата, обозначающая границу проверяемых
//                                            объектов (только для объектов с датой). Объекты, дата которых
//                                            меньше указанной, не следует проверять. По умолчанию не 
//                                            заполнено (т.е. проверять все).
//      * ЛимитПроблем                      - Число - Количество проверяемых объектов.
//                                            По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ИтерацияПроверки                  - Число - Очередная итерация проверки. Используется совместно с параметром
//                                            ЛимитПроблем для определения предельного количества итераций.
//      * Проверка                          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на
//                                            выполненную проверку.
//      * ВидПроверки                       - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к
//                                            которому относится выполненная проверка.
//      * ВажностьПроблемы                  - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                            "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//
Функция ОжидаемыеТипыСвойствПараметровПроверки() Экспорт
	
	ОжидаемыеТипыСвойств = Новый Структура;
	ОжидаемыеТипыСвойств.Вставить("ВажностьПроблемы",                  Тип("ПеречислениеСсылка.ВажностьПроблемыУчета"));
	ОжидаемыеТипыСвойств.Вставить("ВидПроверки",                       Тип("СправочникСсылка.ВидыПроверок"));
	ОжидаемыеТипыСвойств.Вставить("ГлобальныеНастройки",               Тип("Структура"));
	ОжидаемыеТипыСвойств.Вставить("ДатаНачалаПроверки",                Тип("Дата"));
	ОжидаемыеТипыСвойств.Вставить("Идентификатор",                     Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("ИдентификаторРегламентногоЗадания", Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("ИтерацияПроверки",                  Тип("Число"));
	ОжидаемыеТипыСвойств.Вставить("ЛимитПроблем",                      Тип("Число"));
	ОжидаемыеТипыСвойств.Вставить("Представление",                     Тип("Строка"));
	ОжидаемыеТипыСвойств.Вставить("Проверка",                          Тип("СправочникСсылка.ПравилаПроверкиУчета"));
	
	Возврат ОжидаемыеТипыСвойств;
	
КонецФункции

// Возвращает структуру типов описания проблемы.
//
// Возвращаемое значение:
//    Проблема - Структура - Сформированная алгоритмом проверки структура проблемы.
//        * ПроблемныйОбъект         - ЛюбаяСсылка - Ссылка на объект "Источник" проблем.
//        * ПравилоПроверки          - СправочникСсылка.ПравилаПроверкиУчета - Ссылка на выполненную проверку.
//        * ВидПроверки              - СправочникСсылка.ВидыПроверок - Ссылка на вид проверки, к которому 
//                                     относится выполненная проверка.
//        * КлючУникальности         - УникальныйИдентификатор - Ключ уникальности проблемы.
//        * УточнениеПроблемы        - Строка - Строка-уточнение найденной проблемы.
//        * ВажностьПроблемы         - ПеречислениеСсылка.ВажностьПроблемыУчета - Важность проблемы учета
//                                     "Информация", "Предупреждение", "Ошибка" и "ПолезныйСовет".
//        * Ответственный            - СправочникСсылка.Пользователи - Заполнен если есть возможность
//                                     идентифицировать ответственного в проблемном объекте.
//        * ИгнорироватьПроблему     - Булево - Флаг игнорирования проблемы. Если имеет значение "Истина",
//                                     запись о проблеме игнорируется подсистемой.
//        * ДополнительнаяИнформация - ХранилищеЗначений - Служебное свойство с дополнительными
//                                     сведениями, связанными с выявленной проблемой.
//        * Выявлено                 - Дата - Серверное время идентификации проблемы.
//
//
Функция ОжидаемыеТипыСвойствОписанияПроблемы() Экспорт
	
	ОжидаемыеТипыСвойств = Новый Структура;
	ОжидаемыеТипыСвойств.Вставить("ВажностьПроблемы",         Тип("ПеречислениеСсылка.ВажностьПроблемыУчета"));
	ОжидаемыеТипыСвойств.Вставить("ВидПроверки",              Тип("СправочникСсылка.ВидыПроверок"));
	ОжидаемыеТипыСвойств.Вставить("Выявлено",                 Тип("Дата"));
	ОжидаемыеТипыСвойств.Вставить("ДополнительнаяИнформация", Тип("ХранилищеЗначения"));
	ОжидаемыеТипыСвойств.Вставить("КлючУникальности",         Тип("УникальныйИдентификатор"));
	МассивТипов = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	МассивТипов.Добавить(Тип("Неопределено"));
	ОжидаемыеТипыСвойств.Вставить("Ответственный",            МассивТипов);
	ОжидаемыеТипыСвойств.Вставить("ПравилоПроверки",          Тип("СправочникСсылка.ПравилаПроверкиУчета"));
	ОжидаемыеТипыСвойств.Вставить("ПроблемныйОбъект",         ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ОжидаемыеТипыСвойств.Вставить("УточнениеПроблемы",        Тип("Строка"));
	
	Возврат ОжидаемыеТипыСвойств;
	
КонецФункции

// Возвращает все ссылочные виды объектов метаданных.
//
// Возвращаемое значение:
//    ТаблицаЗначений - ТаблицаЗначений с колонками:
//         * ВидОбъектаМетаданных        - КоллекцияОбъектовМетаданных - Коллекция ссылочных
//                                         объектов метаданных.
//         * ВидОбъектаМетаданныхСтрокой - Строка - Вид объекта метаданных строкой:
//                                         Справочники, Документы и т.д.
//
Функция СсылочныеВидыОбъектовМетаданных() Экспорт
	
	ТаблицаСсылочныхТипов = Новый ТаблицаЗначений;
	КолонкиТаблицы        = ТаблицаСсылочныхТипов.Колонки;
	КолонкиТаблицы.Добавить("ВидОбъектаМетаданных",        Новый ОписаниеТипов("КоллекцияОбъектовМетаданных"));
	КолонкиТаблицы.Добавить("ВидОбъектаМетаданныхСтрокой", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(512)));
	
	Типы = ОбщегоНазначения.ОписаниеТипаВсеСсылки().Типы();
	Для Каждого Тип Из Типы Цикл
		
		СтруктураСтроки = Новый Структура;
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.Справочники);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "Справочники");
			
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.Документы);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "Документы");
			
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.ПланыВидовХарактеристик);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "ПланыВидовХарактеристик");
			
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.ПланыСчетов);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "ПланыСчетов");
			
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.ПланыВидовРасчета);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "ПланыВидовРасчета");
			
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.БизнесПроцессы);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "БизнесПроцессы");
			
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.Задачи);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "Задачи");
			
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			
			СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.ПланыОбмена);
			СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "ПланыОбмена");
			
		КонецЕсли;
		
		Если СтруктураСтроки.Количество() > 0 
			И ТаблицаСсылочныхТипов.Найти(СтруктураСтроки.ВидОбъектаМетаданныхСтрокой, "ВидОбъектаМетаданныхСтрокой") = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСсылочныхТипов.Добавить(), СтруктураСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСсылочныхТипов.Сортировать("ВидОбъектаМетаданныхСтрокой");
	
	Возврат ТаблицаСсылочныхТипов;
	
КонецФункции

// Возвращает все регистры как объекты метаданных.
//
// Возвращаемое значение:
//    ТаблицаЗначений - ТаблицаЗначений с колонками:
//         * ВидОбъектаМетаданных        - КоллекцияОбъектовМетаданных - Коллекция регистров.
//         * ВидОбъектаМетаданныхСтрокой - Строка - Вид объекта метаданных строкой:
//                                         РегистрыБухгалтерии, РегистрыНакопления и т.д.
//
Функция РегистрыКакОбъектыМетаданных() Экспорт
	
	ТаблицаРегистров = Новый ТаблицаЗначений;
	КолонкиТаблицы        = ТаблицаРегистров.Колонки;
	КолонкиТаблицы.Добавить("ВидОбъектаМетаданных",        Новый ОписаниеТипов("КоллекцияОбъектовМетаданных"));
	КолонкиТаблицы.Добавить("ВидОбъектаМетаданныхСтрокой", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(512)));
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.РегистрыБухгалтерии);
	СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "РегистрыБухгалтерии");
	
	ЗаполнитьЗначенияСвойств(ТаблицаРегистров.Добавить(), СтруктураСтроки);
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.РегистрыНакопления);
	СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "РегистрыНакопления");
	
	ЗаполнитьЗначенияСвойств(ТаблицаРегистров.Добавить(), СтруктураСтроки);
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.РегистрыРасчета);
	СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "РегистрыРасчета");
	
	ЗаполнитьЗначенияСвойств(ТаблицаРегистров.Добавить(), СтруктураСтроки);
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ВидОбъектаМетаданных",        Метаданные.РегистрыСведений);
	СтруктураСтроки.Вставить("ВидОбъектаМетаданныхСтрокой", "РегистрыСведений");
	
	ЗаполнитьЗначенияСвойств(ТаблицаРегистров.Добавить(), СтруктураСтроки);
	
	ТаблицаРегистров.Сортировать("ВидОбъектаМетаданныхСтрокой");
	
	Возврат ТаблицаРегистров;
	
КонецФункции

// Возвращает таблицу со сводной информацией по объектам метаданных.
//
// Возвращаемое значение:
//    ТаблицаЗначений - ТаблицаЗначений с колонками:
//         * ВидОбъектаМетаданных        - КоллекцияОбъектовМетаданных - Коллекция ссылочных
//                                         объектов метаданных.
//         * ВидОбъектаМетаданныхСтрокой - Строка - Вид объекта метаданных строкой:
//                                         Справочники, Документы и т.д.
//         * ПолноеИмяОбъектаМетаданных  - Строка - Полное имя объекта метаданных.
//
Функция ТаблицаМетаданных() Экспорт
	
	СсылочныеВидыОбъектовМетаданных = КонтрольВеденияУчетаПовтИсп.СсылочныеВидыОбъектовМетаданных();
	РегистрыКакОбъектыМетаданных    = КонтрольВеденияУчетаПовтИсп.РегистрыКакОбъектыМетаданных();
	
	ТаблицаМетаданных               = СсылочныеВидыОбъектовМетаданных.СкопироватьКолонки();
	ТаблицаМетаданных.Колонки.Добавить("ПолноеИмяОбъектаМетаданных", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(512)));
	
	Для Каждого СсылочныйВид Из СсылочныеВидыОбъектовМетаданных Цикл
		КоллекцияОбъектовМетаданных = СсылочныйВид.ВидОбъектаМетаданных;
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			НоваяСтрока = ТаблицаМетаданных.Добавить();
			НоваяСтрока.ВидОбъектаМетаданных        = СсылочныйВид.ВидОбъектаМетаданных;
			НоваяСтрока.ВидОбъектаМетаданныхСтрокой = СсылочныйВид.ВидОбъектаМетаданныхСтрокой;
			НоваяСтрока.ПолноеИмяОбъектаМетаданных  = ОбъектМетаданных.ПолноеИмя();
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого РегистрКакОбъектМетаданных Из РегистрыКакОбъектыМетаданных Цикл
		КоллекцияОбъектовМетаданных = РегистрКакОбъектМетаданных.ВидОбъектаМетаданных;
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			НоваяСтрока = ТаблицаМетаданных.Добавить();
			НоваяСтрока.ВидОбъектаМетаданных        = РегистрКакОбъектМетаданных.ВидОбъектаМетаданных;
			НоваяСтрока.ВидОбъектаМетаданныхСтрокой = РегистрКакОбъектМетаданных.ВидОбъектаМетаданныхСтрокой;
			НоваяСтрока.ПолноеИмяОбъектаМетаданных  = ОбъектМетаданных.ПолноеИмя();
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаМетаданных.Сортировать("ВидОбъектаМетаданныхСтрокой, ПолноеИмяОбъектаМетаданных");
	
	Возврат ТаблицаМетаданных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПрикладныхПроверок
Процедура СистемныеПроверкиВеденияУчета(ГруппыПроверок, Проверки)
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование  = НСтр("ru='Системные проверки'");
	ГруппаПроверок.Идентификатор = "СистемныеПроверки";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru='Проверка незаполненных обязательных реквизитов'");
	Проверка.Причины                      = НСтр("ru='Некорректная синхронизация данных с другими программами или импорт данных.'");
	Проверка.Рекомендация                 = НСтр("ru='Правильно настроить синхронизацию данных и заполнить обязательные реквизиты.
	|В случае обнаружения незаполненных обязательных полей у регистров, то в большинстве
	|случаев, для устранения проблемы, требуется заполнение соответствующих полей в документе-регистраторе'");
	Проверка.Идентификатор                = "ПроверкаНезаполненныхОбязательныхРеквизитов";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаСлужебный.ПроверитьНезаполненныеОбязательныеРеквизиты";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru='Проверка ссылочной целостности'");
	Проверка.Причины                      = НСтр("ru='Некорректная синхронизация данных с другими программами или импорт данных.'");
	Проверка.Рекомендация                 = НСтр("ru='• Завершить работу всех пользователей и установить блокировку входа в программу;
	|• Сделать резервную копию информационной базы;
	|• Запустить конфигуратор, меню Администрирование, Тестирования и исправление, включив два флажка для проверка логической и ссылочной целостности
	|	см подробнее на ИТС https://its.1c.ru/db/v839doc#bookmark:adm:TI000000142
	|• Снять блокировку входа в программу
	|Если работа ведется в распределенной информационной базе (РИБ), то исправление следует запускать только в главном узле.
	|	Затем выполнить синхронизацию с подчиненными узлами.
	|В случае обнаружения битых ссылок в регистрах, то в большинстве случаев, для устранения проблемы,
	|требуется устранения соответствующих битых ссылок в документе-регистраторе'");
	Проверка.Идентификатор                = "ПроверкаСсылочнойЦелостности";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаСлужебный.ПроверитьСсылочнуюЦелостность";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя          = "СистемныеПроверки";
	Проверка.Наименование                   = НСтр("ru='Проверка циклических ссылок'");
	Проверка.Причины                        = НСтр("ru='Некорректная синхронизация данных с другими программами или импорт данных.'");
	Проверка.Рекомендация                   = НСтр("ru='• Завершить работу всех пользователей и установить блокировку входа в программу;
	|• Сделать резервную копию информационной базы;
	|• Запустить конфигуратор, меню Администрирование, Тестирования и исправление, включив два флажка для проверка логической и ссылочной целостности
	|	см подробнее на ИТС: https://its.1c.ru/db/v839doc#bookmark:adm:TI000000142
	|• Снять блокировку входа в программу
	|Если работа ведется в распределенной информационной базе (РИБ), то исправление следует запускать только в главном узле.
	|	Затем выполнить синхронизацию с подчиненными узлами 1.'");
	Проверка.Идентификатор                  = "ПроверкаЦиклическихСсылок";
	Проверка.ОбработчикПроверки             = "КонтрольВеденияУчетаСлужебный.ПроверитьЦиклическиеСсылки";
	Проверка.ОбработчикПереходаКИсправлению = "Отчет.РезультатыПроверкиУчета.Форма.ИсправлениеЦиклическихСсылок";
	Проверка.КонтекстПроверокВеденияУчета   = "СистемныеПроверки";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru='Проверка отсутствующих предопределенных элементов'");
	Проверка.Причины                      = НСтр("ru='Некорректная синхронизация данных с другими программами или импорт данных.'");
	Проверка.Рекомендация                 = НСтр("ru='• Запустить исправление по ссылке ниже. 
		|Если работа ведется в распределенной информационной базе (РИБ), то исправление следует запускать только в главном узле.
		|	Затем выполнить синхронизацию с подчиненными узлами.'");
	Проверка.Идентификатор                = "ПроверкаОтсутствующихПредопределенныхЭлементов";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаСлужебный.ПроверитьОтсутствующиеПредопределенныеЭлементы";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru='Проверка дублирования предопределенных элементов'");
	Проверка.Причины                      = НСтр("ru='Некорректная синхронизация данных с другими программами или импорт данных.'");
	Проверка.Рекомендация                 = НСтр("ru='• Запустить поиск и удаление дублей по ссылке ниже. 
		|Если работа ведется в распределенной информационной базе (РИБ), то исправление следует запускать только в главном узле.
		|	Затем выполнить синхронизацию с подчиненными узлами.'");
	Проверка.Идентификатор                = "ПроверкаДублированияПредопределенныхЭлементов";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаСлужебный.ПроверитьДублированиеПредопределенныхЭлементов";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru='Проверка отсутствия предопределенных узлов плана обмена'");
	Проверка.Причины                      = НСтр("ru='Некорректное поведение программы при работе на устаревших версиях платформы 1С:Предприятие.'");
	Проверка.Рекомендация                 = НСтр("ru='• Перейти на версию платформы 1С:Предприятие 8.3.9.2033 или выше;
		|• Завершить работу всех пользователей и установить блокировку входа в программу;
		|• Сделать резервную копию информационной базы;
		|• Запустить конфигуратор, меню Администрирование, Тестирования и исправление, включив два флажка для проверка логической и ссылочной целостности
		|	см подробнее на ИТС: https://its.1c.ru/db/v839doc#bookmark:adm:TI000000142
		|• Снять блокировку входа в программу
		|Если работа ведется в распределенной информационной базе (РИБ), то исправление следует запускать только в главном узле.
		|	Затем выполнить синхронизацию с подчиненными узлами.'");
	Проверка.Идентификатор                = "ПроверкаОтсутствияПредопределенныхУзловПлановОбмена";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаСлужебный.ПроверитьНаличиеПредопределенныхУзловПлановОбмена";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		
		Проверка = Проверки.Добавить();
		Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
		Проверка.Наименование                 = НСтр("ru='Поиск ссылок на несуществующие файлы в томах хранения'");
		Проверка.Причины                      = НСтр("ru='Файл был физически удален или перемещен на диске в следствие работы антивирусных программа,
		|	непреднамеренных действий администратора и.т.д.'");
		Проверка.Рекомендация                 = НСтр("ru='• Либо пометить файл в программе на удаление;
		|• Либо восстановить файл на диске в томе из резервной копии.'");
		Проверка.Идентификатор                = "ПроверкаСсылокНаНесуществующиеФайлыВТоме";
		Проверка.ОбработчикПроверки           = "РаботаСФайламиСлужебный.ПроверкаСсылокНаНесуществующиеФайлыВТоме";
		Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
		
	КонецЕсли;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторРодителя        = "СистемныеПроверки";
	Проверка.Наименование                 = НСтр("ru='Проверка некорректной контактной информации'");
	Проверка.Причины                      = НСтр("ru='Некорректная синхронизация данных с другими программами или импорт данных.'");
	Проверка.Рекомендация                 = НСтр("ru='Обратиться к разработчикам синхронизация данных и запустить исправление по ссылке ниже.'");
	Проверка.Идентификатор                = "ПроверкаКонтактнойИнформации";
	Проверка.ОбработчикПроверки           = "КонтрольВеденияУчетаСлужебный.ПроверитьКонтактнуюИнформацию";
	Проверка.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
	
КонецПроцедуры

// Создает таблицу групп проверок
//
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//      * Наименование  - Строка - Наименование группы проверок.
//      * Идентификатор - Строка - Строковый идентификатор группы проверок.
//
Функция НоваяТаблицаГруппПроверок()
	
	ГруппыПроверок        = Новый ТаблицаЗначений;
	КолонкиГруппыПроверок = ГруппыПроверок.Колонки;
	КолонкиГруппыПроверок.Добавить("Наименование",  Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	КолонкиГруппыПроверок.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	
	Возврат ГруппыПроверок;
	
КонецФункции

// Создает таблицу проверок
//
// Возвращаемое значение:
//   ТаблицаЗначений с колонками:
//      * ИдентификаторРодителя                      - Строка - Строковый идентификатор группы проверок, например: "СистемныеПроверки".
//                                                     Возможны также варианты "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                                     Обязателен для заполнения.
//      * Наименование                               - Строка - Наименование элемента проверки.
//      * Причины                                    - Строка - Возможные причины которые привели к возникновению проблемы.
//      * Рекомендация                               - Строка - Текстовая рекомендация по решению возникшей проблемы.
//      * Идентификатор                              - Строка - Строковый идентификатор элемента. Обязателен для заполнения.
//      * ДатаНачалаПроверки                         - Дата - Пороговая дата, обозначающая границу проверяемых
//                                                     объектов (только для объектов с датой). Объекты, дата которых меньше
//                                                     указанной, не следует проверять. По умолчанию не заполнено (т.е.
//                                                     проверять все).
//      * ЛимитПроблем                               - Число - Количество проверяемых объектов.
//                                                     По умолчанию 1000. Если указано 0, то следует проверить все объекты.
//      * ОбработчикПроверки                         - Строка - Имя процедуры-обработчика исправления проверки. Под процедурой-обработчиком
//                                                     понимать экспортную процедуру серверного общего модуля.
//      * ОбработчикПереходаКИсправлению             - Строка - Имя процедуры-обработчика исправления проблемы. Под процедурой-обработчиком
//                                                     понимать экспортную процедуру клиентского общего модуля.
//      * БезОбработчикаПроверки                     - Булево - На случай служебной проверки, которая не имеет процедуры-обработчика.
//      * ЗапрещеноИзменениеВажности                 - Булево - Для запрета изменения важности некоторых проверок
//                                                     интерактивно, в карточке проверки.
//      * КонтекстПроверокВеденияУчета               - ОпределяемыйТип.КонтекстПроверокВеденияУчета - Содержит контекст проверки.
//      * УточнениеКонтекстаПроверкиСостоянияСистемы - ОпределяемыйТип.УточнениеКонтекстаПроверкиСостоянияСистемы - Содержит
//                                                     уточнение контекста проверки.
//      * ДополнительныеПараметры                    - ХранилищеЗначений - Дополнительная информация по проверке.
//
Функция НоваяТаблицаПроверок()
	
	Проверки        = Новый ТаблицаЗначений;
	КолонкиПроверок = Проверки.Колонки;
	КолонкиПроверок.Добавить("ИдентификаторРодителя",                      Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	КолонкиПроверок.Добавить("Наименование",                               Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	КолонкиПроверок.Добавить("Причины",                                    Новый ОписаниеТипов("Строка"));
	КолонкиПроверок.Добавить("Рекомендация",                               Новый ОписаниеТипов("Строка"));
	КолонкиПроверок.Добавить("Идентификатор",                              Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	КолонкиПроверок.Добавить("ДатаНачалаПроверки",                         Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КолонкиПроверок.Добавить("ЛимитПроблем",                               Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(8, 0, ДопустимыйЗнак.Неотрицательный)));
	КолонкиПроверок.Добавить("ОбработчикПроверки",                         Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	КолонкиПроверок.Добавить("ОбработчикПереходаКИсправлению",             Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	КолонкиПроверок.Добавить("БезОбработчикаПроверки",                     Новый ОписаниеТипов("Булево"));
	КолонкиПроверок.Добавить("ЗапрещеноИзменениеВажности",                 Новый ОписаниеТипов("Булево"));
	КолонкиПроверок.Добавить("КонтекстПроверокВеденияУчета",               Метаданные.ОпределяемыеТипы.КонтекстПроверокВеденияУчета.Тип);
	КолонкиПроверок.Добавить("УточнениеКонтекстаПроверкиСостоянияСистемы", Метаданные.ОпределяемыеТипы.УточнениеКонтекстаПроверкиСостоянияСистемы.Тип);
	КолонкиПроверок.Добавить("ДополнительныеПараметры",                    Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Возврат Проверки;
	
КонецФункции

#КонецОбласти