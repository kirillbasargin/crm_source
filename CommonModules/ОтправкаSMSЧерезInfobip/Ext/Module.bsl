#Область СлужебныеПроцедурыИФункции

// Отправляет SMS через Infobip.
//
// Параметры:
//  НомераПолучателей - Массив - номера получателей в формате +7ХХХХХХХХХХ;
//  Текст 			  - Строка - текст сообщения, длиной не более 480 символов;
//  ИмяОтправителя 	  - Строка - имя отправителя, которое будет отображаться вместо номера входящего SMS;
//  Логин			  - Строка - логин пользователя услуги отправки sms;
//  Пароль			  - Строка - пароль пользователя услуги отправки sms.
//
// Возвращаемое значение:
//  Структура: ОтправленныеСообщения - Массив структур: НомерОтправителя.
//                                                  ИдентификаторСообщения.
//             ОписаниеОшибки        - Строка - пользовательское представление ошибки, если пустая строка,
//                                          то ошибки нет.
Функция ОтправитьSMS(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль) Экспорт
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	// Проверка на заполнение обязательных параметров.
	Если НомераПолучателей.Количество() = 0 Или ПустаяСтрока(Текст) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверные параметры сообщения'");
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеНомеров = Новый Соответствие;
	
	// Подготовка получателей.
	Получатели = Новый Массив;
	Для Каждого Значение Из НомераПолучателей Цикл
		Получатель = ФорматироватьНомерДляОтправки(Значение);
		Если Получатели.Найти(Получатель) = Неопределено Тогда
			Получатели.Добавить(Получатель);
		КонецЕсли;
		СоответствиеНомеров.Вставить(Получатель, Значение);
	КонецЦикла;
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("from", ?(НЕ ЗначениеЗаполнено(ИмяОтправителя), Логин, ИмяОтправителя)); //ИмяОтправителя
	ПараметрыЗапроса.Вставить("to", Получатели);
	ПараметрыЗапроса.Вставить("text", Текст);

	// отправка запроса
	ОтветСервера = ВыполнитьЗапрос("text/single", Логин, Пароль, ПараметрыЗапроса);
	Если Не ЗначениеЗаполнено(ОтветСервера) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + НСтр("ru = 'Соединение не установлено'");
		Возврат Результат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОтветСервера) Тогда 				
		Результат.ОписаниеОшибки = "ru = 'Не удалось отправить SMS: "; 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Результат.ОписаниеОшибки);
	Иначе		
		Если ОтветСервера.Свойство("bulkId") Тогда
			Результат.Вставить("ИдентификаторРассылки", ОтветСервера["bulkId"]);	
		КонецЕсли;
		Если ОтветСервера.Свойство("messages") Тогда
			Для каждого СведенияОбОтправке Из ОтветСервера["messages"] Цикл		
				НомерПолучателя = СоответствиеНомеров.Получить(СведенияОбОтправке["to"]); //ФорматироватьНомерИзРезультатаОтправки(СведенияОбОтправке["to"]);					
				ОтправленноеСообщение = Новый Структура("НомерПолучателя, ИдентификаторСообщения", НомерПолучателя,
					"" + СведенияОбОтправке["to"] + "/" + СокрЛП(СведенияОбОтправке["messageId"]));				
				Результат.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);			
			КонецЦикла;				
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Отправляет SMS через Infobip.
//
// Параметры:
//  НомераПолучателей 			- Массив - номера получателей в формате +7ХХХХХХХХХХ;
//  Текст 			  			- Строка - текст сообщения, длиной не более 480 символов;
//  ИмяОтправителя 	  			- Строка - имя отправителя, которое будет отображаться вместо номера входящего SMS;
//  Логин			  			- Строка - логин пользователя услуги отправки sms;
//  Пароль			  		 	- Строка - пароль пользователя услуги отправки sms.
//  ДополнительныеСвойства 		- Дополнительные свойства сообщения.
//
// Возвращаемое значение:
//  Структура: ОтправленныеСообщения - Массив структур: НомерОтправителя.
//                                                  ИдентификаторСообщения.
//             ОписаниеОшибки        - Строка - пользовательское представление ошибки, если пустая строка,
//                                          то ошибки нет.
Функция ОтправитьSMSСДополнительнымиПараметрами(НомераПолучателей, Текст, ИмяОтправителя, Логин, Пароль, ДополнительныеСвойства = Неопределено) Экспорт //МаркетинговоеМероприятие = Неопределено  Новый Структура("tracking", Новый Структура("track, type", "SMS", Строка(МаркетинговоеМероприятие))
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	// Проверка на заполнение обязательных параметров.
	Если НомераПолучателей.Количество() = 0 Или ПустаяСтрока(Текст) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверные параметры сообщения'");
		Возврат Результат;
	КонецЕсли;
	
	СоответствиеНомеров = Новый Соответствие;
	
	// Подготовка получателей.
	Получатели = Новый Массив;
	Для Каждого Значение Из НомераПолучателей Цикл
		Получатель = ФорматироватьНомерДляОтправки(Значение);
		Если Получатели.Найти(Получатель) = Неопределено Тогда
			Получатели.Добавить(Получатель);
		КонецЕсли;
		СоответствиеНомеров.Вставить(Получатель, Значение);
	КонецЦикла;

	ПолучателиДляОтправки = Новый Массив;
	Для каждого Получатель Из Получатели Цикл
		ПолучателиДляОтправки.Добавить(Новый Структура("to", Получатель));	
	КонецЦикла;
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("from", ИмяОтправителя);
	ПараметрыЗапроса.Вставить("destinations", ПолучателиДляОтправки); 
	ПараметрыЗапроса.Вставить("text", Текст);
	//Если ЗначениеЗаполнено(МаркетинговоеМероприятие) Тогда
	//	ПараметрыЗапроса.Вставить("tracking", Новый Структура("track, type", "SMS", Строка(МаркетинговоеМероприятие)));  
	//КонецЕсли;	
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда 
		Для каждого ДопСвойство Из ДополнительныеСвойства Цикл		
			ПараметрыЗапроса.Вставить(ДопСвойство.Ключ, ДопСвойство.Значение);
		КонецЦикла;
	КонецЕсли;	
		
	// отправка запроса
	ОтветСервера = ВыполнитьЗапрос("text/advanced", Логин, Пароль, ПараметрыЗапроса);
	Если Не ЗначениеЗаполнено(ОтветСервера) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + НСтр("ru = 'Соединение не установлено'");
		Возврат Результат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОтветСервера) Тогда 				
		Результат.ОписаниеОшибки = "ru = 'Не удалось отправить SMS: "; 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , Результат.ОписаниеОшибки);
	Иначе		
		Если ОтветСервера.Свойство("bulkId") Тогда
			Результат.Вставить("ИдентификаторРассылки", ОтветСервера["bulkId"]);	
		КонецЕсли;
		Если ОтветСервера.Свойство("messages") Тогда
			Для каждого СведенияОбОтправке Из ОтветСервера["messages"] Цикл		
				НомерПолучателя = СоответствиеНомеров.Получить(СведенияОбОтправке["to"]); //ФорматироватьНомерИзРезультатаОтправки(СведенияОбОтправке["to"]);					
				ОтправленноеСообщение = Новый Структура("НомерПолучателя, ИдентификаторСообщения", НомерПолучателя,
					"" + СведенияОбОтправке["to"] + "/" + СокрЛП(СведенияОбОтправке["messageId"]));				
				Результат.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);			
			КонецЦикла;				
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текстовое представление статуса доставки сообщения.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный sms при отправке;
//  НастройкиОтправкиSMS   - Структура - см. ОтправкаSMSПовтИсп.НастройкиОтправкиSMS;
//
// Возвращаемое значение:
//  Строка - статус доставки. См. описание функции ОтправкаSMS.СтатусДоставки.
Функция СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS) Экспорт
	
	Логин = НастройкиОтправкиSMS.Логин;
	Пароль = НастройкиОтправкиSMS.Пароль;
	
	ЧастиИдентификатора = СтрРазделить(ИдентификаторСообщения, "/", Истина);
	
	Если НЕ ЧастиИдентификатора.Количество() Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("messageId", ЧастиИдентификатора[1]);
	
	// отправка запроса
	ОтветСервера = ВыполнитьЗапрос("logs", Логин, Пароль, ПараметрыЗапроса, "GET"); //reports - once
	Если НЕ ЗначениеЗаполнено(ОтветСервера) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить статус доставки SMS (id: ""%1""): '"), ИдентификаторСообщения);		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);	
			
		Возврат "Ошибка";
	КонецЕсли;
	
	Если НЕ ОтветСервера.Свойство("results") Тогда
		Возврат "Ошибка";
	КонецЕсли;

	КодСтатуса = "";	
	Для каждого Результат Из ОтветСервера["results"] Цикл		
		Если НЕ Результат["messageId"]	= ЧастиИдентификатора[1] Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Результат["error"]["groupId"] = 0 Тогда			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Не удалось получить статус доставки SMS (id: ""%3""):
				|%1 (код ошибки: %2)'"), Результат["error"]["description"], Результат["error"]["name"], ИдентификаторСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		Иначе
			КодСтатуса = Результат["status"]["groupId"];
		КонецЕсли;	
		
		Прервать;
	КонецЦикла;
	
	Возврат СтатусДоставкиSMS(КодСтатуса);
	
КонецФункции

Функция СтоимостьДоставки(ИдентификаторСообщения, НастройкиОтправкиSMS) Экспорт
	
	Логин = НастройкиОтправкиSMS.Логин;
	Пароль = НастройкиОтправкиSMS.Пароль;
	
	ЧастиИдентификатора = СтрРазделить(ИдентификаторСообщения, "/", Истина);
	
	Если НЕ ЧастиИдентификатора.Количество() Тогда
		Возврат "Ошибка";
	КонецЕсли;
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("messageId", ЧастиИдентификатора[1]);
	
	// отправка запроса
	ОтветСервера = ВыполнитьЗапрос("logs", Логин, Пароль, ПараметрыЗапроса, "GET");
	Если НЕ ЗначениеЗаполнено(ОтветСервера) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить стоимость доставки SMS (id: ""%1""): '"), ИдентификаторСообщения);		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Стоимость доставки SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);	
			
		Возврат 0;
	КонецЕсли;
	
	Если НЕ ОтветСервера.Свойство("results") Тогда
		Возврат 0;
	КонецЕсли;

	СтоимостьДоставки = 0;	
	Для каждого Результат Из ОтветСервера["results"] Цикл		
		Если НЕ Результат["messageId"]	= ЧастиИдентификатора[1] Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Результат["error"]["groupId"] = 0 Тогда			
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Не удалось получить стоимость доставки SMS (id: ""%3""):
				|%1 (код ошибки: %2)'"), Результат["error"]["description"], Результат["error"]["name"], ИдентификаторСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		Иначе
			СтоимостьДоставки = Результат["price"]["pricePerMessage"];
		КонецЕсли;	
		
		Прервать;
	КонецЦикла;
	
	Возврат СтоимостьДоставки;
	
КонецФункции

Функция ОписанияОшибок()
	
	ОписанияОшибок = Новый Соответствие;
	ОписанияОшибок.Вставить(1, НСтр("ru = 'Ошибка устройства.'; en = 'HANDSET_ERRORS'"));
	ОписанияОшибок.Вставить(2, НСтр("ru = 'Ошибка пользователя.'; en = 'USER_ERRORS'"));
	ОписанияОшибок.Вставить(3, НСтр("ru = 'Ошибка оператора.'; en = 'OPERATOR_ERRORS'"));
	
	Возврат ОписанияОшибок;
	
КонецФункции

Функция ОписаниеОшибкиОтправки(КодОшибки)	
	
	ОписанияОшибок = ОписанияОшибок();
	ТекстСообщения = ОписанияОшибок[КодОшибки];
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Код ошибки: ""%1"".'"), КодОшибки);
		КонецЕсли;
		
	Возврат ТекстСообщения;
	
КонецФункции

Функция ОписаниеОшибкиПолученияСтатуса(КодОшибки)
	
	ОписанияОшибок = ОписанияОшибок();
	ТекстСообщения = ОписанияОшибок[КодОшибки];
	Если ТекстСообщения = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Отказ выполнения операции'");
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СтатусДоставкиSMS(КодСостояния)

	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(0, "Отправлено");
	СоответствиеСтатусов.Вставить(1, "Отправляется");
	СоответствиеСтатусов.Вставить(2, "НеДоставлено");
	СоответствиеСтатусов.Вставить(3, "Доставлено");
	СоответствиеСтатусов.Вставить(4, "НеОтправлялось");
	СоответствиеСтатусов.Вставить(5, "НеОтправлялось");
	
	Результат = СоответствиеСтатусов[КодСостояния];
	Возврат ?(Результат = Неопределено, "Ошибка", Результат);
	
КонецФункции

Функция ВыполнитьЗапрос(ИмяМетода, Логин, Пароль, ПараметрыЗапроса, Метод = "POST")
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Basic " + ПолучитьBase64ЗаголовокАвторизации(Логин, Пароль));
	Если Метод = "POST" Тогда
		Заголовки.Вставить("Content-Type", "application/json");
	КонецЕсли;
	Заголовки.Вставить("Accept", "application/json");	
	
	HTTPЗапрос = ПодготовитьHTTPЗапрос("/sms/1/" + ИмяМетода, Заголовки, ПараметрыЗапроса, Метод);
	HTTPОтвет = Неопределено;
	
	Попытка
		Соединение = Новый HTTPСоединение("api.infobip.com", , , , ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https"), 60);
		Если Метод = "POST" Тогда
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли Метод = "GET" Тогда
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если НЕ HTTPОтвет = Неопределено Тогда		
		ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();		
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
		ОтветСервера = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Возврат ОтветСервера;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает список разрешений для отправки SMS с использованием всех доступных провайдеров.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения() Экспорт
	
	Протокол = "HTTPS";
	Адрес = "infobip.com";
	Порт = Неопределено;
	Описание = НСтр("ru = 'Отправка SMS через ""Infobip"".'");
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(
		МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	
	Возврат Разрешения;
	
КонецФункции

Процедура ЗаполнитьОписаниеУслуги(ОписаниеУслуги) Экспорт
	ОписаниеУслуги.АдресВИнтернете = "https://www.infobip.com";
КонецПроцедуры

Функция ПодготовитьHTTPЗапрос(АдресРесурса, Заголовки, ПараметрыЗапроса, Метод = "POST") Экспорт
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Строка") Тогда
		СтрокаПараметров = ПараметрыЗапроса;
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
	Иначе		
		Если Метод = "POST" Тогда			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ПараметрыЗапроса);			
			СтрокаПараметров = ЗаписьJSON.Закрыть();
			HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаПараметров);
		ИначеЕсли Метод = "GET" Тогда
			СписокПараметров = Новый Массив;
			Для Каждого Параметр Из ПараметрыЗапроса Цикл
				СписокПараметров.Добавить(Параметр.Ключ + "=" + КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.КодировкаURL));
			КонецЦикла;
			СтрокаПараметров = СтрСоединить(СписокПараметров, "&");			
			АдресРесурса = АдресРесурса + "?" + СтрокаПараметров;
			HTTPЗапрос.АдресРесурса = АдресРесурса;
		Иначе
			СтрокаПараметров = "";	
		КонецЕсли;
	КонецЕсли;
	
	Возврат HTTPЗапрос;

КонецФункции

Функция ПолучитьBase64ЗаголовокАвторизации(ИмяПользователя, Пароль)

    КодировкаФайла = КодировкаТекста.UTF8;
    ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	Запись = Новый ЗаписьТекста(ВременныйФайл, КодировкаФайла);
    Запись.Записать(ИмяПользователя + ":" + Пароль);
    Запись.Закрыть();

    ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
    Результат = Base64Строка(ДвДанные);
    УдалитьФайлы(ВременныйФайл);

    Результат = Сред(Результат, 5);

    Возврат Результат;

КонецФункции

Функция ФорматироватьНомерИзРезультатаОтправки(Номер)
	
	Результат = Номер;
	
	Если СтрДлина(Результат) > 10 Тогда
		ПервыйСимвол = Лев(Результат, 1);
		Если ПервыйСимвол = "8" Тогда
			Результат = "+7" + Сред(Результат, 2);
		ИначеЕсли ПервыйСимвол <> "+" Тогда
			Результат = "+" + Результат;
		КонецЕсли;
	//++ Юкаев Роман 20180716 (//Задача AN-98	
	ИначеЕсли СтрДлина(Результат) = 10 И Лев(Результат, 1) = "9" Тогда
		Результат = "+7" + Результат;
	//-- Юкаев Роман 20180716 )
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьНомерДляОтправки(Номер)
	
	Результат = "";
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	ПервыйСимвол = Лев(Результат, 1);
	НачальныеСимволы = Лев(Результат, 2);
	Если СтрДлина(Результат) = 11 И (ПервыйСимвол = "8" ИЛИ ПервыйСимвол = "7") Тогда
		Результат = "7" + Сред(Результат, 2);
	ИначеЕсли СтрДлина(Результат) = 12 И (НачальныеСимволы = "+7" ИЛИ НачальныеСимволы = "+8") Тогда //++ Юкаев Роман 20180716 ()//добавил проверку "+8"
		Результат = "7" + Сред(Результат, 3);		
	Иначе
		//++ Юкаев Роман 20180716 (//Задача AN-98
		Если СтрДлина(Результат) = 10 И (ПервыйСимвол = "9") Тогда
			Результат = "7" + Результат; 
		Иначе
			Результат = Номер;
		КонецЕсли;
		//-- Юкаев Роман 20180716 )
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ОбновлениеСтоимостейДоставкиSMS() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеДокумента = Метаданные.Документы.СообщениеSMS;
	
	ТаблицаИзменившихсяСтоимостей = Новый ТаблицаЗначений;
	ТаблицаИзменившихсяСтоимостей.Колонки.Добавить("НомерСтроки");
	ТаблицаИзменившихсяСтоимостей.Колонки.Добавить("СтоимостьДоставки");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеSMSАдресаты.Ссылка КАК Ссылка,
	               |	СообщениеSMSАдресаты.НомерСтроки КАК НомерСтроки,
	               |	СообщениеSMSАдресаты.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	СообщениеSMSАдресаты.СостояниеСообщения КАК СостояниеСообщения,
	               |	СообщениеSMSАдресаты.СтоимостьДоставки КАК СтоимостьДоставки
	               |ИЗ
	               |	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	               |ГДЕ
	               |	СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	               |	И НЕ(СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру)
	               |				ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеОтправленоПровайдером)
	               |				ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеДоставлено)
	               |				ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.НеОпознаноПровайдером))
	               |	И НЕ СообщениеSMSАдресаты.Ссылка.ПометкаУдаления
	               |	И СообщениеSMSАдресаты.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И СообщениеSMSАдресаты.СтоимостьДоставки = 0
	               |ИТОГИ ПО
	               |	Ссылка";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата()));

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка, , ,
		НСтр("ru = 'Не выполнены настройки отправки SMS.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаИзменившихсяСтоимостей.Очистить();
		
		НачатьТранзакцию();
		Попытка
			//Блокировка = Новый БлокировкаДанных;
			//ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
			//ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДокументы.Ссылка);
			//Блокировка.Заблокировать();
		
			ВыборкаИдентификаторы = ВыборкаДокументы.Выбрать();
			Пока ВыборкаИдентификаторы.Следующий() Цикл
					
				СтоимостьДоставки = ОтправкаSMSЧерезInfobip.СтоимостьДоставки(ВыборкаИдентификаторы.ИдентификаторСообщения, ОтправкаSMSПовтИсп.НастройкиОтправкиSMS()); 
				
				Если СтоимостьДоставки <> ВыборкаИдентификаторы.СтоимостьДоставки Тогда
					НоваяСтрока = ТаблицаИзменившихсяСтоимостей.Добавить();
					НоваяСтрока.НомерСтроки = ВыборкаИдентификаторы.НомерСтроки;
					НоваяСтрока.СтоимостьДоставки = СтоимостьДоставки;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаИзменившихсяСтоимостей.Количество() = 0 Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
			
			Для Каждого ИзменившаясяСтоимость Из ТаблицаИзменившихсяСтоимостей Цикл
				ДокументОбъект.Адресаты[ИзменившаясяСтоимость.НомерСтроки - 1].СтоимостьДоставки = ИзменившаясяСтоимость.СтоимостьДоставки;
			КонецЦикла;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьКонтакты", Истина);
			ДокументОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обновить стоимость доставки : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаДокументы.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеДокумента,
			                         ВыборкаДокументы.Ссылка,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти
