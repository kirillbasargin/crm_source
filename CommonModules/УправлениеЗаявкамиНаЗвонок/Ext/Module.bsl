
#Область ПрограммныйИнтерфейс

Процедура ПолучениеЗаявокНаCallBack() Экспорт
		
	ПараметрыСайтов = ПолучитьДанныеСайтов();
	НайденыеКлиенты_МВТ = ПодготовитьТаблицуКлиентов();
	Для каждого СтрокаПараметров Из ПараметрыСайтов Цикл		
		ЗагрузитьЗаявкиНаCallBack(СтрокаПараметров, НайденыеКлиенты_МВТ, ПодготовитьСписокОС());			
	КонецЦикла; 
	
	Если Константы.ИспользоватьАвтораспределениеЗаявок.Получить() Тогда 
		АвтоРаспределениеЗаявок(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, Перечисления.ВидыЗаявокНаЗвонок.ОбратныйЗвонок);
		АвтоРаспределениеЗаявок(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, Перечисления.ВидыЗаявокНаЗвонок.СозданаВручную);
		АвтоРаспределениеЗаявок(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, Перечисления.ВидыЗаявокНаЗвонок.МассовыйОбзвонКлиентов);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПолучениеЗаявокНаОбратныйЗвонок() Экспорт
	
	ЗагрузитьЗаказыЗвонков();	
	
	Если Константы.ИспользоватьАвтораспределениеЗаявок.Получить() Тогда 
		АвтоРаспределениеЗаявок(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, Перечисления.ВидыЗаявокНаЗвонок.ЗаказЗвонка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеЗаявокСПочты() Экспорт
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Колонки", "ИмяОтправителя, Вложения, ДатаПолучения, Тема, ДатаОтправления, СмещениеДатыОтправления, ОбратныйАдрес, Отправитель, Тексты, ИдентификаторСообщения");	
	УчетнаяЗаписьВходящие = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("Загрузка заявок с почты", Истина); //Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты; //Найти
	
	ТаблицаВходящихСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(УчетнаяЗаписьВходящие, ПараметрыЗагрузки);
		
	//<825535>, Басаргин (29.05.2018) {
	СписокОС = ПодготовитьСписокОС();
	//<825535> }		
	
	Для Каждого ЭлементВходящееСообщение Из ТаблицаВходящихСообщений Цикл				
		
		Если НЕ (НачалоДня(ЭлементВходящееСообщение.ДатаОтправления) = НачалоДня(ТекущаяДата())
					ИЛИ НачалоДня(ЭлементВходящееСообщение.ДатаОтправления) = НачалоДня(ТекущаяДата()) - 3600*24)
			ИЛИ ЗаявкаПоПисьмуСоздана(ЭлементВходящееСообщение.ИдентификаторСообщения) Тогда
			Продолжить;
		КонецЕсли; 		
		
		ЗаявкаОбъект = Документы.ЗаявкаНаЗвонок.СоздатьДокумент();			
		ЗаявкаОбъект.id =?(НЕ ЗначениеЗаполнено(СокрЛП(ЭлементВходящееСообщение.ИдентификаторСообщения)), Строка(Новый УникальныйИдентификатор), СокрЛП(ЭлементВходящееСообщение.ИдентификаторСообщения));
		ТекущаяДата = ТекущаяДата();
		ЗаявкаОбъект.Дата = ТекущаяДата;	
		ЗаявкаОбъект.ДатаПоследнейЗагрузки = ТекущаяДата;
		ЗаявкаОбъект.reqData = ТекущаяДата; //ПолучитьДатуОтправленияБезСмещения(ЭлементВходящееСообщение.ДатаОтправления, ЭлементВходящееСообщение.СмещениеДатыОтправления);	
		ЗаявкаОбъект.reqEmail = ЭлементВходящееСообщение.Отправитель;
		ЗаявкаОбъект.Тема = ЭлементВходящееСообщение.Тема;
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.ПоПисьму;			
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;
		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет2;		
		Если СтрНайти(ЭлементВходящееСообщение.Отправитель, "realty@tinkoff.ru") > 0 ИЛИ СтрНайти(ЭлементВходящееСообщение.Отправитель, "realty@sales.tinkoff.ru") > 0 Тогда
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтТинькофф;
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "office-molodostroy@ya.ru") > 0 Тогда 
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ИпотечнаяЗаявкаМОЛОДОСТРОЙ;
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "no-reply@domofond.ru") > 0 Тогда 
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтДомофонд;
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "a101@novostroy-m.ru") > 0 Тогда 
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтНовостройМ;
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "alex@kvadroom.ru") > 0
			ИЛИ СтрНайти(ЭлементВходящееСообщение.Отправитель, "info@kvadroom.ru") > 0 Тогда 			
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтКвадрум;			
		////<854827>, Басаргин (07.08.2018) { //коммент 	leads@fury.ltd	
		//ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "postmasterFB@digital-mind.ru") > 0 Тогда 	  				
		//	ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтЛидгенФейсбук;			
		//ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "postmasterINST@digital-mind.ru") > 0 Тогда //было: "automatic@digital-mind.ru" 	  		
		//	ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтИнстраграмм;
		//ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "postmasterINSTStories@digital-mind.ru") > 0 Тогда  		
		//	ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаНаИнстаграмСторис;	
		////<854827> }				
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "postmasterFBCanvas@digital-mind.ru") > 0 Тогда  		
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтКанвас;
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "marina.melnikova@mirkvartir.ru") > 0 Тогда  		
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтМирКвартир;									
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "rmingazova@digital-mind.ru") > 0 Тогда //support_target@corp.my.com 	  		
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтОдноклассники;			
		//ИначеЕсли Найти(ЭлементВходящееСообщение.Отправитель, "support@mail.carrotquest.io") > 0 Тогда	  		
		//	ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтCQ;									
		ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Отправитель, "admin@notify.vk.com") > 0 Тогда 	  		
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаСВКонтакте;
			ЗаявкаОбъект.Проект = Справочники.Проекты.НайтиПоНаименованию("МЮЗ");
			ЗаявкаОбъект.ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.Машиноместо;
		Иначе
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ПустаяСсылка();
		КонецЕсли;		

		//<793486>, Басаргин (19.03.2018) {
		Если Найти(ЭлементВходящееСообщение.Отправитель, "mail@povarovo-perviy.ru") > 0 Тогда
			ЗаявкаОбъект.Сайт = Справочники.ПараметрыПолученияЗаявокНаCallBack.НайтиПоНаименованию("povarovo-perviy.ru", Истина);	
			ЗаявкаОбъект.ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость;
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаНаCallBack;
			ЗаявкаОбъект.Проект = Справочники.Проекты.НайтиПоНаименованию("Поварово");
		КонецЕсли;		
		//<793486> }
		
		//<854827>, Басаргин (07.08.2018) {
		Если СтрНайти(ЭлементВходящееСообщение.Отправитель, "leads@fury.ltd") > 0 Тогда
			Если СтрНайти(ЭлементВходящееСообщение.Тема, "fb_lead") Тогда
				ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтЛидгенФейсбук;	
			ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Тема, "ig_lead") Тогда
				ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтИнстраграмм;	
			ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Тема, "ig_stories_lead") Тогда
				ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаНаИнстаграмСторис;
			//<870912>, Басаргин (17.09.2018) {
			ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Тема, "ok_lead") Тогда
	        	ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтОдноклассники;
			ИначеЕсли СтрНайти(ЭлементВходящееСообщение.Тема, "vk_lead") Тогда
	        	ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаСВКонтакте;				
			//<870912> }
			КонецЕсли;			
			ЭлементВходящееСообщение.Тема = ВРег(ПереводИзТранслита(СтрЗаменить(ЭлементВходящееСообщение.Тема, "pv_", "певчее_")));
		КонецЕсли;
		//<854827> }
		
		ВремяЗаявки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формат(ЗаявкаОбъект.reqData, "ДЛФ=В"), ":");
		Попытка
			Если Число(ВремяЗаявки[0]) >= 9 И Число(ВремяЗаявки[0]) < 21  Тогда
				ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Обычная;
			Иначе
				ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Ночная;
			КонецЕсли; 
		Исключение
			ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.ПустаяСсылка();
		КонецПопытки;			
		ЗаявкаОбъект.reqText = ПолучитьТекстПисьма(ЭлементВходящееСообщение.Тексты, ЗаявкаОбъект.id);				
		ПозНомер = СтрНайти(ЗаявкаОбъект.reqText, "phone_number:");     
		Если ПозНомер Тогда
			ЗаявкаОбъект.reqContact = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(СокрЛП(Сред(ЗаявкаОбъект.reqText, ПозНомер + СтрДлина("phone_number:"))));
		Иначе
			ПозНомер = СтрНайти(ЗаявкаОбъект.reqText, "Телефон:");
			Если ПозНомер Тогда
				ЗаявкаОбъект.reqContact = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(СокрЛП(Сред(ЗаявкаОбъект.reqText, ПозНомер + СтрДлина("Телефон:"))));
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.reqContact) Тогда
			Попытка
				ЗаявкаОбъект.reqContact = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(ПолучитьНомерИзТекста(ЗаявкаОбъект.reqText));	
			Исключение	
			КонецПопытки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаявкаОбъект.reqContact) Тогда 
			ЗаявкаОбъект.Контакт = УправлениеТелефониейСервер.ОпределитьКлиента(ЗаявкаОбъект.reqContact)
		КонецЕсли;
		ЗаявкаОбъект.ГруппаРаспределения = Перечисления.ГруппыРаспределенияЗаявок.ГПТ;
		ЗаявкаОбъект.Автор = Справочники.Пользователи.Робот;
		ЗаявкаОбъект.ДеньОбработки = 1;	
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
		
		//<825535>, Басаргин (29.05.2018) {
		ЗаполнитьПроектПоДаннымПисьма(ЗаявкаОбъект, ЭлементВходящееСообщение, СписокОС);	
		//<825535> }		
		
		ЗаявкаОбъект.Записать(); 
		
		Если ЭлементВходящееСообщение.Вложения.Количество() И ЗначениеЗаполнено(ЗаявкаОбъект.Ссылка) Тогда
			Попытка
				Параметры = Новый Структура;
				Параметры.Вставить("ВладелецФайлов", ЗаявкаОбъект.Ссылка);
				Параметры.Вставить("Автор", Справочники.Пользователи.Робот);
				Параметры.Вставить("ИмяБезРасширения", "");
				Параметры.Вставить("РасширениеБезТочки", ""); 
				Параметры.Вставить("ВремяИзмененияУниверсальное", Неопределено);
				Для каждого Вложение Из ЭлементВходящееСообщение.Вложения Цикл
					Параметры.ИмяБезРасширения = Вложение.Ключ;
					ЧастиИмениФайла = СтрРазделить(Параметры.ИмяБезРасширения, ".", Ложь);
					Если ЧастиИмениФайла.Количество() > 1 Тогда
						Параметры.РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
						Параметры.ИмяБезРасширения = Лев(Параметры.ИмяБезРасширения, СтрДлина(Параметры.ИмяБезРасширения) - (СтрДлина(Параметры.РасширениеБезТочки)+1));
					КонецЕсли;								
					АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Вложение.Значение);
					РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(Параметры, АдресВременногоХранилищаФайла);				
				КонецЦикла; 
			Исключение
				ЗаписьЖурналаРегистрации("Получение заявок с почты",
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегламентныеЗадания.ПолучениеЗаявокСПочты,
					"УправлениеЗаявкамиНаЗвонок.ПолучениеЗаявокСПочты",
					"Получение заявок с почты " + ОписаниеОшибки());		
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;		
	
	Если Константы.ИспользоватьАвтораспределениеЗаявок.Получить() Тогда 
		АвтоРаспределениеЗаявок(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, Перечисления.ВидыЗаявокНаЗвонок.ПоПисьму);
	КонецЕсли;
	
КонецПроцедуры

Процедура СозданиеЗаявокНаЗвонокИзВзаимодействий() Экспорт
		
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	//	|					И НАЧАЛОПЕРИОДА(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДЕНЬ) = ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -7)	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПользовательскиеНастройкиРаспределенияЗаявок.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_ПользователиГПТ
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиРаспределенияЗаявок КАК ПользовательскиеНастройкиРаспределенияЗаявок
	|ГДЕ
	|	ПользовательскиеНастройкиРаспределенияЗаявок.ГруппаРаспределения = ЗНАЧЕНИЕ(Перечисление.ГруппыРаспределенияЗаявок.ГПТ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	|	ПредметыПапкиВзаимодействий.Рассмотрено КАК Рассмотрено,
	|	ПредметыПапкиВзаимодействий.РассмотретьПосле КАК РассмотретьПосле,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.Взаимодействие.Отменено, ЛОЖЬ) КАК Отменено,
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Тема КАК Тема,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ПредметыПапкиВзаимодействий.Предмет ССЫЛКА Документ.Запрос
	|			ТОГДА ПредметыПапкиВзаимодействий.Предмет.Проект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	КОНЕЦ КАК Проект,
	|	ВЫБОР
	|		КОГДА ПредметыПапкиВзаимодействий.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ПредметыПапкиВзаимодействий.Взаимодействие.Автор
	|		ИНАЧЕ ПредметыПапкиВзаимодействий.Взаимодействие.Ответственный
	|	КОНЕЦ КАК ВзаимодействиеАвтор
	|ПОМЕСТИТЬ ВТ_Взаимодействия
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЗаявкаНаЗвонок.Взаимодействие
	|ГДЕ
	|	(ПредметыПапкиВзаимодействий.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок
	|			ИЛИ ПредметыПапкиВзаимодействий.Взаимодействие ССЫЛКА Документ.Встреча)
	|	И ЕСТЬNULL(ПредметыПапкиВзаимодействий.Взаимодействие.Отменено, ЛОЖЬ) = ЛОЖЬ
	|	И НЕ ПредметыПапкиВзаимодействий.Рассмотрено
	|	И ВЫБОР
	|			КОГДА ПредметыПапкиВзаимодействий.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок
	|				ТОГДА ПредметыПапкиВзаимодействий.Взаимодействие.Ответственный В
	|							(ВЫБРАТЬ
	|								ВТ_ПользователиГПТ.Пользователь КАК Пользователь
	|							ИЗ
	|								ВТ_ПользователиГПТ КАК ВТ_ПользователиГПТ)
	|						И (ПредметыПапкиВзаимодействий.РассмотретьПосле МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|			ИНАЧЕ ПредметыПапкиВзаимодействий.Взаимодействие.Автор В
	|						(ВЫБРАТЬ
	|							ВТ_ПользователиГПТ.Пользователь КАК Пользователь
	|						ИЗ
	|							ВТ_ПользователиГПТ КАК ВТ_ПользователиГПТ)
	|					И (ПредметыПапкиВзаимодействий.РассмотретьПосле МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -1) И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, -1)
	|						ИЛИ ПредметыПапкиВзаимодействий.РассмотретьПосле МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, 1) И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ, 1))
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВстречаУчастники.Ссылка КАК Взаимодействие,
	|	МИНИМУМ(ВстречаУчастники.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Участники
	|ИЗ
	|	ВТ_Взаимодействия КАК ВТ_Взаимодействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Встреча.Участники КАК ВстречаУчастники
	|		ПО (ВТ_Взаимодействия.Взаимодействие ССЫЛКА Документ.Встреча)
	|			И ВТ_Взаимодействия.Взаимодействие = ВстречаУчастники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВстречаУчастники.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Взаимодействие,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Участники.Взаимодействие КАК Взаимодействие,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВстречаУчастники.Контакт КАК Справочник.Клиенты), ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)) КАК Контакт,
	|	ЕСТЬNULL(ВстречаУчастники.КакСвязаться, """") КАК КакСвязаться
	|ПОМЕСТИТЬ ВТ_Участник
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Встреча.Участники КАК ВстречаУчастники
	|		ПО ВТ_Участники.Взаимодействие = ВстречаУчастники.Ссылка
	|			И ВТ_Участники.НомерСтроки = ВстречаУчастники.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Взаимодействие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Взаимодействия.Предмет КАК Предмет,
	|	ВТ_Взаимодействия.Проект КАК Проект,
	|	ВТ_Взаимодействия.Проект.ВидНедвижимости КАК ВидНедвижимости,
	|	ВТ_Взаимодействия.Рассмотрено КАК Рассмотрено,
	|	ВТ_Взаимодействия.РассмотретьПосле КАК РассмотретьПосле,
	|	ВТ_Взаимодействия.Отменено КАК Отменено,
	|	ВТ_Взаимодействия.Взаимодействие КАК Взаимодействие,
	|	ВТ_Взаимодействия.Тема КАК Тема,
	|	ВТ_Взаимодействия.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ВТ_Взаимодействия.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок
	|			ТОГДА ВЫРАЗИТЬ(ВТ_Взаимодействия.Взаимодействие.АбонентКонтакт КАК Справочник.Клиенты)
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Участник.Контакт, ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка))
	|	КОНЕЦ КАК Контакт,
	|	ВЫБОР
	|		КОГДА ВТ_Взаимодействия.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок
	|			ТОГДА ВТ_Взаимодействия.Взаимодействие.АбонентКакСвязаться
	|		ИНАЧЕ ЕСТЬNULL(ВТ_Участник.КакСвязаться, """")
	|	КОНЕЦ КАК КакСвязаться,
	|	ВТ_Взаимодействия.ВзаимодействиеАвтор КАК ВзаимодействиеАвтор
	|ИЗ
	|	ВТ_Взаимодействия КАК ВТ_Взаимодействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Участник КАК ВТ_Участник
	|		ПО (ВТ_Взаимодействия.Взаимодействие ССЫЛКА Документ.Встреча)
	|			И ВТ_Взаимодействия.Взаимодействие = ВТ_Участник.Взаимодействие";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);	
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл			
			Если ЗначениеЗаполнено(ЗаявкаИзВзаимодействияБылаСоздана(Выборка.Взаимодействие)) Тогда					
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда
				Если ЕстьЗавершеннаяВстречаПоНазначенной(Выборка.Предмет, Выборка.Дата) Тогда   
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗаявкаОбъект = Документы.ЗаявкаНаЗвонок.СоздатьДокумент();
			ЗаявкаОбъект.id = Строка(Новый УникальныйИдентификатор);			
			ЗаявкаОбъект.Дата = ТекущаяДата;	
			ЗаявкаОбъект.ДатаПоследнейЗагрузки = ТекущаяДата;
			ЗаявкаОбъект.reqData = Выборка.РассмотретьПосле;		
			ВремяЗаявки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формат(ЗаявкаОбъект.reqData, "ДЛФ=В"), ":");
			Попытка
				Если Число(ВремяЗаявки[0]) >= 9 И Число(ВремяЗаявки[0]) < 21  Тогда
					ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Обычная;
				Иначе
					ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Ночная;
				КонецЕсли; 
			Исключение
				ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.ПустаяСсылка();
			КонецПопытки;
			ЗаявкаОбъект.Контакт = Выборка.Контакт;
			ЗаявкаОбъект.reqContact = ?(ЗначениеЗаполнено(ЗаявкаОбъект.Контакт), УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаОбъект.Контакт, "ОсновнойТелефон")), УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(Выборка.КакСвязаться)); 
			Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.reqContact) Тогда
				Продолжить;
			КонецЕсли;
			ЗаявкаОбъект.ПредметВзаимодействия = Выборка.Предмет;
			ЗаявкаОбъект.Проект = Выборка.Проект;
			ЗаявкаОбъект.ВидНедвижимости = Выборка.ВидНедвижимости;
			ЗаявкаОбъект.Взаимодействие = Выборка.Взаимодействие;			
			ЗаявкаОбъект.ГруппаРаспределения = Перечисления.ГруппыРаспределенияЗаявок.ГПТ;
			ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
			ЗаявкаОбъект.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия;		
			ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.КлиентыВРаботеГПТ;
			ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;		
			ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет3;
			ЗаявкаОбъект.Тема = Выборка.Тема;
			ЗаявкаОбъект.reqType = "Заявка на основании взаимодействия";
			ЗаявкаОбъект.ПлановоеВремя = ?(ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.ТелефонныйЗвонок"), Выборка.РассмотретьПосле, Неопределено);
			//ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата;
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			
			//Если ЗначениеЗаполнено(ЗаявкаОбъект.reqContact) Тогда
			//	НайденныйОтветственный = НайтиОтветственногоЗаявокПоКлиенту(ЗаявкаОбъект.reqContact);
			//	Если ЗначениеЗаполнено(НайденныйОтветственный) Тогда
			//		АктивныеПользователи = ПолучитьАктивныхПользователей(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, ЗаявкаОбъект.ВидНедвижимости, , );
			//		Если НЕ АктивныеПользователи.Найти(НайденныйОтветственный) = Неопределено Тогда
			//			ЗаявкаОбъект.Ответственный = НайденныйОтветственный;
			//			ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата;
			//			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			//		КонецЕсли;				
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Ответственный) Тогда
			//	Если ЗначениеЗаполнено(Выборка.ВзаимодействиеАвтор) Тогда
			//		АктивныеПользователи = ПолучитьАктивныхПользователей(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, ЗаявкаОбъект.ВидНедвижимости, , );
			//		Если НЕ АктивныеПользователи.Найти(Выборка.ВзаимодействиеАвтор) = Неопределено Тогда
			//			ЗаявкаОбъект.Ответственный = Выборка.ВзаимодействиеАвтор;
			//			ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата;
			//			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
			ЗаявкаОбъект.Автор = Справочники.Пользователи.Робот;
			ЗаявкаОбъект.ДеньОбработки = 1;
			ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
			Если ЗначениеЗаполнено(ЗаявкаОбъект.Взаимодействие) И ТипЗнч(ЗаявкаОбъект.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда
				ЗаявкаОбъект.СтатусПланированияВстречи = ?(НачалоДня(ТекущаяДата()) + 86400 = НачалоДня(Выборка.РассмотретьПосле), Перечисления.СтатусыПланироваиняВстреч.ПодтверждениеВстречи, Перечисления.СтатусыПланироваиняВстреч.КонтрольВстречи);
			КонецЕсли;	
			ЗаявкаОбъект.Записать(РежимЗаписи);
		КонецЦикла;
	КонецЕсли;
	
	Если Константы.ИспользоватьАвтораспределениеЗаявок.Получить() Тогда 
		АвтоРаспределениеЗаявок(Перечисления.ГруппыРаспределенияЗаявок.ГПТ, Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия);
	КонецЕсли;
		
КонецПроцедуры

Процедура АвтоРаспределениеЗаявок(ГруппаРаспределения = Неопределено, ВидЗаявкиНаЗвонок = Неопределено, ТипВызова = Неопределено, ЗаявкаНаЗвонок = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ КАК ВзаимодействиеАвтор,
	|	ЗаявкаНаЗвонок.Взаимодействие КАК Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата КАК ВзаимодействиеДата,
	|	ЗаявкаНаЗвонок.Дата КАК Дата,
	|	ЗаявкаНаЗвонок.reqData КАК ДатаЗаявки,
	|	ЗаявкаНаЗвонок.ДатаРаспределения КАК ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет КАК Приоритет,
	|	ЗаявкаНаЗвонок.Контакт КАК Контакт,
	|	ЗаявкаНаЗвонок.reqContact КАК reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)) КАК Комментарий,
	|	ЗаявкаНаЗвонок.Ссылка.Номер КАК Номер,
	|	ЗаявкаНаЗвонок.Статус КАК Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок КАК ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный КАК Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости КАК ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт КАК Сайт,
	|	ЗаявкаНаЗвонок.Проект КАК Объект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы КАК ЭтапРаботы,
	|	""Сегодняшние"" КАК ПорядокПоТипуРаспределения,
	|	ЗаявкаНаЗвонок.ТипВызова КАК ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ПолеСортировки
	|ПОМЕСТИТЬ ВТ_Распределение
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И (ЗаявкаНаЗвонок.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(ЗаявкаНаЗвонок.ДатаРаспределения, ДЕНЬ) = &НачалоЭтогоДня)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
	|	И НЕ ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет6), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5))
	|	И ЗаявкаНаЗвонок.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|	И ЗаявкаНаЗвонок.ТипРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние)
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""A"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЗаявкаНаЗвонок.Взаимодействие)
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ВЫБОР
	|			КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|					И НЕ ПредметыПапкиВзаимодействий.РассмотретьПосле ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДЕНЬ) <> &НачалоЭтогоДня
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча		
	|				ТОГДА ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоВчерашнегоДня, ДЕНЬ, -1) И &КонецВчерашнегоДня
	|			ИНАЧЕ ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	|		КОНЕЦ
	|	И ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет1), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет2), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет3), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4))
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|	И ЗаявкаНаЗвонок.ПопытокДозвониться = 0
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""B"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	//|	И ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет1), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет2), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4))
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок <> Значение(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|	И ЗаявкаНаЗвонок.ПопытокДозвониться > 0
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""V"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЗаявкаНаЗвонок.Взаимодействие)
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ВЫБОР
	|			КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|					И НЕ ПредметыПапкиВзаимодействий.РассмотретьПосле ЕСТЬ NULL
	|				ТОГДА НАЧАЛОПЕРИОДА(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДЕНЬ) <> &НачалоЭтогоДня
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ	
	|	И ВЫБОР
	|			КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча		
	|				ТОГДА ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоВчерашнегоДня, ДЕНЬ, -1) И &КонецВчерашнегоДня
	|			ИНАЧЕ ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	|		КОНЕЦ	
	//|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня	
	//|	И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет3)
	|	И ЗаявкаНаЗвонок.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)	
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = Значение(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы В (ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный), ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный))
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	//|	И (ЗаявкаНаЗвонок.ПопытокДозвониться < 6
	//|				И ЗаявкаНаЗвонок.ПопытокДозвониться > 0
	//|			ИЛИ ЗаявкаНаЗвонок.ПопытокСегодня < 2
	//|				И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	//|			ИЛИ ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	//|				И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	//|				И ЗаявкаНаЗвонок.ДеньОбработки < 5)
	|	И (ЗаявкаНаЗвонок.ПопытокДозвониться < 6
	|				И ЗаявкаНаЗвонок.ПопытокДозвониться > 0)
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""C"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	//|	И ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет1), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет2), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4))
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок <> Значение(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|	И (ЗаявкаНаЗвонок.ПопытокДозвониться < 6
	|			ИЛИ ЗаявкаНаЗвонок.ПопытокСегодня < 2)
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""W"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня
	|	И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|	И ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|	И ЗаявкаНаЗвонок.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""X"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	|	И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	//|	И ЗаявкаНаЗвонок.ПопытокСегодня < 2
	|	И ЗаявкаНаЗвонок.ПопытокДозвониться < 8
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)        
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""Y"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	//|	И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет3)
	|	И ЗаявкаНаЗвонок.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)		
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = Значение(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|	И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	//|	И ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	//|	И ЗаявкаНаЗвонок.ДеньОбработки >= 5
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""D"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	//|	И ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет1), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет2), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4))
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок <> Значение(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|	И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	|	И ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкаНаЗвонок.Взаимодействие.Ответственный
	|	КОНЕЦ,
	|	ЗаявкаНаЗвонок.Взаимодействие,
	|	ЗаявкаНаЗвонок.Взаимодействие.Дата,
	|	ЗаявкаНаЗвонок.Дата,
	|	ЗаявкаНаЗвонок.reqData,
	|	ЗаявкаНаЗвонок.ДатаРаспределения,
	|	ЗаявкаНаЗвонок.Приоритет,
	|	ЗаявкаНаЗвонок.Контакт,
	|	ЗаявкаНаЗвонок.reqContact,
	|	ВЫРАЗИТЬ(ЗаявкаНаЗвонок.Комментарий КАК СТРОКА(1000)),
	|	ЗаявкаНаЗвонок.Ссылка.Номер,
	|	ЗаявкаНаЗвонок.Статус,
	|	ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок,
	|	ЗаявкаНаЗвонок.Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный,
	|	ЗаявкаНаЗвонок.ВидНедвижимости,
	|	ЗаявкаНаЗвонок.Сайт,
	|	ЗаявкаНаЗвонок.Проект,
	|	ЗаявкаНаЗвонок.ЭтапРаботы,
	|	""Z"",
	|	ЗаявкаНаЗвонок.ТипВызова,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие.Автор В (&АктивныеПользователи)
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаявкаНаЗвонок.Взаимодействие.Ответственный В (&АктивныеПользователи)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня
	|	И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|	И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|	И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|			ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	//|	И ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	|	И ЗаявкаНаЗвонок.ПопытокДозвониться >= 8
	|	И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Распределение.ВзаимодействиеАвтор КАК ВзаимодействиеАвтор,
	|	ВТ_Распределение.Взаимодействие КАК Взаимодействие,
	|	ВТ_Распределение.ВзаимодействиеДата КАК ВзаимодействиеДата,
	|	ВТ_Распределение.Дата КАК Дата,
	|	ВТ_Распределение.ДатаЗаявки КАК ДатаЗаявки,
	|	ВТ_Распределение.ДатаРаспределения КАК ДатаРаспределения,
	|	ВТ_Распределение.ЭтапРаботы КАК ЭтапРаботы,
	|	ВТ_Распределение.Приоритет КАК Приоритет,
	|	ВТ_Распределение.reqContact КАК reqContact,
	|	ВТ_Распределение.Контакт КАК Контакт,
	|	ВТ_Распределение.Комментарий КАК Комментарий,
	|	ВТ_Распределение.Ссылка.Номер КАК СсылкаНомер,
	|	ВТ_Распределение.Статус КАК Статус,
	|	ВТ_Распределение.ВидЗаявкиНаЗвонок КАК ВидЗаявкиНаЗвонок,
	|	ВТ_Распределение.Ссылка КАК Ссылка,
	|	ВТ_Распределение.Ответственный КАК Ответственный,
	|	ВТ_Распределение.ПорядокПоТипуРаспределения КАК ПорядокПоТипуРаспределения,
	|	ВТ_Распределение.ТипВызова КАК ТипВызова,
	|	ВТ_Распределение.Сайт КАК Сайт,
	|	ВТ_Распределение.Объект КАК Объект,
	|	ВТ_Распределение.ВидНедвижимости КАК ВидНедвижимости,
	|	ВТ_Распределение.ПолеСортировки КАК ПолеСортировки
	|ИЗ
	|	ВТ_Распределение КАК ВТ_Распределение
	|ГДЕ
	|	ВТ_Распределение.Ссылка = &ЗаявкаНаЗвонок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки";
	
	Запрос.УстановитьПараметр("НачалоЭтогоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецЭтогоДня", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("НачалоВчерашнегоДня", НачалоДня(ТекущаяДата() - 86400));
	Запрос.УстановитьПараметр("КонецВчерашнегоДня", КонецДня(ТекущаяДата() - 86400));
	
	//<Тест>, Басаргин (30.03.2018) {	
	Если ЗаявкаНаЗвонок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_Распределение.Ссылка = &ЗаявкаНаЗвонок", "ИСТИНА");	
	Иначе
		Запрос.УстановитьПараметр("ЗаявкаНаЗвонок", ЗаявкаНаЗвонок);	
	КонецЕсли;	
	//<Тест> }
	
	Если ГруппаРаспределения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкаНаЗвонок.ГруппаРаспределения = &ГруппаРаспределения", "");	
	Иначе
		Запрос.УстановитьПараметр("ГруппаРаспределения", ГруппаРаспределения);	
	КонецЕсли;	
	Если ВидЗаявкиНаЗвонок = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок", "");	
	Иначе
		Запрос.УстановитьПараметр("ВидЗаявкиНаЗвонок", ВидЗаявкиНаЗвонок);	
	КонецЕсли;		
	Если ТипВызова = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкаНаЗвонок.ТипВызова В(&ТипВызова)", "");	
	Иначе
		Запрос.УстановитьПараметр("ТипВызова", ТипВызова);	
	КонецЕсли;	

	Запрос.УстановитьПараметр("АктивныеПользователи", ПолучитьАктивныхПользователей(ГруппаРаспределения));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл									
			РаспределитьЗаявкуПоТипуРаспределения(Выборка, Выборка.ПорядокПоТипуРаспределения, ГруппаРаспределения); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьНастройкуРаспределенияЗаявокПользователя(Настройка, Пользователь = Неопределено, ГруппаРаспределения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользовательскиеНастройкиРаспределенияЗаявок." + Настройка + " КАК Настройка
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиРаспределенияЗаявок КАК ПользовательскиеНастройкиРаспределенияЗаявок
	|ГДЕ
	|	ПользовательскиеНастройкиРаспределенияЗаявок.Пользователь = &Пользователь
	|	И ПользовательскиеНастройкиРаспределенияЗаявок.ГруппаРаспределения = &ГруппаРаспределения";
	
	Если ГруппаРаспределения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПользовательскиеНастройкиРаспределенияЗаявок.ГруппаРаспределения = &ГруппаРаспределения", "");
	Иначе
		Запрос.УстановитьПараметр("ГруппаРаспределения", ГруппаРаспределения);	
	КонецЕсли;
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, Пользователи.АвторизованныйПользователь(), Пользователь));
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка["Настройка"];
		КонецЕсли;                                                                   
	КонецЕсли;
		
КонецФункции

Процедура УстановитьНастройкуРаспределенияЗаявокПользователя(Настройка, Значение, Пользователь = Неопределено, ГруппаРаспределения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегМен = РегистрыСведений.ПользовательскиеНастройкиРаспределенияЗаявок.СоздатьМенеджерЗаписи();
		РегМен.Пользователь = ?(Пользователь = Неопределено, Пользователи.АвторизованныйПользователь(), Пользователь);
		РегМен.ГруппаРаспределения = ГруппаРаспределения;
		РегМен.Прочитать();			
		Если РегМен.Выбран() Тогда		
			РегМен[Настройка] = Значение;
			РегМен.Записать();
		КонецЕсли;
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Процедура ПроверкаЗаявокНаЗвонокПоПлановомуВремени() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.ПлановоеВремя >= &ТекущаяДата
	|	И ЗаявкаНаЗвонок.ПлановоеВремя <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МИНУТА, 15)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаявкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НЕ ЗаявкаОбъект = Неопределено Тогда
			ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет1;
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьЗавершеннаяВстречаПоНазначенной(Предмет, ДатаПроспроченнойВстречиГПТ) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 		
	"ВЫБРАТЬ
	|	Взаимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.ТипВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимодействий.Встреча)
	|	И Взаимодействия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВзаимодействий.Завершено)
	|	И НАЧАЛОПЕРИОДА(Взаимодействия.ДатаВзаимодействия, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&ДатаПроспроченнойВстречиГПТ, ДЕНЬ)
	|	И Взаимодействия.Предмет = &Предмет
	|	И Взаимодействия.ГруппаОтветственного.Наименование В (""Земля розница"", ""Центральный офис"", ""Филиал"")";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ДатаПроспроченнойВстречиГПТ", ДатаПроспроченнойВстречиГПТ);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НайтиОтветственногоЗаявокПоКлиенту(reqContact) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка,
	|	ЗаявкаНаЗвонок.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	ЗаявкаНаЗвонок.reqContact ПОДОБНО &reqContact
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) И КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|	И НЕ ЗаявкаНаЗвонок.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	НомерТелефона = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(СокрЛП(reqContact));
	Если СтрДлина(НомерТелефона) = 11 И (Сред(НомерТелефона, 1, 1) = "7" ИЛИ Сред(НомерТелефона, 1, 1) = "8") Тогда
		НомерТелефона = Прав(НомерТелефона, 10);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("reqContact", "%" + НомерТелефона + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ответственный;
		КонецЕсли;
	КонецЕсли;		
	
КонецФункции

Функция ЗаявкаИзВзаимодействияБылаСоздана(Взаимодействие) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.Взаимодействие = &Взаимодействие
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|	И ЗаявкаНаЗвонок.ТипВызова = ЗНАЧЕНИЕ(Перечисление.ТипыВызовов.КлиентыВРаботеГПТ)";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;	
		
КонецФункции

Функция ПодготовитьСписокОС()
	
	СписокНаименованийОС = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыСтроительства.Наименование КАК Наименование,
	|	ОбъектыСтроительства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	НЕ ОбъектыСтроительства.ПометкаУдаления
	|	И ОбъектыСтроительства.ЭтоГруппа
	|	И ОбъектыСтроительства.Родитель В (&ЖН, &КН)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектыСтроительства.Наименование,
	|	ОбъектыСтроительства.Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	НЕ ОбъектыСтроительства.ПометкаУдаления
	|	И ОбъектыСтроительства.Родитель В (&ЗУ_Опт, &ЗУ_Розница)";
	
	Запрос.УстановитьПараметр("ЖН", Справочники.ОбъектыСтроительства.НайтиПоНаименованию("02_Жилая недвижимость", Истина));
	Запрос.УстановитьПараметр("КН", Справочники.ОбъектыСтроительства.НайтиПоНаименованию("01_Коммерческая недвижимость", Истина));
	Запрос.УстановитьПараметр("ЗУ_Опт", Справочники.ОбъектыСтроительства.НайтиПоНаименованию("03_Земля. Опт", Истина));
	Запрос.УстановитьПараметр("ЗУ_Розница", Справочники.ОбъектыСтроительства.НайтиПоНаименованию("04_Земля. Розница", Истина));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Структура = Новый Структура("Наименование, НаименованиеБезПробелов, Проект, ВидНедвижимости, ИмяПроекта");				
			Структура.Наименование = ПреобразоватьСтрокуВКириллицуЛатиницу(ВыборкаДетальныеЗаписи.Наименование, Истина);
			Структура.НаименованиеБезПробелов = СтрЗаменить(Структура.Наименование, " ", "");
			ДозаполнитьПроектИВидНедвижимости(ВыборкаДетальныеЗаписи.Ссылка, Структура);
			Если ЗначениеЗаполнено(Структура.Наименование) Тогда
				СписокНаименованийОС.Добавить(Структура);
			КонецЕсли;                                                                                                     
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокНаименованийОС;
	
КонецФункции

Процедура ДозаполнитьПроектИВидНедвижимости(ОС, Структура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыСтроительства.Проект КАК Проект,
	|	ОбъектыСтроительства.Проект.Наименование КАК ИмяПроекта,
	|	ОбъектыСтроительства.Проект.ВидНедвижимости КАК ВидНедвижимости
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Ссылка В ИЕРАРХИИ(&ОС)
	|	И НЕ ОбъектыСтроительства.ЭтоГруппа
	|	И НЕ ОбъектыСтроительства.ПометкаУдаления
	|	И НЕ ОбъектыСтроительства.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ОС", ОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Структура, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьСтрокуВКириллицуЛатиницу(СтрокаПроверки, ДоТочки = Ложь)
	
	СтрокаРезультат = "";
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		Если ДоТочки И Сред(СтрокаПроверки, Индекс, 1) = "." Тогда
			Прервать;
		КонецЕсли;
		Если СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Сред(СтрокаПроверки, Индекс, 1), Истина, "-")
			ИЛИ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Сред(СтрокаПроверки, Индекс, 1), Истина, "-") Тогда
			СтрокаРезультат = СтрокаРезультат + Сред(СтрокаПроверки, Индекс, 1);
		КонецЕсли;
	КонецЦикла;	

	Возврат СтрокаРезультат;
	
КонецФункции

Функция ПреобразоватьСтрокуВКириллицу(СтрокаПроверки, ДоТочки = Ложь)
	
	СтрокаРезультат = "";
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		Если ДоТочки И Сред(СтрокаПроверки, Индекс, 1) = "." Тогда
			Прервать;
		КонецЕсли;
		Если СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Сред(СтрокаПроверки, Индекс, 1), Истина, "-") Тогда
			СтрокаРезультат = СтрокаРезультат + Сред(СтрокаПроверки, Индекс, 1);
		КонецЕсли;
	КонецЦикла;	

	Возврат СтрокаРезультат;
	
КонецФункции

Функция ПодготовитьТаблицуКлиентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлиентыКонтактнаяИнформация.Клиент КАК Объект,
	|	КлиентыКонтактнаяИнформация.Телефоны КАК НомерТелефона,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКлиента) КАК Вид
	|ПОМЕСТИТЬ ВТ_Клиенты
	|ИЗ
	|	РегистрСведений.КлиентыКонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерТелефона";
	
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//   |	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(30)) КАК НомерТелефона,
	//   |	КонтактнаяИнформация.Объект КАК Объект,
	//   |	КонтактнаяИнформация.Вид
	//   |ПОМЕСТИТЬ ВТ_Клиенты
	//   |ИЗ
	//   |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	//   |ГДЕ
	//   |	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	//   |	И КонтактнаяИнформация.Объект ССЫЛКА Справочник.КонтактныеЛица
	//   |
	//   |ОБЪЕДИНИТЬ ВСЕ
	//   |
	//   |ВЫБРАТЬ
	//   |	КонтактныеЛица.ОсновнойТелефон,
	//   |	КонтактныеЛица.Ссылка,
	//   |	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица)
	//   |ИЗ
	//   |	Справочник.КонтактныеЛица КАК КонтактныеЛица
	//   |
	//   |ИНДЕКСИРОВАТЬ ПО
	//   |	НомерТелефона";
		   
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Процедура ЗагрузитьЗаказыЗвонков(Дата = Неопределено, Заменить = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	РезультатЗапроса = ПодготовитьТаблицуЗначений();
	
	DISPIVECTOR = Новый СписокЗначений;	
	СтрокиDISPIVECTOR = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Константы.DISPIVECTOR.Получить());
	Для каждого СтрокаDISPIVECTOR Из СтрокиDISPIVECTOR Цикл
		Попытка
			DISPIVECTOR.Добавить(Число(СтрокаDISPIVECTOR));	
		Исключение
		КонецПопытки;
	КонецЦикла;
	Если НЕ DISPIVECTOR.Количество() Тогда
		DISPIVECTOR.Добавить(42);
	КонецЕсли;
	
	УсловиеUCID_CALLID = "";
	ПоследняяЗаявка = НайтиПоследнийЗагруженныйЗаказЗвонка(DISPIVECTOR);	
	Если ПоследняяЗаявка <> Неопределено Тогда
		ПоследняяЗаявкаНайдена = Истина;
		SEGSTOP = Формат(ПоследняяЗаявка.reqData - Дата(1970, 1, 1, 0, 0, 0), "ЧГ=0"); 
		УсловиеUCID_CALLID = " AND (UCID <> " +  ПоследняяЗаявка.UCID + " OR CALLID <> " + Формат(ПоследняяЗаявка.CALLID, "ЧГ=0") + ") ";
	КонецЕсли;
		
	СтрокаУсловияDISPIVECTOR = " AND ";
	Для й = 0 По DISPIVECTOR.Количество() - 1 Цикл
		СтрокаУсловияDISPIVECTOR = СтрокаУсловияDISPIVECTOR + "DISPIVECTOR = " + DISPIVECTOR[й].Значение + "";
		Если й <> DISPIVECTOR.Количество() - 1 Тогда
			СтрокаУсловияDISPIVECTOR = СтрокаУсловияDISPIVECTOR + " OR "
		КонецЕсли;
	КонецЦикла;		
		
	ПроизвольныеУсловия = " AND LASTDIGITS = 0" + СтрокаУсловияDISPIVECTOR + ?(ЗначениеЗаполнено(SEGSTOP), " AND SEGSTOP >= " + СтрЗаменить(Строка(SEGSTOP), Символы.НПП, "") + "", "")	+ УсловиеUCID_CALLID;
	RS = ВыполнитьПрямойЗапрос_AVAYA_CMS(ПроизвольныеУсловия);

	Если RS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПолей = RS.Fields.Count;
	РезультатЗапроса.Очистить();	
	Пока НЕ RS.EOF Цикл
		НоваяСтрока = РезультатЗапроса.Добавить();
		Для НомерКолонки = 0 По КоличествоПолей - 1 Цикл 
			
			ИмяПоля = RS.Fields.Item(НомерКолонки).Name;
			Значение = СтрЗаменить(Строка(RS.Fields(ИмяПоля).Value), Символы.НПП, ""); //RS.Fields(ИмяПоля).Value;
			
			Если ВРег(ИмяПоля) = "SEGSTART" Тогда
				
				ВычисленнаяДата = Дата(1970,1,1,0,0,0) + Число(Лев(Значение,10));					
				Значение = Формат(ВычисленнаяДата, "ДФ=HH:mm:ss");
				
			ИначеЕсли ВРег(ИмяПоля) = "SEGSTOP" Тогда	
				
				//Если ВРег(ИмяПоля) = "SEGSTOP" Тогда
				//	ИмяПоля = "SEGCTOP";
				//КонецЕсли;	
				
				//ВычисленнаяДата = Дата(1970,1,1,0,0,0) + Число(Лев(Значение,10));					
				//Значение = Формат(ВычисленнаяДата, "ДФ=HH:mm:ss");
				
			ИначеЕсли ВРег(ИмяПоля) = "DURATION" ИЛИ 
				ВРег(ИмяПоля) = "NETINTIME" ИЛИ 
				ВРег(ИмяПоля) = "TALKTIME" ИЛИ 
				ВРег(ИмяПоля) = "RINGTIME" ИЛИ 
				ВРег(ИмяПоля) = "QUEUETIME" ИЛИ 
				ВРег(ИмяПоля) = "DISPTIME" ИЛИ 
				ВРег(ИмяПоля) = "ACWTIME" ИЛИ 
				ВРег(ИмяПоля) = "ANSHOLDTIME" ИЛИ 
				ВРег(ИмяПоля) = "ORIGHOLDTIME" ИЛИ 				
				ВРег(ИмяПоля) = "CONSULTTIME" Тогда
				
				ВычисленнаяДата = НачалоДня(ТекущаяДата()) + Значение;
				Значение = Формат(ВычисленнаяДата, "ДФ=HH:mm:ss");
				
			ИначеЕсли ВРег(ИмяПоля) = "ACD" Тогда 
				Значение = "ACD " + Значение;	
			ИначеЕсли ВРег(ИмяПоля) = "ROW_DATE" Тогда
				
				Попытка
					Д = Лев(Значение, 2);
					М = Сред(Значение, 4, 2);
					Г = Сред(Значение, 7, 4);
					Значение = Формат(Дата(Г,М,Д), "ДФ=dd.MM.yyyy");					
				Исключение
					Значение = "";
				КонецПопытки;
				
			ИначеЕсли ВРег(ИмяПоля) = "TRANSFERRED" ИЛИ 
				ВРег(ИмяПоля) = "AUDIO" ИЛИ 
				ВРег(ИмяПоля) = "DA_QUEUED" ИЛИ 
				ВРег(ИмяПоля) = "HOLDABN" ИЛИ 
				ВРег(ИмяПоля) = "MALICIOUS" ИЛИ 
				ВРег(ИмяПоля) = "OBSERVINGCALL" ИЛИ 
				ВРег(ИмяПоля) = "CONFERENCE" ИЛИ 
				ВРег(ИмяПоля) = "AGT_RELEASED" Тогда
				
				Значение = ?(Значение = "1", "y", "n");
				
			КонецЕсли;
			
			НоваяСтрока[ИмяПоля] = Строка(Значение);
			
		КонецЦикла;
		RS.MoveNext();
	КонецЦикла;    
	RS.Close();
	
	Если Заменить Тогда
		ОчиститьЗаДату(Дата, DISPIVECTOR);
	КонецЕсли;
	
	Ошибки = ЗаписатьРезультат_ЗаказыЗвонков(РезультатЗапроса, Дата);
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		ЗаписьЖурналаРегистрации("Получение заявок на обратный звонок",
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ПолучениеЗаявокНаОбратныйЗвонок,
			"РегламентныеЗадания.ПолучениеЗаявокНаОбратныйЗвонок",
			"Ошибка: Получение заявок на обратный звонок: " + Ошибки);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьЗаявкиНаCallBack(ПараметрыСайта, НайденыеКлиенты_МВТ = Неопределено, СписокОС = Неопределено)
		
	ивф = ПолучитьИмяВременногоФайла("txt");
	Попытка
		WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");        		
		WinHttp.Open("POST", ПараметрыСайта.URL, 0);        
		WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=Windows-1251");
		
		ПараметрыПОСТ = "login=" + ПараметрыСайта.Login + "&password=" + ПараметрыСайта.Password +"&action=getFeedbacksJSON";
		
		Если НЕ Найти(ПараметрыСайта.Login, "absrealty") И НЕ Найти(ПараметрыСайта.Login, "zapadnoe-kuncevo") Тогда
			ПараметрыПОСТ = ПараметрыПОСТ + "&clear=" + ?(ПараметрыСайта.Clear, "true", "false");			
		Иначе
			Если ПараметрыСайта.Clear Тогда 
				ПараметрыПОСТ = ПараметрыПОСТ + "&clear=true";	
			КонецЕсли;	
		КонецЕсли; 
		
		WinHttp.Send(ПараметрыПОСТ);        
		
		ТелоОтвета = WinHttp.ResponseBody();    
		
		StreamOut = Новый COMОбъект("ADODB.Stream");
		StreamTypeEnum = Новый Структура("adTypeBinary, adTypeText", 1, 2);
		ConnectModeEnum = Новый Структура(
			"adModeRead, adModeReadWrite, adModeRecursive, adModeShareDenyNone,
			|adModeShareDenyRead, adModeShareDenyWrite, adModeShareExclusive, 
			|adModeUnknown, adModeWrite", 1, 3, 4194304, 16, 4, 8, 12, 0, 2);
		
		SaveOptionsEnum = Новый Структура("adSaveCreateNotExist, adSaveCreateOverWrite", 1, 2);
		StreamOut.Type = StreamTypeEnum.adTypeBinary;
		StreamOut.Mode = ConnectModeEnum.adModeReadWrite; 
		
		StreamOut.Open();
		StreamOut.Write(ТелоОтвета); 
		StreamOut.SaveToFile(ивф, SaveOptionsEnum.adSaveCreateOverWrite); //"2" - перезапись файла
		StreamOut.Close();
		
		ТД = Новый ТекстовыйДокумент();
		ТД.Прочитать(ивф,КодировкаТекста.UTF8);
		ИсходныйТекст = ТД.ПолучитьТекст();
		ТекствыеДанные = Сред(ИсходныйТекст,2,СтрДлина(ИсходныйТекст)-2);
		ТекствыеДанные = СтрЗаменить(ТекствыеДанные,"},{","}"+Символы.ПС+"{");
		ТекствыеДанные = СтрЗаменить(ТекствыеДанные,"[","");
		ТекствыеДанные = СтрЗаменить(ТекствыеДанные,"]","");                            	
		ТД.УстановитьТекст(ТекствыеДанные);	
		
		МассивСтруктур = Новый Массив;
		Если тд.КоличествоСтрок()>0 Тогда
			Для а = 1 по тд.КоличествоСтрок() Цикл
				Попытка					
					Если Найти(ПараметрыСайта.Login, "m.absrealty") Тогда	
						Структура = CoMagicRestAPI.ПреобразоватьJSONОтвет(ТД.ПолучитьСтроку(а), Истина, Истина);
					Иначе
						Структура = ОбработкаJSON.UnJSON(ТД.ПолучитьСтроку(а));
					КонецЕсли;							
					Если Структура = Неопределено Тогда
						Продолжить;
					КонецЕсли;						
					reqEmail = "";
					тел = "";
					ДиВ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Структура.reqData," ");
					cтрГМД = ДиВ[0];
					стрВ = ДиВ[1];
					ГМД = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(cтрГМД, "-");
					стрДата = Формат(Дата(ГМД[0],ГМД[1],ГМД[2]),"ДЛФ=Д");
					знДатаВремя = дата(стрДата +" "+ стрВ);
					Структура.reqData = знДатаВремя;
					Если ПараметрыСайта.ЗагружатьЗаТекущийДень Тогда
						Если ТипЗнч(Структура.reqData) = Тип("Дата") И НачалоДня(Структура.reqData) <> НачалоДня(ТекущаяДата()) Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Если ТипЗнч(Структура.reqData) = Тип("Дата") И НачалоДня(Структура.reqData) <> НачалоДня(ПараметрыСайта.ЗаДату)	Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли; 					
					Цифры = "0123456789";
					тел = "";
					Для б = 1 по СтрДлина(Структура.reqContact) Цикл
						Если найти(Цифры,Сред(Структура.reqContact,б,1))>0 Тогда
							тел = тел + Сред(Структура.reqContact,б,1);
						КонецЕсли;	
					КонецЦикла;
					Структура.reqContact = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(тел); //ПривестиНомерТелефонаКШаблону(?(СтрДлина(тел) = 10 И Сред(тел, 1, 1) = 9, "8" + тел, тел));					
					Если Найти(Структура.reqText, "E-mail") Тогда
						й = Найти(Структура.reqText, "E-mail") + 8;
						reqEmail = "";
						Пока НЕ ЭтоРусскаяБуква(Сред(Структура.reqText, й, 1)) И ЗначениеЗаполнено(Сред(Структура.reqText, й, 1)) И НЕ Сред(Структура.reqText, й, 1) = Символы.ПС Цикл
							reqEmail = reqEmail + Сред(Структура.reqText, й, 1);
							й = й + 1;
							Если й > 1000 Тогда reqEmail = ""; Прервать; КонецЕсли;
						КонецЦикла;			
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(reqEmail) Тогда
						Если Структура.Свойство("reqEmail") Тогда
							Структура.reqEmail = СокрЛП(reqEmail);
						Иначе
							Структура.Вставить("reqEmail", "");					
						КонецЕсли;
					Иначе
						Структура.Вставить("reqEmail", reqEmail)
					КонецЕсли;
					Структура.reqType = ?(ЗначениеЗаполнено(Структура.reqType), Структура.reqType, "callback");								
					СоздатьЗаписьЗаявки(Структура, ПараметрыСайта.Сайт, НайденыеКлиенты_МВТ, ПараметрыСайта.ОбъектНедвижимости, ПараметрыСайта.ВидНедвижимости, СписокОС);				
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;		
		КонецЕсли;	
	Исключение
	КонецПопытки;
	УдалитьФайлы(ивф);
	
КонецПроцедуры

Процедура СоздатьЗаписьЗаявки(ДанныеЗаявки, Сайт = Неопределено, НайденыеКлиенты_МВТ = Неопределено, ОбъектНедвижимости = Неопределено, ВидНедвижимости = Неопределено, СписокОС = Неопределено) Экспорт
	
	Если Не ДанныеЗаявки = Неопределено И НЕ ЗаявкаБылаЗагружена(ДанныеЗаявки, Сайт) Тогда 
		ЗаявкаОбъект = Документы.ЗаявкаНаЗвонок.СоздатьДокумент();	
		ЗаполнитьЗначенияСвойств(ЗаявкаОбъект, ДанныеЗаявки);		
		ЗаявкаОбъект.id = Строка(Новый УникальныйИдентификатор);
		ТекущаяДата = ТекущаяДата();
		ЗаявкаОбъект.Дата = ТекущаяДата;	
		ЗаявкаОбъект.ДатаПоследнейЗагрузки = ТекущаяДата;		
		Если ЗначениеЗаполнено(ДанныеЗаявки.reqContact) Тогда 
			Кл = НайтиКлиентаВТаблице(ДанныеЗаявки.reqContact, НайденыеКлиенты_МВТ);	
			ЗаявкаОбъект.Контакт = ?(Кл = Неопределено, Неопределено , ?(Кл.НайденыеКлиенты.Количество() > 1, Неопределено, ?(ЗначениеЗаполнено(Кл.КонтактноеЛицо), Кл.КонтактноеЛицо, Неопределено)));
		КонецЕсли;
		ЗаявкаОбъект.ГруппаРаспределения = Перечисления.ГруппыРаспределенияЗаявок.ГПТ;
		ЗаявкаОбъект.Сайт = Сайт;
		ЗаявкаОбъект.Проект = ОбъектНедвижимости;
		ЗаявкаОбъект.ВидНедвижимости = ВидНедвижимости;
		Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Проект)
			ИЛИ НЕ ЗначениеЗаполнено(ЗаявкаОбъект.ВидНедвижимости) Тогда
			ЗаполнитьПроектПоДаннымЗаявки(ЗаявкаОбъект, ДанныеЗаявки, СписокОС);
		КонецЕсли;
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.ОбратныйЗвонок;		
		ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаНаCallBack;
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;
		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет2;
		ЗаявкаОбъект.Тема = ДанныеЗаявки.reqTitle;
		ЗаявкаОбъект.reqText = СтрЗаменить(ЗаявкаОбъект.reqText, "\n", Символы.ПС);
		ВремяЗаявки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формат(ЗаявкаОбъект.reqData, "ДЛФ=В"), ":");
		Попытка
			Если Число(ВремяЗаявки[0]) >= 9 И Число(ВремяЗаявки[0]) < 21  Тогда
				ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Обычная;
			Иначе
				ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Ночная;
			КонецЕсли; 
		Исключение
			ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.ПустаяСсылка();
		КонецПопытки;				
		ЗаявкаОбъект.ЭтоТестоваяЗаявка = ?(ЗначениеЗаполнено(Справочники.СпамНомера.НайтиПоНаименованию(ЗаявкаОбъект.reqContact, Истина)) И НЕ ЗначениеЗаполнено(ЗаявкаОбъект.reqEmail), Истина, Ложь); //НЕ ЗначениеЗаполнено(ЗаявкаОбъект.reqText) И //ПроверитьНаСпамНомер(ЗаявкаОбъект.reqContact);
		ЗаявкаОбъект.Автор = Справочники.Пользователи.Робот;
		ЗаявкаОбъект.ДеньОбработки = 1;
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
		ЗаявкаОбъект.Записать();		
	КонецЕсли;
	
КонецПроцедуры                                        

Процедура ЗаполнитьПроектПоДаннымЗаявки(ЗаявкаОбъект, ДанныеЗаявки, СписокОС = Неопределено)
	
	Если СписокОС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для каждого ОС Из СписокОС Цикл
		Если СтрНайти(ВРег(ПреобразоватьСтрокуВКириллицуЛатиницу(ДанныеЗаявки.reqText)), ВРег(ОС.Наименование))
			ИЛИ СтрНайти(ВРег(ПреобразоватьСтрокуВКириллицуЛатиницу(ДанныеЗаявки.reqTitle)), ВРег(ОС.Наименование)) Тогда
			ЗаявкаОбъект.Проект = ОС.Проект;
			ЗаявкаОбъект.ВидНедвижимости = ОС.ВидНедвижимости;
			Прервать;
        КонецЕсли;
	КонецЦикла;
	
	Если СтрНайти(ДанныеЗаявки.reqTitle, "Заявка на подбор земельного участка") И НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Проект) Тогда
		ЗаявкаОбъект.ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток;
	КонецЕсли;	
	
КонецПроцедуры

Функция НайтиКлиентаВТаблице(ТелефонныйНомер, НайденыеКлиенты_МВТ, НайденыеКлиенты_ТЗ = Неопределено) Экспорт
	
	ДанныеВходящегоЗвонка = Новый Структура;
	ДанныеВходящегоЗвонка.Вставить("ТелефонныйНомер", ?(СтрДлина(ТелефонныйНомер) = 10, "8" + ТелефонныйНомер, ТелефонныйНомер));
	ДанныеВходящегоЗвонка.Вставить("КонтактноеЛицо", Справочники.Клиенты.ПустаяСсылка());
	ДанныеВходящегоЗвонка.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКлиента);
	ДанныеВходящегоЗвонка.Вставить("НайденыеКлиенты", Новый ТаблицаЗначений);
	
	Если НайденыеКлиенты_ТЗ = Неопределено Тогда	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = НайденыеКлиенты_МВТ;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_Клиенты.НомерТелефона КАК НомерТелефона,
		               |	ВТ_Клиенты.Объект КАК Объект,
		               |	ВТ_Клиенты.Вид КАК Вид
		               |ИЗ
		               |	ВТ_Клиенты КАК ВТ_Клиенты
		               |ГДЕ
		               |	ВТ_Клиенты.НомерТелефона ПОДОБНО &НомерТелефона";
		Запрос.УстановитьПараметр("НомерТелефона", "%" + УправлениеТелефониейКлиентСервер.ОбрезатьНомер(ТелефонныйНомер) + "%");	
	Иначе		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Клиенты.НомерТелефона КАК НомерТелефона,
		               |	ВТ_Клиенты.Объект КАК Объект,
		               |	ВТ_Клиенты.Вид КАК Вид
		               |ПОМЕСТИТЬ ВТ_Клиенты
		               |ИЗ
		               |	&ВТ_Клиенты КАК ВТ_Клиенты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_Клиенты.НомерТелефона КАК НомерТелефона,
		               |	ВТ_Клиенты.Объект КАК Объект,
		               |	ВТ_Клиенты.Вид КАК Вид
		               |ИЗ
		               |	ВТ_Клиенты КАК ВТ_Клиенты
		               |ГДЕ
		               |	ВТ_Клиенты.НомерТелефона ПОДОБНО &НомерТелефона";					   
		Запрос.УстановитьПараметр("ВТ_Клиенты", НайденыеКлиенты_ТЗ);			   
		Запрос.УстановитьПараметр("НомерТелефона", "%" + УправлениеТелефониейКлиентСервер.ОбрезатьНомер(ТелефонныйНомер) + "%");		
	КонецЕсли;
	
	Тз = Запрос.Выполнить().Выгрузить();	
	Если Тз.Количество() > 0 Тогда 
		ДанныеВходящегоЗвонка["ТелефонныйНомер"] = ТелефонныйНомер;//Тз.Получить(0).НомерТелефона;
		ДанныеВходящегоЗвонка["КонтактноеЛицо"] = Тз.Получить(0).Объект;
		ДанныеВходящегоЗвонка["Вид"] = Тз.Получить(0).Вид;
		Для каждого Клиент Из ТЗ Цикл
			Найденные = ТЗ.НайтиСтроки(Новый Структура("Объект", Клиент.Объект));
			Если Найденные.Количество() > 1 Тогда
				ТЗ.Удалить(Клиент);		
			КонецЕсли;
		КонецЦикла;
		ДанныеВходящегоЗвонка["НайденыеКлиенты"]= ТЗ;		
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеВходящегоЗвонка;
	
КонецФункции

Функция ЗаявкаБылаЗагружена(ДанныеЗаявки, Сайт)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.reqData = &reqData
	|	И ЗаявкаНаЗвонок.reqContact = &reqContact
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.ОбратныйЗвонок)
	|	И ЗаявкаНаЗвонок.ТипВызова = ЗНАЧЕНИЕ(Перечисление.ТипыВызовов.ЗаявкаНаCallBack)
	|	И ЗаявкаНаЗвонок.Сайт = &Сайт";	
	
	Запрос.УстановитьПараметр("reqData", ДанныеЗаявки.reqData);
	Запрос.УстановитьПараметр("reqContact", ДанныеЗаявки.reqContact);	
	Запрос.УстановитьПараметр("Сайт", Сайт);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
		
КонецФункции

Функция ПолучитьДанныеСайтов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыПолученияЗаявокНаCallBack.Наименование КАК Login,
	|	ПараметрыПолученияЗаявокНаCallBack.Password КАК Password,
	|	ПараметрыПолученияЗаявокНаCallBack.URL КАК URL,
	|	ПараметрыПолученияЗаявокНаCallBack.Clear КАК Clear,
	|	ПараметрыПолученияЗаявокНаCallBack.ЗаДату КАК ЗаДату,
	|	ПараметрыПолученияЗаявокНаCallBack.ЗагружатьЗаТекущийДень КАК ЗагружатьЗаТекущийДень,
	|	ПараметрыПолученияЗаявокНаCallBack.Ссылка КАК Сайт,
	|	ПараметрыПолученияЗаявокНаCallBack.ВидНедвижимости КАК ВидНедвижимости,
	|	ПараметрыПолученияЗаявокНаCallBack.ОбъектНедвижимости КАК ОбъектНедвижимости
	|ИЗ
	|	Справочник.ПараметрыПолученияЗаявокНаCallBack КАК ПараметрыПолученияЗаявокНаCallBack
	|ГДЕ
	|	ПараметрыПолученияЗаявокНаCallBack.ПолучатьЗаявки";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЭтоРусскаяБуква(С) 
	Возврат Найти("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЬЪЭЮЯ", ВРег(С))<>0;
КонецФункции

Функция ПодготовитьТаблицуЗначений()
		
	ТаблицаCMSDATA = Новый ТаблицаЗначений;
	ТаблицаCMSDATA.Колонки.Добавить("CALLID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ROW_DATE", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ROW_TIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPSPLIT", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ACD", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SEGSTART", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SEGSTOP", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPOSITION", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CALLING_PTY", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DIALED_NUM", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ANSLOGIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPIVECTOR", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPVDN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("FIRSTIVECTOR", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("FIRSTVDN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ORIGLOGIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DURATION", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("NETINTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("TALKTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("RINGTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("QUEUETIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ACWTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ANSHOLDTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ORIGHOLDTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CONSULTTIME", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("TRANSFERRED", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("AGENTSKILLLEVEL", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("AGENTSURPLUS", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ANSLOCID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ANSREASON", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ASAI_UUI", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("AUDIO", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CWC1", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CWC2", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CWC3", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CWC4", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CWC5", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DA_QUEUED", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPPRIORITY", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("DISPSKLEVEL", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EQLOCID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("HELD", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));	
	ТаблицаCMSDATA.Колонки.Добавить("HOLDABN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ICRPULLREASON", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ICRRESENT", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("INTERRUPTDEL", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("LASTDIGITS", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("LASTOBSERVER", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("MALICIOUS", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("OBSERVINGCALL", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("OBSLOCID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ORIGLOCID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ORIGREASON", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("PREFSKILLLEVEL", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SEQNUM", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SPLIT1", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SPLIT2", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SPLIT3", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("UUI_LEN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN2", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN3", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN4", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN5", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN6", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN7", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN8", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("VDN9", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("LASTCWC", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CONFERENCE", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("CALLING_II", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("TKGRP", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("ASSIST", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("SEGMENT", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));	
	ТаблицаCMSDATA.Колонки.Добавить("EQLOC", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT1", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT2", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT3", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT4", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT5", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT6", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT7", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT8", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("EVENT9", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("AGT_RELEASED", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	ТаблицаCMSDATA.Колонки.Добавить("UCID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
		
	////новые
	//ТаблицаCMSDATA.Колонки.Добавить(ВРег("segstart_utc"), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	//ТаблицаCMSDATA.Колонки.Добавить(ВРег("segstop_utc"), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));	
	
	Возврат ТаблицаCMSDATA;
	
КонецФункции

Функция НайтиПоследнийЗагруженныйЗаказЗвонка(DISPIVECTOR)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ЗаявкаНаЗвонок.reqData КАК reqData,
	                      |	ЗаявкаНаЗвонок.ID КАК ID,
	                      |	ЗаявкаНаЗвонок.reqID КАК CALLID,
	                      |	ЗаявкаНаЗвонок.UCID КАК UCID,
	                      |	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	                      |ГДЕ
	                      |	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	                      |	И ЗаявкаНаЗвонок.reqStatus В(&DISPIVECTOR)
	                      |	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(перечисление.видызаявокназвонок.заказзвонка)
	                      |	И ЗаявкаНаЗвонок.ТипВызова = &ТипВызова
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЗаявкаНаЗвонок.reqData УБЫВ");
	
	Запрос.УстановитьПараметр("DISPIVECTOR", DISPIVECTOR.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТипВызова", Перечисления.ТипыВызовов.ЗаказЗвонка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат СтрокаТЗВСтруктуру(Результат.Выгрузить());		
	КонецЕсли;	
			
КонецФункции

Функция СтрокаТЗВСтруктуру(ТЗ)
	
	Ск = Новый Структура;
	Для каждого КолонкаТЗ Из ТЗ.Колонки Цикл
		Ск.Вставить(КолонкаТЗ.Имя, ТЗ[0][КолонкаТЗ.Имя]);
	КонецЦикла; 
	
	Возврат (Ск);
	
КонецФункции

Функция ВыполнитьПрямойЗапрос_AVAYA_CMS(ПроизвольныеУсловия = "")
	
	//тест!
	//#Если НаКлиенте Тогда 
	//ConString = "DRIVER={IBM INFORMIX ODBC DRIVER (64-bit)};
	//|Data Source=" + "cms_net" + ";";		
	//#Иначе
	//ConString = "DRIVER={IBM INFORMIX ODBC DRIVER (64-bit)};
	//|Data Source=" + ?(НЕ ЗначениеЗаполнено(Константы.DataSource_Avaya_CMS.Получить()), "AVAYA", Константы.DataSource_Avaya_CMS.Получить()) + ";";	
	//#КонецЕсли
	
	ConString = "DRIVER={IBM INFORMIX ODBC DRIVER (64-bit)};
	|Data Source=" + ?(НЕ ЗначениеЗаполнено(Константы.DataSource_Avaya_CMS.Получить()), "AVAYA", Константы.DataSource_Avaya_CMS.Получить()) + ";";	
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.CommandTimeOut = 30;
	Connection.Open(ConString);    
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;	
	Command.CommandType = 1;	
	Command.CommandText = "SELECT
	|	CALLID,
	|	ROW_DATE,
	|	ROW_TIME,
	|	DISPSPLIT,
	|	ACD,
	|	SEGSTART,
	|	SEGSTOP,
	|	DISPOSITION,
	|	CALLING_PTY,
	|	DIALED_NUM,
	|	ANSLOGIN,
	|	DISPIVECTOR,
	|	DISPVDN,
	|	FIRSTIVECTOR,
	|	FIRSTVDN,
	|	ORIGLOGIN,
	|	DURATION,
	|	NETINTIME,
	|	TALKTIME,
	|	RINGTIME,
	|	QUEUETIME,
	|	DISPTIME,
	|	ACWTIME,
	|	ANSHOLDTIME,
	|	ORIGHOLDTIME,
	|	CONSULTTIME,
	|	TKGRP,
	|	TRANSFERRED,
	|	AGENTSKILLLEVEL,
	|	AGENTSURPLUS,
	|	ANSLOCID,
	|	ANSREASON,
	|	ASAI_UUI,
	|	AUDIO,
	|	CWC1,
	|	CWC2,
	|	CWC3,
	|	CWC4,
	|	CWC5,
	|	DA_QUEUED,
	|	DISPPRIORITY,
	|	DISPSKLEVEL,
	|	EQLOCID,
	|	HELD,	
	|	HOLDABN,
	|	ICRPULLREASON,
	|	ICRRESENT,
	|	INTERRUPTDEL,
	|	LASTDIGITS,
	|	LASTOBSERVER,
	|	MALICIOUS,
	|	OBSERVINGCALL,
	|	OBSLOCID,
	|	ORIGLOCID,
	|	ORIGREASON,
	|	PREFSKILLLEVEL,
	|	SEQNUM,
	|	SPLIT1,
	|	SPLIT2,
	|	SPLIT3,
	|	UUI_LEN,
	|	VDN2,
	|	VDN3,
	|	VDN4,
	|	VDN5,
	|	VDN6,
	|	VDN7,
	|	VDN8,
	|	VDN9,
	|	LASTCWC,
	|	CONFERENCE,
	|	CALLING_II,
	|	ASSIST,
	|	SEGMENT,	
	|	EQLOC,
	|	EVENT1,
	|	EVENT2,
	|	EVENT3,
	|	EVENT4,
	|	EVENT5,
	|	EVENT6,
	|	EVENT7,
	|	EVENT8,
	|	EVENT9,
	|	AGT_RELEASED,
	|	UCID	
	|		 
	|FROM call_rec 
	|WHERE 1=1 "
	+ ПроизвольныеУсловия +
	" ORDER BY SEGSTART, SEGSTOP ASC"; 
		
	RS = Новый COMОбъект("ADODB.Recordset");
	RS.ActiveConnection = Connection;
	RS.CursorType = 3;
	RS = Command.Execute();	
	
	Попытка
		RS.MoveFirst();
	Исключение	
		Возврат Неопределено;
	КонецПопытки;

	Возврат RS;
	
КонецФункции

Процедура ОчиститьЗаДату(ДатаОчистики, DISPIVECTOR)
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	                      |ГДЕ
	                      |	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	                      |	И ЗаявкаНаЗвонок.reqStatus В(&DISPIVECTOR)
	                      |	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(перечисление.видызаявокназвонок.заказзвонка)
	                      |	И ЗаявкаНаЗвонок.ТипВызова = &ТипВызова
	                      |	И НАЧАЛОПЕРИОДА(ЗаявкаНаЗвонок.reqData, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОчистки, ДЕНЬ)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЗаявкаНаЗвонок.reqData УБЫВ");
	
	Запрос.УстановитьПараметр("DISPIVECTOR", DISPIVECTOR.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТипВызова", Перечисления.ТипыВызовов.ЗаказЗвонка);
	Запрос.УстановитьПараметр("ДатаОчистики", ДатаОчистики);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Пока Выборка.Следующий() Цикл
			Выборка.ПолучитьМенеджерЗаписи().Удалить();
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаписатьРезультат_ЗаказыЗвонков(РезультатЗапроса = Неопределено, ДатаЗагрузки = Неопределено)
	
	Если НЕ РезультатЗапроса.Количество() Тогда
		Возврат "Пустой набор данных не может быть загружен!";	
	КонецЕсли;
	
	Ошибки = "";		
	Попытка		                  
		Для каждого Строка Из РезультатЗапроса Цикл			
			reqData = Дата(1970,1,1,0,0,0) + Число( Лев(СокрЛП(Строка.SEGSTOP), 10) );
			reqContact = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(СокрЛП(Строка.CALLING_PTY));						
			Если НЕ ЗаказЗвонкаБылЗагружен(Строка.UCID, reqData, reqContact) Тогда 
				ЗаявкаОбъект = Документы.ЗаявкаНаЗвонок.СоздатьДокумент();	
				ЗаявкаОбъект.id = Строка(Новый УникальныйИдентификатор);
				ТекущаяДата = ТекущаяДата();
				ЗаявкаОбъект.Дата = ТекущаяДата;	
				ЗаявкаОбъект.ДатаПоследнейЗагрузки = ТекущаяДата;
				ЗаявкаОбъект.reqData = reqData; 	
				ЗаявкаОбъект.reqContact = reqContact;	
				Если ЗначениеЗаполнено(ЗаявкаОбъект.reqContact) Тогда 
					ЗаявкаОбъект.Контакт = УправлениеТелефониейСервер.ОпределитьКлиента(ЗаявкаОбъект.reqContact)
				КонецЕсли;
				ЗаявкаОбъект.ГруппаРаспределения = Перечисления.ГруппыРаспределенияЗаявок.ГПТ;
				ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
				ЗаявкаОбъект.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.ЗаказЗвонка;		
				ЗаявкаОбъект.ТипВызова = Перечисления.ТипыВызовов.ЗаказЗвонка;
				ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;
				ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет1;
				ВремяЗаявки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формат(ЗаявкаОбъект.reqData, "ДЛФ=В"), ":");
				Попытка
					Если Число(ВремяЗаявки[0]) >= 9 И Число(ВремяЗаявки[0]) < 21  Тогда
						ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Обычная;
					Иначе
						ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.Ночная;
					КонецЕсли; 
				Исключение
					ЗаявкаОбъект.ТипПоступленияЗаявки = Перечисления.ТипыЗаявковПоВремениПоступления.ПустаяСсылка();
				КонецПопытки;					
				ЗаявкаОбъект.Тема = "Заявка на обратный звонок";
				ЗаявкаОбъект.reqType = "Сервис ""Обратный звонок""";
				Если ЭтоЧисло(Строка.CALLID) Тогда 
					ЗаявкаОбъект.reqID = Число(СокрЛП(Строка.CALLID));
				КонецЕсли;
				Если ЭтоЧисло(Строка.DISPIVECTOR) Тогда
					ЗаявкаОбъект.reqStatus = Число(СокрЛП(Строка.DISPIVECTOR));
				КонецЕсли;				
				ЗаявкаОбъект.UCID = Строка.UCID;	
				ЗаявкаОбъект.ЭтоТестоваяЗаявка = ?(ЗначениеЗаполнено(Справочники.СпамНомера.НайтиПоНаименованию(ЗаявкаОбъект.reqContact, Истина)), Истина, Ложь); //ПроверитьНаСпамНомер(ЗаявкаОбъект.reqContact);
				ЗаявкаОбъект.Автор = Справочники.Пользователи.Робот;
				ЗаявкаОбъект.ДеньОбработки = 1;	
				ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
				ЗаявкаОбъект.Записать();					
			КонецЕсли;
		КонецЦикла;
	Исключение		
		Ошибки = Ошибки + "Критическая ошибка записи заказа звонка: " + ОписаниеОшибки() + Символы.ПС;		
	КонецПопытки;
	
	Возврат Ошибки;
	
КонецФункции

Функция ЭтоЧисло(Знач ТекСтр)
	
	ТекСтр = СокрЛП(ТекСтр);
	
	Для й = 1 По СтрДлина(ТекСтр) Цикл
		Если НЕ Найти("0123456789", Сред(ТекСтр, й, 1)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции 

Функция ЗаказЗвонкаБылЗагружен(UCID, reqData, reqContact)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.reqData = &reqData
	|	И ЗаявкаНаЗвонок.reqContact = &reqContact
	|	И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.ЗаказЗвонка)
	|	И ЗаявкаНаЗвонок.ТипВызова = ЗНАЧЕНИЕ(Перечисление.ТипыВызовов.ЗаказЗвонка)
	|	И ЗаявкаНаЗвонок.UCID = &UCID";	
	
	Запрос.УстановитьПараметр("reqData", reqData);
	Запрос.УстановитьПараметр("reqContact", reqContact);	
	Запрос.УстановитьПараметр("UCID", СокрЛП(UCID));
	
	Возврат НЕ Запрос.Выполнить().Пустой();
		
КонецФункции

Функция ЗаявкаПоПисьмуСоздана(ИдентификаторСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	               |ГДЕ
	               |	ЗаявкаНаЗвонок.ID = &ИдентификаторСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьТекстПисьма(Тексты, ИдентификаторСообщения)

	ТекстПисьма = "";	
	Для каждого Текст Из Тексты Цикл //Тексты[0]["ТипТекста"]
		Если Текст["ТипТекста"] = "HTML" Тогда
			ТекстПисьма = ПреобразоватьHTMLВТекст(Текст["Текст"]);
			//Текст["Текст"] = RegExp_Exec(Текст["Текст"], "<style>(\S|\s)*<\/style>*");	//<style>(\S|\s)*<\/style>*	//(?<=<style>)((\S|\s)*)(?=<\/style>*)	
			//ТекстПисьма = ТекстПисьма + RegExp_Exec(Текст["Текст"], "<[^>]*>");
			//ТекстПисьма = СпециальныеСимволы(ТекстПисьма);
			//Вложения.Вставить("Тело письма " + ИдентификаторСообщения + ".html", Текст["Данные"]);
		ИначеЕсли Текст["ТипТекста"] = "ПростойТекст" Тогда
			ТекстПисьма = ТекстПисьма + Текст["Текст"];		
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат СокрЛП(ТекстПисьма); 
		
КонецФункции
	
Функция ПреобразоватьHTMLВТекст(Представление="&amp;")
	
	ХТМЛ = Новый COMОбъект("htmlfile");
    ХТМЛ.Open("text/html");
    ХТМЛ.write("<body>"+Представление+"</body>");
    Док = ХТМЛ.documentElement.document;
	
    Возврат Док.body.innerText;
	
КонецФункции   // СпециальныеСимволы(Представление="&amp;") 

Функция ПолучитьДатуОтправленияБезСмещения(ДатаОтправления, СмещениеДатыОтправления) Экспорт
	
	ДатаОтправленияВЗонеОтправителя = ДатаОтправления; 
	СмещениеОтправителя = СмещениеДатыОтправления; 
	
	ДатаОтправлениеUTC = ДатаОтправленияВЗонеОтправителя - СмещениеОтправителя;
	
	ЧасовойПояс = ЧасовойПояс(); 
	
	СмещениеПолучателя = СмещениеСтандартногоВремени(ЧасовойПояс, ДатаОтправлениеUTC) + 
							СмещениеЛетнегоВремени(ЧасовойПояс, ДатаОтправлениеUTC);
							
	ЛокальнаяДатаОтправления = ДатаОтправленияВЗонеОтправителя + (СмещениеПолучателя - СмещениеОтправителя);
	
	Возврат ЛокальнаяДатаОтправления;
	
КонецФункции

Функция ПолучитьТолькоЦифрыНомера(НомерТЛФ)
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а = 1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890", Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ, а, 1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	Иначе
		Возврат ТолькоЦифрыНомера;
	КонецЕсли;
		
КонецФункции 

Функция ПолучитьОтветственногоПоРаспределению(ГруппаРаспределения = Неопределено, ВидНедвижимости = Неопределено, Сайт = Неопределено, НаборПользователейДляРаспределения = Неопределено, ВидЗаявкиНаЗвонок = Неопределено, Приоритет = Неопределено) Экспорт
	
	Если НаборПользователейДляРаспределения = Неопределено Тогда
		НаборПользователейДляРаспределения = ПолучитьАктивныхПользователей(ГруппаРаспределения, ВидНедвижимости, Сайт);
	КонецЕсли;
	
	Возврат НайтиНаименееЗагруженногоПользователя(НаборПользователейДляРаспределения, ВидЗаявкиНаЗвонок, Приоритет);
	
КонецФункции

Функция ПолучитьАктивныхПользователей(ГруппаРаспределения = Неопределено, ВидНедвижимости = Неопределено, Сайт = Неопределено, Интерактивно = Ложь) Экспорт
	
	АктивныеПользователи = Новый Массив;
	УстановитьПривилегированныйРежим(Истина);
	СоединенияИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();                 
	Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл
		Если //Найти(Соединение.Пользователь.Имя, "ABSGROUP\") И 
			НЕ Найти(Соединение.ИмяПриложения, "Designer") И НЕ Найти(Соединение.ИмяПриложения, "BackgroundJob") Тогда
			НайденныйПользователь = Неопределено;
			Попытка
				НайденныйПользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", Соединение.Пользователь.УникальныйИдентификатор);  //Справочники.Пользователи.НайтиПоКоду(Соединение.Пользователь.Имя);
			Исключение
			КонецПопытки;
			Если ЗначениеЗаполнено(НайденныйПользователь) И АктивныеПользователи.Найти(НайденныйПользователь) = Неопределено Тогда
				УчаствуетВРаспределении = ПолучитьНастройкуРаспределенияЗаявокПользователя("УчаствуетВРаспределении", НайденныйПользователь, ГруппаРаспределения); //ПолучитьНастройкуПользователя(НайденныйПользователь, "РаспределениеЗаявок");
                Если ТипЗнч(УчаствуетВРаспределении) = Тип("Булево") И УчаствуетВРаспределении Тогда
					АктивныеПользователи.Добавить(НайденныйПользователь);	
				КонецЕсли;				
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ПользователиВГруппеРаспределения(АктивныеПользователи, ГруппаРаспределения, ВидНедвижимости, Сайт, Интерактивно);
	
	Возврат АктивныеПользователи;
		
КонецФункции 

Процедура ПользователиВГруппеРаспределения(АктивныеПользователи = Неопределено, ГруппаРаспределения = Неопределено, ВидНедвижимости = Неопределено, Сайт = Неопределено, Интерактивно = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользовательскиеНастройкиРаспределенияЗаявок.Пользователь КАК Пользователь,
	|	ПользовательскиеНастройкиРаспределенияЗаявок.ГруппаРаспределения КАК ГруппаРаспределения,
	|	ПользовательскиеНастройкиРаспределенияЗаявок.УчаствуетВРаспределении КАК УчаствуетВРаспределении,
	|	ПользовательскиеНастройкиРаспределенияЗаявок.Общая КАК Общая,
	|	ПользовательскиеНастройкиРаспределенияЗаявок.ЖилаяНедвижимость КАК ЖилаяНедвижимость,
	|	ПользовательскиеНастройкиРаспределенияЗаявок.КоммерческаяНедвижимость КАК КоммерческаяНедвижимость,
	|	ПользовательскиеНастройкиРаспределенияЗаявок.ЗемельныеУчастки КАК ЗемельныеУчастки
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиРаспределенияЗаявок КАК ПользовательскиеНастройкиРаспределенияЗаявок
	|ГДЕ
	|	ИСТИНА
	|	И ПользовательскиеНастройкиРаспределенияЗаявок.Пользователь В(&АктивныеПользователи)
	|	И ПользовательскиеНастройкиРаспределенияЗаявок.ГруппаРаспределения = &ГруппаРаспределения";
			
	Если НЕ АктивныеПользователи = Неопределено Тогда
		Запрос.УстановитьПараметр("АктивныеПользователи", АктивныеПользователи);
	Иначе
		АктивныеПользователи = Новый Массив;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПользовательскиеНастройкиРаспределенияЗаявок.Пользователь В(&АктивныеПользователи)", "");	
	КонецЕсли;
	Запрос.УстановитьПараметр("ГруппаРаспределения", ?(ГруппаРаспределения = Неопределено, Перечисления.ГруппыРаспределенияЗаявок.ГПТ, ГруппаРаспределения));	
	
	_ВидНедвижимости  = ?(НЕ ЗначениеЗаполнено(ВидНедвижимости), ?(НЕ ЗначениеЗаполнено(Сайт), Неопределено, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сайт, "ВидНедвижимости")), ВидНедвижимости);
			
	РезультатЗапроса = Запрос.Выполнить();
	АктивныеПользователи.Очистить();
	Если НЕ РезультатЗапроса.Пустой() Тогда			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Интерактивно И АктивныеПользователи.Найти(ВыборкаДетальныеЗаписи.Пользователь) = Неопределено Тогда
				АктивныеПользователи.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(_ВидНедвижимости) И ВыборкаДетальныеЗаписи.Общая Тогда 
				Если АктивныеПользователи.Найти(ВыборкаДетальныеЗаписи.Пользователь) = Неопределено Тогда
					АктивныеПользователи.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
				КонецЕсли;
			Иначе
				Добавлять = Ложь;
				Если ((_ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость 
					ИЛИ _ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.Машиноместо
					ИЛИ _ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость)
						И ВыборкаДетальныеЗаписи.ЖилаяНедвижимость) Тогда
					Добавлять = Истина;	
				ИначеЕсли (_ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость И ВыборкаДетальныеЗаписи.КоммерческаяНедвижимость) Тогда
					Добавлять = Истина;		
				ИначеЕсли (_ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток И ВыборкаДетальныеЗаписи.ЗемельныеУчастки) Тогда	
					Добавлять = Истина;
				КонецЕсли;					
				Если Добавлять Тогда 
					Если АктивныеПользователи.Найти(ВыборкаДетальныеЗаписи.Пользователь) = Неопределено Тогда
						АктивныеПользователи.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Функция НайтиНаименееЗагруженногоПользователя(АктивныеПользователи, ВидЗаявкиНаЗвонок = Неопределено, Приоритет = Неопределено) 
	
	Если НЕ АктивныеПользователи.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗ_АктивныеПользователи = Новый ТаблицаЗначений;
	ОписаниеЧ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ОписаниеС = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
	ТЗ_АктивныеПользователи.Колонки.Добавить("Количество", ОписаниеЧ);
	ТЗ_АктивныеПользователи.Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗ_АктивныеПользователи.Колонки.Добавить("Наименование", ОписаниеС);	
	
	Для каждого Пользователь Из АктивныеПользователи Цикл
		НоваяСтрока = ТЗ_АктивныеПользователи.Добавить();
		НоваяСтрока.Ответственный = Пользователь;
		НоваяСтрока.Наименование = Пользователь.Наименование;
		НоваяСтрока.Количество = 0;
	КонецЦикла; 
	
	//<844716>, Басаргин (20.07.2018) {
	Если ЗначениеЗаполнено(Приоритет) И Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет4 Тогда
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаЗвонок.Количество КАК Количество,
		|	ЗаявкаНаЗвонок.Ответственный КАК Ответственный,
		|	ЗаявкаНаЗвонок.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_ВремТЗ
		|ИЗ
		|	&ВремТЗ КАК ЗаявкаНаЗвонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ЗаявкиНаCallBack.Ссылка) КАК Количество,
		|	ЗаявкиНаCallBack.Ответственный КАК Ответственный,
		|	ЗаявкиНаCallBack.Ответственный.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_ТекущееРаспределение
		|ИЗ
		|	Документ.ЗаявкаНаЗвонок КАК ЗаявкиНаCallBack
		|ГДЕ
		|	ЗаявкиНаCallBack.Ответственный В(&АктивныеПользователи)
		|	И ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня
		|	И НЕ ЗаявкиНаCallBack.ЭтоТестоваяЗаявка
		|	И ЗаявкиНаCallBack.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4)
		|	И НЕ ЗаявкиНаCallBack.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкиНаCallBack.Ответственный,
		|	ЗаявкиНаCallBack.Ответственный.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ответственный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущееРаспределение.Количество КАК Количество,
		|	ВТ_ТекущееРаспределение.Ответственный КАК Ответственный,
		|	ВТ_ТекущееРаспределение.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_ТекущееРаспределение_
		|ИЗ
		|	ВТ_ТекущееРаспределение КАК ВТ_ТекущееРаспределение
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ВремТЗ.Количество,
		|	ВТ_ВремТЗ.Ответственный,
		|	ВТ_ВремТЗ.Наименование
		|ИЗ
		|	ВТ_ВремТЗ КАК ВТ_ВремТЗ
		|ГДЕ
		|	НЕ ВТ_ВремТЗ.Ответственный В
		|				(ВЫБРАТЬ
		|					ВТ_ТекущееРаспределение.Ответственный
		|				ИЗ
		|					ВТ_ТекущееРаспределение КАК ВТ_ТекущееРаспределение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущееРаспределение.Количество КАК Количество,
		|	ВТ_ТекущееРаспределение.Ответственный КАК Ответственный
		|ИЗ
		|	ВТ_ТекущееРаспределение_ КАК ВТ_ТекущееРаспределение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество,
		|	ВТ_ТекущееРаспределение.Наименование";		
	Иначе
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаЗвонок.Количество КАК Количество,
		|	ЗаявкаНаЗвонок.Ответственный КАК Ответственный,
		|	ЗаявкаНаЗвонок.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_ВремТЗ
		|ИЗ
		|	&ВремТЗ КАК ЗаявкаНаЗвонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(ЗаявкиНаCallBack.Ссылка) КАК Количество,
		|	ЗаявкиНаCallBack.Ответственный КАК Ответственный,
		|	ЗаявкиНаCallBack.Ответственный.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_ТекущееРаспределение
		|ИЗ
		|	Документ.ЗаявкаНаЗвонок КАК ЗаявкиНаCallBack
		|ГДЕ
		|	ЗаявкиНаCallBack.Ответственный В(&АктивныеПользователи)
		|	И ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня
		|	И НЕ ЗаявкиНаCallBack.ЭтоТестоваяЗаявка
		|	И ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок_НаОснованииВзаимодействия
		|	И НЕ ЗаявкиНаCallBack.ПометкаУдаления
		|	И НЕ ЗаявкиНаCallBack.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкиНаCallBack.Ответственный,
		|	ЗаявкиНаCallBack.Ответственный.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ответственный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущееРаспределение.Количество КАК Количество,
		|	ВТ_ТекущееРаспределение.Ответственный КАК Ответственный,
		|	ВТ_ТекущееРаспределение.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_ТекущееРаспределение_
		|ИЗ
		|	ВТ_ТекущееРаспределение КАК ВТ_ТекущееРаспределение
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ВремТЗ.Количество,
		|	ВТ_ВремТЗ.Ответственный,
		|	ВТ_ВремТЗ.Наименование
		|ИЗ
		|	ВТ_ВремТЗ КАК ВТ_ВремТЗ
		|ГДЕ
		|	НЕ ВТ_ВремТЗ.Ответственный В
		|				(ВЫБРАТЬ
		|					ВТ_ТекущееРаспределение.Ответственный
		|				ИЗ
		|					ВТ_ТекущееРаспределение КАК ВТ_ТекущееРаспределение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущееРаспределение.Количество КАК Количество,
		|	ВТ_ТекущееРаспределение.Ответственный КАК Ответственный
		|ИЗ
		|	ВТ_ТекущееРаспределение_ КАК ВТ_ТекущееРаспределение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Количество,
		|	ВТ_ТекущееРаспределение.Наименование";	
	КонецЕслИ;
	//<844716> }
	
	Запрос.УстановитьПараметр("ВремТЗ", ТЗ_АктивныеПользователи);	
	Запрос.УстановитьПараметр("АктивныеПользователи", АктивныеПользователи);	
	Запрос.УстановитьПараметр("НачалоЭтогоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецЭтогоДня", КонецДня(ТекущаяДата()));					
	Запрос.УстановитьПараметр("ВидЗаявкиНаЗвонок_НаОснованииВзаимодействия", Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия); //?(ВидЗаявкиНаЗвонок = Неопределено, Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия, ВидЗаявкиНаЗвонок)
	
	Если НЕ ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок_НаОснованииВзаимодействия", "И НЕ ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок_НаОснованииВзаимодействия");
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня", "И ЗаявкиНаCallBack.Дата МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ответственный;	
		КонецЕсли;		
	КонецЕсли; 
	
КонецФункции

Функция СоздатьЗначенияЗаполнения() Экспорт
		
	Отбор = Новый Структура;
	Отбор.Вставить("ID", Строка(Новый УникальныйИдентификатор));
	Отбор.Вставить("Статус", Перечисления.СтатусЗаявкиCallBack.НеОбработано);
	Отбор.Вставить("reqData", ТекущаяДата());
	Отбор.Вставить("ТипВызова", Перечисления.ТипыВызовов.УстнаяЗаявка);
	Отбор.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	Отбор.Вставить("ДатаРаспределения", ТекущаяДата());
	Отбор.Вставить("ДатаПоследнейЗагрузки", ТекущаяДата());
	Отбор.Вставить("ЭтапРаботы", Перечисления.ЭтапыРаботыЗавок.Начальный);
    Отбор.Вставить("ТипПоступленияЗаявки", Перечисления.ТипыЗаявковПоВремениПоступления.Обычная);
	Отбор.Вставить("ГруппаРаспределения", Перечисления.ГруппыРаспределенияЗаявок.ГПТ);	
	Отбор.Вставить("ВидНедвижимости", Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость);
	Отбор.Вставить("ВидЗаявкиНаЗвонок", Перечисления.ВидыЗаявокНаЗвонок.СозданаВручную);
	Отбор.Вставить("Приоритет", Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет2);
	Отбор.Вставить("ТипРаспределения", Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние);
	Отбор.Вставить("ДеньОбработки", 1);
	
	Возврат Отбор;
	
КонецФункции

Функция ПроверитьНаСпамНомер(НомерТелефона) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпамНомера.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпамНомера КАК СпамНомера
	|ГДЕ
	|	СпамНомера.Наименование = &НомерТелефона
	|	И (ВЫРАЗИТЬ(СпамНомера.Комментарий КАК СТРОКА(255))) = """"
	|	И НЕ СпамНомера.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция УстановитьИзмененияЗаявкиПоТипуРаспределения(ЗаявкаОбъект, Выборка, ПорядокПоТипуРаспределения) Экспорт

	Если ПорядокПоТипуРаспределения = "A" Тогда								                       		
		Если ЗначениеЗаполнено(Выборка.Взаимодействие) И ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда					
			СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Выборка.Взаимодействие);					
			Если ЕстьЗавершеннаяВстречаПоНазначенной(СтруктураРеквизитов.Предмет, Выборка.ВзаимодействиеДата) Тогда  				
				ЗаявкаОбъект.Статус = ?(ЗаявкаОбъект.ПопытокДозвониться > 0, Перечисления.СтатусЗаявкиCallBack.Обработано, Перечисления.СтатусЗаявкиCallBack.Отменено); 
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Возврат ЗаявкаОбъект;				
			КонецЕсли;
			ЗаявкаОбъект.СтатусПланированияВстречи = Перечисления.СтатусыПланироваиняВстреч.КонтрольВстречи;
		КонецЕсли;
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.A; 		
		ИзменениеПриоритета = ПроверкаИзмененияПриоритетаЗаявки(Выборка.Ссылка);
		Если ЗначениеЗаполнено(ИзменениеПриоритета) Тогда
			ЗаявкаОбъект.Приоритет = ИзменениеПриоритета;			
		КонецЕсли;
		ЗаявкаОбъект.ПлановоеВремя = Неопределено;
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата(); 
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);				
	ИначеЕсли ПорядокПоТипуРаспределения = "B" Тогда				
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.B;				
		ИзменениеПриоритета = ПроверкаИзмененияПриоритетаЗаявки(Выборка.Ссылка);				
		Если ЗначениеЗаполнено(ИзменениеПриоритета) Тогда
			ЗаявкаОбъект.Приоритет = ИзменениеПриоритета;
		КонецЕсли;				
		Если ЗаявкаОбъект.ПопытокСегодня > 0 Тогда
			ЗаявкаОбъект.ДеньОбработки = ЗаявкаОбъект.ДеньОбработки + 1;
		КонецЕсли;								
		ЗаявкаОбъект.ПлановоеВремя = Неопределено;
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;   
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ПопытокСегодня = 0;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);			
	ИначеЕсли ПорядокПоТипуРаспределения = "V" Тогда					  
		Если ЗначениеЗаполнено(Выборка.Взаимодействие) И ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда					
			СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Выборка.Взаимодействие);					
			Если ЕстьЗавершеннаяВстречаПоНазначенной(СтруктураРеквизитов.Предмет, Выборка.ВзаимодействиеДата) Тогда  
				ЗаявкаОбъект.Статус = ?(ЗаявкаОбъект.ПопытокДозвониться > 0, Перечисления.СтатусЗаявкиCallBack.Обработано, Перечисления.СтатусЗаявкиCallBack.Отменено);
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Возврат ЗаявкаОбъект;
			КонецЕсли;
			ЗаявкаОбъект.СтатусПланированияВстречи = Перечисления.СтатусыПланироваиняВстреч.КонтрольВстречи;
		КонецЕсли;
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.V;				
		ИзменениеПриоритета = ПроверкаИзмененияПриоритетаЗаявки(Выборка.Ссылка);
		Если ЗначениеЗаполнено(ИзменениеПриоритета) Тогда
			ЗаявкаОбъект.Приоритет = ИзменениеПриоритета;			
		КонецЕсли;				
		Если ЗаявкаОбъект.ПопытокСегодня > 0 Тогда
			ЗаявкаОбъект.ДеньОбработки = ЗаявкаОбъект.ДеньОбработки + 1;
		КонецЕсли;
		ЗаявкаОбъект.ПлановоеВремя = Неопределено;
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата(); 
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;   
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ПопытокСегодня = 0;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	ИначеЕсли ПорядокПоТипуРаспределения = "C" Тогда											
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.C; 
		Если ЗаявкаОбъект.ПопытокСегодня > 0 Тогда
			ЗаявкаОбъект.ДеньОбработки = ЗаявкаОбъект.ДеньОбработки + 1;
		КонецЕсли;								
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();   
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;   
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ПопытокСегодня = 0;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	ИначеЕсли ПорядокПоТипуРаспределения = "W" Тогда				 		
		Если ЗначениеЗаполнено(Выборка.Взаимодействие) И ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда					
			СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Выборка.Взаимодействие);					
			Если ЕстьЗавершеннаяВстречаПоНазначенной(СтруктураРеквизитов.Предмет, Выборка.ВзаимодействиеДата) Тогда  
				ЗаявкаОбъект.Статус = ?(ЗаявкаОбъект.ПопытокДозвониться > 0, Перечисления.СтатусЗаявкиCallBack.Обработано, Перечисления.СтатусЗаявкиCallBack.Отменено);
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Возврат ЗаявкаОбъект;
			КонецЕсли;
		КонецЕсли;
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.W;
		Если ЗаявкаОбъект.ПопытокСегодня > 0 Тогда
			ЗаявкаОбъект.ДеньОбработки = ЗаявкаОбъект.ДеньОбработки + 1;
		КонецЕсли;
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();   
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;   
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ПопытокСегодня = 0;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);					
	ИначеЕсли ПорядокПоТипуРаспределения = "X" Тогда						
		Если ЗначениеЗаполнено(Выборка.Взаимодействие) И ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда					
			СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Выборка.Взаимодействие);					
			Если ЕстьЗавершеннаяВстречаПоНазначенной(СтруктураРеквизитов.Предмет, Выборка.ВзаимодействиеДата) Тогда  
				ЗаявкаОбъект.Статус = ?(ЗаявкаОбъект.ПопытокДозвониться > 0, Перечисления.СтатусЗаявкиCallBack.Обработано, Перечисления.СтатусЗаявкиCallBack.Отменено);
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Возврат ЗаявкаОбъект;
			КонецЕсли;
		КонецЕсли;	
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.X; 
		Если ЗаявкаОбъект.ПопытокСегодня > 0 Тогда
			ЗаявкаОбъект.ДеньОбработки = ЗаявкаОбъект.ДеньОбработки + 1;
		КонецЕсли;
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();   
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;   
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ПопытокСегодня = 0;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	ИначеЕсли ПорядокПоТипуРаспределения = "Y" Тогда											
		СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Выборка.Взаимодействие);	
		Если ЗначениеЗаполнено(Выборка.Взаимодействие) И ТипЗнч(Выборка.Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда									
			Если ЕстьЗавершеннаяВстречаПоНазначенной(СтруктураРеквизитов.Предмет, Выборка.ВзаимодействиеДата) Тогда  
				ЗаявкаОбъект.Статус = ?(ЗаявкаОбъект.ПопытокДозвониться > 0, Перечисления.СтатусЗаявкиCallBack.Обработано, Перечисления.СтатусЗаявкиCallBack.Отменено);
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Возврат ЗаявкаОбъект;
			КонецЕсли;
		КонецЕсли;
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Y;
		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет5;
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.ДатаРаспределения = ДобавитьМесяц(СтруктураРеквизитов.РассмотретьПосле, 1); 
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);									
	ИначеЕсли ПорядокПоТипуРаспределения = "D" Тогда				                                                       
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.D;
		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет6;
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеДозвон;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);								
	ИначеЕсли ПорядокПоТипуРаспределения = "Z" Тогда			
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Z;
		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет6;
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеДозвон;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ИначеЕсли ПорядокПоТипуРаспределения = "Сегодняшние" Тогда
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		Возврат Неопределено;  
	КонецЕсли;
	
	Возврат ЗаявкаОбъект;
	
КонецФункции	

Процедура РаспределитьЗаявкуПоТипуРаспределения(Выборка, ПорядокПоТипуРаспределения, ГруппаРаспределения = Неопределено) Экспорт
	
	ЗаявкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Если ЗаявкаОбъект = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаявкаОбъект = УстановитьИзмененияЗаявкиПоТипуРаспределения(ЗаявкаОбъект, Выборка, ПорядокПоТипуРаспределения);
	
	Если ЗаявкаОбъект = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если (ПорядокПоТипуРаспределения = "A" И (ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.Отменено ИЛИ ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.Обработано)) ИЛИ
		ПорядокПоТипуРаспределения = "Y" ИЛИ
		ПорядокПоТипуРаспределения = "D" ИЛИ
		ПорядокПоТипуРаспределения = "Z" Тогда
		Возврат;	
	КонецЕсли;
	
	Ответственный = Неопределено;
	Если ЗначениеЗаполнено(Выборка.reqContact) Тогда
		НайденныйОтветственный = НайтиОтветственногоЗаявокПоКлиенту(Выборка.reqContact);
		Если ЗначениеЗаполнено(НайденныйОтветственный) Тогда
			АктивныеПользователи = ПолучитьАктивныхПользователей(ГруппаРаспределения, Выборка.ВидНедвижимости, , );
			Если НЕ АктивныеПользователи.Найти(НайденныйОтветственный) = Неопределено Тогда
				Ответственный = НайденныйОтветственный;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия Тогда
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Если ЗначениеЗаполнено(Выборка.ВзаимодействиеАвтор) Тогда				
				Если Выборка.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано И НЕ Выборка.Ответственный = Выборка.ВзаимодействиеАвтор Тогда	
					АктивныеПользователи = ПолучитьАктивныхПользователей(ГруппаРаспределения, Выборка.ВидНедвижимости, , );
					Если НЕ АктивныеПользователи.Найти(Выборка.ВзаимодействиеАвтор) = Неопределено Тогда
						Ответственный = Выборка.ВзаимодействиеАвтор;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;				
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПолучитьОтветственногоПоРаспределению(ГруппаРаспределения, Выборка.ВидНедвижимости, Выборка.Сайт, , Выборка.ВидЗаявкиНаЗвонок, Выборка.Приоритет);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ЗаявкаОбъект.Ответственный = Ответственный;
		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();								
		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
		
КонецПроцедуры

Функция ПроверкаИзмененияПриоритетаЗаявки(ЗаявкаСсылка)
	
	ПриоритетВзаимодействия = Неопределено;
	
	НаборЗаписей = РегистрыСведений.ИзмененияЗаявокНаЗвонок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаЗвонок.Установить(ЗаявкаСсылка);
	НаборЗаписей.Прочитать();
	ТаблицаНабор = НаборЗаписей.Выгрузить();		
	ТаблицаНабор.Сортировать("ДатаИзменения УБЫВ");
	
	НайденныеСтроки = ТаблицаНабор.НайтиСтроки(Новый Структура("ВидИзменения", Перечисления.ВидыИзмененияЗаявокНаЗвонок.Приоритет));
	Если НайденныеСтроки.Количество() Тогда
		Если НайденныеСтроки[0].НовоеЗначение = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет1 Тогда
			ПриоритетВзаимодействия = НайденныеСтроки[НайденныеСтроки.ВГраница()].СтароеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПриоритетВзаимодействия;
	
КонецФункции

Процедура ОбработкаЗаявкиНаЗвонокПриЗаписиВзаимодействия(ТекущийОбъект) Экспорт
	
	ЗаявкаОбъект = Неопределено;
	ЗаписатьЗаявкуНаЗвонок = Ложь;
	
	СтатусЗаланированногоВзаимодействияБылИзменен = Ложь;
	РассмотретьПослеЗаланированногоВзаимодействияИзменилось = Ложь;
	
	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(ТекущийОбъект.Ссылка);	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ТекущийСтатус") И НЕ ТекущийОбъект.ДополнительныеСвойства.ТекущийСтатус = Неопределено Тогда
		Если ТекущийОбъект.ДополнительныеСвойства.ТекущийСтатус = Перечисления.СтатусыВзаимодействий.Запланировано Тогда		
			АктуальныйСтатус = РегистрыСведений.Взаимодействия.ПолучитьТекущийСтатусВзаимодействия(ТекущийОбъект.Ссылка, СтруктураРеквизитов);
			СтатусЗаланированногоВзаимодействияБылИзменен = (АктуальныйСтатус = Перечисления.СтатусыВзаимодействий.Отменено ИЛИ АктуальныйСтатус = Перечисления.СтатусыВзаимодействий.Завершено);
			Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ТекущееРассмотретьПосле") И НЕ ТекущийОбъект.ДополнительныеСвойства.ТекущееРассмотретьПосле = Неопределено Тогда
				РассмотретьПослеЗаланированногоВзаимодействияИзменилось = НЕ ТекущийОбъект.ДополнительныеСвойства.ТекущееРассмотретьПосле = СтруктураРеквизитов.РассмотретьПосле И НЕ СтатусЗаланированногоВзаимодействияБылИзменен;
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
		
	Если СтатусЗаланированногоВзаимодействияБылИзменен Тогда
		ЗаявкаОбъект = ПолучитьЗаявкуНаЗвонокПоВзаимодействию(ТекущийОбъект.Ссылка, Истина);
		Если ЗаявкаОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗаявкаОбъект.Статус = ?(ЗаявкаОбъект.ПопытокДозвониться = 0, Перечисления.СтатусЗаявкиCallBack.Отменено, Перечисления.СтатусЗаявкиCallBack.Обработано);
		//ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписатьЗаявкуНаЗвонок = Истина;
	КонецЕсли;	
	
	Если РассмотретьПослеЗаланированногоВзаимодействияИзменилось Тогда
		Если ЗаявкаОбъект = Неопределено Тогда
			ЗаявкаОбъект = ПолучитьЗаявкуНаЗвонокПоВзаимодействию(ТекущийОбъект.Ссылка, Истина);
			Если ЗаявкаОбъект = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.Встреча") Тогда
			Если ?(СтруктураРеквизитов.РассмотретьПосле = Неопределено, Дата(1, 1, 1), СтруктураРеквизитов.РассмотретьПосле) >= (НачалоДня(ТекущаяДата())) 
				И ?(СтруктураРеквизитов.РассмотретьПосле = Неопределено, Дата(1, 1, 1), СтруктураРеквизитов.РассмотретьПосле) <= (НачалоДня(ТекущаяДата()) + 86400) Тогда
				ЗаявкаОбъект.ДатаРаспределения = СтруктураРеквизитов.РассмотретьПосле + 86400;
				ЗаявкаОбъект.СтатусПланированияВстречи = Перечисления.СтатусыПланироваиняВстреч.КонтрольВстречи;
			ИначеЕсли ?(СтруктураРеквизитов.РассмотретьПосле = Неопределено, Дата(1, 1, 1), СтруктураРеквизитов.РассмотретьПосле) > (НачалоДня(ТекущаяДата()) + 86400) Тогда
				ЗаявкаОбъект.ДатаРаспределения = СтруктураРеквизитов.РассмотретьПосле - 86400;
				ЗаявкаОбъект.СтатусПланированияВстречи = Перечисления.СтатусыПланироваиняВстреч.ПодтверждениеВстречи;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
			ЗаявкаОбъект.ДатаРаспределения = СтруктураРеквизитов.РассмотретьПосле;
			УправлениеТелефониейСервер.УстановитьКонтактЗвонкаИзВзаимодействия(ТекущийОбъект.Ссылка);			
		КонецЕсли;
		ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;
		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
		ЗаявкаОбъект.ПопытокСегодня = 0;
		ЗаявкаОбъект.ТипРаспределения = Перечисления.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние;
		///ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗаписатьЗаявкуНаЗвонок = Истина;
	КонецЕсли;
	
	//<841632>, Басаргин (27.07.2018) {
	Если ТипЗнч(ТекущийОбъект) = Тип("ДокументОбъект.ТелефонныйЗвонок") И ЗначениеЗаполнено(ТекущийОбъект.АбонентКонтакт) Тогда							
		ЗаявкаОбъект_ПоСобытию = ПолучитьЗаявкуНаЗвонокПоСобытию(ТекущийОбъект.Ссылка, ТекущийОбъект.АбонентКонтакт, Истина);
		Если НЕ ЗаявкаОбъект_ПоСобытию = Неопределено Тогда
			//Если ЗаявкаОбъект_ПоСобытию.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтCQ
			Если НЕ ЗаявкаОбъект_ПоСобытию.Контакт = ТекущийОбъект.АбонентКонтакт Тогда			
				ЗаявкаОбъект_ПоСобытию.Контакт = ТекущийОбъект.АбонентКонтакт;
		  		ЗаявкаОбъект_ПоСобытию.Записать(РежимЗаписиДокумента.Проведение);					
				УправлениеТелефониейСервер.УстановитьКонтактЗвонкаИзВзаимодействия(ТекущийОбъект.Ссылка);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	//<841632> }
	
	Если НЕ ЗаявкаОбъект = Неопределено И ЗаписатьЗаявкуНаЗвонок Тогда
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗаявкуНаЗвонокПоСобытию(Взаимодействие, Контакт, ВозвращатьОбъект = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияЗвонков.ЗаявкаИнициатор КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗвонков КАК ИсторияЗвонков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|			ПО ИсторияЗвонков.ЗаявкаИнициатор = ЗаявкаНаЗвонок.Ссылка
	|		ПО СоответствиеЗапросовЗвонкам.ID_Звонка = ИсторияЗвонков.ID_Звонка
	|ГДЕ
	|	СоответствиеЗапросовЗвонкам.Взаимодействие = &Взаимодействие
	//|	И ЗаявкаНаЗвонок.ТипВызова = ЗНАЧЕНИЕ(Перечисление.ТипыВызовов.ЗаявкаОтCQ)
	|	И НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.Контакт <> &Контакт";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Запрос.УстановитьПараметр("Контакт", Контакт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ?(ВозвращатьОбъект, ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(), ВыборкаДетальныеЗаписи.Ссылка);
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьЗаявкуНаЗвонокПоВзаимодействию(Взаимодействие, ВозвращатьОбъект = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	ЗаявкаНаЗвонок.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ?(ВозвращатьОбъект, ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект(), ВыборкаДетальныеЗаписи.Ссылка);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаявкиНаЗвонокПоНомеру(Ссылка, reqContact) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ключ
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	ЗаявкаНаЗвонок.reqContact = &reqContact
	|	И НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.Ссылка <> &Ссылка
	|	И ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня";
	
	Запрос.УстановитьПараметр("reqContact", reqContact);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НачалоЭтогоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецЭтогоДня", КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ключ");	
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьПоследнееИзменениеЗаявкиНаЗвонок(ТаблицаНабор) Экспорт

	Если НЕ ТаблицаНабор.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаНаборКопия = ТаблицаНабор.Скопировать();	              
	ТаблицаНаборКопия.Сортировать("ДатаИзменения УБЫВ");
	
	Возврат ТаблицаНаборКопия[ТаблицаНаборКопия.ВГраница()];  
	
КонецФункции

Функция ПолучитьОтветственногоИзИзмененияЗаявокНаЗвонок(ТаблицаНабор) Экспорт

	ОтветственныйВзаимодействия = Неопределено;
	
	ТаблицаНаборКопия = ТаблицаНабор.Скопировать();
	
	ТаблицаНаборКопия.Сортировать("ДатаИзменения УБЫВ");
	
	Для каждого Строка Из ТаблицаНаборКопия Цикл
		Если Строка.ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.Ответственный
			И (ЗначениеЗаполнено(Строка.НовоеЗначение) ИЛИ ЗначениеЗаполнено(Строка.СтароеЗначение)) Тогда
			ОтветственныйВзаимодействия = ?(ЗначениеЗаполнено(Строка.НовоеЗначение), Строка.НовоеЗначение, Строка.СтароеЗначение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтветственныйВзаимодействия;
	
КонецФункции

Процедура ОбработатьЗаявкуПоВзаимодействию(Взаимодействие, Ответственный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	ЗаявкаНаЗвонок.Взаимодействие = &Взаимодействие
	|	И ЗаявкаНаЗвонок.Статус <> &Статус";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусЗаявкиCallBack.Обработано);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаявкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НЕ ЗаявкаОбъект = Неопределено Тогда
			ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.Отменено;
			ЗаявкаОбъект.Ответственный = ?(ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей"), ПользователиКлиентСервер.ТекущийПользователь(), Ответственный);
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;				
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьЗаявкуПоВзаимодействию(Взаимодействие, Ответственный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	ЗаявкаНаЗвонок.Взаимодействие = &Взаимодействие
	|	И ЗаявкаНаЗвонок.Статус <> &Статус";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусЗаявкиCallBack.Отменено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаявкаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НЕ ЗаявкаОбъект = Неопределено Тогда
			ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.Отменено;
			ЗаявкаОбъект.Ответственный = ?(ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей"), ПользователиКлиентСервер.ТекущийПользователь(), Ответственный);
			ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;				
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПолеДополнительнойГруппировки(ЗаявкаОбъект) Экспорт
		
	Если ЗаявкаОбъект.ЭтоНовый() Тогда
		ЗаявкаОбъект.ПолеДополнительнойГруппировки = СформироватьПолеДопГруппировки(ЗаявкаОбъект.Приоритет, ЗаявкаОбъект.СтатусПланированияВстречи, ЗаявкаОбъект.Взаимодействие);
	Иначе
		ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаОбъект.Ссылка, "Приоритет, СтатусПланированияВстречи");
		Если НЕ ЗаявкаОбъект.Приоритет = ЗначенияРеквизитовОбъекта.Приоритет
			ИЛИ НЕ ЗаявкаОбъект.СтатусПланированияВстречи = ЗначенияРеквизитовОбъекта.СтатусПланированияВстречи Тогда
		   	ЗаявкаОбъект.ПолеДополнительнойГруппировки = СформироватьПолеДопГруппировки(ЗаявкаОбъект.Приоритет, ЗаявкаОбъект.СтатусПланированияВстречи, ЗаявкаОбъект.Взаимодействие);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Функция СформироватьПолеДопГруппировки(Приоритет, СтатусПланированияВстречи, Взаимодействие = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПриоритеа = ПолучитьИмяПеречисления(Приоритет);
	
	Если Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет3 И НЕ Взаимодействие = Неопределено Тогда
		Наименование = ИмяПриоритеа + ?(ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ТелефонныйЗвонок"), "/Звонки",  
			?(НЕ ПустаяСтрока(Строка(СтатусПланированияВстречи)), "/" + Строка(СтатусПланированияВстречи), ""));	
	Иначе				
		Наименование = ИмяПриоритеа + ?(НЕ ПустаяСтрока(Строка(СтатусПланированияВстречи)), "/" + Строка(СтатусПланированияВстречи), "");		
	КонецЕсли;
	
	ПолеДопГруппировки = Справочники.ПоляДополнительныхГруппировокЗаявокНаЗвонок.НайтиПоНаименованию(Наименование, Истина);
	Если НЕ ЗначениеЗаполнено(ПолеДопГруппировки) Тогда
		НовПолеДопГруппировки = Справочники.ПоляДополнительныхГруппировокЗаявокНаЗвонок.СоздатьЭлемент();
		НовПолеДопГруппировки.Наименование = Наименование;
		НовПолеДопГруппировки.УстановитьНовыйКод(); 
		НовПолеДопГруппировки.ОбменДанными.Загрузка = Истина;
		Попытка
			НовПолеДопГруппировки.Записать();
		Исключение
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка создания поля доп. группировки: " + ОписаниеОшибки());
			Возврат Неопределено;	
		КонецПопытки;
		ПолеДопГруппировки = НовПолеДопГруппировки.Ссылка;
	КонецЕсли;
	
	Возврат ПолеДопГруппировки;
	
КонецФункции	

Функция ПолучитьИмяПеречисления(ЗначениеПеречисления) 
	
	Если Не ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;	
	
	Возврат ИмяЗначенияПеречисления;	
	
КонецФункции	

Процедура ЗаполнитьПроектПоДаннымПисьма(ЗаявкаОбъект, ЭлементВходящееСообщение, СписокОС)
	
	Если СписокОС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Проект) Тогда				
		Для каждого ОС Из СписокОС Цикл
			Если ЗначениеЗаполнено(ОС.ИмяПроекта) И
				(СтрНайти(ВРег(ПреобразоватьСтрокуВКириллицу(ЭлементВходящееСообщение.ИмяОтправителя)), ВРег(ОС.ИмяПроекта))
				ИЛИ СтрНайти(ВРег(ПреобразоватьСтрокуВКириллицу(ЭлементВходящееСообщение.Отправитель)), ВРег(ОС.ИмяПроекта))
				ИЛИ СтрНайти(ВРег(ПреобразоватьСтрокуВКириллицу(ЭлементВходящееСообщение.Тема)), ВРег(ОС.ИмяПроекта))) Тогда
				ЗаявкаОбъект.Проект = ОС.Проект;
				ЗаявкаОбъект.ВидНедвижимости = ОС.ВидНедвижимости;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерИзТекста(Текст)
	
	RegExp = Новый COMОбъект("VBScript.RegExp"); 
    
    RegExp.IgnoreCase = Истина;
    RegExp.Global = Истина;
    RegExp.MultiLine = Истина;
     
    RegExp.Pattern = "((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}";
	
	Matches = RegExp.Execute(Текст);
	ЧислоВхождений = Matches.Count();
	Если ЧислоВхождений > 0 Тогда 
		Возврат Matches.Item(0).Value;
	КонецЕсли;	
	
	Возврат "";
	
КонецФункции

Функция ПереводИзТранслита(КЗамене)
	
	КЗамене=СтрЗаменить(КЗамене,"Sh","Ш");
    КЗамене=СтрЗаменить(КЗамене,"sh","ш");
    КЗамене=СтрЗаменить(КЗамене,"Cp","Ч");
    КЗамене=СтрЗаменить(КЗамене,"cp","ч");
    КЗамене=СтрЗаменить(КЗамене,"Sp","Ф");
    КЗамене=СтрЗаменить(КЗамене,"sp","ф");
    //КЗамене=СтрЗаменить(КЗамене,"Er","Ё");
    //КЗамене=СтрЗаменить(КЗамене,"er","ё");
    КЗамене=СтрЗаменить(КЗамене,"Ee","И");
    КЗамене=СтрЗаменить(КЗамене,"ee","и");
    КЗамене=СтрЗаменить(КЗамене,"Oo","У");
    КЗамене=СтрЗаменить(КЗамене,"oo","у");
    КЗамене=СтрЗаменить(КЗамене,"A","А");
    КЗамене=СтрЗаменить(КЗамене,"a","а");
    КЗамене=СтрЗаменить(КЗамене,"B","Б");
    КЗамене=СтрЗаменить(КЗамене,"b","б");
    КЗамене=СтрЗаменить(КЗамене,"Q","К");
    КЗамене=СтрЗаменить(КЗамене,"q","к");
    КЗамене=СтрЗаменить(КЗамене,"W","В");
    КЗамене=СтрЗаменить(КЗамене,"w","в");
    КЗамене=СтрЗаменить(КЗамене,"E","Э");
    КЗамене=СтрЗаменить(КЗамене,"e","э");
    КЗамене=СтрЗаменить(КЗамене,"R","Р");
    КЗамене=СтрЗаменить(КЗамене,"r","р");
    КЗамене=СтрЗаменить(КЗамене,"T","Т");
    КЗамене=СтрЗаменить(КЗамене,"t","т");
    КЗамене=СтрЗаменить(КЗамене,"Y","И");
    КЗамене=СтрЗаменить(КЗамене,"y","и");
    КЗамене=СтрЗаменить(КЗамене,"U","У");
    КЗамене=СтрЗаменить(КЗамене,"u","у");
    КЗамене=СтрЗаменить(КЗамене,"I","И");
    КЗамене=СтрЗаменить(КЗамене,"i","и");
    КЗамене=СтрЗаменить(КЗамене,"O","О");
    КЗамене=СтрЗаменить(КЗамене,"o","о");
    КЗамене=СтрЗаменить(КЗамене,"P","П");
    КЗамене=СтрЗаменить(КЗамене,"p","п");
    КЗамене=СтрЗаменить(КЗамене,"S","С");
    КЗамене=СтрЗаменить(КЗамене,"s","с");
    КЗамене=СтрЗаменить(КЗамене,"D","Д");
    КЗамене=СтрЗаменить(КЗамене,"d","д");
    КЗамене=СтрЗаменить(КЗамене,"F","Ф");
    КЗамене=СтрЗаменить(КЗамене,"f","ф");
    КЗамене=СтрЗаменить(КЗамене,"G","Г");
    КЗамене=СтрЗаменить(КЗамене,"g","г");
    КЗамене=СтрЗаменить(КЗамене,"H","Х");
    КЗамене=СтрЗаменить(КЗамене,"h","х");
    КЗамене=СтрЗаменить(КЗамене,"J","Дж");
    КЗамене=СтрЗаменить(КЗамене,"j","дж");
    КЗамене=СтрЗаменить(КЗамене,"K","К");
    КЗамене=СтрЗаменить(КЗамене,"k","к");
    КЗамене=СтрЗаменить(КЗамене,"L","Л");
    КЗамене=СтрЗаменить(КЗамене,"l","л");
    КЗамене=СтрЗаменить(КЗамене,"Z","З");
    КЗамене=СтрЗаменить(КЗамене,"z","з");
    КЗамене=СтрЗаменить(КЗамене,"X","Кс");
    КЗамене=СтрЗаменить(КЗамене,"x","кс");
    КЗамене=СтрЗаменить(КЗамене,"C","К");
    КЗамене=СтрЗаменить(КЗамене,"c","к");
    КЗамене=СтрЗаменить(КЗамене,"V","В");
    КЗамене=СтрЗаменить(КЗамене,"v","в");
    КЗамене=СтрЗаменить(КЗамене,"N","Н");
    КЗамене=СтрЗаменить(КЗамене,"n","н");
    КЗамене=СтрЗаменить(КЗамене,"M","М");
    КЗамене=СтрЗаменить(КЗамене,"m","м");

    Возврат КЗамене;

КонецФункциИ

#КонецОбласти
