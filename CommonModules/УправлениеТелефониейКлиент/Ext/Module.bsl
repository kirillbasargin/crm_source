
#Область ПрограммныйИнтерфейс

Процедура ПередНачаломРаботыСистемы() Экспорт //ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы()	
	УстановитьГлобальныйКонтекст();
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы() Экспорт //ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы()

	НастройкиТелефонии = ОпределитьУстановитьНастройкиТелефонии();
	Если глТелефония["Использовать"] И НЕ НастройкиТелефонии = Неопределено Тогда  
        глТелефония["Зарегистрирована"] = РегистрацияКомпонентыТелефонии(НастройкиТелефонии);  
		Если глТелефония["Зарегистрирована"] Тогда						
			ВключитьТелефонию();
		КонецЕсли;
    КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы() Экспорт 
	
	Если глТелефония["Использовать"] Тогда
		ВыключитьТелефонию();
		глAvayaMediaComponent = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция РегистрацияКомпонентыТелефонии(НастройкиТелефонии) Экспорт 
	
	КомпонентаТелефонияЗагружена = Новый Структура;
	ПутьККомпонентеТелефонии = глТелефония["ПутьККомпонентеТелефонии"];	 
	Если глТелефония["ИспользоватьAvayaMediaLibrary"] Тогда 	
		Попытка
			КомпонентаТелефонияЗагружена.Вставить("Загружена", ПодключитьВнешнююКомпоненту("AddIn.AvayaMediaLibrary"));
		Исключение
			КомпонентаТелефонияЗагружена.Вставить("Загружена", Ложь);
		КонецПопытки;		
		Попытка		  
			КомпонентаТелефонияЗагружена.Вставить("Инициализирована", Истина);
			глAvayaMediaComponent = Новый("AddIn.AvayaMediaComponent");
		Исключение
			КомпонентаТелефонияЗагружена.Вставить("Инициализирована", Ложь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка AddIn.AvayaMediaLibrary " + ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(ПутьККомпонентеТелефонии) Тогда
			Попытка
				КомпонентаТелефонияЗагружена.Вставить("Загружена", ПодключитьВнешнююКомпоненту(ПутьККомпонентеТелефонии + "\" + "AvayaMediaComponent.dll", "Avaya"));
			Исключение
				КомпонентаТелефонияЗагружена.Вставить("Загружена", Ложь);
			КонецПопытки;		
		Иначе                     
			Попытка
				КомпонентаТелефонияЗагружена.Вставить("Загружена", ПодключитьВнешнююКомпоненту("..\..\common\AvayaMediaComponent.dll","Avaya"));
			Исключение
				КомпонентаТелефонияЗагружена.Вставить("Загружена", Ложь);
			КонецПопытки;
		КонецЕсли; 
		
		Если Не КомпонентаТелефонияЗагружена.Загружена Тогда
			Попытка
				КомпонентаТелефонияЗагружена.Вставить("Загружена", ПодключитьВнешнююКомпоненту("C:\Program Files (x86)\1cv8\common\AvayaMediaComponent.dll","Avaya")); 
			Исключение
				КомпонентаТелефонияЗагружена.Вставить("Загружена", Ложь);
			КонецПопытки;
		КонецЕсли;
		
		Попытка		  
			КомпонентаТелефонияЗагружена.Вставить("Инициализирована", Истина);
			глAvayaMediaComponent = Новый("AddIn.Avaya.AvayaMediaComponent");
		Исключение
			КомпонентаТелефонияЗагружена.Вставить("Инициализирована", Ложь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка AddIn.Avaya.AvayaMediaComponent " + ОписаниеОшибки());
		КонецПопытки;		
	КонецЕсли;
	
	Успешно = КомпонентаТелефонияЗагружена["Загружена"] И КомпонентаТелефонияЗагружена["Инициализирована"];
	Если Успешно Тогда
		Попытка
			глAvayaMediaComponent.записатьПараметр("aesServerIpAddr", НастройкиТелефонии.aesServerIpAddr);	
			глAvayaMediaComponent.записатьПараметр("aesServerPort", НастройкиТелефонии.aesServerPort);	
			глAvayaMediaComponent.записатьПараметр("userName", НастройкиТелефонии.aesUserName);	
			глAvayaMediaComponent.записатьПараметр("userPassword", НастройкиТелефонии.aesUserPassword);	
			глAvayaMediaComponent.записатьПараметр("deviceIp", НастройкиТелефонии.aesDeviceIp);	
			глAvayaMediaComponent.записатьПараметр("deviceExtension", НастройкиТелефонии.deviceExtension);
			глAvayaMediaComponent.записатьПараметр("devicePassword", НастройкиТелефонии.aesDevicePassword);
			Если глТелефония["ИспользоватьAvayaMediaLibrary"] Тогда
				глAvayaMediaComponent.записатьПараметр("logging", ?(НастройкиТелефонии.aeslogging = "1", Истина, Ложь));
			Иначе
				глAvayaMediaComponent.записатьПараметр("logging", НастройкиТелефонии.aeslogging);	 
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Компонента телефонии успешно инициализирована, но при установке параметров подключения к AES возникли ошибки. Проверьте заполнение параметров и перезайдите в систему");	
		КонецПопытки;
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

Процедура ВключитьТелефонию() Экспорт
	
	Попытка
		глТелефония["СтартСообщение"] = глAvayaMediaComponent.СтартТелефонии();
		Если НЕ ЗначениеЗаполнено(глТелефония["СтартСообщение"]) Тогда
			глТелефония["Активирована"] = Истина;
			глТелефония["ИдентификаторСеансаТелефонии"] = Строка(Новый УникальныйИдентификатор());
		Иначе
			ПереподключитьТелефонию();
		КонецЕсли;
		Оповестить("ИзменениеСтатусаТелефонии", глТелефония["СтартСообщение"], "Телефония");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка <ВключитьТелефонию()>" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ПереподключитьТелефонию() Экспорт
	
	Попытка
		ВыключитьТелефонию();
		Если ПустаяСтрока(глТелефония["СтопСообщение"]) Тогда
			глТелефония["СтартСообщение"] = глAvayaMediaComponent.СтартТелефонии();
			Если НЕ ЗначениеЗаполнено(глТелефония["СтартСообщение"]) Тогда
				глТелефония["Активирована"] = Истина;
				глТелефония["ИдентификаторСеансаТелефонии"] = Строка(Новый УникальныйИдентификатор());
				Оповестить("ИзменениеСтатусаТелефонии", глТелефония["СтартСообщение"], "Телефония");	
			КонецЕсли;
		КонецЕсли;	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка <ВключитьТелефонию()>" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыключитьТелефонию() Экспорт
	
	Попытка
		ОчиститьГлобальныйКонтекст();
		глAvayaMediaComponent.СтопТелефонии();							
		глТелефония["СтопСообщение"] = "";
		Оповестить("ИзменениеСтатусаТелефонии", глТелефония["СтопСообщение"], "Телефония");	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка <ВыключитьТелефонию()>" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьГлобальныйКонтекст() Экспорт
	
	глТекущиеЗвонки = Новый Массив;
	
	глТелефония.Вставить("Активирована", Ложь);
	глТелефония.Вставить("СтартСообщение", "");
	глТелефония.Вставить("СтопСообщение", "");
	глТелефония.Вставить("ПоследнийОбновленныйНомерТелефона", "");

	глТелефония.Вставить("НомерТелефона", "");	
	глТелефония.Вставить("НомерЛинии", 0);
	глТелефония.Вставить("ПараметрыЗвонка", УправлениеТелефониейКлиентСервер.ПолучитьПустуюСтруктуруЗвонка());	
	глТелефония.Вставить("ЗаявкаИнициатор", Неопределено);

	глТелефония.Вставить("ИдентификаторСеансаТелефонии", "");
	глТелефония.Вставить("ИдентификаторСессииТелефонии", "");	
	глТелефония.Вставить("ДанныеПредыдущегоСобытия", "");
	
	глТелефония.Вставить("Состояние_ПопыткаПереадресации", Новый Структура());
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ПопыткаПереадресации", Ложь);
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ДатаПеренаправленияЗвонка", Дата(1, 1, 1));
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ПеренаправленС", "");	
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ПеренаправленНа", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ID_Перенапраление", "");	
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ID_Группы", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("UCID_Перенапраление", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("First_CallId", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("Primary_CallId", "");
		
КонецПроцедуры

Процедура УстановитьГлобальныйКонтекст() Экспорт
		
	глТекущиеЗвонки = Новый Массив;
	
	глТелефония = Новый Структура;
	глТелефония.Вставить("Использовать", Ложь);
	глТелефония.Вставить("Зарегистрирована", Ложь);
	глТелефония.Вставить("Активирована", Ложь);
	глТелефония.Вставить("СтартСообщение", "");
	глТелефония.Вставить("СтопСообщение", "");
	глТелефония.Вставить("deviceID", "");
	глТелефония.Вставить("ПоследнийОбновленныйНомерТелефона", "");

	глТелефония.Вставить("НомерТелефона", "");   
	глТелефония.Вставить("НомерЛинии", 0);
	глТелефония.Вставить("ПараметрыЗвонка", УправлениеТелефониейКлиентСервер.ПолучитьПустуюСтруктуруЗвонка());
	глТелефония.Вставить("ТелефоннаяТрубкаОпущена", Истина);
	глТелефония.Вставить("ЗаявкаИнициатор", Неопределено);
	
	глТелефония.Вставить("ИдентификаторСеансаТелефонии", "");
	глТелефония.Вставить("ИдентификаторФормыТелефонии", "");
	глТелефония.Вставить("ИдентификаторСессииТелефонии", "");	
	глТелефония.Вставить("ДанныеПредыдущегоСобытия", "");
	
	глТелефония.Вставить("ФайлСохраненияЛоговТелефонии", "");
	глТелефония.Вставить("ПутьККомпонентеТелефонии", "");
	глТелефония.Вставить("АктивироватьЛог", Ложь);
	глТелефония.Вставить("Логин", "");
	глТелефония.Вставить("ИспользоватьAvayaMediaLibrary", Ложь);
	
	глТелефония.Вставить("Состояние_ПопыткаПереадресации", Новый Структура());
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ПопыткаПереадресации", Ложь);
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ДатаПеренаправленияЗвонка", Дата(1, 1, 1));
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ПеренаправленС", "");	
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ПеренаправленНа", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ID_Перенапраление", "");	
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("ID_Группы", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("UCID_Перенапраление", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("First_CallId", "");
	глТелефония.Состояние_ПопыткаПереадресации.Вставить("Primary_CallId", "");	
			
КонецПроцедуры

Функция ОпределитьУстановитьНастройкиТелефонии() Экспорт
	
	НастройкиТелефонии = УправлениеТелефониейСервер.ПолучитьНастройкиТелефонии();	
	Если НЕ НастройкиТелефонии = Неопределено Тогда
		глТелефония["Использовать"] = НастройкиТелефонии.Использовать;
		глТелефония["ПутьККомпонентеТелефонии"] = НастройкиТелефонии.ПутьККомпонентеТелефонии;
		глТелефония["АктивироватьЛог"] = НастройкиТелефонии.АктивироватьЛог;
		глТелефония["Логин"] = НастройкиТелефонии.Логин;
		глТелефония["ИспользоватьAvayaMediaLibrary"] = НастройкиТелефонии.ИспользоватьAvayaMediaLibrary; 
		АктивироватьЛог = НастройкиТелефонии.АктивироватьЛог;	
		Если ЗначениеЗаполнено(АктивироватьЛог) Тогда
			КаталогСохраненияЛоговТелефонии = НастройкиТелефонии.КаталогСохраненияЛоговТелефонии;
			Если ЗначениеЗаполнено(КаталогСохраненияЛоговТелефонии) Тогда
				Попытка
					СоздатьКаталог(КаталогСохраненияЛоговТелефонии);
					ИмяФайлаСохраненияЛоговТелефонии = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Строка(ПользователиКлиентСервер.АвторизованныйПользователь()) + " " + Строка(ТекущаяДата()), "");
					глТелефония["ФайлСохраненияЛоговТелефонии"] = КаталогСохраненияЛоговТелефонии + "\" + ИмяФайлаСохраненияЛоговТелефонии + ".txt";
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	
		
		Возврат НастройкиТелефонии;
	КонецЕсли;	
		
КонецФункции

Функция ДобавитьЗвонокВСписокТекущих(НомерТелефона, ИмяСобытия, Входящий = Истина, CallId_Avaya = "") Экспорт
	
	ПараметрыЗвонка = УправлениеТелефониейКлиентСервер.ПолучитьПустуюСтруктуруЗвонка();
	
	ПараметрыЗвонка.ID_Звонка = Строка(Новый УникальныйИдентификатор);
	ПараметрыЗвонка.ДатаНачалаЗвонка = ТекущаяДата();	
	Если Входящий Тогда
		ПараметрыЗвонка.ВызывающийНомер = НомерТелефона;
		ПараметрыЗвонка.ВызываемыйНомер = глТелефония["deviceID"];
	Иначе
		ПараметрыЗвонка.ВызывающийНомер = глТелефония["deviceID"];
		ПараметрыЗвонка.ВызываемыйНомер = НомерТелефона;		
	КонецЕсли;
	ПараметрыЗвонка.ПредставлениеНомераТелефона	= УправлениеТелефониейКлиентСервер.ПривестиТелефонКВиду(НомерТелефона);
	ПараметрыЗвонка.ЭтоВнутреннийВызов = (СтрДлина(НомерТелефона) = 4);
	ПараметрыЗвонка.ИдентификаторСессииТелефонии = глТелефония["ИдентификаторСессииТелефонии"];
	ПараметрыЗвонка.ИдентификаторСеансаТелефонии = глТелефония["ИдентификаторСеансаТелефонии"];			
	ПараметрыЗвонка.НомерТелефона = НомерТелефона;
	ПараметрыЗвонка.Направление = Входящий;
	ПараметрыЗвонка.НовыйВызов = Истина;
	ПараметрыЗвонка.ПерезаписатьЗапрос = Ложь;
	ПараметрыЗвонка.ПерезаписатьКонтакт = Ложь;
	ПараметрыЗвонка.НомерЛинии = ПолучитьНомерСвободнойЛинии();
	ПараметрыЗвонка.CallId_Avaya = CallId_Avaya;

	Если ЗначениеЗаполнено(глТелефония["ЗаявкаИнициатор"]) Тогда
		ПараметрыЗвонка.ЗаявкаИнициатор = глТелефония["ЗаявкаИнициатор"];
		глТелефония["ЗаявкаИнициатор"] = Неопределено;
	КонецЕсли;	
		
	УправлениеТелефониейСервер.ЗаписатьЗвонок(ПараметрыЗвонка);
	
	глТекущиеЗвонки.Добавить(ПараметрыЗвонка);
	
	ВосстановитьТекущееСостояние(ПараметрыЗвонка);
	
	Оповестить(ИмяСобытия, ПараметрыЗвонка, "Телефония");
	
	Возврат ПараметрыЗвонка;
	
КонецФункции

Функция ОбновитьПараметрыЗвонка(ПараметрыЗвонка, ИмяСобытия, СостояниеЗвонка, УдалятьЗвонокИзСпискаТекущих = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыЗвонка.ID_Звонка) Тогда	
		ТекущаяДата = ТекущаяДата();
		Если ИмяСобытия = "НачалоРазговора" Тогда
			ПараметрыЗвонка.ДатаНачалаРазговора = ТекущаяДата;
		ИначеЕсли ИмяСобытия = "ОкончаниеЗвонка" Тогда
			ПараметрыЗвонка.ДатаОкончанияЗвонка = ТекущаяДата;
		ИначеЕсли ИмяСобытия = "ПереводЗвонка" Тогда
			ПараметрыЗвонка.ДатаПеренаправленияЗвонка = ТекущаяДата;
		КонецЕсли;
		
		ПараметрыЗвонка.СостояниеЗвонка = СостояниеЗвонка;
		Если СостояниеЗвонка = ПредопределенноеЗначение("Перечисление.СостоянияТелефонныхЗвонков.НеПринят") Тогда
			ПараметрыЗвонка.ДлительностьВызова = ТекущаяДата - ПараметрыЗвонка.ДатаНачалаЗвонка;
			ПараметрыЗвонка.ДлительностьРазговора = 0;
		Иначе
			Если ЗначениеЗаполнено(ПараметрыЗвонка.ДатаНачалаРазговора) Тогда
				ПараметрыЗвонка.ДлительностьВызова = ПараметрыЗвонка.ДатаНачалаРазговора - ПараметрыЗвонка.ДатаНачалаЗвонка;
				ПараметрыЗвонка.ДлительностьРазговора = ТекущаяДата - ПараметрыЗвонка.ДатаНачалаРазговора;
			Иначе
				ПараметрыЗвонка.ДлительностьВызова = ТекущаяДата - ПараметрыЗвонка.ДатаНачалаЗвонка;
				ПараметрыЗвонка.ДлительностьРазговора = 0;
			КонецЕсли;
		КонецЕсли;		
		ПараметрыЗвонка.ДлительностьЗвонка = ПараметрыЗвонка.ДлительностьВызова + ПараметрыЗвонка.ДлительностьРазговора;	
		ПараметрыЗвонка.ПредставлениеНомераТелефона	= УправлениеТелефониейКлиентСервер.ПривестиТелефонКВиду(ПараметрыЗвонка.НомерТелефона);
		ПараметрыЗвонка.ЭтоВнутреннийВызов = (СтрДлина(ПараметрыЗвонка.НомерТелефона) = 4);
		Если ЗначениеЗаполнено(ПараметрыЗвонка.UCID) Тогда
			Попытка
				Если НЕ ЗначениеЗаполнено(УправлениеТелефониейКлиентСервер.УдалениеЛидирующихНулейВНомере(ПараметрыЗвонка.UCID)) Тогда
					ПараметрыЗвонка.UCID = "";	
				КонецЕсли;
			Исключение
				ПараметрыЗвонка.UCID = "";
			КонецПопытки;
		КонецЕсли;
		
		УправлениеТелефониейСервер.ЗаписатьЗвонок(ПараметрыЗвонка);
			
		Если УдалятьЗвонокИзСпискаТекущих Тогда
			Оповестить(ИмяСобытия, ПараметрыЗвонка, "Телефония");
			УдалитьЗвонокИзСпискаТекущих(ПараметрыЗвонка.НомерТелефона);			
		Иначе		
			ОбновитьЗвонокВСпискеТекущих(ПараметрыЗвонка);
		КонецЕсли;
		
		ВосстановитьТекущееСостояние(ПараметрыЗвонка);
		
		Оповестить(ИмяСобытия, ПараметрыЗвонка, "Телефония");
		
	КонецЕсли;
	
	Возврат ПараметрыЗвонка;	
	
КонецФункции

Функция ПолучитьНомерТекущегоРазговора(НомерТелефона) Экспорт
	
	Для й = 0 По глТекущиеЗвонки.ВГраница() Цикл
		Если глТекущиеЗвонки[й].НомерТелефона = НомерТелефона Тогда
			Возврат глТекущиеЗвонки[й].НомерТелефона;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат "";
	
КонецФункции

Функция ПолучитьНомерСвободнойЛинии(МаксЛиния = 3) Экспорт
		
	СвободныеЛинии = Новый Массив;
	Для й = 1 по МаксЛиния Цикл
		Если НЕ ЛинияЗанята(й) Тогда
			СвободныеЛинии.Добавить(й);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолучитьМин(СвободныеЛинии);		
	
КонецФункции

Функция ЛинияЗанята(НомерЛинии) Экспорт
	
	Для каждого ПараметрЗвонка Из глТекущиеЗвонки Цикл
		Если ПараметрЗвонка.НомерЛинии = НомерЛинии Тогда
			Возврат Истина;	
		КонецЕсли;
	КонецЦикла;		
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьНомерЛинииВСпискеТекущих(НомерТелефона) Экспорт
	
	Для й = 0 По глТекущиеЗвонки.ВГраница() Цикл
		Если глТекущиеЗвонки[й].НомерТелефона = НомерТелефона Тогда
			//Возврат й + 1;
			Возврат глТекущиеЗвонки[й].НомерЛинии;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат 0;
	
КонецФункции

Процедура ОбновитьЗвонокВСпискеТекущих(ПараметрыЗвонка) Экспорт
	
	Если ПараметрыЗвонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗвонокНайден = Ложь;
	Для й = 0 По глТекущиеЗвонки.ВГраница() Цикл
		Если глТекущиеЗвонки[й].НомерТелефона = ПараметрыЗвонка.НомерТелефона Тогда
			ЗвонокНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
	Если ЗвонокНайден Тогда
		глТекущиеЗвонки.Установить(й, ПараметрыЗвонка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыЗвонка(НомерТелефона = "", НомерЛинии = 0, ID_Звонка = "") Экспорт
	
	Для Каждого ПараметрыЗвонка Из глТекущиеЗвонки Цикл  
		Если ЗначениеЗаполнено(НомерЛинии) Тогда
			Если ПараметрыЗвонка.НомерЛинии = НомерЛинии Тогда
				Возврат ПараметрыЗвонка;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ID_Звонка) Тогда
			Если ПараметрыЗвонка.ID_Звонка = ID_Звонка Тогда
				Возврат ПараметрыЗвонка;
			КонецЕсли;			
		ИначеЕсли ЗначениеЗаполнено(НомерТелефона) Тогда
			Если ПараметрыЗвонка.НомерТелефона = НомерТелефона Тогда
				Возврат ПараметрыЗвонка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	//Возврат УправлениеТелефониейКлиентСервер.ПолучитьПустуюСтруктуруЗвонка();
	
КонецФункции

Функция ПолучитьПараметрыЗвонкаПоCallId(CallId_Avaya) Экспорт
	
	Если ЗначениеЗаполнено(CallId_Avaya) Тогда
		Для Каждого ПараметрыЗвонка Из глТекущиеЗвонки Цикл  
			Если ПараметрыЗвонка.CallId_Avaya = CallId_Avaya Тогда
				Возврат ПараметрыЗвонка;
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;	
	//Возврат УправлениеТелефониейКлиентСервер.ПолучитьПустуюСтруктуруЗвонка();
	
КонецФункции

Процедура УдалитьЗвонокИзСпискаТекущих(НомерТелефона)
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		Индекс = 0;
		Для Каждого ПараметрыЗвонка Из глТекущиеЗвонки Цикл
			Если ПараметрыЗвонка.НомерТелефона = НомерТелефона Тогда
				глТекущиеЗвонки.Удалить(Индекс);				
				Если глТелефония["НомерТелефона"] = НомерТелефона Тогда
					глТелефония["НомерТелефона"] = "";
				КонецЕсли;
					Прервать;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьТекущиеЗвонки() Экспорт
	
	УправлениеТелефониейКлиент.ОчиститьПараметрыПопыткиПереадресации();
	Индекс = глТекущиеЗвонки.ВГраница();
	Пока Индекс >= 0 Цикл
		ПараметрыЗвонка = глТекущиеЗвонки[Индекс];		
		Если ПараметрыЗвонка.СостояниеЗвонка = ПредопределенноеЗначение("Перечисление.СостоянияТелефонныхЗвонков.Вызов") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыЗвонка.ДатаНачалаРазговора) Тогда 
			СостояниеЗвонка = ПредопределенноеЗначение("Перечисление.СостоянияТелефонныхЗвонков.НеПринят");
		Иначе
			СостояниеЗвонка = ПредопределенноеЗначение("Перечисление.СостоянияТелефонныхЗвонков.Принят");
		КонецЕсли;
		УправлениеТелефониейКлиент.ОбновитьПараметрыЗвонка(ПараметрыЗвонка, "ОкончаниеЗвонка", СостояниеЗвонка, Истина);		
		Индекс = Индекс - 1;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьНомерИзСообщенияЛога(Данные, Курсор, ТекущаяСтрока = Ложь, Идентификатор = Ложь) Экспорт
	
	Результат = "";
	ИндексНачала = Найти(Данные, Курсор); 
	Если ИндексНачала > 0 Тогда
		Если ТекущаяСтрока Тогда
			ПредставлениеНомера = Лев(Сред(Данные, ИндексНачала), Найти(Сред(Данные, ИндексНачала), Символы.ПС));
		Иначе	
			ПредставлениеНомера = Сред(Данные, ИндексНачала + СтрДлина(Курсор));
		КонецЕсли;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПредставлениеНомера);	
		Для Каждого ЭлементМассива Из МассивПодстрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЭлементМассива) И ?(Идентификатор, СтрДлина(ЭлементМассива) > 0, СтрДлина(ЭлементМассива) > 2) Тогда
				Результат = УправлениеТелефониейКлиентСервер.ТолькоДопустимыеСимволыНомера(ЭлементМассива); //УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(ЭлементМассива);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатусТелефонии() Экспорт 
	
	Результат = Неопределено;
	Если глТелефония["Активирована"] Тогда 
		Результат = "Есть подключение";
	Иначе 
		Результат = "Нет подключения";
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Процедура ОтветитьНаЗвонок(CallId) Экспорт
	
	Если ЗначениеЗаполнено(CallId) Тогда 
		Попытка
			глAvayaMediaComponent.ОтветитьНаЗвонок(CallId);
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтклонитьЗвонок(CallId) Экспорт
	
	Если ЗначениеЗаполнено(CallId) Тогда 
		Попытка
			глAvayaMediaComponent.ОтклонитьЗвонок(CallId);
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержаниеЗвонка(CallId) Экспорт
	
	Если ЗначениеЗаполнено(CallId) Тогда 
		Попытка
			глAvayaMediaComponent.УдержаниеЗвонка(CallId);
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВозобновитьЗвонок(CallId) Экспорт
	
	Если ЗначениеЗаполнено(CallId) Тогда 
		Попытка
			глAvayaMediaComponent.ВозобновитьЗвонок(CallId);
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрерватьСоединение(CallId) Экспорт
	
	Если ЗначениеЗаполнено(CallId) Тогда 
		Попытка
			глAvayaMediaComponent.ПрерватьСоединение(CallId);
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СделатьЗвонок(НомерТелефона) Экспорт
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда 
		Попытка			
			Если глТекущиеЗвонки.Количество() Тогда
				Результат = глAvayaMediaComponent.ДобавитьЗвонок(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(НомерТелефона));	
			Иначе
				Результат = глAvayaMediaComponent.СделатьЗвонок(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(НомерТелефона));
			КонецЕсли;
			//Результат = глAvayaMediaComponent.НовыйЗвонок(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(НомерТелефона));
		Исключение	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Телефония: СделатьЗвонок(): " + ОписаниеОшибки());
		КонецПопытки;
		Если Не ПустаяСтрока(Результат) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередатьЗвонок(НомерДляПереадресации) Экспорт
	
	Если ЗначениеЗаполнено(НомерДляПереадресации) Тогда 
		Попытка
			Результат = глAvayaMediaComponent.ПередатьЗвонок(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(НомерДляПереадресации));
		Исключение	
		КонецПопытки;
		Если Не ПустаяСтрока(Результат) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправляемаяПередачаЗвонка(НомерДляПереадресации) Экспорт
	
	Если ЗначениеЗаполнено(НомерДляПереадресации) Тогда 
		УстановитьПараметрыПопыткиПереадресации(НомерДляПереадресации);		
		Попытка
			Результат = глAvayaMediaComponent.УправляемаяПередачаЗвонка(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(НомерДляПереадресации));
		Исключение
			ОчиститьПараметрыПопыткиПереадресации();
		КонецПопытки;
		Если НЕ ПустаяСтрока(Результат) Тогда 
			Попытка
				Результат = глAvayaMediaComponent.УправляемуюПередачуПрервать();
			Исключение	
			КонецПопытки;
			Если ПустаяСтрока(Результат) Тогда 
				Попытка
					Результат = глAvayaMediaComponent.УправляемаяПередачаЗвонка(УправлениеТелефониейКлиентСервер.АнализВызываемогоНомера(НомерДляПереадресации));
				Исключение	
				КонецПопытки;
				Если НЕ ПустаяСтрока(Результат) Тогда
					ОчиститьПараметрыПопыткиПереадресации();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат); 
				КонецЕсли;
			Иначе
				ОчиститьПараметрыПопыткиПереадресации();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);	
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправляемуюПередачуВыполнить() Экспорт
	
	Попытка
		Результат = глAvayaMediaComponent.УправляемуюПередачуВыполнить();
	Исключение	
	КонецПопытки;
	Если Не ПустаяСтрока(Результат) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат); 
	КонецЕсли;
	
КонецПроцедуры

Процедура УправляемуюПередачуПрервать() Экспорт
	
	Попытка
		Результат = глAvayaMediaComponent.УправляемуюПередачуПрервать();
	Исключение	
	КонецПопытки;
	Если Не ПустаяСтрока(Результат) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат); 
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыПопыткиПереадресации(НомерДляПереадресации) Экспорт
	
	Если НЕ глТекущиеЗвонки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(глТелефония["НомерТелефона"]) Тогда
		ПараметрыЗвонка = ПолучитьПараметрыЗвонка(глТелефония["НомерТелефона"]);
		Если ПараметрыЗвонка = Неопределено Тогда
			ПараметрыЗвонка = глТелефония.ПараметрыЗвонка;
		КонецЕсли;
	Иначе 	
		ПараметрыЗвонка = глТекущиеЗвонки[глТекущиеЗвонки.ВГраница()]; //test
	КонецЕсли;
		
	глТелефония.Состояние_ПопыткаПереадресации["ПопыткаПереадресации"] = Истина;
	глТелефония.Состояние_ПопыткаПереадресации["ДатаПеренаправленияЗвонка"] = ТекущаяДата();	
	глТелефония.Состояние_ПопыткаПереадресации["ПеренаправленС"] = глТелефония["НомерТелефона"];
	глТелефония.Состояние_ПопыткаПереадресации["ПеренаправленНа"] = НомерДляПереадресации;
	глТелефония.Состояние_ПопыткаПереадресации["ID_Перенапраление"] = ПараметрыЗвонка.ID_Звонка;
	глТелефония.Состояние_ПопыткаПереадресации["ID_Группы"] = ?(ЗначениеЗаполнено(ПараметрыЗвонка.ID_Группы), ПараметрыЗвонка.ID_Группы, ПараметрыЗвонка.ID_Звонка);
	глТелефония.Состояние_ПопыткаПереадресации["UCID_Перенапраление"] = ПараметрыЗвонка.UCID;
	глТелефония.Состояние_ПопыткаПереадресации["First_CallId"] = ?(ЗначениеЗаполнено(ПараметрыЗвонка.First_CallId), ПараметрыЗвонка.First_CallId, ПараметрыЗвонка.CallId_Avaya);
	глТелефония.Состояние_ПопыткаПереадресации["Primary_CallId"] = ПараметрыЗвонка.CallId_Avaya;		
	
	ПараметрыЗвонка.First_CallId = глТелефония.Состояние_ПопыткаПереадресации["First_CallId"];
	ПараметрыЗвонка.ID_Группы = глТелефония.Состояние_ПопыткаПереадресации["ID_Группы"];
	
КонецПроцедуры

Процедура ОчиститьПараметрыПопыткиПереадресации() Экспорт
	
	глТелефония.Состояние_ПопыткаПереадресации["ПопыткаПереадресации"] = Ложь;
	глТелефония.Состояние_ПопыткаПереадресации["ДатаПеренаправленияЗвонка"] = Дата(1, 1, 1);	
	глТелефония.Состояние_ПопыткаПереадресации["ПеренаправленС"] = "";
	глТелефония.Состояние_ПопыткаПереадресации["ПеренаправленНа"] = "";
	глТелефония.Состояние_ПопыткаПереадресации["ID_Перенапраление"] = "";
	глТелефония.Состояние_ПопыткаПереадресации["ID_Группы"] = "";
	глТелефония.Состояние_ПопыткаПереадресации["UCID_Перенапраление"] = "";
	глТелефония.Состояние_ПопыткаПереадресации["First_CallId"] = "";
	глТелефония.Состояние_ПопыткаПереадресации["Primary_CallId"] = "";	
	
КонецПроцедуры

Процедура ВывестиСообщениеЛога(ТекстСообщения = "") Экспорт
	
	Если глТелефония["АктивироватьЛог"] Тогда 
		Если ЗначениеЗаполнено(глТелефония["ФайлСохраненияЛоговТелефонии"]) Тогда
			СформироватьЗаписьЛогаТелефонии(глТелефония["ФайлСохраненияЛоговТелефонии"], ТекстСообщения);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьКарточкуЗвонка() Экспорт
	
	ИмяФормы = "Обработка.Телефония.Форма.КарточкаЗвонка";
	Форма = ПолучитьФорму(ИмяФормы, , , , );
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
	Иначе
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьКарточкуЗвонка() Экспорт
	
	ИмяФормы = "Обработка.Телефония.Форма.КарточкаЗвонка";
	Форма = ПолучитьФорму(ИмяФормы, , , , );
	Если Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМакс(Массив)
	
	Если Массив.Количество() Тогда
		Макс = Массив[0];
		Для Индекс = 0 По Массив.ВГраница() Цикл
			Если Массив[Индекс] > Массив[Макс] Тогда
				Макс = Массив[Индекс];
			КонецЕсли;
		КонецЦикла;
		
		Возврат Макс;
    КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПолучитьМин(Массив)
	
	Если Массив.Количество() Тогда
		Мин = Массив[0];
		Для Индекс = 0 По Массив.ВГраница() Цикл
			Если Массив[Индекс] < Мин Тогда
				Мин = Массив[Индекс];
			КонецЕсли;
		КонецЦикла;
		
		Возврат Мин;
    КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура ВосстановитьТекущееСостояние(ПараметрыЗвонка)
	
	_ПараметрыЗвонка = ПолучитьПараметрыЗвонка(ПараметрыЗвонка.НомерТелефона);
	Если _ПараметрыЗвонка = Неопределено Тогда
		Для каждого Звонок Из глТекущиеЗвонки Цикл
			Если Звонок.СостояниеЗвонка = ПредопределенноеЗначение("Перечисление.СостоянияТелефонныхЗвонков.Разговор") Тогда				
				_ПараметрыЗвонка = Звонок;	
			КонецЕсли;	
		КонецЦикла;
		_ПараметрыЗвонка = ?(_ПараметрыЗвонка = Неопределено, УправлениеТелефониейКлиентСервер.ПолучитьПустуюСтруктуруЗвонка(), _ПараметрыЗвонка);
	КонецЕсли;
	
	глТелефония["НомерТелефона"] = ПолучитьНомерТекущегоРазговора(_ПараметрыЗвонка.НомерТелефона);
	глТелефония["НомерЛинии"] = ПолучитьНомерЛинииВСпискеТекущих(_ПараметрыЗвонка.НомерТелефона);
	глТелефония["ПараметрыЗвонка"] = _ПараметрыЗвонка;
	
КонецПроцедуры

Процедура СформироватьЗаписьЛогаТелефонии(ИмяФайла, Текст) Экспорт
	
	#Если НЕ ВебКлиент Тогда 
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		Лог = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI, , Истина);
		Лог.ЗаписатьСтроку(Текст);
		Лог.ЗаписатьСтроку("");
		Лог.Закрыть();
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

#КонецОбласти
