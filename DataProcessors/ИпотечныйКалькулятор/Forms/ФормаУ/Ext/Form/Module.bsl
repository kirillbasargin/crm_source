
&НаСервере
Функция ВернутьШаблонПечатнойФормы(ВидШаблона, СпецПрограмма = Неопределено)
	
	Запрос = Новый Запрос;  
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныИК.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ШаблоныИК
	|ИЗ
	|	Справочник.ШаблоныИК КАК ШаблоныИК
	|ГДЕ
	|	ШаблоныИК.Проект = &Проект
	|	И ШаблоныИК.ВидКредита = &ВидКредита
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииШаблоновИКСрезПоследних.Макет КАК Макет,
	|	ВерсииШаблоновИКСрезПоследних.Период КАК Период,
	|	ВерсииШаблоновИКСрезПоследних.Шаблон КАК Шаблон,
	|	ВерсииШаблоновИКСрезПоследних.СпецПрограмма КАК СпецПрограмма
	|ИЗ
	|	РегистрСведений.ВерсииШаблоновИК.СрезПоследних(
	|			,
	|			Шаблон В
	|					(ВЫБРАТЬ
	|						ВТ_ШаблоныИК.Ссылка
	|					ИЗ
	|						ВТ_ШаблоныИК КАК ВТ_ШаблоныИК)
	|				И СпецПрограмма = &СпецПрограмма) КАК ВерсииШаблоновИКСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
		
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("ВидКредита", Объект.ВидКредита);

	Если СпецПрограмма = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СпецПрограмма = &СпецПрограмма", "");
	Иначе
		Запрос.УстановитьПараметр("СпецПрограмма", СпецПрограмма);		
	КонецЕсли;	
		
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат.Макет.Получить();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден шаблон печатной формы");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыКредита(Поиск, СуммаКредита)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Комиссия = 0;
	Страхование = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1 
		|	УсловияИпотечногоКредитованияСрезПоследних.МаксимальныйРазмерКомиссии КАК МаксимальныйРазмерКомиссии,
		|	УсловияИпотечногоКредитованияСрезПоследних.МинимальныйРазмерКомиссии КАК МинимальныйРазмерКомиссии,
		|	УсловияИпотечногоКредитованияСрезПоследних.ДополнительныеРасходы КАК Страхование,
		|	УсловияИпотечногоКредитованияСрезПоследних.Комиссия КАК Комиссия
		|ИЗ
		|	РегистрСведений.УсловияИпотечногоКредитования.СрезПоследних(
		|			,
		|			Банк = &Банк
		|				И Проект = &Проект
		|				И ТипОбъекта = &ТипОбъекта
		|				И ВидКредита = &ВидКредита) КАК УсловияИпотечногоКредитованияСрезПоследних";
	
	Запрос.УстановитьПараметр("Банк", Поиск.Банк);
	Запрос.УстановитьПараметр("ВидКредита", Поиск.ВидКредита);
	Запрос.УстановитьПараметр("Проект", ПолучитьГруппуПроекта(Поиск.Проект));
	Запрос.УстановитьПараметр("ТипОбъекта", Поиск.ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблСрез =  РезультатЗапроса.Выгрузить();	
		//ТаблСрез = РегистрыСведений.УсловияИпотечногоКредитования.СрезПоследних(ТекущаяДата(), Поиск);
		Если ТаблСрез.Количество()>0 Тогда
			Комиссия = ТаблСрез[0].Комиссия;
			Если Комиссия <= 100 Тогда
				Комиссия = СуммаКредита*Комиссия/100;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТаблСрез[0].МаксимальныйРазмерКомиссии) И Комиссия > ТаблСрез[0].МаксимальныйРазмерКомиссии Тогда
				Комиссия = ТаблСрез[0].МаксимальныйРазмерКомиссии;
			КонецЕсли;	
			// 25092014 Тимко ID 326067
			Если ЗначениеЗаполнено(ТаблСрез[0].МинимальныйРазмерКомиссии) И Комиссия < ТаблСрез[0].МинимальныйРазмерКомиссии Тогда
				Комиссия = ТаблСрез[0].МинимальныйРазмерКомиссии;
			КонецЕсли;	
			Страхование = ТаблСрез[0].Страхование
		КонецЕсли;		
	КонецЕсли;
	
	Структура = Новый Структура("Комиссия, Страхование", Комиссия,  Страхование);
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПолучитьГруппуПроекта(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	МультикалькуляторГруппыПроектов.ГруппаПроектов КАК ГруппаПроектов
	|ИЗ
	|	РегистрСведений.МультикалькуляторГруппыПроектов КАК МультикалькуляторГруппыПроектов
	|ГДЕ
	|	МультикалькуляторГруппыПроектов.Проект = &Проект
	|	И МультикалькуляторГруппыПроектов.Активен";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	    ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.ГруппаПроектов;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПечатьWord_ТаблицаРасчетов()

	ИсходныеНомераСтрок = Новый Массив;
	Для Каждого Эл Из Объект.ТаблицаРасчетов Цикл
		Если НЕ ИсходныеНомераСтрок.Найти(Эл.ИсходныйНомерСтроки) = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		НайденныеСтроки = Объект.ТаблицаРасчетов.НайтиСтроки(Новый Структура("СпециальнаяПрограмма", Эл.СпециальнаяПрограмма));
		Для каждого Строка Из НайденныеСтроки Цикл
			Если ИсходныеНомераСтрок.Найти(Строка.ИсходныйНомерСтроки) = Неопределено Тогда
				ИсходныеНомераСтрок.Добавить(Строка.ИсходныйНомерСтроки);
			КонецЕсли;
		КонецЦикла;
		ПечатьWord_ТекущаяСтрока(Эл, НайденныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьWord_ТекущаяСтрока(Элемент, НайденныеСтроки)
	
	Если НЕ НайденныеСтроки.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены все параметры для расчета");
		Возврат;	
	КонецЕсли; 
		
	Шаблон = ВернутьШаблонПечатнойФормы(ПредопределенноеЗначение("Перечисление.ВидыШаблоновИК.ШаблонКалькулятора"), Элемент.СпециальнаяПрограмма);
	Если Шаблон = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("doc");
	Шаблон.Записать(ИмяФайла);
	
	Попытка		
		WordApplication = Новый COMОбъект("WORD.Application");
		WordApplication.Visible = 1; 
		WordApplication.Activate();
		WordApplication.WindowState = 2;	
		
		НовыйДокумент = WordApplication.Documents.Open(ИмяФайла);		
		
		НомерСтроки = 2;
		ТаблицаКредитов = НовыйДокумент.Tables(2);
		
		Для каждого Эл Из НайденныеСтроки Цикл
		
			НомерСтроки = НомерСтроки+1;    
			Поиск = Новый Структура("Банк, ВидКредита, Проект, ТипОбъекта", эл.Банк, Объект.ВидКредита, Объект.Проект, Объект.ТипОбъекта);			
			СтруктураПараметровКредита = ПолучитьПараметрыКредита(Поиск, Эл.СуммаКредита);		
			
			ТаблицаКредитов.Cell(НомерСтроки, 1).Range().InsertAfter(Строка(Эл.Банк));
			ТаблицаКредитов.Cell(НомерСтроки, 2).Range().InsertAfter(Строка(Эл.ПроцентнаяСтавкаЛьготныйПериод));			
			ТаблицаКредитов.Cell(НомерСтроки, 3).Range().InsertAfter(Строка(Эл.ПроцентнаяСтавка));
			ТаблицаКредитов.Cell(НомерСтроки, 4).Range().InsertAfter(Строка(Эл.СрокЗайма) + " (" + Окр(Эл.СрокЗайма/12)+")");
			ТаблицаКредитов.Cell(НомерСтроки, 5).Range().InsertAfter(Строка(Эл.ЕжемесячныйПлатежЛьготныйПериод));	
			ТаблицаКредитов.Cell(НомерСтроки, 6).Range().InsertAfter(Строка(Эл.ЕжемесячныйПлатеж));						
			ТаблицаКредитов.Cell(НомерСтроки, 7).Range().InsertAfter(Строка(Эл.ЕжемесячныйДоход));	
			//ТаблицаКредитов.Cell(НомерСтроки, 8).Range().InsertAfter(Строка(Формат(СтруктураПараметровКредита.Комиссия,"ЧЦ=10; ЧДЦ=2; ЧН=0")));
			ТаблицаКредитов.Cell(НомерСтроки, 8).Range().InsertAfter(Строка(СтруктураПараметровКредита.Страхование));
						
			Если НайденныеСтроки.Количество() > (НомерСтроки - 2) Тогда  // Объект.ТаблицаРасчетов
				ТаблицаКредитов.Rows.Add();
			КонецЕсли;	
			
		КонецЦикла;	
							
		ПВП = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[СтоимостьКвартиры]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СтоимостьКвартиры));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ПервоначальныйВзнос]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(?(Объект.ПервоначальныйВзнос=0,"0",Объект.ПервоначальныйВзнос)));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ПервоначальныйВзносПроценты]", Ложь, Истина, Ложь, , , Истина, , Ложь, ?(ПВП=0,"0",Строка(Формат(ПВП,"ЧДЦ=2"))));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[РазмерКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаРасчета]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаРасчета]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));
		
		Если ЗначениеЗаполнено(НайденныеСтроки[0].СпециальнаяПрограмма) Тогда		
			ЗаменаКонтента = НовыйДокумент.content.Find;
			ЗаменаКонтента.Execute("[СпециальнаяПрограмма]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(НайденныеСтроки[0].СпециальнаяПрограмма));
		Иначе
			ЗаменаКонтента = НовыйДокумент.content.Find;
			ЗаменаКонтента.Execute("Специальная программа", Ложь, Истина, Ложь, , , Истина, , Ложь, "");
			ЗаменаКонтента = НовыйДокумент.content.Find;
			ЗаменаКонтента.Execute("[СпециальнаяПрограмма]", Ложь, Истина, Ложь, , , Истина, , Ложь, "");			
		КонецЕсли;	
			
		//ЗаменаКонтента = НовыйДокумент.content.Find;
		//ЗаменаКонтента.Execute("[ПроцентнаяСтавкаЛьготныйПериод]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(НайденныеСтроки[0].ПроцентнаяСтавкаЛьготныйПериод));
		//
		//ЗаменаКонтента = НовыйДокумент.content.Find;
		//ЗаменаКонтента.Execute("[ЕжемесячныйПлатежЛьготныйПериод]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(НайденныеСтроки[0].ЕжемесячныйПлатежЛьготныйПериод));
			
		//Если Элемент.СпециальнаяПрограмма = ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ИпотечныеКаникулы") Тогда
		//	ЗаменаКонтента = НовыйДокумент.content.Find;
		//	ЗаменаКонтента.Execute("[СрокИпотечныхКаникул]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(?(ПереключательСрокКаникул = 1, "24 (2)", "12 (1)")));		
		//КонецЕсли; 
		
	Исключение
		WordApplication = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура Записать()
	
	//Для Каждого Эл Из Объект.ТаблицаРасчетов Цикл
	//	Попытка 
	//		Док = Документы.РасчетИпотеки.СоздатьДокумент();		
	//		ЗаполнитьЗначенияСвойств(Док, Объект);
	//		ЗаполнитьЗначенияСвойств(Док, Эл);
	//		Док.Дата = ТекущаяДата();
	//		Док.УстановитьНовыйНомер();			
	//		Док.Записать();		
	//	Исключение
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать документ расчет ипотеки : " + ОписаниеОшибки());
	//	КонецПопытки;			
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГрафика(ВидПлатежа)
	
	Шаблон = ВернутьШаблонПечатнойФормы(ПредопределенноеЗначение("Перечисление.ВидыШаблоновИК.ШаблонГрафикаПлатежей"));
	Если Шаблон = Неопределено Тогда Возврат КонецЕсли; 
	ИмяФайла = ПолучитьИмяВременногоФайла("doc");
	Шаблон.Записать(ИмяФайла);
	
	Попытка
		
		WordApplication = Новый COMОбъект("WORD.Application");
		WordApplication.Visible = 1; 
		WordApplication.Activate();
		WordApplication.WindowState = 2;	
		
		НовыйДокумент = WordApplication.Documents.Open(ИмяФайла);		
		//Таблица
		НомерСтроки = 2;
		ТаблицаГрафика = НовыйДокумент.Tables(2);
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ВидПлатежа]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(ВидПлатежа));

		
		Для Каждого Эл Из Объект.ТаблицаГрафика Цикл
			НомерСтроки = НомерСтроки+1;    
			ТаблицаГрафика.Cell(НомерСтроки,1).Range().InsertAfter(Строка(Эл.НомерСтроки));
			ТаблицаГрафика.Cell(НомерСтроки,2).Range().InsertAfter(Строка(Формат(Эл.ДатаПлатежа, "ДФ=dd.MM.yyyy")));	
			
			Если ВидПлатежа = "Аннуитетный" Тогда
				ТаблицаГрафика.Cell(НомерСтроки,3).Range().InsertAfter(Строка(Эл.АП_Всего));
				ТаблицаГрафика.Cell(НомерСтроки,4).Range().InsertAfter(Строка(Эл.АП_ПогашениеДолга));	    
				ТаблицаГрафика.Cell(НомерСтроки,5).Range().InsertAfter(Строка(Эл.АП_ПогашениеПроцентов));	
				ТаблицаГрафика.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Эл.АП_ОстатокДолга));	
			Иначе
				
				ТаблицаГрафика.Cell(НомерСтроки,3).Range().InsertAfter(Строка(Эл.ДП_Всего));
				ТаблицаГрафика.Cell(НомерСтроки,4).Range().InsertAfter(Строка(Эл.ДП_ПогашениеДолга));	    
				ТаблицаГрафика.Cell(НомерСтроки,5).Range().InsertAfter(Строка(Эл.ДП_ПогашениеПроцентов));	
				ТаблицаГрафика.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Эл.ДП_ОстатокДолга));	
			КонецЕсли;
			Если Объект.ТаблицаГрафика.Количество()>(НомерСтроки-2) Тогда
				ТаблицаГрафика.Rows.Add();
			КонецЕсли;	
		КонецЦикла;	
		
		//Шапка	
				
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[РазмерКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СуммаКредита));
				
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ПроцентнаяСтавка]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.ПроцентнаяСтавка));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[СрокЗайма]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СрокЗайма));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаВыдачиКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(Объект.ДатаВыдачиКредита, "ДФ=dd.MM.yyyy")));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаРасчета]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));

	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаКалькулятор Тогда
		Если ПроверитьЗаполнение() Тогда
			РассчитатьТаблицу();
		КонецЕсли;
	Иначе
		РассчитатьГрафикПлатежей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйРасчет(Команда)
	
	// Меняем создание нового документа на очистку текущей закладки.
	//ЭтаФорма.Закрыть();
	//ОткрытьФорму("Обработка.ИпотечныйКалькулятор.Форма.ФормаУ");
	ОчиститьТекущуюСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТекущуюСтраницу() 
	
	Если ЭтаФорма.ПодчиненныеЭлементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаГрафик" Тогда
		Объект.ПроцентнаяСтавка = 0;
		Объект.СуммаКредита = 0;
		Объект.СрокЗайма = 0;		
		Объект.АннуитетныйПлатеж = Ложь;
		Объект.ДифференцированныйПлатеж = Ложь;
		Объект.ТаблицаГрафика.Очистить();
	Иначе
		Объект.СтоимостьКвартиры = 0;
		Объект.ПервоначальныйВзнос = 0;
		Объект.Проект = Справочники.Проекты.ПустаяСсылка(); 
		ПереключательСрокКаникул = 0;
		Объект.ТаблицаРасчетов.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура РассчитатьГрафикПлатежей() 
	
	Если НЕ (Объект.АннуитетныйПлатеж или Объект.ДифференцированныйПлатеж) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите способ расчета ежемесячных платежей!");
		Возврат;
	КонецЕсли;
	
	Объект.ТаблицаГрафика.Очистить();
	АП_ОстатокДолга = Объект.СуммаКредита;
	ДП_ОстатокДолга = Объект.СуммаКредита;
	
	ПС = Объект.ПроцентнаяСтавка/100/12; // ежемесячная процентная ставка
	Икс = POW(1+ПС,-(Объект.СрокЗайма-ВыбранныйВидКредитаШагРасчетный));			
	АП_ЕжемесячныйПлатеж = Объект.СуммаКредита*ПС/(1-Икс);	
	ДП_ПогашениеДолга = Объект.СуммаКредита/Объект.СрокЗайма;
	
	ТекСтрока = 0;
	Пока ТекСтрока < Объект.СрокЗайма Цикл
		
		ТекСтрока = ТекСтрока+1;
		НоваяСтрока = Объект.ТаблицаГрафика.Добавить();
		НоваяСтрока.ОтображатьСтроку = Ложь;
		НоваяСтрока.ДатаПлатежа = ДобавитьМесяц(Объект.ДатаВыдачиКредита, ТекСтрока);
		Если Объект.АннуитетныйПлатеж Тогда
			НоваяСтрока.АП_ПогашениеПроцентов = Окр(АП_ОстатокДолга * ПС, 2);
			Если ТекСтрока = Объект.СрокЗайма Тогда
				НоваяСтрока.АП_ПогашениеДолга = АП_ОстатокДолга;
				НоваяСтрока.АП_ОстатокДолга = 0;
				НоваяСтрока.АП_Всего = АП_ОстатокДолга + НоваяСтрока.АП_ПогашениеПроцентов;
			Иначе
				НоваяСтрока.АП_Всего = АП_ЕжемесячныйПлатеж;
				НоваяСтрока.АП_ПогашениеДолга = АП_ЕжемесячныйПлатеж - НоваяСтрока.АП_ПогашениеПроцентов;
				НоваяСтрока.АП_ОстатокДолга = АП_ОстатокДолга - НоваяСтрока.АП_ПогашениеДолга;
			КонецЕсли;
			АП_ОстатокДолга = АП_ОстатокДолга - НоваяСтрока.АП_ПогашениеДолга;
		КонецЕсли;
		
		Если Объект.ДифференцированныйПлатеж Тогда
			
			НоваяСтрока.ДП_ПогашениеДолга =	ДП_ПогашениеДолга;
			НоваяСтрока.ДП_ОстатокДолга = ДП_ОстатокДолга - ДП_ПогашениеДолга;
			НоваяСтрока.ДП_ПогашениеПроцентов = ДП_ОстатокДолга * ПС;
			НоваяСтрока.ДП_Всего = НоваяСтрока.ДП_ПогашениеДолга + НоваяСтрока.ДП_ПогашениеПроцентов;
			
			ДП_ОстатокДолга = ДП_ОстатокДолга - ДП_ПогашениеДолга;	
		КонецЕсли;
		Если ТекСтрока = 1 Или ТекСтрока = Объект.СрокЗайма Тогда
			НоваяСтрока.ОтображатьСтроку = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураО = Новый ФиксированнаяСтруктура("ОтображатьСтроку", Истина);
	Элементы.ТаблицаГрафика.ОтборСтрок = СтруктураО;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКГрафикуПлатежей(Команда)
	
	ТекДанные = Элементы.ТаблицаРасчетов.ТекущиеДанные;
	Объект.ПроцентнаяСтавка = ТекДанные.ПроцентнаяСтавка;
	Объект.СрокЗайма = ТекДанные.СрокЗайма;
	Объект.СуммаКредита = ТекДанные.СуммаКредита;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаГрафик;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаКалькулятор Тогда			
		ПечатьWord_ТаблицаРасчетов();
	Иначе
		РассчитатьГрафикПлатежей();
		Если Объект.АннуитетныйПлатеж Тогда
			ВидПлатежа = "Аннуитетный";
			ПечатьГрафика(ВидПлатежа);
		КонецЕсли;	
		Если Объект.ДифференцированныйПлатеж Тогда
			ВидПлатежа = "Дифференцированный";
			ПечатьГрафика(ВидПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
                
&НаСервере
Процедура ЗаполнитьСписокПроектов()
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Квартирограмма.ОбъектСтроительства.Проект КАК Проект
	               |ИЗ
	               |	РегистрСведений.Квартирограмма КАК Квартирограмма
	               |ГДЕ
	               |	(Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЖилаяНедвижимость)
	               |			ИЛИ Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЗемельныйУчасток))
	               |	И Квартирограмма.ОбъектСтроительства.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
		
	СписокПроектов.Очистить();
	рз = Запрос.Выполнить().Выбрать();
	Пока рз.Следующий() Цикл
		// Добавляем в том случае только если есть шаблон 		
		СписокПроектов.Добавить(рз.Проект);   
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокВидовКредита()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыКредитов.Ссылка
	|ИЗ
	|	Справочник.ВидыКредитов КАК ВидыКредитов
	|ГДЕ
	|	НЕ ВидыКредитов.ПометкаУдаления");	
	СписокВидовКредита.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокБанков()
	
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	//                      |	БанкиВидыКредита.Ссылка
	//                      |ИЗ
	//                      |	Справочник.Банки.ВидыКредита КАК БанкиВидыКредита
	//                      |ГДЕ
	//                      |	БанкиВидыКредита.ВидКредита = &ВидКредита
	//                      |	И БанкиВидыКредита.Ссылка.ИпотечныеКаникулы = &ИпотечныеКаникулы
	//                      |	И БанкиВидыКредита.Ссылка.ЛегкийСтартРайффайзенбанк = &ЛегкийСтартРайффайзенбанк
	//                      |	И БанкиВидыКредита.Ссылка.ИпотекаВТБ24СоСниженнойСтавкой = &ИпотекаВТБ24СоСниженнойСтавкой
	//                      |
	//                      |УПОРЯДОЧИТЬ ПО
	//                      |	БанкиВидыКредита.Ссылка.Наименование");
	//Запрос.УстановитьПараметр("ВидКредита", Объект.ВидКредита);
	
	////<>, Басаргин (13.02.2017) {
	//Если ИпотечныеКаникулы Тогда
	//	Запрос.УстановитьПараметр("ИпотечныеКаникулы", Истина);
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БанкиВидыКредита.Ссылка.ИпотечныеКаникулы = &ИпотечныеКаникулы", "");	
	//КонецЕсли; 
	////<> }
	//
	////<649547>, Басаргин (19.04.2017) {
	//Если ЛегкийСтартРайффайзенбанк Тогда
	//	Запрос.УстановитьПараметр("ЛегкийСтартРайффайзенбанк", Истина);
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БанкиВидыКредита.Ссылка.ЛегкийСтартРайффайзенбанк = &ЛегкийСтартРайффайзенбанк", "");	
	//КонецЕсли; 
	////<649547> }
	//
	////<673518>, Басаргин (22.06.2017) {	
	//Если ИпотекаВТБ24СоСниженнойСтавкой Тогда
	//	Запрос.УстановитьПараметр("ИпотекаВТБ24СоСниженнойСтавкой", Истина);
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БанкиВидыКредита.Ссылка.ИпотекаВТБ24СоСниженнойСтавкой = &ИпотекаВТБ24СоСниженнойСтавкой", "");	
	//КонецЕсли; 
	////<673518> }
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	БанкиВидыКредита.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Банки.ВидыКредита КАК БанкиВидыКредита
	                      |ГДЕ
	                      |	БанкиВидыКредита.ВидКредита = &ВидКредита
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	БанкиВидыКредита.Ссылка.Наименование");
	
	Запрос.УстановитьПараметр("ВидКредита", Объект.ВидКредита);
		
	СписокБанков.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Процедура Инициализация()	
	
	//++ Юкаев Роман 20180609 (//
	//Элементы.Декорация1.Заголовок = "Кредитный калькулятор";
	Элементы.Декорация1.Заголовок = "Калькулятор по специальным программам";
	//-- Юкаев Роман 20180609 )
	
	Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита");
	Объект.ВидКредита = Справочники.ВидыКредитов.ИпотечныйКредит;
	
	//++ Юкаев Роман 20180123 (
	Элементы.ВидКредита.СписокВыбора.Добавить(Объект.ВидКредита);
	//-- Юкаев Роман 20180123 )
	
	Объект.ДатаВыдачиКредита = ТекущаяДата();
	
	Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаЕП_ЕД.ТолькоПросмотр = Истина;	
	
	ЗаполнитьСписокВидовКредита();
	ЗаполнитьСписокПроектов();
	ЗаполнитьСписокБанков();
	
	Объект.ПроцентнаяСтавка = 0;
	Объект.СуммаКредита = 0;
	Объект.СрокЗайма = 0;		
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Инициализация();
	
	////<>, Басаргин (26.12.2016) {
	//Элементы.Переключатель.Видимость = Ложь;
	//Элементы.ВозрастЗаемщика.Видимость = Ложь;
	////<> }
	//
	////<610710>, Басаргин (25.01.2017) {
	//Элементы.ПереключательСрокКаникул.ТолькоПросмотр = НЕ ИпотечныеКаникулы;
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПериодКаникул.Видимость = ИпотечныеКаникулы;
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатеж.Заголовок = ?(ИпотечныеКаникулы, "Ежемесячный платеж после каникул", "Ежемесячный платеж");
	////<610710> }
	//
	////<649547>, Басаргин (19.04.2017) {
	//Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервыйГод.Видимость = ЛегкийСтартРайффайзенбанк;
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервыйГод.Видимость = ЛегкийСтартРайффайзенбанк;
	//Элементы.ТаблицаРасчетовПроцентнаяСтавка.Заголовок = ?(ЛегкийСтартРайффайзенбанк, "Процентная ставка на оставшийся период", "Процентная ставка");
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатеж.Заголовок = ?(ЛегкийСтартРайффайзенбанк, "Ежемесячный платеж на оставшийся период", "Ежемесячный платеж");
	////<649547> }
	//
	////<673518>, Басаргин (22.06.2017) {
	//Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервые2Года.Видимость = ИпотекаВТБ24СоСниженнойСтавкой;
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервые2Года.Видимость = ИпотекаВТБ24СоСниженнойСтавкой;
	//Элементы.ТаблицаРасчетовПроцентнаяСтавка.Заголовок = ?(ИпотекаВТБ24СоСниженнойСтавкой, "Процентная ставка с 3-го года", "Процентная ставка");
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатеж.Заголовок = ?(ИпотекаВТБ24СоСниженнойСтавкой, "Ежемесячный платеж с 3 -го года", "Ежемесячный платеж");	
	////<673518> }
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКредитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВидовКредита;
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокПроектов;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокБанков;
	
КонецПроцедуры

&НаСервере
Процедура Пересчет()	

	Если НЕ Объект.СтоимостьКвартиры = 0 или НЕ Объект.ПервоначальныйВзнос = 0 Тогда	
		Объект.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;	
		Для Каждого Стр Из Объект.ТаблицаРасчетов Цикл
			Стр.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКвартирыПриИзменении(Элемент)
	Пересчет();		
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальныйВзносПриИзменении(Элемент)	
	Пересчет();		
КонецПроцедуры

&НаКлиенте
Процедура ВидКредитаПриИзменении(Элемент)
	ЗаполнитьСписокБанков();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСуммаКредитаПриИзменении(Элемент)
	
	//Если ЗначениеЗаполнено(Элементы.ТаблицаРасчетов.ТекущиеДанные.СуммаКредита) Тогда
	//	Объект.ПервоначальныйВзнос = Объект.СтоимостьКвартиры - Элементы.ТаблицаРасчетов.ТекущиеДанные.СуммаКредита;
	//Иначе	
	//	Объект.СтоимостьКвартиры = Элементы.ТаблицаРасчетов.ТекущиеДанные.СуммаКредита + Объект.ПервоначальныйВзнос;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаКалькулятор Тогда
		Элементы.Декорация1.Заголовок = "Кредитный калькулятор";
	Иначе
		Элементы.Декорация1.Заголовок = "График платежей по кредиту";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРасчетаПриИзменении(Элемент)
	
	Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита") Тогда
		Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаЕП_ЕД.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзЕжемесячногоПлатежа") Тогда
		Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаЕП_ЕД.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭлементыПереместить(Вначало)
	
	Если Вначало Тогда
		Элементы.Переместить(Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаЕП_ЕД, Элементы.ТаблицаРасчетов, Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаБанкУсловия);
	Иначе
		Элементы.Переместить(Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаЕП_ЕД, Элементы.ТаблицаРасчетов, Элементы.ТаблицаРасчетов.ПодчиненныеЭлементы.ГруппаСуммаКредита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуНаСервере(ТекущаяКолонка)
	
	Таб = Объект.ТаблицаРасчетов.Выгрузить();
	Зн = Таб[0][ТекущаяКолонка];
	Таб.ЗаполнитьЗначения(Зн,ТекущаяКолонка);
	Объект.ТаблицаРасчетов.Загрузить(Таб);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьКолонку(Команда)
	ЗаполнитьКолонкуНаСервере(Сред(Элементы.ТаблицаРасчетов.ТекущийЭлемент.Имя,16));
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеВыше(НомерСтроки, Отказ = Ложь)

	ПереченьОбязательныхПолей = Новый СписокЗначений;
	ПереченьОбязательныхПолей.Добавить("Банк");
	//ПереченьОбязательныхПолей.Добавить("ПроцентнаяСтавка");
	//ПереченьОбязательныхПолей.Добавить("СрокЗайма");
	//Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзЕжемесячногоПлатежа") Тогда
	//	ПереченьОбязательныхПолей.Добавить("ЕжемесячныйПлатеж");
	//	ПереченьОбязательныхПолей.Добавить("ЕжемесячныйДоход");
	//КонецЕсли;
	
	Таб = Объект.ТаблицаРасчетов.Выгрузить();
	Для Каждого Колонка Из Таб.Колонки Цикл
		Если ПереченьОбязательныхПолей.НайтиПоЗначению(Колонка.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Таб[НомерСтроки][Колонка.Имя]) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед добавлением строки заполните предыдущую строку!");
			Отказ = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Элементы.ТаблицаРасчетов.ТекущаяСтрока = Неопределено Тогда
		
		Отказ = Ложь;
		СтрокаТабличнойЧасти = Объект.ТаблицаРасчетов.НайтиПоИдентификатору(Элементы.ТаблицаРасчетов.ТекущаяСтрока);
		ИндексСтроки = Объект.ТаблицаРасчетов.Индекс(СтрокаТабличнойЧасти);
		
		ПроверитьЗаполнениеВыше(ИндексСтроки, Отказ);
		Если Отказ Тогда
			СтандартнаяОбработка = Ложь;
			Возврат
		КонецЕсли;
		
		Элементы.ТаблицаРасчетов.ТекущиеДанные.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьВыбранныйВидКредита(Банк, ВидКредита)
	
	Поиск = Новый Структура("ВидКредита", ВидКредита);
	ТЗ = Банк.ВидыКредита.Выгрузить();
	
	ВидКредитаБанка = ТЗ.НайтиСтроки(Поиск);
	Если ВидКредитаБанка.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВидКредитаБанка[0]);
	КонецЕсли;
	
КонецФУнкции

&НаКлиенте
Процедура ПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Проект = ВыбранноеЗначение;
		Элементы.Проект.СписокВыбора.Очистить();
		Элементы.Проект.СписокВыбора.Добавить(Объект.Проект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКредитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.ВидКредита = ВыбранноеЗначение;
		Элементы.ВидКредита.СписокВыбора.Очистить();
		Элементы.ВидКредита.СписокВыбора.Добавить(Объект.ВидКредита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовБанкПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРасчетов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаКредита = ?(ЗначениеЗаполнено(ТекущиеДанные.СуммаКредита), ТекущиеДанные.СуммаКредита, Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос);
	
	ТекущиеДанные.СпециальнаяПрограмма = Неопределено;
	
	СписокСпецПрограмм = Новый СписокЗначений;
	
	//ЗаполнитьСписокСпецПрограммБанка(ТекущиеДанные.Банк);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСпецПрограммБанка(Банк)
	
	МассивВозврат  = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма КАК СпецПрограмма
	|ИЗ
	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
	|ГДЕ
	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокСпецПрограмм.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СпецПрограмма"));
	КонецЕсли;
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Элементы.ВидКредита.СписокВыбора.Добавить(Объект.ВидКредита);
	//КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСпециальнаяПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРасчетов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокСпецПрограммБанка(ТекущиеДанные.Банк);
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокСпецПрограмм;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСпециальнаяПрограммаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаРасчетовСпециальнаяПрограммаПриИзмененииНаСервере(СпециальнаяПрограмма)

	Если СпециальнаяПрограмма = ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ИпотечныеКаникулы") Тогда    
		//ЛегкийСтартРайффайзенбанк = Ложь;
		Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервыйГод.Видимость = Ложь;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервыйГод.Видимость = Ложь;
	
		//ИпотекаВТБ24СоСниженнойСтавкой = Ложь;	
		Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервые2Года.Видимость = Ложь;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервые2Года.Видимость = Ложь;
		
		//ИпотечныеКаникулы = Истина;
		//Элементы.ПереключательСрокКаникул.Видимость = Истина;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПериодКаникул.Видимость = Истина;
		Элементы.ТаблицаРасчетовПроцентнаяСтавка.Заголовок = "Процентная ставка";
		Элементы.ТаблицаРасчетовЕжемесячныйПлатеж.Заголовок = "Ежемесячный платеж";		
	ИначеЕсли СпециальнаяПрограмма = ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ЛегкийСтартРаффайзенбанк") Тогда
		//ИпотечныеКаникулы = Ложь;	
		//Элементы.ПереключательСрокКаникул.Видимость = Ложь;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПериодКаникул.Видимость = Ложь;

		//ИпотекаВТБ24СоСниженнойСтавкой = Ложь;	
		Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервые2Года.Видимость = Ложь;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервые2Года.Видимость = Ложь;
		
		//ЛегкийСтартРайффайзенбанк = Истина;
		Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервыйГод.Видимость = Истина;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервыйГод.Видимость = Истина;
		Элементы.ТаблицаРасчетовПроцентнаяСтавка.Заголовок = "Процентная ставка на оставшийся период";
		Элементы.ТаблицаРасчетовЕжемесячныйПлатеж.Заголовок = "Ежемесячный платеж на оставшийся период";
	ИначеЕсли СпециальнаяПрограмма = ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ИпотекаВТБСоСниженнойСтавкой") Тогда		
		//ИпотечныеКаникулы = Ложь;	
		//Элементы.ПереключательСрокКаникул.Видимость = Ложь;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПериодКаникул.Видимость = Ложь;
		
		//ЛегкийСтартРайффайзенбанк = Ложь;
		Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервыйГод.Видимость = Ложь;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервыйГод.Видимость = Ложь;
		
		//ИпотекаВТБ24СоСниженнойСтавкой = Истина;	
		Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервые2Года.Видимость = Истина;
		Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервые2Года.Видимость = Истина;	
		Элементы.ТаблицаРасчетовПроцентнаяСтавка.Заголовок = "Процентная ставка с 3-го года";
		Элементы.ТаблицаРасчетовЕжемесячныйПлатеж.Заголовок = "Ежемесячный платеж с 3 -го года";					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСпециальнаяПрограммаПриИзменении(Элемент)
	
	//ВидимостьКолонок = Объект.ТаблицаРасчетов.НайтиСтроки(Новый Структура("СпециальнаяПрограмма", ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ИпотекаВТБСоСниженнойСтавкой"))).Количество() > 0;
	//
	//Элементы.ТаблицаРасчетовПроцентнаяСтавкаНаПервые2Года.Видимость = ВидимостьКолонок;
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПервые2Года.Видимость = ВидимостьКолонок;
	//
	//ВидимостьКолонок = Объект.ТаблицаРасчетов.НайтиСтроки(Новый Структура("СпециальнаяПрограмма", ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ИпотечныеКаникулы"))).Количество() > 0;
	//
	//Элементы.ТаблицаРасчетовЕжемесячныйПлатежНаПериодКаникул.Видимость = ВидимостьКолонок;
	
	//ТекущиеДанные = Элементы.ТаблицаРасчетов.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//ТаблицаРасчетовСпециальнаяПрограммаПриИзмененииНаСервере(ТекущиеДанные.СпециальнаяПрограмма);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокуВидаКредита(Банк, ВидКредита)
	
	СтруктураВозврат = Новый Структура("ВидКредита, ШагРасчетный, КоэффициентПлатежаКДоходу, ШагКредитования, Скидка, Основной");
	
	Поиск = Новый Структура("ВидКредита", ВидКредита);
	ВидКредитаБанка = Банк.ВидыКредита.НайтиСтроки(Поиск);
	Если ВидКредитаБанка.Количество() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврат, ВидКредитаБанка[0]);
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСтрокуПоУмолчанию(Эл)
	
	//Если Не ЗначениеЗаполнено(Эл.СуммаКредита) Тогда
	Эл.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
		
	ВыбранныйВидКредита = ВернутьВыбранныйВидКредита(Эл.Банк, Объект.ВидКредита);
	//ПолучитьСтрокуВидаКредита(Эл.Банк, Объект.ВидКредита);
	
	Если НЕ ВыбранныйВидКредита = Неопределено Тогда	
		// Вставить содержимое обработчика.
		ВыбранныйВидКредитаШагРасчетный = ВыбранныйВидКредита.ШагРасчетный;
		Попытка
			Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита") Тогда			
				
				//по прямой
				
				ПС = Эл.ПроцентнаяСтавка/100/12; // ежемесячная процентная ставка
				Икс = POW(1+ПС,-(Эл.СрокЗайма-ВыбранныйВидКредита.ШагРасчетный));	
				
				Эл.ЕжемесячныйПлатеж = Эл.СуммаКредита*ПС/(1-Икс);

				//Эл.ЕжемесячныйПлатежНаПериодКаникул = Эл.ЕжемесячныйПлатеж / 2;					
				Эл.ЕжемесячныйПлатежЛьготныйПериод = Эл.ЕжемесячныйПлатеж / 2;					
				
				ПервоначальныйВзносПроценты = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;	
				Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
					Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
				Иначе	
					Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/0.6/0.85;
				КонецЕсли;	
				
			ИначеЕсли Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзЕжемесячногоПлатежа") Тогда
				
				//для сравнения
				
				СЗ = 360;
				ПС = Эл.ПроцентнаяСтавка/100 / 12; // ежемесячная процентная ставка
				Икс = POW(1+ПС,-(СЗ-ВыбранныйВидКредита.ШагРасчетный));						
				ЕП = Эл.СуммаКредита*ПС/(1-Икс);
				
				Если Эл.ЕжемесячныйПлатеж < ЕП Тогда
					СрокЗайма = 0;
					Эл.ЕжемесячныйПлатеж = 0;
					//Эл.ЕжемесячныйПлатежНаПериодКаникул = 0;											
					Эл.ЕжемесячныйПлатежЛьготныйПериод = Эл.ЕжемесячныйПлатеж / 2;
					Эл.ЕжемесячныйДоход = 0;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка " + Эл.НомерСтроки +  " - Слишком маленький ежемесячный платеж! Укажите другую сумму(не менее "+строка(Формат(ЕП,"ЧЦ=15; ЧДЦ=2"))+" р)!");
					//Продолжить;
					Возврат;
				КонецЕсли;
				
				//в обратку				
				ПС = Эл.ПроцентнаяСтавка/100/12;
				Если ЗначениеЗаполнено(Эл.ЕжемесячныйДоход) Тогда
					Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
						Эл.ЕжемесячныйПлатеж = Эл.ЕжемесячныйДоход*ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
					Иначе	
						Эл.ЕжемесячныйПлатеж = Эл.ЕжемесячныйДоход*0.6*0.85;
					КонецЕсли;
					//Эл.ЕжемесячныйПлатежНаПериодКаникул = Эл.ЕжемесячныйПлатеж / 2;					
					Эл.ЕжемесячныйПлатежЛьготныйПериод = Эл.ЕжемесячныйПлатеж / 2;							
				Иначе
					Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
						Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
					Иначе	
						Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/0.6/0.85;
					КонецЕсли;	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Эл.СрокЗайма) Тогда					
					//Задача ID 213632
					Икс = POW(1+ПС,-(Эл.СрокЗайма-ВыбранныйВидКредита.ШагРасчетный));
					Эл.СуммаКредита = Эл.ЕжемесячныйПлатеж*(1-Икс)/ПС;
					Если Не Значениезаполнено(Объект.ПервоначальныйВзнос) Тогда
						Объект.ПервоначальныйВзнос = Объект.СтоимостьКвартиры - Эл.СуммаКредита;			
					КонецЕсли;
				Иначе
					Эл.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
					//СЗ = 2+log_(1+ПС)〖1-Эл.СуммаКредита*ПС/Ежемесячный  платеж〗 v1
					//СЗ = 2-〖log_10 (〗〖((ЕП-СК*ПС)/ЕП)^2)〗/(2*(log_10〖(1+ПС))) v2
					//ЧислоЧислителя = 1-Эл.СуммаКредита*ПС/ЕжемесячныйПлатеж;
					ЧислоЧислителя = POW((Эл.ЕжемесячныйПлатеж-Эл.СуммаКредита*ПС)/Эл.ЕжемесячныйПлатеж,2);
					ЧислоЗнаменателя = 1+ПС;
					Числитель = log10(ЧислоЧислителя);
					Знаменатель = 2*log10(ЧислоЗнаменателя);
					Эл.СрокЗайма = ВыбранныйВидКредита.ШагРасчетный-(Числитель/Знаменатель);
					
					//Задача ID 213632
					Крат = Эл.СрокЗайма/ВыбранныйВидКредита.ШагКредитования;
					Если Цел(Крат)<>Крат Тогда
						Крат = Окр(Крат + 0.5,0,РежимОкругления.Окр15как20);
					КонецЕсли;					
					Эл.СрокЗайма = ВыбранныйВидКредита.ШагКредитования * Крат;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка " + Эл.НомерСтроки + " - Срок займа установлен кратным " + Строка(ВыбранныйВидКредита.ШагКредитования));
					
				КонецЕсли;			
				ПервоначальныйВзносПроценты = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;
				
				// и еще разик по прямой				
				Икс = POW(1+ПС,-(Эл.СрокЗайма-ВыбранныйВидКредита.ШагРасчетный));			
				Если Не Значениезаполнено(Объект.ПервоначальныйВзнос) Тогда
					Объект.ПервоначальныйВзнос = Объект.СтоимостьКвартиры - Эл.СуммаКредита;
				ИначеЕсли Не ЗначениеЗаполнено(Эл.СуммаКредита) Тогда
					Эл.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
				КонецЕсли;
				Эл.ЕжемесячныйПлатеж = Эл.СуммаКредита*ПС/(1-Икс);
				
				//Эл.ЕжемесячныйПлатежНаПериодКаникул = Эл.ЕжемесячныйПлатеж / 2;					
				Эл.ЕжемесячныйПлатежЛьготныйПериод = Эл.ЕжемесячныйПлатеж / 2;
				
				ПервоначальныйВзносПроценты = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;	
				Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
					Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
				Иначе	
					Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/0.6/0.85;
				КонецЕсли;				
				
			КонецЕсли;				
			//Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка " + Эл.НомерСтроки + " - Заполните параметры расчета!");
		КонецПопытки;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран вид кредита!");
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТаблицу()
	
	Объект.СуммаКредита =  Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
	
	Для Каждого Эл Из Объект.ТаблицаРасчетов Цикл
		Если ЗначениеЗаполнено(Эл.СпециальнаяПрограмма) Тогда
			РасчетСтрокиПоШаблону(Эл);
		Иначе
			РассчитатьСтрокуПоУмолчанию(Эл);
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСтрокиПоШаблону(Стр)
					
	ВыбранныйВидКредита = ВернутьВыбранныйВидКредита(Стр.Банк, Объект.ВидКредита);
	Если ВыбранныйВидКредита = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ИмяФайлаШаблона = ПолучитьШаблонРасчетаСпецПрограммы(Стр.Банк, Стр.СпециальнаяПрограмма);	
	Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда
		СтруктураЗаполнения = ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, Стр);
		Если НЕ СтруктураЗаполнения = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);				
			Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита") Тогда
				Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу <> 0 Тогда
					Стр.ЕжемесячныйДоход = Стр.ЕжемесячныйПлатеж / ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
				Иначе	
					Стр.ЕжемесячныйДоход = Стр.ЕжемесячныйПлатеж / 0.6 / 0.85;
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отсутсвует шаблон расчета.");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, ПараметрыИмпорта)
	
	Если ПустаяСтрока(ИмяФайлаШаблона) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтоимостьКвартиры = Объект.СтоимостьКвартиры;
	ПервоначальныйВзнос = Объект.ПервоначальныйВзнос;
	РазмерНИССубсидии = ПараметрыИмпорта.РазмерНИССубсидии;
	ПроцентнаяСтавкаБазовая = ПараметрыИмпорта.ПроцентнаяСтавка;
	ПроцентнаяСтавкаЛьготныйПериод = ПараметрыИмпорта.ПроцентнаяСтавкаЛьготныйПериод;			   
	СрокЗайма = ПараметрыИмпорта.СрокЗайма;		 
	
	ПараметрыЭкспорта = Новый Структура("ПроцентнаяСтавка, ПроцентнаяСтавкаЛьготныйПериод, СрокЗайма, СрокЗаймаЛет, ЕжемесячныйПлатеж, ЕжемесячныйПлатежЛьготныйПериод, СуммаКредита", 0, 0, 0, 0, 0, 0, 0);
	
	СуммаКредита = 0;
	
	Попытка					
		ExcelApplication = Новый COMОбъект("Excel.Application");			
		ExcelApplication.Visible = Ложь;
		ExcelApplication.WindowState = -4140;
		Book = ExcelApplication.WorkBooks.Open(ИмяФайлаШаблона);  			
		ЛистЭксель = Book.Sheets(1);			
		
		ЛистЭксель.Cells(2, 2).Value = ?(ЗначениеЗаполнено(СтоимостьКвартиры), СтоимостьКвартиры, ЛистЭксель.Cells(2, 2).Value);
		ЛистЭксель.Cells(3, 2).Value = ?(ЗначениеЗаполнено(ПервоначальныйВзнос), ПервоначальныйВзнос, ЛистЭксель.Cells(3, 2).Value);
		ЛистЭксель.Cells(4, 2).Value = ?(ЗначениеЗаполнено(РазмерНИССубсидии), РазмерНИССубсидии, ЛистЭксель.Cells(4, 2).Value);
		ЛистЭксель.Cells(5, 2).Value = ?(ЗначениеЗаполнено(ПроцентнаяСтавкаБазовая), ПроцентнаяСтавкаБазовая, ЛистЭксель.Cells(5, 2).Value);
		ЛистЭксель.Cells(6, 2).Value = ?(ЗначениеЗаполнено(ПроцентнаяСтавкаЛьготныйПериод), ПроцентнаяСтавкаЛьготныйПериод, ЛистЭксель.Cells(6, 2).Value);
		ЛистЭксель.Cells(7, 2).Value = ?(ЗначениеЗаполнено(СрокЗайма), СрокЗайма, ЛистЭксель.Cells(7, 2).Value);
		
		ПараметрыИмпорта.РазмерНИССубсидии = ЛистЭксель.Cells(4, 2).Value;
		ПараметрыИмпорта.ПроцентнаяСтавка = ЛистЭксель.Cells(5, 2).Value;
		ПараметрыИмпорта.ПроцентнаяСтавкаЛьготныйПериод = ЛистЭксель.Cells(6, 2).Value;
		ПараметрыИмпорта.СрокЗайма = ЛистЭксель.Cells(7, 2).Value;
		
		ЛистЭксель.Cells(2, 5).FormulaR1C1 = ЛистЭксель.Cells(2, 5).FormulaR1C1;
		Попытка
			ПроцентнаяСтавка = Число(СтрЗаменить(СтрЗаменить(ЛистЭксель.Cells(2, 5).Text, " ", ""), "%", "")); 
		Исключение
			ПроцентнаяСтавка = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(3, 5).FormulaR1C1 = ЛистЭксель.Cells(3, 5).FormulaR1C1;
		Попытка
			ПроцентнаяСтавкаЛьготныйПериод = Число(СтрЗаменить(СтрЗаменить(ЛистЭксель.Cells(3, 5).Text, " ", ""), "%", ""));
		Исключение
			ПроцентнаяСтавкаЛьготныйПериод = 0;
		КонецПопытки;		
		
		ЛистЭксель.Cells(4, 5).FormulaR1C1 = ЛистЭксель.Cells(4, 5).FormulaR1C1;
		Попытка
			СрокЗайма = Число(СтрЗаменить(ЛистЭксель.Cells(4, 5).Text, " ", "")); 
		Исключение
			СрокЗайма = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(5, 5).FormulaR1C1 = ЛистЭксель.Cells(5, 5).FormulaR1C1;
		Попытка
			СрокЗаймаЛет = Число(СтрЗаменить(ЛистЭксель.Cells(5, 5).Text, " ", "")); 
		Исключение
			СрокЗаймаЛет = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(6, 5).FormulaR1C1 = ЛистЭксель.Cells(6, 5).FormulaR1C1;
		Попытка
			ЕжемесячныйПлатеж = Число(СтрЗаменить(ЛистЭксель.Cells(6, 5).Text, " ", "")); 
		Исключение
			ЕжемесячныйПлатеж = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(7, 5).FormulaR1C1 = ЛистЭксель.Cells(7, 5).FormulaR1C1;
		Попытка
			ЕжемесячныйПлатежЛьготныйПериод = Число(СтрЗаменить(ЛистЭксель.Cells(7, 5).Text, " ", "")); 
		Исключение
			ЕжемесячныйПлатежЛьготныйПериод = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(8, 5).FormulaR1C1 = ЛистЭксель.Cells(8, 5).FormulaR1C1;
		Попытка
			СуммаКредита = Число(СтрЗаменить(ЛистЭксель.Cells(8, 5).Text, " ", "")); 
		Исключение
			СуммаКредита = 0;
		КонецПопытки;
		
		ПараметрыЭкспорта.СуммаКредита = ?(ЗначениеЗаполнено(СуммаКредита), СуммаКредита, ПараметрыИмпорта.СуммаКредита);
		ПараметрыЭкспорта.ПроцентнаяСтавка = ?(ЗначениеЗаполнено(ПроцентнаяСтавка), ПроцентнаяСтавка, ПараметрыИмпорта.ПроцентнаяСтавка);
		ПараметрыЭкспорта.ПроцентнаяСтавкаЛьготныйПериод = ?(ЗначениеЗаполнено(ПроцентнаяСтавкаЛьготныйПериод), ПроцентнаяСтавкаЛьготныйПериод, ПараметрыИмпорта.ПроцентнаяСтавкаЛьготныйПериод);
		ПараметрыЭкспорта.СрокЗайма = ?(ЗначениеЗаполнено(СрокЗайма), СрокЗайма, ПараметрыИмпорта.СрокЗайма);
		ПараметрыЭкспорта.СрокЗаймаЛет = ?(ЗначениеЗаполнено(СрокЗаймаЛет), СрокЗаймаЛет, ПараметрыИмпорта.СрокЗаймаЛет);
		ПараметрыЭкспорта.ЕжемесячныйПлатеж = ?(ЗначениеЗаполнено(ЕжемесячныйПлатеж), ЕжемесячныйПлатеж, ПараметрыИмпорта.ЕжемесячныйПлатеж);
		ПараметрыЭкспорта.ЕжемесячныйПлатежЛьготныйПериод = ?(ЗначениеЗаполнено(ЕжемесячныйПлатежЛьготныйПериод), ЕжемесячныйПлатежЛьготныйПериод, ПараметрыИмпорта.ЕжемесячныйПлатежЛьготныйПериод);
		
		Book.Application.DisplayAlerts = Ложь;
		ExcelApplication.ActiveWorkbook.Close();
		ExcelApplication.Quit();
		ExcelApplication = 0;
	Исключение
		ExcelApplication = 0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ПараметрыЭкспорта;		
		
КонецФункции

&НаКлиенте
Функция ПолучитьШаблонРасчетаСпецПрограммы(ИпотечныйБанк, СпециальнаяПрограмма)
	
	ИмяФайлаШаблона = "";
	Если НЕ ИпотечныйБанк.Пустая() Тогда
		Структура = ПолучитьШаблонРасчетаСпецПрограммыИпотечногоБанка(ИпотечныйБанк, СпециальнаяПрограмма);
		Макет = Структура.Макет;
		Формат = Структура.Формат;		
		Если НЕ Макет = Неопределено Тогда 
			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
			Попытка
				Макет.Записать(ИмяФайлаШаблона);
			Исключение		
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ИмяФайлаШаблона;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонРасчетаСпецПрограммыИпотечногоБанка(ИпотечныйБанк, СпециальнаяПрограмма)
	
	СтруктураВозврат = Новый Структура("Макет, Формат");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанкиМакетыРасчетаСпецПрограмм.ИмяМакетаСпецПрограммы КАК ИмяМакетаСпецПрограммы,
	|	БанкиМакетыРасчетаСпецПрограмм.МакетРасчета КАК МакетРасчета
	|ИЗ
	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
	|ГДЕ
	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка
	|	И БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма = &СпецПрограмма";
	
	Запрос.УстановитьПараметр("СпецПрограмма", СпециальнаяПрограмма);
	Запрос.УстановитьПараметр("Ссылка", ИпотечныйБанк);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВозврат.Вставить("Макет", ВыборкаДетальныеЗаписи.МакетРасчета.Получить());
		ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.ИмяМакетаСпецПрограммы, ".");
		Формат = ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");
		СтруктураВозврат.Вставить("Формат", Формат);
	КонецЦикла;	
	
	Возврат СтруктураВозврат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРасширениеИмениМакета(ИпотечныйБанк, СпециальнаяПрограмма)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанкиМакетыРасчетаСпецПрограмм.ИмяМакетаСпецПрограммы КАК ИмяМакетаСпецПрограммы,
	|	БанкиМакетыРасчетаСпецПрограмм.МакетРасчета КАК МакетРасчета
	|ИЗ
	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
	|ГДЕ
	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка
	|	И БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма = &СпецПрограмма";
	
	Запрос.УстановитьПараметр("СпецПрограмма", СпециальнаяПрограмма);
	Запрос.УстановитьПараметр("Ссылка", ИпотечныйБанк);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.ИмяМакетаСпецПрограммы, ".");
		Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() Тогда
		Объект.ТипОбъекта = ВыбранноеЗначение[0];
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПараметрыПримененияСтавок_Значения") Тогда
		Объект.ТипОбъекта = ВыбранноеЗначение;
	КонецЕсли;	
		
КонецПроцедуры

//ТаблицаРасчетовРазмерНИССубсидии ? 
