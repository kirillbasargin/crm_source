//////////////////////////////////////////////// КОМАНДЫ ФОРМЫ/////////////////////////////////
&НаСервере
Процедура РассчитатьНаСервере()
	//Объект.СуммаКредита =  Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
	ОчиститьТЧ = Ложь;
	Для Каждого Эл Из Объект.ТаблицаРасчетовПотребительскогоКредита Цикл
		//Если Не ЗначениеЗаполнено(Эл.СуммаКредита) Тогда
		//Эл.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
		
		//КонецЕсли;
		
		РассчитыватьЕжемесячныйДоход = Истина;
		
		Поиск = Новый Структура("ВидКредита", Справочники.ВидыКредитов.ПотребительскийКредит);
		ВидКредитаБанка = Эл.Банк.ВидыКредита.НайтиСтроки(Поиск);
		Если ВидКредитаБанка.Количество()=0 Тогда
			#Если Клиент Тогда
				ПоказатьПредупреждение(, "Для банка не заданы параметры расчета потребительского вида кредита");
			#Иначе
		    	Сообщить("Для банка не заданы параметры расчета потребительского вида кредита");
			#КонецЕсли 
			//ОчиститьТЧ = Истина;
			Эл.ЕжемесячныйДоход = 0;
			Эл.ЕжемесячныйПлатеж = 0;
			РассчитыватьЕжемесячныйДоход = Ложь;			
			Продолжить;
		Иначе
			ВыбранныйВидКредита = ВидКредитаБанка[0];
			//ОчиститьТЧ = Ложь;
		КонецЕсли;
		Если НЕ ВыбранныйВидКредита = Неопределено Тогда	
			// Вставить содержимое обработчика.
			ВыбранныйВидКредитаШагРасчетный = ВыбранныйВидКредита.ШагРасчетный;
			Попытка
				Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита") Тогда			
					
					//по прямой
					
					ПС = Эл.ПроцентнаяСтавка/100/12; // ежемесячная процентная ставка
					Икс = POW(1+ПС,-(Эл.СрокЗайма-ВыбранныйВидКредита.ШагРасчетный));	
									
					Эл.ЕжемесячныйПлатеж = Эл.СуммаКредита*ПС/(1-Икс);			
					ПервоначальныйВзносПроценты = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;	
					
					Если РассчитыватьЕжемесячныйДоход Тогда
						Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
							Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
						Иначе	
							Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/0.6/0.85;
						КонецЕсли;
					Иначе
						Эл.ЕжемесячныйДоход = 0;
					КонецЕсли; 					
					
				ИначеЕсли Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзЕжемесячногоПлатежа") Тогда
					
					//для сравнения
					
					СЗ = 360;
					ПС = Эл.ПроцентнаяСтавка/100 / 12; // ежемесячная процентная ставка
					Икс = POW(1+ПС,-(СЗ-ВыбранныйВидКредита.ШагРасчетный));						
					ЕП = Эл.СуммаКредита*ПС/(1-Икс);
					
					Если Эл.ЕжемесячныйПлатеж < ЕП Тогда
						СрокЗайма = 0;
						Эл.ЕжемесячныйПлатеж = 0;
						Эл.ЕжемесячныйДоход = 0;
						Сообщить("Строка " + Эл.НомерСтроки +  " - Слишком маленький ежемесячный платеж! Укажите другую сумму(не менее "+строка(Формат(ЕП,"ЧЦ=15; ЧДЦ=2"))+" р)!");
						Продолжить;
					КонецЕсли;
					
					//в обратку
					
					ПС = Эл.ПроцентнаяСтавка/100/12;
					
					
					Если ЗначениеЗаполнено(Эл.ЕжемесячныйДоход) Тогда
						Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
							Эл.ЕжемесячныйПлатеж = Эл.ЕжемесячныйДоход*ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
						Иначе	
							Эл.ЕжемесячныйПлатеж = Эл.ЕжемесячныйДоход*0.6*0.85;
						КонецЕсли;
					Иначе
						Если РассчитыватьЕжемесячныйДоход Тогда
							Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
								Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
							Иначе	
								Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/0.6/0.85;
							КонецЕсли;
						Иначе
							Эл.ЕжемесячныйДоход = 0;	
						КонецЕсли;
					КонецЕсли;
					
					//<>, Басаргин (09.01.2017) {
					//Если ЗначениеЗаполнено(Эл.СрокЗайма) Тогда					
					//	//Задача ID 213632
					//	Икс = POW(1+ПС,-(Эл.СрокЗайма-ВыбранныйВидКредита.ШагРасчетный));
					//	Эл.СуммаКредита = Эл.ЕжемесячныйПлатеж*(1-Икс)/ПС;
					//	Если Не Значениезаполнено(Объект.ПервоначальныйВзнос) Тогда
					//		Объект.ПервоначальныйВзнос = Объект.СтоимостьКвартиры - Эл.СуммаКредита;			
					//	КонецЕсли;
					//Иначе
					//	//<>, Басаргин (09.01.2017) {
					//	//Эл.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;						
					//	//<> }
					//	
					//	//СЗ = 2+log_(1+ПС)〖1-Эл.СуммаКредита*ПС/Ежемесячный  платеж〗 v1
					//	//СЗ = 2-〖log_10 (〗〖((ЕП-СК*ПС)/ЕП)^2)〗/(2*(log_10〖(1+ПС))) v2
					//	//ЧислоЧислителя = 1-Эл.СуммаКредита*ПС/ЕжемесячныйПлатеж;
					//	
					//	ЧислоЧислителя = POW((Эл.ЕжемесячныйПлатеж-Эл.СуммаКредита*ПС)/Эл.ЕжемесячныйПлатеж,2);
					//	ЧислоЗнаменателя = 1+ПС;
					//	Числитель = log10(ЧислоЧислителя);
					//	Знаменатель = 2*log10(ЧислоЗнаменателя);
					//	Эл.СрокЗайма = ВыбранныйВидКредита.ШагРасчетный-(Числитель/Знаменатель);
					//	
					//	//Задача ID 213632
					//	Крат = Эл.СрокЗайма/ВыбранныйВидКредита.ШагКредитования;
					//	Если Цел(Крат)<>Крат Тогда
					//		Крат = Окр(Крат + 0.5,0,РежимОкругления.Окр15как20);
					//	КонецЕсли;					
					//	
					//	//<>, Басаргин (09.01.2017) {
					//	//Эл.СрокЗайма = ВыбранныйВидКредита.ШагКредитования * Крат;
					//	//Сообщить("Строка " + Эл.НомерСтроки + " - Срок займа установлен кратным " + Строка(ВыбранныйВидКредита.ШагКредитования));						
					//	//<> }
					//	
					//	
					//КонецЕсли;			
					
					//<> }
					ПервоначальныйВзносПроценты = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;
					
					// и еще разик по прямой
					
					Икс = POW(1+ПС,-(Эл.СрокЗайма-ВыбранныйВидКредита.ШагРасчетный));			
					Если Не Значениезаполнено(Объект.ПервоначальныйВзнос) Тогда
						//Объект.ПервоначальныйВзнос = Объект.СтоимостьКвартиры - Эл.СуммаКредита;
					ИначеЕсли Не ЗначениеЗаполнено(Эл.СуммаКредита) Тогда
						//Эл.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;
					КонецЕсли;
					Эл.ЕжемесячныйПлатеж = Эл.СуммаКредита*ПС/(1-Икс);
					ПервоначальныйВзносПроценты = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;	
					
					Если РассчитыватьЕжемесячныйДоход Тогда
						Если ВыбранныйВидКредита.КоэффициентПлатежаКДоходу<>0 Тогда
							Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/ВыбранныйВидКредита.КоэффициентПлатежаКДоходу;
						Иначе	
							Эл.ЕжемесячныйДоход = Эл.ЕжемесячныйПлатеж/0.6/0.85;
						КонецЕсли;				
					Иначе
						Эл.ЕжемесячныйДоход = 0;
					КонецЕсли;
					
				КонецЕсли;				
				//Записать();
			Исключение
				Сообщить("Строка " + Эл.НомерСтроки + " - Заполните параметры расчета!");
			КонецПопытки;
		Иначе
			Сообщить("Не выбран вид кредита!");
		КонецЕсли;		
	КонецЦикла;
	
	//Если ОчиститьТЧ Тогда
	//	Объект.ТаблицаРасчетовПотребительскогоКредита.Очистить();	
	//КонецЕсли; 
	
КонецПроцедуры

//&НаСервере
//Функция  ВернутьШаблонПечатнойФормы(ВидШаблона)
//	
//	Если ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблоновИК.ШаблонКалькулятора")
//		ИЛИ ВидШаблона = ПредопределенноеЗначение("Перечисление.ВидыШаблоновИК.ШаблонКалькулятораВоеннойИпотеки") Тогда
//		
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//		               |	Квартирограмма.ОбъектСтроительства.Родитель КАК ОбъектСтроительства,
//		               |	Квартирограмма.ОбъектСтроительства.Проект КАК Проект
//		               |ИЗ
//		               |	РегистрСведений.Квартирограмма КАК Квартирограмма
//		               |ГДЕ
//		               |	(Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЖилаяНедвижимость)
//		               |			ИЛИ Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЗемельныйУчасток))
//		               |	И Квартирограмма.ОбъектСтроительства.Проект = &Проект
//		               |ИТОГИ
//		               |	МАКСИМУМ(ОбъектСтроительства)
//		               |ПО
//		               |	Проект";
//		Запрос.УстановитьПараметр("Проект", Объект.Проект);
//		тзПроекты = Запрос.Выполнить().Выгрузить();
//		
//		
//		
//		
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ШаблоныИК.Ссылка
//		|ИЗ
//		|	Справочник.ШаблоныИК КАК ШаблоныИК
//		|ГДЕ
//		|	ШаблоныИК.ОбъектСтроительства = &ОбъектСтроительства
//		|	И ШаблоныИК.ВидКредита = &ВидКредита
//		|	И ШаблоныИК.ВидШаблона = &ВидШаблона";
//		
//		текСтрока = тзПроекты.Найти(Объект.Проект);
//		текПроект = ТекСтрока.ОбъектСтроительства;
//		
//		Запрос.УстановитьПараметр("ОбъектСтроительства", текПроект);
//		Запрос.УстановитьПараметр("ВидКредита", Объект.ВидКредита);
//		Запрос.УстановитьПараметр("ВидШаблона", ВидШаблона);
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		Если Результат.Следующий() Тогда
//			
//			ШаблонИК = Результат.Ссылка;
//		Иначе
//			Сообщить("Не найден шаблон печатной формы");
//			Возврат Неопределено;  
//		КонецЕсли; 
//		
//		
//		
//		
//		ОбъектыСтроительства = Новый Массив;
//		Если Не Объект.Проект.ЭтоГруппа Тогда
//			ОбъектыСтроительства.Добавить(Объект.Проект);
//		Иначе
//			Проекты = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
//			|	ОбъектыСтроительства.Ссылка
//			|ИЗ
//			|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
//			|ГДЕ
//			|	(ОбъектыСтроительства.Родитель = &Родитель
//			|			ИЛИ ОбъектыСтроительства.Родитель.Родитель = &Родитель
//			|			ИЛИ ОбъектыСтроительства.Родитель.Родитель.Родитель = &Родитель
//			|			ИЛИ ОбъектыСтроительства.Родитель.Родитель.Родитель.Родитель = &Родитель)
//			|	И НЕ ОбъектыСтроительства.ЭтоГруппа");
//			Проекты.УстановитьПараметр("Родитель",Объект.Проект);
//			ОбъектыСтроительства = Проекты.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
//		КонецЕсли;	
//		
//		
//		ВариантОтвета = тзПроекты.Найти(Объект.Проект).ОбъектСтроительства;
//		
//	Иначе
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//		|	ШаблоныИК.Ссылка
//		|ИЗ
//		|	Справочник.ШаблоныИК КАК ШаблоныИК
//		|ГДЕ
//		|	ШаблоныИК.ВидШаблона = &ВидШаблона";
//		
//		Запрос.УстановитьПараметр("ВидШаблона", ВидШаблона);
//		
//		Результат = Запрос.Выполнить().Выбрать();
//		Если Результат.Следующий() Тогда
//			
//			ШаблонИК = Результат.Ссылка;
//		Иначе
//			Сообщить("Не найден шаблон печатной формы");
//			Возврат Неопределено;  
//		КонецЕсли; 
//		
//		ВариантОтвета = Неопределено;
//	КонецЕсли;
//	
//	
//	Запрос  = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//	               |	ВерсииШаблоновИКСрезПоследних.Макет,
//	               |	ВерсииШаблоновИКСрезПоследних.Период
//	               |ИЗ
//	               |	РегистрСведений.ВерсииШаблоновИК.СрезПоследних(
//	               |			,
//	               |			Шаблон = &Шаблон
//	               |				И НЕ ИпотечныеКаникулы) КАК ВерсииШаблоновИКСрезПоследних";
//	Запрос.УстановитьПараметр("Шаблон",ШаблонИК);
//	
//	Результат = Запрос.Выполнить().Выбрать();
//	Если Результат.Следующий() Тогда 
//		Шаблон 				= Результат.Макет;
//	КонецЕсли;
//	
//	
//	Структура = Новый Структура("ВариантОтвета, Шаблон", Объект.Проект, Шаблон.Получить());
//	Возврат Структура;
//КонецФункции

&НаСервере
Функция ПолучитьПараметрыКредита(Поиск, СуммаКредита)
	Комиссия = 0;
	Страхование = 0;
	
	ТаблСрез = РегистрыСведений.УсловияИпотечногоКредитования.СрезПоследних(ТекущаяДата(),Поиск);
	Если ТаблСрез.Количество()>0 Тогда
		Комиссия = ТаблСрез[0].Комиссия;
		Если Комиссия <= 100 Тогда
			Комиссия = СуммаКредита*Комиссия/100;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблСрез[0].МаксимальныйРазмерКомиссии) И Комиссия > ТаблСрез[0].МаксимальныйРазмерКомиссии Тогда
			Комиссия = ТаблСрез[0].МаксимальныйРазмерКомиссии;
		КонецЕсли;	
		// 25092014 Тимко ID 326067
		Если ЗначениеЗаполнено(ТаблСрез[0].МинимальныйРазмерКомиссии) И Комиссия < ТаблСрез[0].МинимальныйРазмерКомиссии Тогда
			Комиссия = ТаблСрез[0].МинимальныйРазмерКомиссии;
		КонецЕсли;	
		Страхование = ТаблСрез[0].Страхование
	КонецЕсли;		
	Структура = Новый Структура("Комиссия, Страхование", Комиссия,  Страхование);
	Возврат Структура;
КонецФункции

&НаСервере
Функция ВернутьШаблонПечатнойФормы(ВидШаблона, СпецПрограмма = Неопределено)
	
	Запрос = Новый Запрос;  
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныИК.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ШаблоныИК
	|ИЗ
	|	Справочник.ШаблоныИК КАК ШаблоныИК
	|ГДЕ
	|	ШаблоныИК.Проект = &Проект
	|	И ШаблоныИК.ВидКредита = &ВидКредита
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииШаблоновИКСрезПоследних.Макет КАК Макет,
	|	ВерсииШаблоновИКСрезПоследних.Период КАК Период,
	|	ВерсииШаблоновИКСрезПоследних.Шаблон КАК Шаблон,
	|	ВерсииШаблоновИКСрезПоследних.СпецПрограмма КАК СпецПрограмма
	|ИЗ
	|	РегистрСведений.ВерсииШаблоновИК.СрезПоследних(
	|			,
	|			Шаблон В
	|					(ВЫБРАТЬ
	|						ВТ_ШаблоныИК.Ссылка
	|					ИЗ
	|						ВТ_ШаблоныИК КАК ВТ_ШаблоныИК)
	|				И СпецПрограмма = &СпецПрограмма) КАК ВерсииШаблоновИКСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
		
	Запрос.УстановитьПараметр("Проект", Объект.Проект);
	Запрос.УстановитьПараметр("ВидКредита", Объект.ВидКредита);

	Если СпецПрограмма = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СпецПрограмма = &СпецПрограмма", "");
	Иначе
		Запрос.УстановитьПараметр("СпецПрограмма", СпецПрограмма);		
	КонецЕсли;	
		
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат.Макет.Получить();
	Иначе
		Сообщить("Не найден шаблон печатной формы");
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПечатьWord()
	
	Шаблон = ВернутьШаблонПечатнойФормы(ПредопределенноеЗначение("Перечисление.ВидыШаблоновИК.ШаблонКалькулятораВоеннойИпотеки"), ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"));
	
	//Если Структура = Неопределено Тогда Возврат КонецЕсли; 
	//ИмяФайла = ПолучитьИмяВременногоФайла("doc");
	//Шаблон = Структура.Шаблон;
	//Шаблон.Записать(ИмяФайла);
	
	Если Шаблон = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("doc");
	Шаблон.Записать(ИмяФайла);	
	
	Попытка
		
		WordApplication = Новый COMОбъект("WORD.Application");
		WordApplication.Visible = 1; 
		WordApplication.Activate();
		WordApplication.WindowState = 2;	
		
		НовыйДокумент = WordApplication.Documents.Open(ИмяФайла);		
		
		НомерСтроки = 2;
		ТаблицаКредитов = НовыйДокумент.Tables(2);
		
		Для Каждого Эл Из Объект.ТаблицаРасчетовВоеннойИпотеки Цикл
			
			НомерСтроки = НомерСтроки+1;    
			
			ТаблицаКредитов.Cell(НомерСтроки,1).Range().InsertAfter(Строка(Эл.Банк));
			ТаблицаКредитов.Cell(НомерСтроки,2).Range().InsertAfter(Строка(Эл.ПроцентнаяСтавка));	    						
			ТаблицаКредитов.Cell(НомерСтроки,3).Range().InsertAfter(Строка(Эл.СрокЗайма) + " (" + Окр(Эл.СрокЗайма/12)+")");
			ТаблицаКредитов.Cell(НомерСтроки,4).Range().InsertAfter(Строка(Эл.ЕжемесячныйПлатеж));	    
			ТаблицаКредитов.Cell(НомерСтроки,5).Range().InsertAfter(Строка(Эл.СуммаКредита));	
			ТаблицаКредитов.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Эл.РазмерПотребительскогоКредита));	
			  
			
			//Поиск = Новый Структура("Банк,ВидКредита,Проект",эл.Банк,Объект.ВидКредита,Структура.ВариантОтвета);
			//
			//СтруктураПараметровКредита = ПолучитьПараметрыКредита(Поиск, Эл.СуммаКредита);
			//

			//ТаблицаКредитов.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Формат(СтруктураПараметровКредита.Комиссия,"ЧЦ=10; ЧДЦ=2; ЧН=0")));
			//ТаблицаКредитов.Cell(НомерСтроки,7).Range().InsertAfter(Строка(СтруктураПараметровКредита.Страхование));
			
			Если Объект.ТаблицаРасчетовВоеннойИпотеки.Количество() > (НомерСтроки-2) Тогда
				ТаблицаКредитов.Rows.Add();
			КонецЕсли;	
			
		КонецЦикла;	
	
		
		//Таблица				
		Если Объект.ТаблицаРасчетовПотребительскогоКредита.Количество() Тогда
					 
			НомерСтроки = 2;
			ТаблицаКредитов = НовыйДокумент.Tables(3);
			
			Для Каждого Эл Из Объект.ТаблицаРасчетовПотребительскогоКредита Цикл
				НомерСтроки = НомерСтроки+1;    
				
				ТаблицаКредитов.Cell(НомерСтроки,1).Range().InsertAfter(Строка(Эл.Банк));
				ТаблицаКредитов.Cell(НомерСтроки,2).Range().InsertAfter(Строка(Эл.ПроцентнаяСтавка));	    						
				ТаблицаКредитов.Cell(НомерСтроки,3).Range().InsertAfter(Строка(Эл.СрокЗайма) + " (" + Окр(Эл.СрокЗайма/12)+")");
				ТаблицаКредитов.Cell(НомерСтроки,4).Range().InsertAfter(Строка(Эл.ЕжемесячныйПлатеж));	    
				ТаблицаКредитов.Cell(НомерСтроки,5).Range().InsertAfter(Строка(Эл.ЕжемесячныйДоход));		
				ТаблицаКредитов.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Эл.СуммаКредита));
				                                                    
				//Поиск = Новый Структура("Банк,ВидКредита,Проект",эл.Банк,Объект.ВидКредита,Структура.ВариантОтвета);
				
				//СтруктураПараметровКредита = ПолучитьПараметрыКредита(Поиск, Эл.СуммаКредита);
				//

				//ТаблицаКредитов.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Формат(СтруктураПараметровКредита.Комиссия,"ЧЦ=10; ЧДЦ=2; ЧН=0")));
				//ТаблицаКредитов.Cell(НомерСтроки,7).Range().InsertAfter(Строка(СтруктураПараметровКредита.Страхование));
				
				Если Объект.ТаблицаРасчетовПотребительскогоКредита.Количество()>(НомерСтроки-2) Тогда
					ТаблицаКредитов.Rows.Add();
				КонецЕсли;	
			КонецЦикла;
		Иначе
			Попытка
				НовыйДокумент.Tables(3).Delete();
			Исключение
				//НовыйДокумент.Tables(3).Table.Select();
				//Selection = WordApplication.Content.Find.Application.Selection;
				//Selection.Delete();
        	КонецПопытки;
		КонецЕсли;
		////Шапка	
		////<>, Басаргин (26.12.2016) {
		//Если НЕ Объект.ТаблицаРасчетовПотребительскогоКредита.Количество() Тогда
		//	Сообщить("Не заполнены все параметры для расчета");
		//	Возврат;	
		//КонецЕсли; 
		//Если ВоеннаяИпотека Тогда
		//	Объект.СтоимостьКвартиры = Объект.ПервоначальныйВзнос + Объект.ТаблицаРасчетовПотребительскогоКредита[0].СуммаКредита;
		//КонецЕсли; 
		////<> }
		
		ПВП = Объект.ПервоначальныйВзнос/Объект.СтоимостьКвартиры*100;
			
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[СтоимостьКвартиры]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СтоимостьКвартиры));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[РазмерНакопленийНИС]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(РазмерНакопленийНИС));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[РазмерСобственныхСредств]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(РазмерСобственныхСредств));
			
		//ЗаменаКонтента = НовыйДокумент.content.Find;
		//ЗаменаКонтента.Execute("[ПервоначальныйВзнос]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(?(Объект.ПервоначальныйВзнос=0,"0",Объект.ПервоначальныйВзнос)));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ПервоначальныйВзносПроценты]", Ложь, Истина, Ложь, , , Истина, , Ложь, ?(ПВП=0,"0",Строка(Формат(ПВП,"ЧДЦ=2"))));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[МаксимальныйСрокКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(МаксимальныйСрокКредита) + " (" + Окр(МаксимальныйСрокКредита/12)+")" );
		
		//ЗаменаКонтента = НовыйДокумент.content.Find;
		//ЗаменаКонтента.Execute("[РазмерКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаРасчета]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));

		Если Объект.ТаблицаРасчетовПотребительскогоКредита.Количество() Тогда
			ЗаменаКонтента = НовыйДокумент.content.Find;
			ЗаменаКонтента.Execute("[РасчетПотребительскогоКредитования]", Ложь, Истина, Ложь, , , Истина, , Ложь, "Расчет потребительского кредитования");
		Иначе
			ЗаменаКонтента = НовыйДокумент.content.Find;
			ЗаменаКонтента.Execute("[РасчетПотребительскогоКредитования]", Ложь, Истина, Ложь, , , Истина, , Ложь, "");			
		КонецЕсли; 
		
		// Хитрые танцы с бубном, чтобы заставить окно MS Word всплыть поверх 1С.				
		//WordApplication.WindowState = 1;
		//WordApplication = 0;
		
	Исключение
		//WordApplication.Quit();          	
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	//WordApplication.WindowState = 1;  //Иначе может не всплыть // Тимко
	//WordApplication = 0;  
КонецПроцедуры

&НаСервере
Процедура Записать()
	//Для Каждого Эл Из Объект.ТаблицаРасчетовПотребительскогоКредита Цикл
	//	Попытка 
	//		Док = Документы.РасчетИпотеки.СоздатьДокумент();		
	//		ЗаполнитьЗначенияСвойств(Док, Объект);
	//		ЗаполнитьЗначенияСвойств(Док, Эл);
	//		Док.Дата = ТекущаяДата();
	//		Док.УстановитьНовыйНомер();			
	//		//Док.Записать();		
	//	Исключение
	//		Сообщить("Не удалось записать документ расчет ипотеки : " + ОписаниеОшибки());
	//	КонецПопытки;			
	//КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьГрафика(ВидПлатежа)
	
	Структура = ВернутьШаблонПечатнойФормы(ПредопределенноеЗначение("Перечисление.ВидыШаблоновИК.ШаблонГрафикаПлатежей"));
	Если Структура = Неопределено Тогда Возврат КонецЕсли; 
	ИмяФайла = ПолучитьИмяВременногоФайла("doc");
	Шаблон = Структура.Шаблон;
	Шаблон.Записать(ИмяФайла);
	
	Попытка
		
		WordApplication = Новый COMОбъект("WORD.Application");
		WordApplication.Visible = 1; 
		WordApplication.Activate();
		WordApplication.WindowState = 2;	
		
		НовыйДокумент = WordApplication.Documents.Open(ИмяФайла);		
		//Таблица
		НомерСтроки = 2;
		ТаблицаГрафика = НовыйДокумент.Tables(2);
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ВидПлатежа]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(ВидПлатежа));

		
		Для Каждого Эл Из Объект.ТаблицаГрафика Цикл
			НомерСтроки = НомерСтроки+1;    
			ТаблицаГрафика.Cell(НомерСтроки,1).Range().InsertAfter(Строка(Эл.НомерСтроки));
			ТаблицаГрафика.Cell(НомерСтроки,2).Range().InsertAfter(Строка(Формат(Эл.ДатаПлатежа, "ДФ=dd.MM.yyyy")));	
			
			Если ВидПлатежа = "Аннуитетный" Тогда
				ТаблицаГрафика.Cell(НомерСтроки,3).Range().InsertAfter(Строка(Эл.АП_Всего));
				ТаблицаГрафика.Cell(НомерСтроки,4).Range().InsertAfter(Строка(Эл.АП_ПогашениеДолга));	    
				ТаблицаГрафика.Cell(НомерСтроки,5).Range().InsertAfter(Строка(Эл.АП_ПогашениеПроцентов));	
				ТаблицаГрафика.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Эл.АП_ОстатокДолга));	
			Иначе
				
				ТаблицаГрафика.Cell(НомерСтроки,3).Range().InsertAfter(Строка(Эл.ДП_Всего));
				ТаблицаГрафика.Cell(НомерСтроки,4).Range().InsertAfter(Строка(Эл.ДП_ПогашениеДолга));	    
				ТаблицаГрафика.Cell(НомерСтроки,5).Range().InsertAfter(Строка(Эл.ДП_ПогашениеПроцентов));	
				ТаблицаГрафика.Cell(НомерСтроки,6).Range().InsertAfter(Строка(Эл.ДП_ОстатокДолга));	
			КонецЕсли;
			Если Объект.ТаблицаГрафика.Количество()>(НомерСтроки-2) Тогда
				ТаблицаГрафика.Rows.Add();
			КонецЕсли;	
		КонецЦикла;	
		
		//Шапка	
		
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[РазмерКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СуммаКредита));
		
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ПроцентнаяСтавка]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.ПроцентнаяСтавка));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[СрокЗайма]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Объект.СрокЗайма));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаВыдачиКредита]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(Объект.ДатаВыдачиКредита, "ДФ=dd.MM.yyyy")));
		
		ЗаменаКонтента = НовыйДокумент.content.Find;
		ЗаменаКонтента.Execute("[ДатаРасчета]", Ложь, Истина, Ложь, , , Истина, , Ложь, Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));

		// Хитрые танцы с бубном, чтобы заставить окно MS Word всплыть поверх 1С.				
		//WordApplication.WindowState = 1;
		//WordApplication = 0;
	Исключение
		//WordApplication.Quit();          	
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаКалькулятор Тогда
		//<>, Басаргин (26.12.2016) {
		Пересчет_ВоеннаяИпотека();
		//Если ВоеннаяИпотека Тогда
		//	Пересчет_ВоеннаяИпотека();	
		//Иначе	
		//	ПроверитьЗаполнение();
		//	РассчитатьНаСервере();				
		//КонецЕсли; 
		//<> }
		РассчитатьНаСервере();
	Иначе
		РассчитатьГрафикПлатежей();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйРасчет(Команда)
	// Меняем создание нового документа на очистку текущей закладки.
	//ЭтаФорма.Закрыть();
	//ОткрытьФорму("Обработка.ИпотечныйКалькулятор.Форма.ФормаУ");
	ОчиститьТекущуюСтраницу();
КонецПроцедуры

&НаСервере
Процедура ОчиститьТекущуюСтраницу() 
	Если ЭтаФорма.ПодчиненныеЭлементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаГрафик" Тогда
		Объект.ПроцентнаяСтавка = 0;
		Объект.АннуитетныйПлатеж = Ложь;
		Объект.ДифференцированныйПлатеж = Ложь;
		Объект.СуммаКредита = 0;
		Объект.СрокЗайма = 0;
		Объект.ТаблицаГрафика.Очистить();
	Иначе
		Объект.СтоимостьКвартиры = 0;
		Объект.ПервоначальныйВзнос = 0;
		Объект.Проект = Справочники.Проекты.ПустаяСсылка(); 
		Объект.ТаблицаРасчетовПотребительскогоКредита.Очистить();
	КонецЕсли;
КонецПроцедуры


&НаСервере 
Процедура РассчитатьГрафикПлатежей() 
	Если НЕ (Объект.АннуитетныйПлатеж или Объект.ДифференцированныйПлатеж) Тогда
		Сообщить("Выберите способ расчета ежемесячных платежей!");
		Возврат;
	КонецЕсли;
	
	Объект.ТаблицаГрафика.Очистить();
	АП_ОстатокДолга = Объект.СуммаКредита;
	ДП_ОстатокДолга = Объект.СуммаКредита;
	
	ПС = Объект.ПроцентнаяСтавка/100/12; // ежемесячная процентная ставка
	Икс = POW(1+ПС,-(Объект.СрокЗайма-ВыбранныйВидКредитаШагРасчетный));			
	АП_ЕжемесячныйПлатеж = Объект.СуммаКредита*ПС/(1-Икс);	
	ДП_ПогашениеДолга = Объект.СуммаКредита/Объект.СрокЗайма;
	
	ТекСтрока = 0;
	Пока ТекСтрока < Объект.СрокЗайма Цикл
		
		ТекСтрока = ТекСтрока+1;
		НоваяСтрока = Объект.ТаблицаГрафика.Добавить();
		НоваяСтрока.ОтображатьСтроку = Ложь;
		НоваяСтрока.ДатаПлатежа = ДобавитьМесяц(Объект.ДатаВыдачиКредита, ТекСтрока);
		Если Объект.АннуитетныйПлатеж Тогда
			НоваяСтрока.АП_ПогашениеПроцентов = Окр(АП_ОстатокДолга * ПС, 2);
			Если ТекСтрока = Объект.СрокЗайма Тогда
				НоваяСтрока.АП_ПогашениеДолга = АП_ОстатокДолга;
				НоваяСтрока.АП_ОстатокДолга = 0;
				НоваяСтрока.АП_Всего = АП_ОстатокДолга + НоваяСтрока.АП_ПогашениеПроцентов;
			Иначе
				НоваяСтрока.АП_Всего = АП_ЕжемесячныйПлатеж;
				НоваяСтрока.АП_ПогашениеДолга = АП_ЕжемесячныйПлатеж - НоваяСтрока.АП_ПогашениеПроцентов;
				НоваяСтрока.АП_ОстатокДолга = АП_ОстатокДолга - НоваяСтрока.АП_ПогашениеДолга;
			КонецЕсли;
			АП_ОстатокДолга = АП_ОстатокДолга - НоваяСтрока.АП_ПогашениеДолга;
		КонецЕсли;
		
		Если Объект.ДифференцированныйПлатеж Тогда
			
			НоваяСтрока.ДП_ПогашениеДолга =	ДП_ПогашениеДолга;
			НоваяСтрока.ДП_ОстатокДолга = ДП_ОстатокДолга - ДП_ПогашениеДолга;
			НоваяСтрока.ДП_ПогашениеПроцентов = ДП_ОстатокДолга * ПС;
			НоваяСтрока.ДП_Всего = НоваяСтрока.ДП_ПогашениеДолга + НоваяСтрока.ДП_ПогашениеПроцентов;
			
			ДП_ОстатокДолга = ДП_ОстатокДолга - ДП_ПогашениеДолга;	
		КонецЕсли;
		Если ТекСтрока = 1 Или ТекСтрока = Объект.СрокЗайма Тогда
			НоваяСтрока.ОтображатьСтроку = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураО = Новый ФиксированнаяСтруктура("ОтображатьСтроку", Истина);
	Элементы.ТаблицаГрафика.ОтборСтрок = СтруктураО;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКГрафикуПлатежей(Команда)
	ТекДанные = Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущиеДанные;
	Объект.ПроцентнаяСтавка = ТекДанные.ПроцентнаяСтавка;
	Объект.СрокЗайма = ТекДанные.СрокЗайма;
	Объект.СуммаКредита = ТекДанные.СуммаКредита;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаГрафик;
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаКалькулятор Тогда		
		ПечатьWord();
	Иначе
		//РассчитатьГрафикПлатежей();
		//Если Объект.АннуитетныйПлатеж Тогда
		//	ВидПлатежа = "Аннуитетный";
		//	ПечатьГрафика(ВидПлатежа);
		//КонецЕсли;	
		//Если Объект.ДифференцированныйПлатеж Тогда
		//	ВидПлатежа = "Дифференцированный";
		//	ПечатьГрафика(ВидПлатежа);
		//КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


//////////////////////////////////////////////// КОМАНДЫ ФОРМЫ/////////////////////////////////

//////////////////////////////////////////////// ЗАПОЛНЕНИЕ НАЧАЛЬНЫМИ ЗНАЧЕНИЯМИ /////////////

&НаСервере
Процедура ЗаполнитьСписокПроектов()
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Квартирограмма.ОбъектСтроительства.Проект КАК Проект
	               |ИЗ
	               |	РегистрСведений.Квартирограмма КАК Квартирограмма
	               |ГДЕ
	               |	(Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЖилаяНедвижимость)
	               |			ИЛИ Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЗемельныйУчасток))
	               |	И Квартирограмма.ОбъектСтроительства.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";
		
	СписокПроектов.Очистить();
	рз = Запрос.Выполнить().Выбрать();
	Пока рз.Следующий() Цикл
		// Добавляем в том случае только если есть шаблон 		
		СписокПроектов.Добавить(рз.Проект);   
	КонецЦикла;
КонецПроцедуры		

&НаСервере
Процедура ЗаполнитьСписокВидовКредита()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыКредитов.Ссылка
	|ИЗ
	|	Справочник.ВидыКредитов КАК ВидыКредитов
	|ГДЕ
	|	НЕ ВидыКредитов.ПометкаУдаления");	
	СписокВидовКредита.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокБанков()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БанкиВидыКредита.Ссылка
	|ИЗ
	|	Справочник.Банки.ВидыКредита КАК БанкиВидыКредита
	|ГДЕ
	|	БанкиВидыКредита.ВидКредита В(&ВидыКредита)
	|
	|УПОРЯДОЧИТЬ ПО
	|	БанкиВидыКредита.Ссылка.Наименование");
	
	ВидыКредита = Новый Массив;
	//ВидыКредита.Добавить(Справочники.ВидыКредитов.НайтиПоКоду("000000001"));
	ВидыКредита.Добавить(Справочники.ВидыКредитов.ПотребительскийКредит);
	
	//Запрос.УстановитьПараметр("ВидКредита", Объект.ВидКредита); 
	Запрос.УстановитьПараметр("ВидыКредита", ВидыКредита); 
	                              
	СписокБанков.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Процедура Инициализация()	
	
	Элементы.Декорация1.Заголовок = "Калькулятор военной ипотеки";
	
	Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита");
	Объект.ВидКредита = Справочники.ВидыКредитов.ИпотечныйКредит;
	Объект.ДатаВыдачиКредита = ТекущаяДата();
	
	Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаЕП_ЕД.ТолькоПросмотр = Истина;	
	
	ЗаполнитьСписокВидовКредита();
	ЗаполнитьСписокПроектов();
	ЗаполнитьСписокБанков();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Инициализация();
	
	//++ Юкаев Роман 20180123 (
	Элементы.Проект.СписокВыбора.Добавить(Объект.Проект);
	//-- Юкаев Роман 20180123 )
	
	//<>, Басаргин (26.12.2016) {
	ВоеннаяИпотека = Истина;
	//Элементы.Переключатель.Видимость = Ложь;
	//Элементы.ВозрастЗаемщика.Видимость = Ложь;
	
	//Объект.СтоимостьКвартиры = 3000000;
	//РазмерНакопленийНИС = 1000000;
	//РазмерСобственныхСредств = 500000;
	//РазмерПотребительскогоКредита = 1500000;
	//Объект.ПервоначальныйВзнос = 1500000;
	//ВозрастЗаемщика = 34;
	//МаксимальныйСрокКредита = 132;
	
	//<> }
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКредитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокВидовКредита;
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокПроектов;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокБанков;
КонецПроцедуры

//////////////////////////////////////////////// ЗАПОЛНЕНИЕ НАЧАЛЬНЫМИ ЗНАЧЕНИЯМИ /////////////


//////////////////////////////////////////////// ПРИ ИЗМЕНЕНИИ ////////////////////////////////

&НаСервере
Процедура Пересчет()	
	Если НЕ Объект.СтоимостьКвартиры = 0 или НЕ Объект.ПервоначальныйВзнос = 0 Тогда	
		//Объект.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;	
		Для Каждого Стр Из Объект.ТаблицаРасчетовПотребительскогоКредита Цикл
			//Стр.СуммаКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос;	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтоимостьКвартирыПриИзменении(Элемент)
	
	////<>, Басаргин (26.12.2016) {
	//Если ВоеннаяИпотека Тогда
	//	Пересчет_ВоеннаяИпотека();
	//Иначе
	//	Пересчет();		
	//КонецЕсли;	
	////<> }
	
	Пересчет_ВоеннаяИпотека();	
	РассчитатьНаСервере();		
	
КонецПроцедуры


&НаКлиенте
Процедура ПервоначальныйВзносПриИзменении(Элемент)
	
	Пересчет_ВоеннаяИпотека();
	
	////<>, Басаргин (26.12.2016) {
	//Если ВоеннаяИпотека Тогда
	//	Пересчет_ВоеннаяИпотека();
	//Иначе
	//	Пересчет();		
	//КонецЕсли;	
	////<> }

КонецПроцедуры


&НаКлиенте
Процедура ВидКредитаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ЗаполнитьСписокБанков();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСуммаКредитаПриИзменении(Элемент)
	
	//Если ЗначениеЗаполнено(Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущиеДанные.СуммаКредита) Тогда
	//	Объект.ПервоначальныйВзнос = Объект.СтоимостьКвартиры - Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущиеДанные.СуммаКредита;
	//Иначе	
	//	Объект.СтоимостьКвартиры = Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущиеДанные.СуммаКредита + Объект.ПервоначальныйВзнос;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаКалькулятор Тогда
		Элементы.Декорация1.Заголовок = "Калькулятор военной ипотеки";
	Иначе
		Элементы.Декорация1.Заголовок = "График платежей по кредиту";
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////// ПРИ ИЗМЕНЕНИИ ////////////////////////////////




////////////////////// ИЗМЕНЕНИЕ ВАРИАНТА РАСЧЕТА + ПЕРЕМЕЩЕНИЕ КОЛОНОК ///////////////////////////////
&НаКлиенте
Процедура ВариантРасчетаПриИзменении(Элемент)
	Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзПараметровКредита") Тогда
		Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаЕП_ЕД.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзЕжемесячногоПлатежа") Тогда
		Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаЕП_ЕД.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЭлементыПереместить(Вначало)
	Если Вначало Тогда
		Элементы.Переместить(Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаЕП_ЕД, Элементы.ТаблицаРасчетовПотребительскогоКредита, Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаБанкУсловия);
	Иначе
		Элементы.Переместить(Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаЕП_ЕД, Элементы.ТаблицаРасчетовПотребительскогоКредита, Элементы.ТаблицаРасчетовПотребительскогоКредита.ПодчиненныеЭлементы.ГруппаСуммаКредита);
	КонецЕсли;
КонецПроцедуры

////////////////////// ИЗМЕНЕНИЕ ВАРИАНТА РАСЧЕТА + ПЕРЕМЕЩЕНИЕ КОЛОНОК ///////////////////////////////




&НаСервере
Процедура ЗаполнитьКолонкуНаСервере(ТекущаяКолонка)
	Таб = Объект.ТаблицаРасчетовПотребительскогоКредита.Выгрузить();
	Зн = Таб[0][ТекущаяКолонка];
	Таб.ЗаполнитьЗначения(Зн,ТекущаяКолонка);
	Объект.ТаблицаРасчетовПотребительскогоКредита.Загрузить(Таб);
КонецПроцедуры


&НаКлиенте 
Процедура ЗаполнитьКолонку(Команда)
	ЗаполнитьКолонкуНаСервере(Сред(Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущийЭлемент.Имя,16));
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеВыше(НомерСтроки, Отказ = Ложь)

	ПереченьОбязательныхПолей = Новый СписокЗначений;
	ПереченьОбязательныхПолей.Добавить("Банк");
	//ПереченьОбязательныхПолей.Добавить("ПроцентнаяСтавка");
	//ПереченьОбязательныхПолей.Добавить("СрокЗайма");
	//Если Объект.ВариантРасчета = ПредопределенноеЗначение("Перечисление.ВариантыРасчета.РасчетИсходяИзЕжемесячногоПлатежа") Тогда
	//	ПереченьОбязательныхПолей.Добавить("ЕжемесячныйПлатеж");
	//	ПереченьОбязательныхПолей.Добавить("ЕжемесячныйДоход");
	//КонецЕсли;
	
	Таб = Объект.ТаблицаРасчетовПотребительскогоКредита.Выгрузить();
	Для Каждого Колонка Из Таб.Колонки Цикл
		Если ПереченьОбязательныхПолей.НайтиПоЗначению(Колонка.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Таб[НомерСтроки][Колонка.Имя]) Тогда
			Сообщить("Перед добавлением строки заполните предыдущую строку!");
			Отказ = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Не Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущаяСтрока = Неопределено Тогда
		Отказ = Ложь;
		СтрокаТабличнойЧасти = Объект.ТаблицаРасчетовПотребительскогоКредита.НайтиПоИдентификатору(Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущаяСтрока);
		ИндексСтроки = Объект.ТаблицаРасчетовПотребительскогоКредита.Индекс(СтрокаТабличнойЧасти);
		
		ПроверитьЗаполнениеВыше(ИндексСтроки, Отказ);
		Если Отказ Тогда
			СтандартнаяОбработка = Ложь;
			Возврат
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//<>, Басаргин (26.12.2016) {
&НаКлиенте
Процедура ВоеннаяИпотекаПриИзменении(Элемент)
	
	Объект.ТаблицаРасчетовВоеннойИпотеки.Очистить();
	Объект.ТаблицаРасчетовПотребительскогоКредита.Очистить();	

	УстановитьВидимостьЭлементовДляВоеннойИпотеки(ВоеннаяИпотека);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)

	Объект.ТаблицаРасчетовВоеннойИпотеки.Очистить();
	Объект.ТаблицаРасчетовПотребительскогоКредита.Очистить();	
	
	//Элементы.СтоимостьКвартиры.Доступность = Переключатель;
	//Элементы.ВозрастЗаемщика.Видимость = НЕ Переключатель;
	//Если НЕ Элементы.СтоимостьКвартиры.Доступность Тогда
	//	Объект.СтоимостьКвартиры = 0;		
	//КонецЕсли; 
	//Если НЕ Элементы.ВозрастЗаемщика.Видимость Тогда
	//	ВозрастЗаемщика = 0;	
	//КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДляВоеннойИпотеки(Видимость = Ложь)
	
	//Элементы.Переключатель.Видимость = Видимость;
	//Элементы.ВозрастЗаемщика.Видимость = Видимость;	
	//
	//Если Видимость Тогда
	//	Элементы.СтоимостьКвартиры.Доступность = Переключатель;
	//	Элементы.ВозрастЗаемщика.Видимость = НЕ Переключатель;
	//	Если НЕ Элементы.СтоимостьКвартиры.Доступность Тогда
	//		Объект.СтоимостьКвартиры = 0;		
	//	КонецЕсли; 
	//	Если НЕ Элементы.ВозрастЗаемщика.Видимость Тогда
	//		ВозрастЗаемщика = 0;	
	//	КонецЕсли; 
	//Иначе
	//	Элементы.СтоимостьКвартиры.Доступность = Истина;
	//	Элементы.ВозрастЗаемщика.Видимость = Ложь;
	//	Если НЕ Элементы.СтоимостьКвартиры.Доступность Тогда
	//		Объект.СтоимостьКвартиры = 0;		
	//	КонецЕсли; 
	//	Если НЕ Элементы.ВозрастЗаемщика.Видимость Тогда
	//		ВозрастЗаемщика = 0;	
	//	КонецЕсли; 		
	//КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ВозрастЗаемщикаПриИзменении(Элемент)
	
	МаксимальныйСрокКредита = 12 * (45 - ВозрастЗаемщика);
	
	//Если ВоеннаяИпотека Тогда
	//	Пересчет_ВоеннаяИпотека();	
	//КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура Пересчет_ВоеннаяИпотека(Стр = Неопределено)
	
	ДоступностьТаблицаРасчетовПотребительскогоКредита = Ложь;
	Если Стр = Неопределено Тогда		
		Для Каждого Стр Из Объект.ТаблицаРасчетовВоеннойИпотеки Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Банк) ИЛИ НЕ ЗначениеЗаполнено(Стр.СрокЗайма) Тогда
				Продолжить;
			КонецЕсли; 
			
			//Расширение = ПолучитьРасширениеИмениМакета(Стр.Банк, ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"));
			//ИмяФайлаШаблона = ПолучитьШаблонРасчетаСпецПрограммы(Стр.Банк, ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"), Расширение);
			
			Стр.РазмерНИССубсидии = РазмерНакопленийНИС; //??
			
			ИмяФайлаШаблона = ПолучитьШаблонРасчетаСпецПрограммы(Стр.Банк, ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"));
			
			Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда	
				
				СтруктураЗаполнения = ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, Стр);
				Если НЕ СтруктураЗаполнения = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);				
				КонецЕсли;
				
				Стр.РазмерПотребительскогоКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос - Стр.СуммаКредита;
				Стр.РазмерПотребительскогоКредита = ?(Стр.РазмерПотребительскогоКредита < 0, 0, Стр.РазмерПотребительскогоКредита); 
				
				КоэфициентПлатежаКДоходу = ПолучитьКоэфициентПлатежаКДоходу(Стр.Банк, Объект.ВидКредита);
				Если КоэфициентПлатежаКДоходу = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Коэфициент платежа к доходу. Ежемесячный доход не может быть рассчитан");
				Иначе
					Стр.ЕжемесячныйДоход = Стр.ЕжемесячныйПлатеж / КоэфициентПлатежаКДоходу;
				КонецЕсли; 					
				
				//СтруктураЗаполнения = ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, Расширение, Стр.Банк, Стр.СрокЗайма, Переключатель);
				//Если НЕ СтруктураЗаполнения = Неопределено Тогда
				//	ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);
				//	//Объект.СтоимостьКвартиры = Объект.ПервоначальныйВзнос + Стр.СуммаКредита;	
				//КонецЕсли;
			Иначе
				ПоказатьПредупреждение(,"Отсутсвует шаблон расчета.");
				ОчистититьСтрокуТЧ(Стр);
			КонецЕсли;
			
			Если НЕ ДоступностьТаблицаРасчетовПотребительскогоКредита И Стр.РазмерПотребительскогоКредита > 0 Тогда
				ДоступностьТаблицаРасчетовПотребительскогоКредита = Истина;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		Если НЕ ЗначениеЗаполнено(Стр.Банк) ИЛИ НЕ ЗначениеЗаполнено(Стр.СрокЗайма) Тогда
			Элементы.Группа1.Доступность = ДоступностьТаблицаРасчетовПотребительскогоКредита;
			Возврат;
			//Продолжить;
		КонецЕсли; 
		
		//Расширение = ПолучитьРасширениеИмениМакета(Стр.Банк, ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"));
		//ИмяФайлаШаблона = ПолучитьШаблонРасчетаСпецПрограммы(Стр.Банк, ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"), Расширение);
		
		Стр.РазмерНИССубсидии = РазмерНакопленийНИС; //??
		
		ИмяФайлаШаблона = ПолучитьШаблонРасчетаСпецПрограммы(Стр.Банк, ПредопределенноеЗначение("Справочник.СпециальныеПрограммыКредитования.ВоеннаяИпотека"));		
		
		Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда	
			
			СтруктураЗаполнения = ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, Стр);
			Если НЕ СтруктураЗаполнения = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);				
			КонецЕсли;
			
			Стр.РазмерПотребительскогоКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос - Стр.СуммаКредита;
			Стр.РазмерПотребительскогоКредита = ?(Стр.РазмерПотребительскогоКредита < 0, 0, Стр.РазмерПотребительскогоКредита); 
			
			КоэфициентПлатежаКДоходу = ПолучитьКоэфициентПлатежаКДоходу(Стр.Банк, Объект.ВидКредита);
			Если КоэфициентПлатежаКДоходу = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Коэфициент платежа к доходу. Ежемесячный доход не может быть рассчитан");
			Иначе
				Стр.ЕжемесячныйДоход = Стр.ЕжемесячныйПлатеж / КоэфициентПлатежаКДоходу;
			КонецЕсли; 			
			
			//СтруктураЗаполнения = ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, Расширение, Стр.Банк, Стр.СрокЗайма, Переключатель);
			//Если НЕ СтруктураЗаполнения = Неопределено Тогда
			//	ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);
			//	//Объект.СтоимостьКвартиры = Объект.ПервоначальныйВзнос + Стр.СуммаКредита;	
			//КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, "Отсутсвует шаблон расчета.");
			ОчистититьСтрокуТЧ(Стр);
		КонецЕсли;
		Если НЕ ДоступностьТаблицаРасчетовПотребительскогоКредита И Стр.РазмерПотребительскогоКредита > 0 Тогда
			ДоступностьТаблицаРасчетовПотребительскогоКредита = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.Группа1.Доступность = ДоступностьТаблицаРасчетовПотребительскогоКредита;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчистититьСтрокуТЧ(Стр)
	
	ПроцСтавка = 0;
	ЕжемесПлатежи = 0;
	СуммаКредита = 0; 
	СрокКредита = 0; 
	ЕжемесячныйДоход = 0;
	РазмерПотребительскогоКредита = 0;

	ЗаполнитьЗначенияСвойств(Стр, Новый Структура("ПроцентнаяСтавка, ЕжемесячныйПлатеж, ЕжемесячныйДоход, СуммаКредита, РазмерПотребительскогоКредита", ПроцСтавка, ЕжемесПлатежи, СуммаКредита, ЕжемесячныйДоход, РазмерПотребительскогоКредита));
	
КонецПроцедуры 

&НаКлиенте
Функция _ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, Расширение, Банк, СрокЗайма, ПоСроку = Ложь)
	
	Если ИмяФайлаШаблона = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Найти(ВРег(Расширение), "XLS") Тогда
		
		ПроцСтавка = 0;
		ЕжемесПлатежи = 0;
		СуммаКредита = 0; 
		СрокКредита = 0; 
		ЕжемесячныйДоход = 0;
		РазмерПотребительскогоКредита = 0;
		
		//СрокЗайма,  //СрокКредита,        ПроцентнаяСтавка
		СтруктураВозврат = Новый Структура("ЕжемесячныйПлатеж, ЕжемесячныйДоход, СуммаКредита, РазмерПотребительскогоКредита", ПроцСтавка, ЕжемесПлатежи, СуммаКредита, ЕжемесячныйДоход, РазмерПотребительскогоКредита);
		
		Попытка		
			ExcelApplication = Новый COMОбъект("Excel.Application");			
			ExcelApplication.Visible = Ложь;
			ExcelApplication.WindowState = -4140;
			Book = ExcelApplication.WorkBooks.Open(ИмяФайлаШаблона);  			
			ЛистЭксель = Book.Sheets(1);			
			
			Если НЕ ПоСроку Тогда								
				ЛистЭксель.Cells(8, 2).Value = СрокЗайма;
				
				//ЛистЭксель.Cells(2, 2).FormulaR1C1 = ЛистЭксель.Cells(2, 2).FormulaR1C1;
				//Попытка
				//	СтруктураВозврат.ПроцентнаяСтавка = Число(СтрЗаменить(ЛистЭксель.Cells(2, 2).Text, "%", ""));
				//Исключение
				//КонецПопытки;
				
				ЛистЭксель.Cells(4, 2).FormulaR1C1 = ЛистЭксель.Cells(4, 2).FormulaR1C1;
				Попытка
					СтруктураВозврат.ЕжемесячныйПлатеж = Число(СтрЗаменить(ЛистЭксель.Cells(4, 2).Text, " ", ""));
				Исключение				
				КонецПопытки;
				
				ЛистЭксель.Cells(7, 2).FormulaR1C1 = ЛистЭксель.Cells(7, 2).FormulaR1C1;
				Попытка
					СтруктураВозврат.СуммаКредита = Число(СтрЗаменить(ЛистЭксель.Cells(7, 2).Text, " ", ""));
				Исключение
					Сообщить("Проверьте расчеты в шаблоне военной ипотеки.");
				КонецПопытки;	
								
				//ЛистЭксель.Cells(8, 2).FormulaR1C1 = ЛистЭксель.Cells(8, 2).FormulaR1C1;
				//Попытка
				//	СтруктураВозврат.СрокЗайма = Число(СтрЗаменить(ЛистЭксель.Cells(8, 2).Text, " ", ""));
				//Исключение
				//КонецПопытки;
				
				СтруктураВозврат.РазмерПотребительскогоКредита = Объект.СтоимостьКвартиры - Объект.ПервоначальныйВзнос - СтруктураВозврат.СуммаКредита;
				СтруктураВозврат.РазмерПотребительскогоКредита = ?(СтруктураВозврат.РазмерПотребительскогоКредита < 0, 0, СтруктураВозврат.РазмерПотребительскогоКредита); 
				
				КоэфициентПлатежаКДоходу = ПолучитьКоэфициентПлатежаКДоходу(Банк, Объект.ВидКредита);
				Если КоэфициентПлатежаКДоходу = 0 Тогда
					Сообщить("Не заполнен Коэфициент платежа к доходу. Ежемесячный доход не может быть рассчитан");
				Иначе
					СтруктураВозврат.ЕжемесячныйДоход = СтруктураВозврат.ЕжемесячныйПлатеж / КоэфициентПлатежаКДоходу;
				КонецЕсли; 
				
			Иначе
				//ЛистЭксель.Cells(3, 3).Value = Объект.СтоимостьКвартиры;
				//ЛистЭксель.Cells(5, 3).Value = Объект.ПервоначальныйВзнос;

				//ЛистЭксель.Cells(2, 3).FormulaR1C1 = ЛистЭксель.Cells(2, 3).FormulaR1C1;
				//Попытка
				//	СтруктураВозврат.ПроцентнаяСтавка = Число(СтрЗаменить(ЛистЭксель.Cells(2, 3).Text, "%", ""));
				//Исключение
				//	Сообщить("Проверьте расчеты в шаблоне военной ипотеки.");
				//КонецПопытки;
				//
				//ЛистЭксель.Cells(4, 3).FormulaR1C1 = ЛистЭксель.Cells(4, 3).FormulaR1C1;
				//Попытка                                                                                   
				//	СтруктураВозврат.ЕжемесячныйПлатеж = Число(СтрЗаменить(ЛистЭксель.Cells(4, 3).Text, " ", ""));
				//Исключение
				//КонецПопытки;
				//
				//ЛистЭксель.Cells(7, 3).FormulaR1C1 = ЛистЭксель.Cells(7, 3).FormulaR1C1;
				//Попытка
				//	СтруктураВозврат.СуммаКредита = Число(СтрЗаменить(ЛистЭксель.Cells(7, 3).Text, " ", ""));
				//Исключение
				//КонецПопытки;					
				//
				//ЛистЭксель.Cells(8, 3).FormulaR1C1 = ЛистЭксель.Cells(8, 3).FormulaR1C1;
				//Попытка
				//	СтруктураВозврат.СрокЗайма = Число(СтрЗаменить(ЛистЭксель.Cells(8, 3).Text, " ", ""));
				//Исключение
				//	Сообщить("Проверьте расчеты в шаблоне военной ипотеки.");
				//КонецПопытки;	
				//
				//СтруктураВозврат.ЕжемесячныйДоход = СтруктураВозврат.ЕжемесячныйПлатеж * 2;
				
			КонецЕсли; 
			
			//ExcelApplication.WindowState = -4137;
			//Book.Activate();
			Book.Application.DisplayAlerts = Ложь;
			ExcelApplication.ActiveWorkbook.Close();
			ExcelApplication.Quit();
			ExcelApplication = 0;
		Исключение
			ExcelApplication = 0;
			//ExcelApplication.ActiveWorkbook.Close();			          	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
						
		Возврат СтруктураВозврат;
		
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэфициентПлатежаКДоходу(Банк, ВидКредита)
	
	БанкОбъект = Банк.ПолучитьОбъект();
	Если НЕ БанкОбъект = Неопределено Тогда
		СтрокиВидыКредита = БанкОбъект.ВидыКредита.НайтиСтроки(Новый Структура("ВидКредита", ВидКредита));
		Если СтрокиВидыКредита.Количество() Тогда
			Возврат СтрокиВидыКредита[0].КоэффициентПлатежаКДоходу;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции 

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт

    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока 1 = 1 Цикл
            Поз = Найти(Стр, Разделитель);
            Если Поз = 0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр, Поз - 1));
            Стр = СокрЛ(Сред(Стр, Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока 1 = 1 Цикл
            Поз = Найти(Стр, Разделитель);
            Если Поз = 0 Тогда
                Если (СокрЛП(Стр) <> "") Тогда
                    МассивСтрок.Добавить(Стр);
                КонецЕсли;
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз - 1));
            Стр = Сред(Стр, Поз + ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;

КонецФункции

//&НаКлиенте
//Функция ПолучитьИмяФайлаШаблона(ИпотечныйБанк, Формат = "docx")
//	
//	ИмяФайлаШаблона = "";
//	Если НЕ ИпотечныйБанк.Пустая() Тогда
//		Макет = ВернутьШаблонПечатнойФормыИпотечногоБанка(ИпотечныйБанк);
//		Если НЕ Макет = Неопределено Тогда 
//			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
//			Попытка
//				Макет.Записать(ИмяФайлаШаблона);
//			Исключение		
//			КонецПопытки;
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Возврат ИмяФайлаШаблона;
//	
//КонецФункции

//&НаСервереБезКонтекста
//Функция ВернутьШаблонПечатнойФормыИпотечногоБанка(ИпотечныйБанк)
//		
//	Возврат ИпотечныйБанк.ПолучитьОбъект().Макет.Получить();

//КонецФункции

//&НаСервереБезКонтекста
//Функция ПолучитьРасширениеИмениМакета(ИпотечныйБанк)
//	
//	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИпотечныйБанк.ИмяМакета, ".");
//	//СтрРазделить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИпотечныйБанк, "ИмяМакета"), ".", Ложь);
//	Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");
//	
//КонецФункции

&НаКлиенте
Процедура РазмерНакопленийНИСПриИзменении(Элемент)
	
	Объект.ПервоначальныйВзнос = РазмерНакопленийНИС + РазмерСобственныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВоенныхРасчетовСрокЗаймаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРасчетовВоеннойИпотеки.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено И ТекущиеДанные.СрокЗайма > МаксимальныйСрокКредита Тогда
		ПоказатьПредупреждение(, "Ошибка: Срок займа в строке > Максимального срока кредита (исходя из возраста)");
		ТекущиеДанные.СрокЗайма = МаксимальныйСрокКредита;
		//СообщениеПользователю = Новый СообщениеПользователю;
		//СообщениеПользователю.Текст = "Ошибка: Срок займа в строке > Максимального срока кредита (исходя из возраста)";
		//СообщениеПользователю.УстановитьДанные(ЭтаФорма);
		//СообщениеПользователю.Поле = "ТаблицаРасчетовВоеннойИпотеки[" + (Объект.ТаблицаРасчетовВоеннойИпотеки.НайтиПоИдентификатору(Элементы.ТаблицаРасчетовВоеннойИпотеки.ТекущаяСтрока).НомерСтроки - 1) + "].СрокЗайма";
		//СообщениеПользователю.Сообщить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовВоеннойИпотекиПриИзменении(Элемент)
	
	Пересчет_ВоеннаяИпотека(Элементы.ТаблицаРасчетовВоеннойИпотеки.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСуммаКредитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого Стр Из Объект.ТаблицаРасчетовВоеннойИпотеки Цикл
		//Элементы.ТаблицаРасчетовПотребительскогоКредитаСуммаКредита.СписокВыбора.Добавить(Стр.РазмерПотребительскогоКредита, Строка(Стр.Банк) + " " + Стр.РазмерПотребительскогоКредита);		
		Элемент.СписокВыбора.Добавить(Стр.РазмерПотребительскогоКредита, Строка(Стр.Банк) + " / " + Стр.РазмерПотребительскогоКредита);	
	КонецЦикла;  	
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерСобственныхСредствПриИзменении(Элемент)
	
	Объект.ПервоначальныйВзнос = РазмерНакопленийНИС + РазмерСобственныхСредств;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовСуммаКредитаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРасчетовПотребительскогоКредита.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		НайденноеЗначение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если НЕ НайденноеЗначение = Неопределено Тогда
			Представление = НайденноеЗначение.Представление;
			ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Представление, " / ");		
			Если ЧастиСтроки.Количество() Тогда
				НайденныеСтроки = Объект.ТаблицаРасчетовВоеннойИпотеки.НайтиСтроки(Новый Структура("Банк", ПолучитьБанкПоНаименованию(ЧастиСтроки[0])));
				Если НайденныеСтроки.Количество() Тогда
					ТекущиеДанные.ИпотечныйБанк = НайденныеСтроки[0].Банк;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанкПоНаименованию(Представление)
	
	Возврат Справочники.Банки.НайтиПоНаименованию(Представление, Истина)
	
КонецФункции
 
&НаКлиенте
Процедура ТаблицаРасчетовСуммаКредитаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Для каждого Стр Из Объект.ТаблицаРасчетовВоеннойИпотеки Цикл
		//Элементы.ТаблицаРасчетовПотребительскогоКредитаСуммаКредита.СписокВыбора.Добавить(Стр.РазмерПотребительскогоКредита, Строка(Стр.Банк) + " " + Стр.РазмерПотребительскогоКредита);		
		Элемент.СписокВыбора.Добавить(Стр.РазмерПотребительскогоКредита, Строка(Стр.Банк) + " / " + Стр.РазмерПотребительскогоКредита);	
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовПотребительскогоКредитаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВоенныхРасчетовБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьБанкиСШаблонами();//СписокБанков;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанкиСШаблонами()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	БанкиВидыКредита.Ссылка
	                      |ИЗ
	                      |	Справочник.Банки.ВидыКредита КАК БанкиВидыКредита
	                      |ГДЕ
	                      |	НЕ БанкиВидыКредита.Ссылка.ИмяМакета = """"
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	БанкиВидыКредита.Ссылка.Наименование");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СписокВозврат = Новый СписокЗначений;
		СписокВозврат.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Возврат СписокВозврат;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ТаблицаРасчетовПотребительскогоКредитаИпотечныйБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СписокБанков;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВоенныхРасчетовБанкПриИзменении(Элемент)
	Пересчет_ВоеннаяИпотека(Элементы.ТаблицаРасчетовВоеннойИпотеки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВоеннуюИпотеку(Команда)
	Пересчет_ВоеннаяИпотека();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПотребительскийКредит(Команда)
	РассчитатьНаСервере();
КонецПроцедуры

//<> }

//++ Юкаев Роман 20180123 (
&НаКлиенте
Процедура ПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Объект.Проект = ВыбранноеЗначение;
		Элементы.Проект.СписокВыбора.Очистить();
		Элементы.Проект.СписокВыбора.Добавить(Объект.Проект);
	КонецЕсли;
	
КонецПроцедуры
//-- Юкаев Роман 20180123 )

////<>, Басаргин (06.04.2018) {
//&НаКлиенте
//Функция ПолучитьШаблонРасчетаСпецПрограммы(ИпотечныйБанк, СпециальнаяПрограмма, Формат = "docx")
//	
//	ИмяФайлаШаблона = "";
//	Если НЕ ИпотечныйБанк.Пустая() Тогда
//		Макет = ПолучитьШаблонРасчетаСпецПрограммыИпотечногоБанка(ИпотечныйБанк, СпециальнаяПрограмма);
//		Если НЕ Макет = Неопределено Тогда 
//			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
//			Попытка
//				Макет.Записать(ИмяФайлаШаблона);
//			Исключение		
//			КонецПопытки;
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Возврат ИмяФайлаШаблона;
//	
//КонецФункции

//&НаСервереБезКонтекста
//Функция ПолучитьШаблонРасчетаСпецПрограммыИпотечногоБанка(ИпотечныйБанк, СпециальнаяПрограмма)
//		
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	БанкиМакетыРасчетаСпецПрограмм.МакетРасчета КАК МакетРасчета
//	|ИЗ
//	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
//	|ГДЕ
//	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка
//	|	И БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма = &СпецПрограмма";
//	
//	Запрос.УстановитьПараметр("СпецПрограмма", СпециальнаяПрограмма);
//	Запрос.УстановитьПараметр("Ссылка", ИпотечныйБанк);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		Возврат ВыборкаДетальныеЗаписи.МакетРасчета.Получить();		
//	КонецЦикла;	
//	
//КонецФункции

//&НаСервереБезКонтекста
//Функция ПолучитьРасширениеИмениМакета(ИпотечныйБанк, СпециальнаяПрограмма)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	БанкиМакетыРасчетаСпецПрограмм.ИмяМакетаСпецПрограммы КАК ИмяМакетаСпецПрограммы,
//	|	БанкиМакетыРасчетаСпецПрограмм.МакетРасчета КАК МакетРасчета
//	|ИЗ
//	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
//	|ГДЕ
//	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка
//	|	И БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма = &СпецПрограмма";
//	
//	Запрос.УстановитьПараметр("СпецПрограмма", СпециальнаяПрограмма);
//	Запрос.УстановитьПараметр("Ссылка", ИпотечныйБанк);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.ИмяМакетаСпецПрограммы, ".");
//		Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");		
//	КонецЦикла;
//	
//КонецФункции
////<> }

//<796987>, Басаргин (27.04.2018) {
&НаКлиенте
Функция ПолучитьДанныеДляРасчетаИзЭксель(ИмяФайлаШаблона, ПараметрыИмпорта)
	
	Если ПустаяСтрока(ИмяФайлаШаблона) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтоимостьКвартиры = Объект.СтоимостьКвартиры;
	ПервоначальныйВзнос = Объект.ПервоначальныйВзнос;
	РазмерНИССубсидии = ПараметрыИмпорта.РазмерНИССубсидии;
	ПроцентнаяСтавкаБазовая = ПараметрыИмпорта.ПроцентнаяСтавка;
	ПроцентнаяСтавкаЛьготныйПериод = ПараметрыИмпорта.ПроцентнаяСтавкаЛьготныйПериод;			   
	СрокЗайма = ПараметрыИмпорта.СрокЗайма;		 
	
	ПараметрыЭкспорта = Новый Структура("ПроцентнаяСтавка, ПроцентнаяСтавкаЛьготныйПериод, СрокЗайма, СрокЗаймаЛет, ЕжемесячныйПлатеж, ЕжемесячныйПлатежЛьготныйПериод, СуммаКредита", 0, 0, 0, 0, 0, 0, 0);
	
	СуммаКредита = 0;
	
	Попытка					
		ExcelApplication = Новый COMОбъект("Excel.Application");			
		ExcelApplication.Visible = Ложь;
		ExcelApplication.WindowState = -4140;
		Book = ExcelApplication.WorkBooks.Open(ИмяФайлаШаблона);  			
		ЛистЭксель = Book.Sheets(1);			
		
		ЛистЭксель.Cells(2, 2).Value = ?(ЗначениеЗаполнено(СтоимостьКвартиры), СтоимостьКвартиры, ЛистЭксель.Cells(2, 2).Value);
		ЛистЭксель.Cells(3, 2).Value = ?(ЗначениеЗаполнено(ПервоначальныйВзнос), ПервоначальныйВзнос, ЛистЭксель.Cells(3, 2).Value);
		ЛистЭксель.Cells(4, 2).Value = ?(ЗначениеЗаполнено(РазмерНИССубсидии), РазмерНИССубсидии, ЛистЭксель.Cells(4, 2).Value);
		ЛистЭксель.Cells(5, 2).Value = ?(ЗначениеЗаполнено(ПроцентнаяСтавкаБазовая), ПроцентнаяСтавкаБазовая, ЛистЭксель.Cells(5, 2).Value);
		ЛистЭксель.Cells(6, 2).Value = ?(ЗначениеЗаполнено(ПроцентнаяСтавкаЛьготныйПериод), ПроцентнаяСтавкаЛьготныйПериод, ЛистЭксель.Cells(6, 2).Value);
		ЛистЭксель.Cells(7, 2).Value = ?(ЗначениеЗаполнено(СрокЗайма), СрокЗайма, ЛистЭксель.Cells(7, 2).Value);
		
		ПараметрыИмпорта.РазмерНИССубсидии = ЛистЭксель.Cells(4, 2).Value;
		ПараметрыИмпорта.ПроцентнаяСтавка = ЛистЭксель.Cells(5, 2).Value;
		ПараметрыИмпорта.ПроцентнаяСтавкаЛьготныйПериод = ЛистЭксель.Cells(6, 2).Value;
		ПараметрыИмпорта.СрокЗайма = ЛистЭксель.Cells(7, 2).Value;
		
		ЛистЭксель.Cells(2, 5).FormulaR1C1 = ЛистЭксель.Cells(2, 5).FormulaR1C1;
		Попытка
			ПроцентнаяСтавка = Число(СтрЗаменить(СтрЗаменить(ЛистЭксель.Cells(2, 5).Text, " ", ""), "%", "")); 
		Исключение
			ПроцентнаяСтавка = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(3, 5).FormulaR1C1 = ЛистЭксель.Cells(3, 5).FormulaR1C1;
		Попытка
			ПроцентнаяСтавкаЛьготныйПериод = Число(СтрЗаменить(СтрЗаменить(ЛистЭксель.Cells(3, 5).Text, " ", ""), "%", ""));
		Исключение
			ПроцентнаяСтавкаЛьготныйПериод = 0;
		КонецПопытки;		
		
		ЛистЭксель.Cells(4, 5).FormulaR1C1 = ЛистЭксель.Cells(4, 5).FormulaR1C1;
		Попытка
			СрокЗайма = Число(СтрЗаменить(ЛистЭксель.Cells(4, 5).Text, " ", "")); 
		Исключение
			СрокЗайма = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(5, 5).FormulaR1C1 = ЛистЭксель.Cells(5, 5).FormulaR1C1;
		Попытка
			СрокЗаймаЛет = Число(СтрЗаменить(ЛистЭксель.Cells(5, 5).Text, " ", "")); 
		Исключение
			СрокЗаймаЛет = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(6, 5).FormulaR1C1 = ЛистЭксель.Cells(6, 5).FormulaR1C1;
		Попытка
			ЕжемесячныйПлатеж = Число(СтрЗаменить(ЛистЭксель.Cells(6, 5).Text, " ", "")); 
		Исключение
			ЕжемесячныйПлатеж = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(7, 5).FormulaR1C1 = ЛистЭксель.Cells(7, 5).FormulaR1C1;
		Попытка
			ЕжемесячныйПлатежЛьготныйПериод = Число(СтрЗаменить(ЛистЭксель.Cells(7, 5).Text, " ", "")); 
		Исключение
			ЕжемесячныйПлатежЛьготныйПериод = 0;
		КонецПопытки;
		
		ЛистЭксель.Cells(8, 5).FormulaR1C1 = ЛистЭксель.Cells(8, 5).FormulaR1C1;
		Попытка
			СуммаКредита = Число(СтрЗаменить(ЛистЭксель.Cells(8, 5).Text, " ", "")); 
		Исключение
			СуммаКредита = 0;
		КонецПопытки;
		
		ПараметрыЭкспорта.СуммаКредита = ?(ЗначениеЗаполнено(СуммаКредита), СуммаКредита, ПараметрыИмпорта.СуммаКредита);
		ПараметрыЭкспорта.ПроцентнаяСтавка = ?(ЗначениеЗаполнено(ПроцентнаяСтавка), ПроцентнаяСтавка, ПараметрыИмпорта.ПроцентнаяСтавка);
		ПараметрыЭкспорта.ПроцентнаяСтавкаЛьготныйПериод = ?(ЗначениеЗаполнено(ПроцентнаяСтавкаЛьготныйПериод), ПроцентнаяСтавкаЛьготныйПериод, ПараметрыИмпорта.ПроцентнаяСтавкаЛьготныйПериод);
		ПараметрыЭкспорта.СрокЗайма = ?(ЗначениеЗаполнено(СрокЗайма), СрокЗайма, ПараметрыИмпорта.СрокЗайма);
		ПараметрыЭкспорта.СрокЗаймаЛет = ?(ЗначениеЗаполнено(СрокЗаймаЛет), СрокЗаймаЛет, ПараметрыИмпорта.СрокЗаймаЛет);
		ПараметрыЭкспорта.ЕжемесячныйПлатеж = ?(ЗначениеЗаполнено(ЕжемесячныйПлатеж), ЕжемесячныйПлатеж, ПараметрыИмпорта.ЕжемесячныйПлатеж);
		ПараметрыЭкспорта.ЕжемесячныйПлатежЛьготныйПериод = ?(ЗначениеЗаполнено(ЕжемесячныйПлатежЛьготныйПериод), ЕжемесячныйПлатежЛьготныйПериод, ПараметрыИмпорта.ЕжемесячныйПлатежЛьготныйПериод);
		
		Book.Application.DisplayAlerts = Ложь;
		ExcelApplication.ActiveWorkbook.Close();
		ExcelApplication.Quit();
		ExcelApplication = 0;
	Исключение
		ExcelApplication = 0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ПараметрыЭкспорта;		
		
КонецФункции

&НаКлиенте
Функция ПолучитьШаблонРасчетаСпецПрограммы(ИпотечныйБанк, СпециальнаяПрограмма)
	
	ИмяФайлаШаблона = "";
	Если НЕ ИпотечныйБанк.Пустая() Тогда
		Структура = ПолучитьШаблонРасчетаСпецПрограммыИпотечногоБанка(ИпотечныйБанк, СпециальнаяПрограмма);
		Макет = Структура.Макет;
		Формат = Структура.Формат;		
		Если НЕ Макет = Неопределено Тогда 
			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
			Попытка
				Макет.Записать(ИмяФайлаШаблона);
			Исключение		
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ИмяФайлаШаблона;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонРасчетаСпецПрограммыИпотечногоБанка(ИпотечныйБанк, СпециальнаяПрограмма)
	
	СтруктураВозврат = Новый Структура("Макет, Формат");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанкиМакетыРасчетаСпецПрограмм.ИмяМакетаСпецПрограммы КАК ИмяМакетаСпецПрограммы,
	|	БанкиМакетыРасчетаСпецПрограмм.МакетРасчета КАК МакетРасчета
	|ИЗ
	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
	|ГДЕ
	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка
	|	И БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма = &СпецПрограмма";
	
	Запрос.УстановитьПараметр("СпецПрограмма", СпециальнаяПрограмма);
	Запрос.УстановитьПараметр("Ссылка", ИпотечныйБанк);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураВозврат.Вставить("Макет", ВыборкаДетальныеЗаписи.МакетРасчета.Получить());
		ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.ИмяМакетаСпецПрограммы, ".");
		Формат = ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");
		СтруктураВозврат.Вставить("Формат", Формат);
	КонецЦикла;	
	
	Возврат СтруктураВозврат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРасширениеИмениМакета(ИпотечныйБанк, СпециальнаяПрограмма)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанкиМакетыРасчетаСпецПрограмм.ИмяМакетаСпецПрограммы КАК ИмяМакетаСпецПрограммы,
	|	БанкиМакетыРасчетаСпецПрограмм.МакетРасчета КАК МакетРасчета
	|ИЗ
	|	Справочник.Банки.МакетыРасчетаСпецПрограмм КАК БанкиМакетыРасчетаСпецПрограмм
	|ГДЕ
	|	БанкиМакетыРасчетаСпецПрограмм.Ссылка = &Ссылка
	|	И БанкиМакетыРасчетаСпецПрограмм.СпецПрограмма = &СпецПрограмма";
	
	Запрос.УстановитьПараметр("СпецПрограмма", СпециальнаяПрограмма);
	Запрос.УстановитьПараметр("Ссылка", ИпотечныйБанк);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаДетальныеЗаписи.ИмяМакетаСпецПрограммы, ".");
		Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");		
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьВыбранныйВидКредита(Банк, ВидКредита)
	
	Поиск = Новый Структура("ВидКредита", ВидКредита);
	ТЗ = Банк.ВидыКредита.Выгрузить();
	
	ВидКредитаБанка = ТЗ.НайтиСтроки(Поиск);
	Если ВидКредитаБанка.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВидКредитаБанка[0]);
	КонецЕсли;
	
КонецФУнкции
//<796987> }
