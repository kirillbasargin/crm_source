
#Область ПрограммныйИнтерфейс

Функция ПолучитьДеревоДублейЗапросов(Клиенты = Неопределено, Проект = Неопределено, Первые = 0) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросУчастники.Ссылка.Проект КАК Проект,
	|	ЗапросУчастники.Ссылка.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	ЗапросУчастники.Клиент КАК Клиент,
	|	ЗапросУчастники.Ссылка КАК Запрос
	|ПОМЕСТИТЬ ВТ_ДанныеЗапросов
	|ИЗ
	|	Документ.Запрос.Участники КАК ЗапросУчастники
	|ГДЕ
	|	НЕ ЗапросУчастники.Ссылка.ПометкаУдаления
	|	И ЗапросУчастники.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
	|	И НЕ ЗапросУчастники.Ссылка.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	И НЕ ЗапросУчастники.Ссылка.ТипОбъектаНедвижимости = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНедвижимости.ПустаяСсылка)
	|	И ЗапросУчастники.Ссылка.Проект = &Проект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Запрос,
	|	Клиент,
	|	Проект,
	|	ТипОбъектаНедвижимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗапросУчастники.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	ЗапросУчастники.Проект КАК Проект,
	|	ЗапросУчастники.Клиент КАК Клиент,
	|	ЗапросУчастники.Запрос КАК Запрос,
	|	ЗапросУчастникиДубли.Запрос КАК ДубльЗапроса
	|ПОМЕСТИТЬ вт_СписокДублирующихЗапросов
	|ИЗ
	|	ВТ_ДанныеЗапросов КАК ЗапросУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗапросов КАК ЗапросУчастникиДубли
	|		ПО ЗапросУчастники.Запрос <> ЗапросУчастникиДубли.Запрос
	|			И ЗапросУчастники.Клиент = ЗапросУчастникиДубли.Клиент
	|			И ЗапросУчастники.Проект = ЗапросУчастникиДубли.Проект
	|			И ЗапросУчастники.ТипОбъектаНедвижимости = ЗапросУчастникиДубли.ТипОбъектаНедвижимости
	|ГДЕ
	|	ИСТИНА
	|	И НЕ ЗапросУчастникиДубли.Запрос ЕСТЬ NULL
	|	И ЗапросУчастники.Клиент В(&Клиенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СписокДублирующихЗапросов.Проект КАК Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент КАК Клиент,
	|	вт_СписокДублирующихЗапросов.Запрос КАК Запрос,
	|	ЛОЖЬ КАК Основной,
	|	ЛОЖЬ КАК Слияние,
	|	ЛОЖЬ КАК Исключение,
	|	0 КАК Уровень
	|ПОМЕСТИТЬ вт_НеСгруппированныйРезультат
	|ИЗ
	|	вт_СписокДублирующихЗапросов КАК вт_СписокДублирующихЗапросов
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_СписокДублирующихЗапросов.Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент,
	|	вт_СписокДублирующихЗапросов.Запрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_СписокДублирующихЗапросов.Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент,
	|	вт_СписокДублирующихЗапросов.ДубльЗапроса,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	вт_СписокДублирующихЗапросов КАК вт_СписокДублирующихЗапросов
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_СписокДублирующихЗапросов.Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент,
	|	вт_СписокДублирующихЗапросов.ДубльЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_НеСгруппированныйРезультат.Проект КАК Проект,
	|	вт_НеСгруппированныйРезультат.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_НеСгруппированныйРезультат.Клиент КАК Клиент,
	|	вт_НеСгруппированныйРезультат.Запрос КАК Запрос,
	|	вт_НеСгруппированныйРезультат.Основной КАК Основной,
	|	вт_НеСгруппированныйРезультат.Слияние КАК Слияние,
	|	вт_НеСгруппированныйРезультат.Исключение КАК Исключение,
	|	вт_НеСгруппированныйРезультат.Уровень КАК Уровень
	|ПОМЕСТИТЬ вт_СгруппированныйРезультат
	|ИЗ
	|	вт_НеСгруппированныйРезультат КАК вт_НеСгруппированныйРезультат
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_НеСгруппированныйРезультат.Проект,
	|	вт_НеСгруппированныйРезультат.ТипОбъектаНедвижимости,
	|	вт_НеСгруппированныйРезультат.Клиент,
	|	вт_НеСгруппированныйРезультат.Запрос,
	|	вт_НеСгруппированныйРезультат.Основной,
	|	вт_НеСгруппированныйРезультат.Слияние,
	|	вт_НеСгруппированныйРезультат.Исключение,
	|	вт_НеСгруппированныйРезультат.Уровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтатусыСделки.ЗаявкаНаСделку) КАК ЗаявкаНаСделку,
	|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование КАК Запрос
	|ПОМЕСТИТЬ вт_ЗаявкиНаСделку
	|ИЗ
	|	РегистрСведений.СтатусыСделки КАК СтатусыСделки
	|ГДЕ
	|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование В
	|			(ВЫБРАТЬ
	|				вт_СгруппированныйРезультат.Запрос КАК Запрос
	|			ИЗ
	|				вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат)
	|	И СтатусыСделки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.Согласована)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СгруппированныйРезультат.Проект КАК Проект,
	|	вт_СгруппированныйРезультат.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_СгруппированныйРезультат.Клиент КАК Клиент,
	|	вт_СгруппированныйРезультат.Запрос КАК Запрос,
	|	ВЫБОР
	|		КОГДА НЕ вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ вт_СгруппированныйРезультат.Основной
	|	КОНЕЦ КАК Основной,
	|	ВЫБОР
	|		КОГДА вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ вт_СгруппированныйРезультат.Слияние
	|	КОНЕЦ КАК Слияние,
	|	вт_СгруппированныйРезультат.Исключение КАК Исключение,
	|	вт_СгруппированныйРезультат.Уровень КАК Уровень,
	|	вт_ЗаявкиНаСделку.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	ВЫБОР
	|		КОГДА НЕ вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	|			ТОГДА НачалоПериода(вт_СгруппированныйРезультат.Запрос.Дата, ДЕНЬ)
	|		ИНАЧЕ ДобавитьКДате(НачалоПериода(вт_СгруппированныйРезультат.Запрос.Дата, ДЕНЬ), ДЕНЬ, -14)
	|	КОНЕЦ КАК ЗапросДата,	
	//|	вт_СгруппированныйРезультат.Запрос.Дата КАК ЗапросДата,
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(1000)) КАК ИдентификаторПоиска,
	|	ЛОЖЬ КАК Удаление
	|ИЗ
	|	вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЗаявкиНаСделку КАК вт_ЗаявкиНаСделку
	|		ПО вт_СгруппированныйРезультат.Запрос = вт_ЗаявкиНаСделку.Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросДата
	|ИТОГИ
	|	МАКСИМУМ(1) КАК Уровень
	|ПО
	|	Проект,
	|	ТипОбъектаНедвижимости,
	|	Клиент";
	
	Если НЕ Клиенты.Количество() Тогда //Объект.Клиент
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗапросУчастники.Клиент В(&Клиенты)", "");
	Иначе
		Запрос.УстановитьПараметр("Клиенты", Клиенты);	//Объект.Клиент
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗапросУчастники.Ссылка.Проект = &Проект", "");
	Иначе
		Запрос.УстановитьПараметр("Проект", Проект);
	КонецЕсли;	
	
	Если Первые > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + СтрЗаменить(Первые, Символы.НПП, ""));		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ");	
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДеревоЗапросов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбработатьТаблицуЗапросовДляПростогоПоиска(ДеревоЗапросов);
		//<804027>, Басаргин (29.10.2018) {
		ДопОбработкаРезультатаПоДатамЗапросов(ДеревоЗапросов);		
		//<804027> }		
		ОпределитьОсновнойЗапросДляГруппировокБезСделок(ДеревоЗапросов);
		
		Возврат ДеревоЗапросов;
	КонецЕсли;	
		
КонецФункции

Процедура ОбработатьЗапросы(дзДеревоЗапросов) Экспорт

	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;	
	
	ПараметрыЗамены = Новый Структура("СпособУдаления, УчитыватьПрикладныеПравила, ВключатьБизнесЛогику", "Пометка", Ложь, Истина);
	
	Для каждого ГруппировкаПоКлиенту Из дзДеревоЗапросов.Строки Цикл
		
		МассивЗапросов 	= Новый Массив;
		ЗапросДляЗамены = Неопределено;
		
		Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл //ГруппировкаПоКлиенту.Строки
			
			//Запросы у которых есть сделка
			Если ДетальнаяЗапись.Основной Тогда
				
				ЗапросДляЗамены = ДетальнаяЗапись.Запрос;
				
				Если МассивЗапросов.Количество() > 0 Тогда
					
					ОбработатьРеквизитыЗапросаДляЗамены(МассивЗапросов, ЗапросДляЗамены);
					
					Для каждого ЭлементМассива Из МассивЗапросов Цикл
						СоответствиеЗамены = Новый Соответствие;
						СоответствиеЗамены.Вставить(ЭлементМассива, ЗапросДляЗамены);
						ОбщегоНазначения.ЗаменитьСсылки(СоответствиеЗамены, ПараметрыЗамены);
						ВыполнитьДополнительныеДействияПоЗамене(ЭлементМассива, ЗапросДляЗамены);
					КонецЦикла;	
					
					ВыполнитьКорректировкуРСВзаимодействия(ЗапросДляЗамены);
					
				КонецЕсли;
				
				ЗапросДляЗамены = Неопределено;
				МассивЗапросов.Очистить();
				
			КонецЕсли;
			
			Если ДетальнаяЗапись.Слияние Тогда
				МассивЗапросов.Добавить(ДетальнаяЗапись.Запрос);
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;
	
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("СлияниеДублейЗапросовСборСтатистики", ВремяНачала);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСтрокиНижнегоУровня(Дерево, Таблица = Неопределено) Экспорт
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Уровень = 0 Тогда		
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
		Иначе
			ПолучитьСтрокиНижнегоУровня(СтрокаДерева, Таблица);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура ОбработатьЗапросыРегламентно(дзДеревоЗапросов) Экспорт
		
	ТаблцаЗапросов = ПолучитьСтрокиНижнегоУровня(дзДеревоЗапросов);
	
	ЧислоСтрокВТаблице = ТаблцаЗапросов.Количество(); 
		
	ЧислоПотоков = 10;		
	РазмерПорции = Цел(ЧислоСтрокВТаблице / ЧислоПотоков);	
	РазмерПорции = ?(РазмерПорции = 0, 1 , РазмерПорции);
	МассивЗаданий = Новый Массив;

	Для НомерПотока = 1 По ЧислоПотоков Цикл 		
		ИндексНачала = (НомерПотока - 1) * РазмерПорции;		
		Если (НомерПотока = ЧислоПотоков) Тогда
			РазмерПорции = ЧислоСтрокВТаблице - (ЧислоПотоков * РазмерПорции) + РазмерПорции;			
		КонецЕсли;  
		
		ПорцияТаблицыЗапросов = ПодготовитьПорциюТаблицыЗапросов(ТаблцаЗапросов, ИндексНачала, РазмерПорции); 
		НаборПараметров = Новый Массив;
		НаборПараметров.Добавить(ПорцияТаблицыЗапросов);	
		
		Задание = ФоновыеЗадания.Выполнить("CRMРаботаСЗаданиямиСервер.УдалениеДублейЗапросов", НаборПараметров, "Обработка дублей запросов в отдельном потоке -  - " + НомерПотока, "УдалениеДублейЗапросов");		
		МассивЗаданий.Добавить(Задание);
		
		Если ЧислоСтрокВТаблице <= НомерПотока Тогда
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
    Если МассивЗаданий.Количество() > 0 Тогда
        Попытка
            ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка выполнения задания УдалениеДублейЗапросов: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;        
    КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьЗапросыПоТочномуСовпадению()
	
КонецПроцедуры

Процедура ОбработатьТаблицуЗапросовДляПростогоПоиска(дзДеревоЗапросов)
																						
	Для каждого ГруппировкаПоПроекту Из дзДеревоЗапросов.Строки Цикл
		
		Для каждого ГруппировкаПоВидуНедвижимости Из ГруппировкаПоПроекту.Строки Цикл
						
			Для каждого ГруппировкаПоКлиенту Из ГруппировкаПоВидуНедвижимости.Строки Цикл
				
				ОбщееКоличествоДетальныхЗаписей = ГруппировкаПоКлиенту.Строки.Количество();		
				
				ТаблицаАнализаПоИдентификаторуПоиска = Новый ТаблицаЗначений;
				ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("Запрос", 				Новый ОписаниеТипов("ДокументСсылка.Запрос"));
				ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("ИдентификаторПоиска", 	Новый ОписаниеТипов("Строка", ,
					Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));				
				ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("Количество", 			Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
									
				////<ЦелиПокупки>, Басаргин (24.05.2018) {
				//ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("ЦелиПокупки", Новый ОписаниеТипов("Соответствие"));					
				////<ЦелиПокупки> }
										
				Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл
					
					ДетальнаяЗапись.ИдентификаторПоиска = ПолучитьИдентификаторПоискаПоЗапросу(ДетальнаяЗапись.Запрос);
					
					НоваяСтрока = ТаблицаАнализаПоИдентификаторуПоиска.Добавить();
					НоваяСтрока.Запрос				= ДетальнаяЗапись.Запрос;
					НоваяСтрока.ИдентификаторПоиска = ДетальнаяЗапись.ИдентификаторПоиска;
					НоваяСтрока.Количество 			= 1;
					
				КонецЦикла;
				
				////<ЦелиПокупки>, Басаргин (24.05.2018) {
				//ОбработатьТаблицуАнализаПоИдентификаторуПоискаПоЦелямПокупки(ТаблицаАнализаПоИдентификаторуПоиска);
				////<ЦелиПокупки> }
				
				ТаблицаАнализаПоИдентификаторуПоиска.Свернуть("ИдентификаторПоиска", "Количество");
				
				УдалитьНеДублирующиеЗапросыПоГруппировкеКлиент(ГруппировкаПоКлиенту.Строки, ТаблицаАнализаПоИдентификаторуПоиска);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//<ЦелиПокупки>, Басаргин (24.05.2018) {
Процедура ОбработатьТаблицуАнализаПоИдентификаторуПоискаПоЦелямПокупки(ТаблицаАнализаПоИдентификаторуПоиска)
	
	КопияТаблицаАнализаПоИдентификаторуПоиска = ТаблицаАнализаПоИдентификаторуПоиска.Скопировать();
	ПроверенныеИдентификаторы = Новый Массив;
	
	Для каждого Строка Из КопияТаблицаАнализаПоИдентификаторуПоиска Цикл				
		Если НЕ ПроверенныеИдентификаторы.Найти(Строка.ИдентификаторПоиска) = Неопределено Тогда
			 Продолжить;
		КонецЕсли;			
		НайденныеСтроки = КопияТаблицаАнализаПоИдентификаторуПоиска.НайтиСтроки(Новый Структура("ИдентификаторПоиска", Строка.ИдентификаторПоиска));				
		Если НайденныеСтроки.Количество() > 1 Тогда
			ПроверенныеИдентификаторы.Добавить(Строка.ИдентификаторПоиска);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ЦелиПокупки = ПолучитьСоответствиеЦелейПокупкиПоЗапросу(НайденнаяСтрока.Запрос);	
			КонецЦикла;				
			Граница = НайденныеСтроки.ВГраница();
			Для й = 0 По Граница Цикл				
				ЭлементНайден = Истина;
				Если НЕ НайденныеСтроки[й].ЦелиПокупки.Количество() Тогда
					Продолжить;		
				КонецЕсли;
				Для каждого ЦельПокупки Из НайденныеСтроки[й].ЦелиПокупки Цикл
					Для к = й + 1 По Граница Цикл					
						ЭлементНайден = НЕ НайденныеСтроки[к].ЦелиПокупки.Количество() 
											ИЛИ (НЕ НайденныеСтроки[к].ЦелиПокупки.Получить(ЦельПокупки.Ключ) = Неопределено);
						Если НЕ ЭлементНайден Тогда            	
							Прервать;
						КонецЕсли;	
					КонецЦикла;					
					Если ЭлементНайден Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;		
				Если НЕ ЭлементНайден Тогда
					ИндексСтроки = КопияТаблицаАнализаПоИдентификаторуПоиска.Индекс(НайденныеСтроки[й]);
					Если ИндексСтроки > 0 Тогда
						ТаблицаАнализаПоИдентификаторуПоиска[ИндексСтроки].ИдентификаторПоиска = ТаблицаАнализаПоИдентификаторуПоиска[ИндексСтроки].ИдентификаторПоиска + "_" + СлучайнаяПоследовательность();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры	

Функция СлучайнаяПоследовательность(Длина = 10)
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();

	СлучайнаяПоследовательность = "";
	Неиспользуемые = ":<=>?@;[\]^_`";
	Пока СтрДлина(СлучайнаяПоследовательность) < Длина Цикл
	    СлучайныйСимвол = Символ(ГСЧ.СлучайноеЧисло(48, 122));
		Если Найти(Неиспользуемые, СлучайныйСимвол) > 0 Тогда
			Продолжить;
	    КонецЕсли;
	    СлучайнаяПоследовательность = СлучайнаяПоследовательность + СлучайныйСимвол;
	КонецЦикла;        

	Возврат СлучайнаяПоследовательность;	
	
КонецФункции

Функция ПолучитьСоответствиеЦелейПокупкиПоЗапросу(Запрос) 
	
	ВыгрузкаПоТабличнойЧасти = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос, "ЦелиПокупки").Выгрузить();
	ВыгрузкаПоТабличнойЧасти.Сортировать("ЦельПокупки");
	ИдентификаторПоиска = Новый Соответствие;
	
	Для Каждого СтрокаТЧ ИЗ ВыгрузкаПоТабличнойЧасти Цикл				
		Если ИдентификаторПоиска.Получить(СтрокаТЧ.ЦельПокупки) = Неопределено Тогда 
			ИдентификаторПоиска.Вставить(СтрокаТЧ.ЦельПокупки, ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаТЧ.ЦельПокупки));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторПоиска;
	
КонецФункции
//<ЦелиПокупки> }

//<804027>, Басаргин (29.10.2018) {
Процедура ДопОбработкаРезультатаПоДатамЗапросов(дзДеревоЗапросов)
	
	Для каждого ГруппировкаПоПроекту Из дзДеревоЗапросов.Строки Цикл
		
		Для каждого ГруппировкаПоВидуНедвижимости Из ГруппировкаПоПроекту.Строки Цикл
			
			Для каждого ГруппировкаПоКлиенту Из ГруппировкаПоВидуНедвижимости.Строки Цикл
				
				Счетчик							= 0;		
				ОбщееКоличествоДетальныхЗаписей = ГруппировкаПоКлиенту.Строки.Количество();
				
				Если ОбщееКоличествоДетальныхЗаписей = 0 Тогда
					
					Продолжить;	
					
				КонецЕсли;
				
				ПредыдущийЗапросБезСделки = Неопределено; //Строка.Запрос;
				ПредыдущаяДатаЗапросаБезСделки = Неопределено; //Строка.ЗапросДата;
				НайденЗапросБезСделки = Ложь;
				
				Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл
					
					Счетчик = Счетчик + 1;
					Если ЗначениеЗаполнено(ПредыдущаяДатаЗапросаБезСделки) И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) И ДетальнаяЗапись.Основной Тогда
						Если НЕ (НачалоДня(ПредыдущаяДатаЗапросаБезСделки) + 14*24*60*60 <= НачалоДня(ДетальнаяЗапись.ЗапросДата)) Тогда
							ДетальнаяЗапись.Основной = Ложь;
							ДетальнаяЗапись.Слияние = Истина;
						КонецЕсли;
						НайденЗапросБезСделки = Ложь;
					КонецЕсли;
					
					Если НЕ ДетальнаяЗапись.Основной И НЕ НайденЗапросБезСделки Тогда
						ПредыдущаяДатаЗапросаБезСделки = ДетальнаяЗапись.ЗапросДата;
						НайденЗапросБезСделки = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	
//<804027> }

Процедура ОпределитьОсновнойЗапросДляГруппировокБезСделок(дзДеревоЗапросов)
	
	//дзДеревоЗапросов = РеквизитФормыВЗначение("ДеревоЗапросов");
	
	Для каждого ГруппировкаПоПроекту Из дзДеревоЗапросов.Строки Цикл
		
		Для каждого ГруппировкаПоВидуНедвижимости Из ГруппировкаПоПроекту.Строки Цикл
			
			Для каждого ГруппировкаПоКлиенту Из ГруппировкаПоВидуНедвижимости.Строки Цикл
				
				Счетчик							= 0;		
				ОбщееКоличествоДетальныхЗаписей = ГруппировкаПоКлиенту.Строки.Количество();
				
				Если ОбщееКоличествоДетальныхЗаписей = 0 Тогда
					
					Продолжить;	
					
				КонецЕсли;
				
				НаличиеУПредыдущейЗаписиЗаявки 		= Ложь;
				НаличиеПредыдущихЗапросовБезЗаявки	= Ложь;
				
				//Помечаем те строки, какие должны быть удалены
				Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл
					
					Счетчик = Счетчик + 1;
					
					//Для последнего запроса потребуется слияние, если даже у него нет сделки
					Если ОбщееКоличествоДетальныхЗаписей = Счетчик
						И НЕ ДетальнаяЗапись.Основной Тогда
						ДетальнаяЗапись.Основной = Истина;
						ДетальнаяЗапись.Слияние  = Ложь;
					КонецЕсли;
					
					Если ОбщееКоличествоДетальныхЗаписей = Счетчик
						И НаличиеУПредыдущейЗаписиЗаявки Тогда
						ДетальнаяЗапись.Удаление = Истина;
					КонецЕсли;
					
					Если Счетчик = 1 
						И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						ДетальнаяЗапись.Удаление = Истина;	
						//Если предыдущая строка - запрос с заявкой на сделку, и в данной строке тоже самое - строку надо удалить
					ИначеЕсли НаличиеУПредыдущейЗаписиЗаявки
						И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						ДетальнаяЗапись.Удаление = Истина;
						//А также если не было предыдущих строк с запросами без заявок, то тоже слияние производить не нужно
					ИначеЕсли НЕ НаличиеПредыдущихЗапросовБезЗаявки
						И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						ДетальнаяЗапись.Удаление = Истина;	
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						НаличиеУПредыдущейЗаписиЗаявки = Истина;
					Иначе
						НаличиеУПредыдущейЗаписиЗаявки 		= Ложь;
						НаличиеПредыдущихЗапросовБезЗаявки 	= Истина
					КонецЕсли;
					
				КонецЦикла;
				
				//Непосредственно удаление тех строк, в которых есть заявки на сделку
				Индекс = ГруппировкаПоКлиенту.Строки.Количество() - 1;
				
				Пока Индекс >= 0 Цикл
					
					Если ГруппировкаПоКлиенту.Строки[Индекс].Удаление Тогда
						ГруппировкаПоКлиенту.Строки.Удалить(Индекс);						
					КонецЕсли;
					Индекс = Индекс - 1;
					
				КонецЦикла;	
				
				Если ГруппировкаПоКлиенту.Строки.Количество() = 1 Тогда 
					ГруппировкаПоКлиенту.Строки[0].Основной	= Ложь;
					ГруппировкаПоКлиенту.Строки[0].Слияние	= ЛожЬ;
				КонецЕсли;	
				
			КонецЦикла;	
			
			//Непосредственно удаление тех строк, в которых нет данных
			Индекс = ГруппировкаПоВидуНедвижимости.Строки.Количество() - 1;
			Пока Индекс >= 0 Цикл
				
				Если ГруппировкаПоВидуНедвижимости.Строки[Индекс].Строки.Количество() = 0 Тогда
					ГруппировкаПоВидуНедвижимости.Строки.Удалить(Индекс);						
				КонецЕсли;
				Индекс = Индекс - 1;
				
			КонецЦикла;				
			
		КонецЦикла;
		
		//Непосредственно удаление тех строк, в которых нет данных
		Индекс = ГруппировкаПоПроекту.Строки.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Если ГруппировкаПоПроекту.Строки[Индекс].Строки.Количество() = 0 Тогда
				ГруппировкаПоПроекту.Строки.Удалить(Индекс);						
			КонецЕсли;
			Индекс = Индекс - 1;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	//Удаляем пустые проекты 
	Индекс = дзДеревоЗапросов.Строки.Количество() - 1;	
	Пока Индекс >= 0 Цикл
		
		Если дзДеревоЗапросов.Строки[Индекс].Строки.Количество() = 0 Тогда
			дзДеревоЗапросов.Строки.Удалить(Индекс);						
		КонецЕсли;
		Индекс = Индекс - 1;
		
	КонецЦикла;			
	
КонецПроцедуры	


Процедура ОбработатьРеквизитыЗапросаДляЗамены(МассивЗапросов, ЗапросДляЗамены)

	ПолныйСписокЗапросов = Новый СписокЗначений;
	ПолныйСписокЗапросов.ЗагрузитьЗначения(МассивЗапросов);
	ПолныйСписокЗапросов.Добавить(ЗапросДляЗамены);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ИзменениеСтатусаСтадииЗапроса.Период КАК Период,
	//|	ИзменениеСтатусаСтадииЗапроса.Запрос КАК Запрос,
	//|	ИзменениеСтатусаСтадииЗапроса.Стадия КАК Стадия,
	//|	ИзменениеСтатусаСтадииЗапроса.Статус КАК Статус,
	//|	ИзменениеСтатусаСтадииЗапроса.РасшифровкаСтатуса КАК РасшифровкаСтатуса,
	//|	ИзменениеСтатусаСтадииЗапроса.ДокументВзаимодействия КАК ДокументВзаимодействия,
	//|	ИзменениеСтатусаСтадииЗапроса.Ответственный КАК Ответственный
	//|ИЗ
	//|	РегистрСведений.ИзменениеСтатусаСтадииЗапроса КАК ИзменениеСтатусаСтадииЗапроса
	//|ГДЕ
	//|	ИзменениеСтатусаСтадииЗапроса.Запрос В(&СписокЗапросов)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Период";
	//Запрос.УстановитьПараметр("СписокЗапросов", ПолныйСписокЗапросов);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	
	//	НаборЗаписейИзмененияСтатусаЗапроса	= РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();	
	//	НаборЗаписейИзмененияСтатусаЗапроса.Отбор.Запрос.Установить(ЗапросДляЗамены);
	//	НаборЗаписейИзмененияСтатусаЗапроса.Очистить();
	//	НаборЗаписейИзмененияСтатусаЗапроса.Записать();
	//			
	//	Выборка 		= РезультатЗапроса.Выбрать();
	//	ТекущаяСтадия 	= Неопределено;
	//	
	//	Пока Выборка.Следующий() Цикл
	//		
	//		Если ТекущаяСтадия = Перечисления.СтадииЗапроса.Сделка Тогда
	//			Прервать;
	//		КонецЕсли;
	//		
	//		Если Не ЗначениеЗаполнено(ТекущаяСтадия) Тогда
	//			ТекущаяСтадия = Выборка.Стадия;
	//		ИначеЕсли ТекущаяСтадия = Перечисления.СтадииЗапроса.Звонок
	//					И Выборка.Стадия = Перечисления.СтадииЗапроса.Переговоры Тогда
	//			ТекущаяСтадия = Перечисления.СтадииЗапроса.Переговоры;
	//		ИначеЕсли Выборка.Стадия = Перечисления.СтадииЗапроса.Сделка Тогда
	//		 	ТекущаяСтадия = Перечисления.СтадииЗапроса.Сделка;
	//		ИначеЕсли ТекущаяСтадия = Перечисления.СтадииЗапроса.Переговоры
	//					И Выборка.Стадия = Перечисления.СтадииЗапроса.Звонок Тогда
	//			Продолжить;
	//		ИначеЕсли ТекущаяСтадия = Перечисления.СтадииЗапроса.Сделка
	//					И (Выборка.Стадия = Перечисления.СтадииЗапроса.Звонок ИЛИ Выборка.Стадия = Перечисления.СтадииЗапроса.Переговоры) Тогда
	//			Продолжить;				
	//		КонецЕсли;
	//		
	//		НаборЗаписейИзмененияСтатусаЗапроса	= РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();	
	//		НаборЗаписейИзмененияСтатусаЗапроса.Отбор.Период.Установить(Выборка.Период);
	//		НаборЗаписейИзмененияСтатусаЗапроса.Отбор.Запрос.Установить(ЗапросДляЗамены);
	//		НоваяЗапись = НаборЗаписейИзмененияСтатусаЗапроса.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	//		НоваяЗапись.Запрос = ЗапросДляЗамены;
	//		НаборЗаписейИзмененияСтатусаЗапроса.Записать();
	//	
	//	КонецЦикла;	
	//
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запрос.Ссылка КАК Ссылка,
	|	Запрос.РасшифровкаИсточниковПриходаКлиента КАК РасшифровкаИсточниковПриходаКлиента,
	|	Запрос.УточнениеРасшифровкиИсточникаПрихода КАК УточнениеРасшифровкиИсточникаПрихода,
	|	Запрос.Дата КАК Дата
	|ИЗ
	|	Документ.Запрос КАК Запрос
	|ГДЕ
	|	Запрос.Ссылка В(&МассивЗапросов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("МассивЗапросов", МассивЗапросов);
	РезультатЗапроса = Запрос.Выполнить();
	
	РасшифровкаИсточниковПриходаКлиента 	= Справочники.РасшифровкаИсточниковПриходаКлиента.ПустаяСсылка();
	УточнениеРасшифровкиИсточникаПрихода 	= Справочники.УточнениеРасшифровкиИсточниковПриходаКлиента.ПустаяСсылка();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(РасшифровкаИсточниковПриходаКлиента)
					И ЗначениеЗаполнено(УточнениеРасшифровкиИсточникаПрихода) Тогда
				Прервать;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.РасшифровкаИсточниковПриходаКлиента) Тогда
				РасшифровкаИсточниковПриходаКлиента = Выборка.РасшифровкаИсточниковПриходаКлиента;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.УточнениеРасшифровкиИсточникаПрихода) Тогда
				УточнениеРасшифровкиИсточникаПрихода = Выборка.УточнениеРасшифровкиИсточникаПрихода;
			КонецЕсли;		
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасшифровкаИсточниковПриходаКлиента)
			ИЛИ ЗначениеЗаполнено(УточнениеРасшифровкиИсточникаПрихода) Тогда
		ДокументОбъект = ЗапросДляЗамены.ПолучитьОбъект();
		Если ЗначениеЗаполнено(РасшифровкаИсточниковПриходаКлиента) Тогда
			ДокументОбъект.РасшифровкаИсточниковПриходаКлиента = РасшифровкаИсточниковПриходаКлиента;
		КонецЕсли;
		Если ЗначениеЗаполнено(УточнениеРасшифровкиИсточникаПрихода) Тогда
			ДокументОбъект.УточнениеРасшифровкиИсточникаПрихода = УточнениеРасшифровкиИсточникаПрихода;
		КонецЕсли;
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ДокументОбъект.ДополнительныеСвойства.Вставить("АвторВерсии", Справочники.Пользователи.Робот);	
			//ДокументОбъект.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);		
			ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ДокументОбъект, Неопределено);					
		Исключение	
		 	Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "При корректировке источника расшифровки или его уточнения возникла следущая ошибка:" + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры


Функция ПолучитьИдентификаторПоискаПоЗапросу(Запрос)
	
	ВыгрузкаПоТабличнойЧасти 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос, "Участники").Выгрузить();
	ВыгрузкаПоТабличнойЧасти.Сортировать("Клиент");
	ИдентификаторПоиска 		= "";
	
	//<831583>, Басаргин (13.06.2018) {
	ОбработанныеОбъекты = Новый Массив;	
	//<831583> }
	
	Для Каждого СтрокаТЧ ИЗ ВыгрузкаПоТабличнойЧасти Цикл
		//<831583>, Басаргин (13.06.2018) {
		Если НЕ ОбработанныеОбъекты.Найти(СтрокаТЧ.Клиент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеОбъекты.Добавить(СтрокаТЧ.Клиент);
		//<831583> }			
		ИдентификаторПоиска = ИдентификаторПоиска + Строка(СтрокаТЧ.Клиент.УникальныйИдентификатор());	
	КонецЦикла;
	
	Возврат ИдентификаторПоиска;	
	
КонецФункции

Процедура УдалитьНеДублирующиеЗапросыПоГруппировкеКлиент(ГруппировкаПоКлиентуСтроки, ТаблицаАнализаПоИдентификаторуПоиска)
	
	Для каждого СтрокаТЧ Из ТаблицаАнализаПоИдентификаторуПоиска Цикл
		
		Если СтрокаТЧ.Количество = 1 Тогда
			
			НайденнаяСтрока = ГруппировкаПоКлиентуСтроки.Найти(СтрокаТЧ.ИдентификаторПоиска, "ИдентификаторПоиска");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				ГруппировкаПоКлиентуСтроки.Удалить(НайденнаяСтрока);					
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ВыполнитьДополнительныеДействияПоЗамене(ЗапросЗамена, ЗапросДляЗамены)
	
	ВыполнитьЗаменуВРегистре_ПредметыПапкиВзаимодействий(ЗапросЗамена, ЗапросДляЗамены);	
	ВыполнитьЗаменуВРегистре_ДанныеДляКорректировкиСтатусовДокументаЗапрос(ЗапросЗамена, ЗапросДляЗамены); //	
	ВыполнитьЗаменуВРегистре_Взаимодействия(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_ИсторияЗвонков(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_СрокиБронированияОбъектовНедвижимости(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_ДанныеCallTracking(ЗапросЗамена, ЗапросДляЗамены);
	//ВыполнитьЗаменуВРегистре_СоответствиеЗапросовЗвонкам(ЗапросЗамена, ЗапросДляЗамены);
	
	УдалитьЗаписиПоРегистру_УчастникиЗапроса(ЗапросЗамена);
	
	//<804027>, Басаргин (25.10.2018) {
	ВыполнитьСлияниеРасчетовИпотеки(ЗапросДляЗамены);
	//<804027> }
	
КонецПроцедуры


Процедура ВыполнитьЗаменуВРегистре_ПредметыПапкиВзаимодействий(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК ПапкаЭлектронногоПисьма,
	|	ПредметыПапкиВзаимодействий.Рассмотрено КАК Рассмотрено,
	|	ПредметыПапкиВзаимодействий.РассмотретьПосле КАК РассмотретьПосле
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет";
	Запрос.УстановитьПараметр("Предмет", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Взаимодействие.Установить(Выборка.Взаимодействие);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Предмет = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьКорректировкуРСВзаимодействия(ЗапросДляЗамены)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие,
	//|	ИСТИНА КАК Записывать
	//|ИЗ
	//|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	//|ГДЕ
	//|	ПредметыПапкиВзаимодействий.Предмет = &Предмет";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Записывать,
	|	Взаимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Предмет = &Предмет";
		
	Запрос.УстановитьПараметр("Предмет", ЗапросДляЗамены);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Взаимодействия.Взаимодействия_ЗаписатьВФоне(РезультатЗапроса.Выгрузить());				
	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьЗаменуВРегистре_Взаимодействия(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.Взаимодействия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Взаимодействие.Установить(Выборка.Взаимодействие);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Предмет = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьЗаменуВРегистре_ДанныеДляКорректировкиСтатусовДокументаЗапрос(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.ОснованиеДляИзмененияСтатуса КАК ОснованиеДляИзмененияСтатуса,
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.Запрос КАК Запрос
	|ИЗ
	|	РегистрСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос КАК ДанныеДляКорректировкиСтатусовДокументаЗапрос
	|ГДЕ
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОснованиеДляИзмененияСтатуса.Установить(Выборка.ОснованиеДляИзмененияСтатуса);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Запрос = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьЗаменуВРегистре_ИсторияЗвонков(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияЗвонков.ID_Звонка КАК ID_Звонка,
	|	ИсторияЗвонков.ДатаНачалаЗвонка КАК ДатаНачалаЗвонка,
	|	ИсторияЗвонков.ВызывающийНомер КАК ВызывающийНомер,
	|	ИсторияЗвонков.ВызываемыйНомер КАК ВызываемыйНомер,
	|	ИсторияЗвонков.Контакт КАК Контакт
	|ИЗ
	|	РегистрСведений.ИсторияЗвонков КАК ИсторияЗвонков
	|ГДЕ
	|	ИсторияЗвонков.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ИсторияЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ID_Звонка.Установить(Выборка.ID_Звонка);
			НаборЗаписей.Отбор.ДатаНачалаЗвонка.Установить(Выборка.ДатаНачалаЗвонка);
			НаборЗаписей.Отбор.ВызывающийНомер.Установить(Выборка.ВызывающийНомер);
			НаборЗаписей.Отбор.ВызываемыйНомер.Установить(Выборка.ВызываемыйНомер);
			НаборЗаписей.Отбор.Контакт.Установить(Выборка.Контакт);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Запрос = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры


Процедура УдалитьЗаписиПоРегистру_УчастникиЗапроса(ЗапросЗамена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиЗапроса.Телефон КАК Телефон,
	|	УчастникиЗапроса.Клиент КАК Клиент
	|ИЗ
	|	РегистрСведений.УчастникиЗапроса КАК УчастникиЗапроса
	|ГДЕ
	|	УчастникиЗапроса.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.УчастникиЗапроса.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Телефон.Установить(Выборка.Телефон);
			НаборЗаписей.Отбор.Запрос.Установить(ЗапросЗамена);
			НаборЗаписей.Отбор.Клиент.Установить(Выборка.Клиент);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьЗаменуВРегистре_СрокиБронированияОбъектовНедвижимости(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СрокиБронированияОбъектовНедвижимости.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СрокиБронированияОбъектовНедвижимости КАК СрокиБронированияОбъектовНедвижимости
	|ГДЕ
	|	СрокиБронированияОбъектовНедвижимости.ДокументЗапрос = &ДокументЗапрос";
	
	Запрос.УстановитьПараметр("ДокументЗапрос", ЗапросЗамена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.СрокиБронированияОбъектовНедвижимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
			
				Запись.ДокументЗапрос = ЗапросДляЗамены;	
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры


Процедура ВыполнитьЗаменуВРегистре_ДанныеCallTracking(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеCallTracking.ТипОбращения КАК ТипОбращения,
	|	ДанныеCallTracking.Сайт КАК Сайт,
	|	ДанныеCallTracking.РекламнаяКампания КАК РекламнаяКампания,
	|	ДанныеCallTracking.ПериодОбращения КАК ПериодОбращения,
	|	ДанныеCallTracking.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	РегистрСведений.ДанныеCallTracking КАК ДанныеCallTracking
	|ГДЕ
	|	ДанныеCallTracking.Запрос = &Запрос";
	
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ДанныеCallTracking.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипОбращения.Установить(Выборка.ТипОбращения);
			НаборЗаписей.Отбор.Сайт.Установить(Выборка.Сайт);
			НаборЗаписей.Отбор.РекламнаяКампания.Установить(Выборка.РекламнаяКампания);
			НаборЗаписей.Отбор.ПериодОбращения.Установить(Выборка.ПериодОбращения);
			НаборЗаписей.Отбор.НомерТелефона.Установить(Выборка.НомерТелефона);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
			
				Запись.Запрос = ЗапросДляЗамены;	
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

//<804027>, Басаргин (25.10.2018) {
Функция ПолучитьДеревоРасчетовИпотеки(ЗапросЗамена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРасчетИпотеки.Запрос КАК Запрос,
	|	ДокументРасчетИпотеки.Ссылка КАК РасчетИпотеки,
	|	ДокументРасчетИпотеки.Дата КАК Дата,
	|	ДокументРасчетИпотеки.ЖК КАК Проект,
	|	ЕСТЬNULL(ИпотечнаяЗаявка.Ссылка, ЗНАЧЕНИЕ(Документ.ИпотечнаяЗаявка.ПустаяСсылка)) КАК СвязанныйДокумент,
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(1000)) КАК ИдентификаторПоиска
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	Документ.РасчетИпотеки КАК ДокументРасчетИпотеки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИпотечнаяЗаявка КАК ИпотечнаяЗаявка
	|		ПО (ИпотечнаяЗаявка.РасчетИпотеки = ДокументРасчетИпотеки.Ссылка)
	|ГДЕ
	|	НЕ ДокументРасчетИпотеки.ПометкаУдаления
	|	И ДокументРасчетИпотеки.Запрос = &Запрос
	|	И НЕ ИпотечнаяЗаявка.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетИпотеки.Запрос,
	|	ДокументРасчетИпотеки.Ссылка,
	|	ДокументРасчетИпотеки.Дата,
	|	ДокументРасчетИпотеки.ЖК,
	|	ЕСТЬNULL(Анкета.Ссылка, ЗНАЧЕНИЕ(Документ.Анкета.ПустаяСсылка)),
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(1000))
	|ИЗ
	|	Документ.РасчетИпотеки КАК ДокументРасчетИпотеки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Анкета КАК Анкета
	|		ПО (Анкета.РасчетИпотеки = ДокументРасчетИпотеки.Ссылка)
	|ГДЕ
	|	НЕ ДокументРасчетИпотеки.ПометкаУдаления
	|	И ДокументРасчетИпотеки.Запрос = &Запрос
	|	И НЕ Анкета.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРасчетИпотеки.Запрос КАК Запрос,
	|	ДокументРасчетИпотеки.РасчетИпотеки КАК РасчетИпотеки,
	|	ДокументРасчетИпотеки.Дата КАК Дата,
	|	ДокументРасчетИпотеки.Проект КАК Проект,
	|	ДокументРасчетИпотеки.СвязанныйДокумент КАК СвязанныйДокумент,
	|	ДокументРасчетИпотеки.ИдентификаторПоиска КАК ИдентификаторПоиска
	|ИЗ
	|	ВТ_Результат КАК ДокументРасчетИпотеки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МИНИМУМ(Проект)
	|ПО
	|	Запрос,
	|	РасчетИпотеки";
	
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДеревоРасчетовИпотеки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбработатьТаблицуРасчетовИпотекиДляПростогоПоиска(ДеревоРасчетовИпотеки);
		
		Возврат ДеревоРасчетовИпотеки;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьТаблицуРасчетовИпотекиДляПростогоПоиска(ДеревоРасчетовИпотеки)
	
	Для каждого ГруппировкаПоЗапросу Из ДеревоРасчетовИпотеки.Строки Цикл	
				
		ТаблицаАнализаПоИдентификаторуПоиска = Новый ТаблицаЗначений;
		ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("РасчетИпотеки", Новый ОписаниеТипов("ДокументСсылка.РасчетИпотеки"));
		ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
		ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("ИдентификаторПоиска", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));				
		ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
		
		Для каждого СтрокаРасчетИпотеки Из ГруппировкаПоЗапросу.Строки Цикл
			
			СтрокаРасчетИпотеки.ИдентификаторПоиска = ПолучитьИдентификаторПоискаПоРасчетуИпотеки(СтрокаРасчетИпотеки.РасчетИпотеки);
			
			НоваяСтрока = ТаблицаАнализаПоИдентификаторуПоиска.Добавить();
			НоваяСтрока.РасчетИпотеки = СтрокаРасчетИпотеки.РасчетИпотеки;
			НоваяСтрока.Проект = СтрокаРасчетИпотеки.Проект;
			НоваяСтрока.ИдентификаторПоиска = СтрокаРасчетИпотеки.ИдентификаторПоиска;
			НоваяСтрока.Количество = 1;
			
		КонецЦикла;
		
		ТаблицаАнализаПоИдентификаторуПоиска.Свернуть("Проект, ИдентификаторПоиска", "Количество");
		
		УдалитьНеДублирующиеРасчетыИпотекиПоГруппировке(ГруппировкаПоЗапросу.Строки, ТаблицаАнализаПоИдентификаторуПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИдентификаторПоискаПоРасчетуИпотеки(РасчетИпотеки)
	
	ВыгрузкаПоТабличнойЧасти = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасчетИпотеки, "ДанныеОЗаемщиках").Выгрузить();
	ВыгрузкаПоТабличнойЧасти.Сортировать("ФИО");
	ИдентификаторПоиска = "";
	
	ОбработанныеОбъекты = Новый Массив;	
	
	Для Каждого СтрокаТЧ ИЗ ВыгрузкаПоТабличнойЧасти Цикл
		Если НЕ ОбработанныеОбъекты.Найти(СтрокаТЧ.ФИО) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеОбъекты.Добавить(СтрокаТЧ.ФИО);		
		ИдентификаторПоиска = ИдентификаторПоиска + Строка(СтрокаТЧ.ФИО.УникальныйИдентификатор());	
	КонецЦикла;
	
	Возврат ИдентификаторПоиска;	
	
КонецФункции

Процедура УдалитьНеДублирующиеРасчетыИпотекиПоГруппировке(ГруппировкаПоРасчетуИпотекиСтроки, ТаблицаАнализаПоИдентификаторуПоиска)
	
	Для каждого СтрокаТЧ Из ТаблицаАнализаПоИдентификаторуПоиска Цикл		
		Если СтрокаТЧ.Количество = 1 Тогда			
			НайденнаяСтрока = ГруппировкаПоРасчетуИпотекиСтроки.Найти(СтрокаТЧ.ИдентификаторПоиска, "ИдентификаторПоиска");			
			Если НЕ НайденнаяСтрока = Неопределено И НайденнаяСтрока.Проект = СтрокаТЧ.Проект Тогда
				ГруппировкаПоРасчетуИпотекиСтроки.Удалить(НайденнаяСтрока);					
			КонецЕсли;
		//ИначеЕсли СтрокаТЧ.Количество > 1 Тогда
		//	НайденныеСтроки = ГруппировкаПоРасчетуИпотекиСтроки.НайтиСтроки(Новый Структура("ИдентификаторПоиска", СтрокаТЧ.ИдентификаторПоиска));			
		//	Если НайденныеСтроки.Количество() Тогда
		//		НайденныеСтроки[НайденныеСтроки.ВГраница()].Основной = Истина;	
		//	КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСлияниеРасчетовИпотеки(ЗапросДляЗамены)
		
	ДеревоРасчетовИпотеки = ПолучитьДеревоРасчетовИпотеки(ЗапросДляЗамены);
	
	Если ДеревоРасчетовИпотеки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗамены = Новый Структура("СпособУдаления, УчитыватьПрикладныеПравила, ВключатьБизнесЛогику", "Пометка", Ложь, Истина);
	
	Для каждого ГруппировкаПоЗапросу Из ДеревоРасчетовИпотеки.Строки Цикл			
		
		ОбработанныеИдентификаторы = Новый Массив;
		
		Для каждого ГруппировкаПоРасчетуИпотеки Из ГруппировкаПоЗапросу.Строки Цикл			

			Если НЕ ОбработанныеИдентификаторы.Найти(ГруппировкаПоРасчетуИпотеки.ИдентификаторПоиска) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеИдентификаторы.Добавить(ГруппировкаПоРасчетуИпотеки.ИдентификаторПоиска);
  	
			МассивСтрокПоИдентификатору = ГруппировкаПоЗапросу.Строки.НайтиСтроки(Новый Структура("ИдентификаторПоиска", ГруппировкаПоРасчетуИпотеки.ИдентификаторПоиска));
			
			КоличествоДублей = МассивСтрокПоИдентификатору.Количество();
			
			Если НЕ КоличествоДублей > 1 Тогда
				Продолжить;
			КонецЕсли;			
			
			СтрокаРасчетаДляЗамены = МассивСтрокПоИдентификатору[КоличествоДублей - 1];
			РасчетИпотекиДляЗамены = СтрокаРасчетаДляЗамены.РасчетИпотеки;			
			
			Для каждого Строка Из МассивСтрокПоИдентификатору Цикл				
				Если Строка.РасчетИпотеки = РасчетИпотекиДляЗамены Тогда
					Продолжить;
				КонецЕсли;			
				СоответствиеЗамены = Новый Соответствие;
				СоответствиеЗамены.Вставить(Строка.РасчетИпотеки, РасчетИпотекиДляЗамены);
				ОбщегоНазначения.ЗаменитьСсылки(СоответствиеЗамены, ПараметрыЗамены);
				
				//Для каждого ДетальнаяЗапись Из Строка.Строки Цикл 					
				//	Если ДетальнаяЗапись.РасчетИпотеки = РасчетИпотекиДляЗамены Тогда
				//		Продолжить;
				//	КонецЕсли;
				//	ДокументОбъект = ДетальнаяЗапись.СвязанныйДокумент.ПолучитьОбъект();	
				//	ДокументОбъект.РасчетИпотеки = РасчетИпотекиДляЗамены;
				//	ДокументОбъект.Записать();
				//КонецЦикла;								
			КонецЦикла;
						
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры
//<804027> }

//
//Процедура ВыполнитьЗаменуВРегистре_СоответствиеЗапросовЗвонкам(ЗапросЗамена, ЗапросДляЗамены)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СоответствиеЗапросовЗвонкам.Запрос КАК Запрос,
	//|	СоответствиеЗапросовЗвонкам.ID_Звонка КАК ID_Звонка
	//|ПОМЕСТИТЬ вт_СоответствиеПоЗапросуЗамены
	//|ИЗ
	//|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	//|ГДЕ
	//|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствиеЗапросовЗвонкам.Запрос КАК Запрос,
	//|	СоответствиеЗапросовЗвонкам.ID_Звонка КАК ID_Звонка
	//|ПОМЕСТИТЬ вт_СоответствиеПоЗапросДляЗамены
	//|ИЗ
	//|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	//|ГДЕ
	//|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	вт_СоответствиеПоЗапросуЗамены.Запрос КАК Запрос,
	//|	вт_СоответствиеПоЗапросуЗамены.ID_Звонка КАК ID_Звонка
	//|ИЗ
	//|	вт_СоответствиеПоЗапросуЗамены КАК вт_СоответствиеПоЗапросуЗамены
	//|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СоответствиеПоЗапросДляЗамены КАК вт_СоответствиеПоЗапросДляЗамены
	//|		ПО вт_СоответствиеПоЗапросуЗамены.Запрос = вт_СоответствиеПоЗапросДляЗамены.Запрос
	//|			И вт_СоответствиеПоЗапросуЗамены.ID_Звонка = вт_СоответствиеПоЗапросДляЗамены.ID_Звонка
	//|ГДЕ
	//|	вт_СоответствиеПоЗапросДляЗамены.Запрос ЕСТЬ NULL";
	//
	//Запрос.УстановитьПараметр("Запрос", 			ЗапросЗамена);
	//Запрос.УстановитьПараметр("ЗапросДляЗамены", 	ЗапросДляЗамены);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	
	//	Выборка = РезультатЗапроса.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//	
	//		НаборЗаписей = РегистрыСведений.СоответствиеЗапросовЗвонкам.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Запрос.Установить(Выборка.Запрос);
	//		НаборЗаписей.Отбор.ID_Звонка.Установить(Выборка.ID_Звонка);
	//		НаборЗаписей.Прочитать();
	//		
	//		Для каждого Запись Из НаборЗаписей Цикл
	//		
	//			Запись.Запрос = ЗапросДляЗамены;	
	//		
	//		КонецЦикла;
	//		
	//		НаборЗаписей.Записать();
	//	
	//	КонецЦикла;
	//
	//КонецЕсли;

//КонецПроцедуры

Функция ПодготовитьПорциюТаблицыЗапросов(Знач ТаблицаЗапросов, ИндексНачала, РазмерПорции)
	
	ПорцияТаблицыЗапросов = ТаблицаЗапросов.Скопировать();
	ПорцияТаблицыЗапросов.Очистить();
	
	Для Сч = 1 По РазмерПорции Цикл
		Индекс = ?(Сч = 1, ИндексНачала, Индекс + 1);
		СтрокаПорции = ПорцияТаблицыЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПорции, ТаблицаЗапросов[Индекс]);	
	КонецЦикла;
	
	Возврат ДобавитьУровеньРодителяТаблицы(ПорцияТаблицыЗапросов); 
		
КонецФункции

Функция ДобавитьУровеньРодителяТаблицы(ПорцияТаблицыЗапросов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вт_СгруппированныйРезультат.Проект КАК Проект,
	|	вт_СгруппированныйРезультат.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_СгруппированныйРезультат.Клиент КАК Клиент,
	|	вт_СгруппированныйРезультат.Запрос КАК Запрос,
	|	вт_СгруппированныйРезультат.Основной КАК Основной,
	|	вт_СгруппированныйРезультат.Слияние КАК Слияние,
	|	вт_СгруппированныйРезультат.Исключение КАК Исключение,
	|	вт_СгруппированныйРезультат.Уровень КАК Уровень,
	|	вт_СгруппированныйРезультат.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	вт_СгруппированныйРезультат.ЗапросДата КАК ЗапросДата,
	|	вт_СгруппированныйРезультат.ИдентификаторПоиска КАК ИдентификаторПоиска,
	|	вт_СгруппированныйРезультат.Удаление КАК Удаление
	|ПОМЕСТИТЬ ВТ_ПорцияТаблицыЗапросов
	|ИЗ
	|	&ВремТЗ КАК вт_СгруппированныйРезультат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПорцияТаблицыЗапросов.Проект КАК Проект,
	|	ВТ_ПорцияТаблицыЗапросов.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	ВТ_ПорцияТаблицыЗапросов.Клиент КАК Клиент,
	|	ВТ_ПорцияТаблицыЗапросов.Запрос КАК Запрос,
	|	ВТ_ПорцияТаблицыЗапросов.Основной КАК Основной,
	|	ВТ_ПорцияТаблицыЗапросов.Слияние КАК Слияние,
	|	ВТ_ПорцияТаблицыЗапросов.Исключение КАК Исключение,
	|	ВТ_ПорцияТаблицыЗапросов.Уровень КАК Уровень,
	|	ВТ_ПорцияТаблицыЗапросов.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	ВТ_ПорцияТаблицыЗапросов.ЗапросДата КАК ЗапросДата,
	|	ВТ_ПорцияТаблицыЗапросов.ИдентификаторПоиска КАК ИдентификаторПоиска,
	|	ВТ_ПорцияТаблицыЗапросов.Удаление КАК Удаление
	|ИЗ
	|	ВТ_ПорцияТаблицыЗапросов КАК ВТ_ПорцияТаблицыЗапросов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПорцияТаблицыЗапросов.ЗапросДата
	|ИТОГИ
	|	МАКСИМУМ(1) КАК Уровень
	|ПО
	|	Клиент";	
		
	Запрос.УстановитьПараметр("ВремТЗ", ПорцияТаблицыЗапросов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;		
	
КонецФункции

Функция ПодготовитьПорциюДереваЗапросов(Знач ДеревоЗапросов, ИндексНачала, РазмерПорции)
	
	ПорцияДереваКлиентов = ДеревоЗапросов.Скопировать();
	ПорцияДереваКлиентов.Строки.Очистить();
	
	Для Сч = 1 По РазмерПорции Цикл
		Индекс = ?(Сч = 1, ИндексНачала, Индекс + 1);
		СтрокаПорции = ПорцияДереваКлиентов.Строки.Добавить();
		РекурсивноеДобавлениеНайденногоУзла(СтрокаПорции, ДеревоЗапросов.Строки[Индекс]);		
	КонецЦикла;
	
	Возврат ПорцияДереваКлиентов;
	
КонецФункции

Процедура РекурсивноеДобавлениеНайденногоУзла(Получатель, Источник) 
	
	ЗаполнитьЗначенияСвойств(Получатель, Источник);
	
    Для Каждого СтрокаИсточника Из Источник.Строки Цикл        
        ТекущаяСтрока = Получатель.Строки.Добавить();
        ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИсточника);
        ТекущаяСтрока.Уровень = Получатель.Уровень() + 1;        
        Если СтрокаИсточника.Строки.Количество() > 0 Тогда
            РекурсивноеДобавлениеНайденногоУзла(ТекущаяСтрока, СтрокаИсточника);
        КонецЕсли;        
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти
