
#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДеревоЗапросовОсновнойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Уровень = 1 Тогда
	
		ТекущиеДанные.Основной = Ложь;
		
	ИначеЕсли ТекущиеДанные <> Неопределено
				И ТекущиеДанные.Уровень = 0 Тогда
				
		СтрокаРодитель 		= ТекущиеДанные.ПолучитьРодителя();
		СтрокиВГруппировке 	= СтрокаРодитель.ПолучитьЭлементы();
		
		Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
			Если СтрокаДерева <> ТекущиеДанные Тогда
				СтрокаДерева.Основной = Ложь;			
			КонецЕсли;		
		КонецЦикла;
		
		Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
			Если СтрокаДерева <> ТекущиеДанные Тогда
		    	СтрокаДерева.Слияние = Истина;
			КонецЕсли;
		КонецЦикла;	
			
		ТекущиеДанные.Слияние = Не ТекущиеДанные.Основной;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовСлияниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Уровень = 1 Тогда
	
		СтрокиВГруппировке 	= ТекущиеДанные.ПолучитьЭлементы();
		
		Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
			Если СтрокаДерева.Основной Тогда
				СтрокаДерева.Слияние = Ложь;
				Продолжить;
			КонецЕсли;
			СтрокаДерева.Слияние = ТекущиеДанные.Слияние;			
		КонецЦикла;
	
	ИначеЕсли ТекущиеДанные <> Неопределено
				И ТекущиеДанные.Уровень = 0 Тогда
				
		Если ТекущиеДанные.Основной Тогда
			ТекущиеДанные.Слияние = Ложь;			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьЗапросы(Команда)
	ОбработатьЗапросыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуДублей(Команда)
	ЗаполнитьТаблицуДублейНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуДублейНаСервере()
	
	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросУчастники.Ссылка.Проект КАК Проект,
	|	ЗапросУчастники.Ссылка.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	ЗапросУчастники.Клиент КАК Клиент,
	|	ЗапросУчастники.Ссылка КАК Запрос
	|ПОМЕСТИТЬ ВТ_ДанныеЗапросов
	|ИЗ
	|	Документ.Запрос.Участники КАК ЗапросУчастники
	|ГДЕ
	|	НЕ ЗапросУчастники.Ссылка.ПометкаУдаления
	|	И ЗапросУчастники.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка)
	|	И НЕ ЗапросУчастники.Ссылка.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	И НЕ ЗапросУчастники.Ссылка.ТипОбъектаНедвижимости = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНедвижимости.ПустаяСсылка)
	|	И ЗапросУчастники.Ссылка.Проект = &Проект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Запрос,
	|	Клиент,
	|	Проект,
	|	ТипОбъектаНедвижимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1 
	|	ЗапросУчастники.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	ЗапросУчастники.Проект КАК Проект,
	|	ЗапросУчастники.Клиент КАК Клиент,
	|	ЗапросУчастники.Запрос КАК Запрос,
	|	ЗапросУчастникиДубли.Запрос КАК ДубльЗапроса
	|ПОМЕСТИТЬ вт_СписокДублирующихЗапросов
	|ИЗ
	|	ВТ_ДанныеЗапросов КАК ЗапросУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗапросов КАК ЗапросУчастникиДубли
	|		ПО ЗапросУчастники.Запрос <> ЗапросУчастникиДубли.Запрос
	|			И ЗапросУчастники.Клиент = ЗапросУчастникиДубли.Клиент
	|			И ЗапросУчастники.Проект = ЗапросУчастникиДубли.Проект
	|			И ЗапросУчастники.ТипОбъектаНедвижимости = ЗапросУчастникиДубли.ТипОбъектаНедвижимости
	|ГДЕ
	|	ИСТИНА
	|	И НЕ ЗапросУчастникиДубли.Запрос ЕСТЬ NULL
	|	И ЗапросУчастники.Клиент В(&Клиенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СписокДублирующихЗапросов.Проект КАК Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент КАК Клиент,
	|	вт_СписокДублирующихЗапросов.Запрос КАК Запрос,
	|	ЛОЖЬ КАК Основной,
	|	ЛОЖЬ КАК Слияние,
	|	ЛОЖЬ КАК Исключение,
	|	0 КАК Уровень
	|ПОМЕСТИТЬ вт_НеСгруппированныйРезультат
	|ИЗ
	|	вт_СписокДублирующихЗапросов КАК вт_СписокДублирующихЗапросов
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_СписокДублирующихЗапросов.Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент,
	|	вт_СписокДублирующихЗапросов.Запрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_СписокДублирующихЗапросов.Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент,
	|	вт_СписокДублирующихЗапросов.ДубльЗапроса,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	вт_СписокДублирующихЗапросов КАК вт_СписокДублирующихЗапросов
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_СписокДублирующихЗапросов.Проект,
	|	вт_СписокДублирующихЗапросов.ТипОбъектаНедвижимости,
	|	вт_СписокДублирующихЗапросов.Клиент,
	|	вт_СписокДублирующихЗапросов.ДубльЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_НеСгруппированныйРезультат.Проект КАК Проект,
	|	вт_НеСгруппированныйРезультат.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_НеСгруппированныйРезультат.Клиент КАК Клиент,
	|	вт_НеСгруппированныйРезультат.Запрос КАК Запрос,
	|	вт_НеСгруппированныйРезультат.Основной КАК Основной,
	|	вт_НеСгруппированныйРезультат.Слияние КАК Слияние,
	|	вт_НеСгруппированныйРезультат.Исключение КАК Исключение,
	|	вт_НеСгруппированныйРезультат.Уровень КАК Уровень
	|ПОМЕСТИТЬ вт_СгруппированныйРезультат
	|ИЗ
	|	вт_НеСгруппированныйРезультат КАК вт_НеСгруппированныйРезультат
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_НеСгруппированныйРезультат.Проект,
	|	вт_НеСгруппированныйРезультат.ТипОбъектаНедвижимости,
	|	вт_НеСгруппированныйРезультат.Клиент,
	|	вт_НеСгруппированныйРезультат.Запрос,
	|	вт_НеСгруппированныйРезультат.Основной,
	|	вт_НеСгруппированныйРезультат.Слияние,
	|	вт_НеСгруппированныйРезультат.Исключение,
	|	вт_НеСгруппированныйРезультат.Уровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтатусыСделки.ЗаявкаНаСделку) КАК ЗаявкаНаСделку,
	|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование КАК Запрос
	|ПОМЕСТИТЬ вт_ЗаявкиНаСделку
	|ИЗ
	|	РегистрСведений.СтатусыСделки КАК СтатусыСделки
	|ГДЕ
	|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование В
	|			(ВЫБРАТЬ
	|				вт_СгруппированныйРезультат.Запрос КАК Запрос
	|			ИЗ
	|				вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат)
	|	И СтатусыСделки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.Согласована)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_СгруппированныйРезультат.Проект КАК Проект,
	|	вт_СгруппированныйРезультат.ТипОбъектаНедвижимости КАК ТипОбъектаНедвижимости,
	|	вт_СгруппированныйРезультат.Клиент КАК Клиент,
	|	вт_СгруппированныйРезультат.Запрос КАК Запрос,
	|	ВЫБОР
	|		КОГДА НЕ вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ вт_СгруппированныйРезультат.Основной
	|	КОНЕЦ КАК Основной,
	|	ВЫБОР
	|		КОГДА вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ вт_СгруппированныйРезультат.Слияние
	|	КОНЕЦ КАК Слияние,
	|	вт_СгруппированныйРезультат.Исключение КАК Исключение,
	|	вт_СгруппированныйРезультат.Уровень КАК Уровень,
	|	вт_ЗаявкиНаСделку.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	вт_СгруппированныйРезультат.Запрос.Дата КАК ЗапросДата,
	|	"""""""" КАК ИдентификаторПоиска,
	|	ЛОЖЬ КАК Удаление
	|ИЗ
	|	вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЗаявкиНаСделку КАК вт_ЗаявкиНаСделку
	|		ПО вт_СгруппированныйРезультат.Запрос = вт_ЗаявкиНаСделку.Запрос
	//|ГДЕ
	//|	вт_СгруппированныйРезультат.Клиент В(&Клиенты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗапросДата
	|ИТОГИ
	|	МАКСИМУМ(1) КАК Уровень
	|ПО
	|	Проект,
	|	ТипОбъектаНедвижимости,
	|	Клиент";
	
	Если НЕ Клиенты.Количество() Тогда //Объект.Клиент
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗапросУчастники.Клиент В(&Клиенты)", "");
	Иначе
		Запрос.УстановитьПараметр("Клиенты", Клиенты);	//Объект.Клиент
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗапросУчастники.Ссылка.Проект = &Проект", "");
	Иначе
		Запрос.УстановитьПараметр("Проект", Объект.Проект);
	КонецЕсли;	
	
	Если Первые > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + СтрЗаменить(Первые, Символы.НПП, ""));		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ");	
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 		
	//"ВЫБРАТЬ ПЕРВЫЕ 1000
	//|	ЗапросУчастники.Ссылка.Проект КАК Проект,
	//|	ЗапросУчастники.Клиент КАК Клиент,
	//|	ЗапросУчастники.Ссылка КАК Запрос,
	//|	ЗапросУчастникиДубли.Ссылка КАК ДубльЗапроса
	//|ПОМЕСТИТЬ вт_СписокДублирующихЗапросов
	//|ИЗ
	//|	Документ.Запрос.Участники КАК ЗапросУчастники
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Запрос.Участники КАК ЗапросУчастникиДубли
	//|		ПО ЗапросУчастники.Ссылка <> ЗапросУчастникиДубли.Ссылка
	//|			И ЗапросУчастники.Клиент = ЗапросУчастникиДубли.Клиент
	//|			И (ЗапросУчастники.Клиент <> ЗНАЧЕНИЕ(Справочник.Клиенты.ПустаяСсылка))
	//|			И (НЕ ЗапросУчастники.Ссылка.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	//|			И ЗапросУчастники.Ссылка.Проект = ЗапросУчастникиДубли.Ссылка.Проект
	//|ГДЕ
	//|	НЕ ЗапросУчастникиДубли.Ссылка ЕСТЬ NULL";
	//Если ЗначениеЗаполнено(Объект.Клиент) Тогда
	//	Запрос.Текст = Запрос.Текст + "	И ЗапросУчастники.Клиент = &Клиент";
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Объект.Проект) Тогда
	//	Запрос.Текст = Запрос.Текст + "	И ЗапросУчастники.Ссылка.Проект = &Проект";
	//КонецЕсли;
	//Запрос.Текст = Запрос.Текст + "    
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	вт_СписокДублирующихЗапросов.Проект КАК Проект,
	//|	вт_СписокДублирующихЗапросов.Клиент КАК Клиент,
	//|	вт_СписокДублирующихЗапросов.Запрос КАК Запрос,
	//|	ЛОЖЬ КАК Основной,
	//|	ЛОЖЬ КАК Слияние,
	//|	ЛОЖЬ КАК Исключение,
	//|	0 КАК Уровень
	//|ПОМЕСТИТЬ вт_НеСгруппированныйРезультат
	//|ИЗ
	//|	вт_СписокДублирующихЗапросов КАК вт_СписокДублирующихЗапросов
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вт_СписокДублирующихЗапросов.Проект,
	//|	вт_СписокДублирующихЗапросов.Клиент,
	//|	вт_СписокДублирующихЗапросов.Запрос
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	вт_СписокДублирующихЗапросов.Проект,
	//|	вт_СписокДублирующихЗапросов.Клиент,
	//|	вт_СписокДублирующихЗапросов.ДубльЗапроса,
	//|	ЛОЖЬ,
	//|	ЛОЖЬ,
	//|	ЛОЖЬ,
	//|	0
	//|ИЗ
	//|	вт_СписокДублирующихЗапросов КАК вт_СписокДублирующихЗапросов
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вт_СписокДублирующихЗапросов.Проект,
	//|	вт_СписокДублирующихЗапросов.Клиент,
	//|	вт_СписокДублирующихЗапросов.ДубльЗапроса
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	вт_НеСгруппированныйРезультат.Проект КАК Проект,
	//|	вт_НеСгруппированныйРезультат.Клиент КАК Клиент,
	//|	вт_НеСгруппированныйРезультат.Запрос КАК Запрос,
	//|	вт_НеСгруппированныйРезультат.Основной КАК Основной,
	//|	вт_НеСгруппированныйРезультат.Слияние КАК Слияние,
	//|	вт_НеСгруппированныйРезультат.Исключение КАК Исключение,
	//|	вт_НеСгруппированныйРезультат.Уровень КАК Уровень
	//|ПОМЕСТИТЬ вт_СгруппированныйРезультат
	//|ИЗ
	//|	вт_НеСгруппированныйРезультат КАК вт_НеСгруппированныйРезультат
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вт_НеСгруппированныйРезультат.Проект,
	//|	вт_НеСгруппированныйРезультат.Клиент,
	//|	вт_НеСгруппированныйРезультат.Запрос,
	//|	вт_НеСгруппированныйРезультат.Основной,
	//|	вт_НеСгруппированныйРезультат.Слияние,
	//|	вт_НеСгруппированныйРезультат.Исключение,
	//|	вт_НеСгруппированныйРезультат.Уровень
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(СтатусыСделки.ЗаявкаНаСделку) КАК ЗаявкаНаСделку,
	//|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование КАК Запрос
	//|ПОМЕСТИТЬ вт_ЗаявкиНаСделку
	//|ИЗ
	//|	РегистрСведений.СтатусыСделки КАК СтатусыСделки
	//|ГДЕ
	//|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование В
	//|			(ВЫБРАТЬ
	//|				вт_СгруппированныйРезультат.Запрос КАК Запрос
	//|			ИЗ
	//|				вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат)
	//|	И СтатусыСделки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.Согласована)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	СтатусыСделки.ЗаявкаНаСделку.ДокументОснование
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	вт_СгруппированныйРезультат.Проект КАК Проект,
	//|	вт_СгруппированныйРезультат.Клиент КАК Клиент,
	//|	вт_СгруппированныйРезультат.Запрос КАК Запрос,
	//|	ВЫБОР
	//|		КОГДА НЕ вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ вт_СгруппированныйРезультат.Основной
	//|	КОНЕЦ КАК Основной,
	//|	ВЫБОР
	//|		КОГДА вт_ЗаявкиНаСделку.ЗаявкаНаСделку ЕСТЬ NULL
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ вт_СгруппированныйРезультат.Слияние
	//|	КОНЕЦ КАК Слияние,
	//|	вт_СгруппированныйРезультат.Исключение КАК Исключение,
	//|	вт_СгруппированныйРезультат.Уровень КАК Уровень,
	//|	вт_ЗаявкиНаСделку.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	//|	вт_СгруппированныйРезультат.Запрос.Дата КАК ЗапросДата,
	//|	"""" КАК ИдентификаторПоиска,
	//|	ЛОЖЬ КАК Удаление
	//|ИЗ
	//|	вт_СгруппированныйРезультат КАК вт_СгруппированныйРезультат
	//|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЗаявкиНаСделку КАК вт_ЗаявкиНаСделку
	//|		ПО вт_СгруппированныйРезультат.Запрос = вт_ЗаявкиНаСделку.Запрос
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ЗапросДата
	//|ИТОГИ
	//|	МАКСИМУМ(1) КАК Уровень
	//|ПО
	//|	Проект,
	//|	Клиент";
	
	////Запрос.УстановитьПараметр("Клиент", Справочники.Клиенты.ПолучитьСсылку(Новый УникальныйИдентификатор("967c5d70-a826-11e3-9404-9c8e99fc8634")));
	//Запрос.УстановитьПараметр("Клиент", 	Объект.Клиент);
	//Запрос.УстановитьПараметр("Проект", 	Объект.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "ДеревоЗапросов");	
	КонецЕсли;	
	
	//Если РежимРаботы = 1 Тогда
	//	ОбработатьЗапросыПоТочномуСовпадению();
	//Иначе
	ОбработатьТаблицуЗапросовДляПростогоПоиска();
	//КонецЕсли;
	
	ОпределитьОсновнойЗапросДляГруппировокБезСделок();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗапросыНаСервере()
	
	ПараметрыЗамены = Новый Структура("СпособУдаления,УчитыватьПрикладныеПравила,ВключатьБизнесЛогику", "Пометка", Ложь, Истина);
	
	дзДеревоЗапросов = РеквизитФормыВЗначение("ДеревоЗапросов");
	
	Для каждого ГруппировкаПоПроекту Из дзДеревоЗапросов.Строки Цикл
		
		Для каждого ГруппировкаПоВидуНедвижимости Из ГруппировкаПоПроекту.Строки Цикл
			
			Для каждого ГруппировкаПоКлиенту Из ГруппировкаПоВидуНедвижимости.Строки Цикл
				
				МассивЗапросов 	= Новый Массив;
				ЗапросДляЗамены = Неопределено;
				
				Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл
					
					//Запросы у которых есть сделка
					Если ДетальнаяЗапись.Основной Тогда
						
						ЗапросДляЗамены = ДетальнаяЗапись.Запрос;
						
						Если МассивЗапросов.Количество() > 0 Тогда
							
							ОбработатьРеквизитыЗапросаДляЗамены(МассивЗапросов, ЗапросДляЗамены);
							
							Для каждого ЭлементМассива Из МассивЗапросов Цикл
								СоответствиеЗамены = Новый Соответствие;
								СоответствиеЗамены.Вставить(ЭлементМассива, ЗапросДляЗамены);
								ОбщегоНазначения.ЗаменитьСсылки(СоответствиеЗамены, ПараметрыЗамены);
								ВыполнитьДополнительныеДействияПоЗамене(ЭлементМассива, ЗапросДляЗамены);
							КонецЦикла;	
							
							ВыполнитьКорректировкуРСВзаимодействия(ЗапросДляЗамены);
							
						КонецЕсли;
						
						ЗапросДляЗамены = Неопределено;
						МассивЗапросов.Очистить();
						
					КонецЕсли;
					
					Если ДетальнаяЗапись.Слияние Тогда
						МассивЗапросов.Добавить(ДетальнаяЗапись.Запрос);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗапросыПоТочномуСовпадению()
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуЗапросовДляПростогоПоиска()
	
	дзДеревоЗапросов = РеквизитФормыВЗначение("ДеревоЗапросов");
																						
	Для каждого ГруппировкаПоПроекту Из дзДеревоЗапросов.Строки Цикл
		
		Для каждого ГруппировкаПоВидуНедвижимости Из ГруппировкаПоПроекту.Строки Цикл
						
			Для каждого ГруппировкаПоКлиенту Из ГруппировкаПоВидуНедвижимости.Строки Цикл
				
				ОбщееКоличествоДетальныхЗаписей = ГруппировкаПоКлиенту.Строки.Количество();		
				
				ТаблицаАнализаПоИдентификаторуПоиска = Новый ТаблицаЗначений;
				ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("Запрос", 				Новый ОписаниеТипов("ДокументСсылка.Запрос"));
				ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("ИдентификаторПоиска", 	Новый ОписаниеТипов("Строка", ,
					Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная)));
				ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("Количество", 			Новый ОписаниеТипов("Число",
					Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
					
				////<ЦелиПокупки>, Басаргин (24.05.2018) {
				//ТаблицаАнализаПоИдентификаторуПоиска.Колонки.Добавить("ЦелиПокупки", Новый ОписаниеТипов("Соответствие"));					
				////<ЦелиПокупки> }
										
				Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл
					
					ДетальнаяЗапись.ИдентификаторПоиска = ПолучитьИдентификаторПоискаПоЗапросу(ДетальнаяЗапись.Запрос);
					
					НоваяСтрока = ТаблицаАнализаПоИдентификаторуПоиска.Добавить();
					НоваяСтрока.Запрос				= ДетальнаяЗапись.Запрос;
					НоваяСтрока.ИдентификаторПоиска = ДетальнаяЗапись.ИдентификаторПоиска;
					НоваяСтрока.Количество 			= 1;
					
				КонецЦикла;
				
				////<ЦелиПокупки>, Басаргин (24.05.2018) {
				//ОбработатьТаблицуАнализаПоИдентификаторуПоискаПоЦелямПокупки(ТаблицаАнализаПоИдентификаторуПоиска);
				////<ЦелиПокупки> }
								
				ТаблицаАнализаПоИдентификаторуПоиска.Свернуть("ИдентификаторПоиска", "Количество");
				
				УдалитьНеДублирующиеЗапросыПоГруппировкеКлиент(ГруппировкаПоКлиенту.Строки, ТаблицаАнализаПоИдентификаторуПоиска);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(дзДеревоЗапросов, "ДеревоЗапросов");
	
КонецПроцедуры

//<ЦелиПокупки>, Басаргин (24.05.2018) {
Процедура ОбработатьТаблицуАнализаПоИдентификаторуПоискаПоЦелямПокупки(ТаблицаАнализаПоИдентификаторуПоиска)
	
	КопияТаблицаАнализаПоИдентификаторуПоиска = ТаблицаАнализаПоИдентификаторуПоиска.Скопировать();
	ПроверенныеИдентификаторы = Новый Массив;
	
	Для каждого Строка Из КопияТаблицаАнализаПоИдентификаторуПоиска Цикл				
		Если НЕ ПроверенныеИдентификаторы.Найти(Строка.ИдентификаторПоиска) = Неопределено Тогда
			 Продолжить;
		КонецЕсли;			
		НайденныеСтроки = КопияТаблицаАнализаПоИдентификаторуПоиска.НайтиСтроки(Новый Структура("ИдентификаторПоиска", Строка.ИдентификаторПоиска));				
		Если НайденныеСтроки.Количество() > 1 Тогда
			ПроверенныеИдентификаторы.Добавить(Строка.ИдентификаторПоиска);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ЦелиПокупки = ПолучитьСоответствиеЦелейПокупкиПоЗапросу(НайденнаяСтрока.Запрос);	
			КонецЦикла;				
			Граница = НайденныеСтроки.ВГраница();
			Для й = 0 По Граница Цикл				
				ЭлементНайден = Истина;
				Если НЕ НайденныеСтроки[й].ЦелиПокупки.Количество() Тогда
					Продолжить;		
				КонецЕсли;
				Для каждого ЦельПокупки Из НайденныеСтроки[й].ЦелиПокупки Цикл
					Для к = й + 1 По Граница Цикл					
						ЭлементНайден = НЕ НайденныеСтроки[к].ЦелиПокупки.Количество() 
											ИЛИ (НЕ НайденныеСтроки[к].ЦелиПокупки.Получить(ЦельПокупки.Ключ) = Неопределено);
						Если НЕ ЭлементНайден Тогда            	
							Прервать;
						КонецЕсли;	
					КонецЦикла;					
					Если ЭлементНайден Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;		
				Если НЕ ЭлементНайден Тогда
					ИндексСтроки = КопияТаблицаАнализаПоИдентификаторуПоиска.Индекс(НайденныеСтроки[й]);
					Если ИндексСтроки > 0 Тогда
						ТаблицаАнализаПоИдентификаторуПоиска[ИндексСтроки].ИдентификаторПоиска = ТаблицаАнализаПоИдентификаторуПоиска[ИндексСтроки].ИдентификаторПоиска + "_" + СлучайнаяПоследовательность();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры	

Функция СлучайнаяПоследовательность(Длина = 5)
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();

	СлучайнаяПоследовательность = "";
	Неиспользуемые = ":<=>?@;[\]^_`";
	Пока СтрДлина(СлучайнаяПоследовательность) < Длина Цикл
	    СлучайныйСимвол = Символ(ГСЧ.СлучайноеЧисло(48, 122));
		Если Найти(Неиспользуемые, СлучайныйСимвол) > 0 Тогда
			Продолжить;
	    КонецЕсли;
	    СлучайнаяПоследовательность = СлучайнаяПоследовательность + СлучайныйСимвол;
	КонецЦикла;        

	Возврат СлучайнаяПоследовательность;	
	
КонецФункции

Функция ПолучитьСоответствиеЦелейПокупкиПоЗапросу(Запрос) 
	
	ВыгрузкаПоТабличнойЧасти = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос, "ЦелиПокупки").Выгрузить();
	ВыгрузкаПоТабличнойЧасти.Сортировать("ЦельПокупки");
	ИдентификаторПоиска = Новый Соответствие;
	
	Для Каждого СтрокаТЧ ИЗ ВыгрузкаПоТабличнойЧасти Цикл				
		Если ИдентификаторПоиска.Получить(СтрокаТЧ.ЦельПокупки) = Неопределено Тогда 
			ИдентификаторПоиска.Вставить(СтрокаТЧ.ЦельПокупки, ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаТЧ.ЦельПокупки));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторПоиска;
	
КонецФункции
//<ЦелиПокупки> }

&НаСервере
Процедура ОпределитьОсновнойЗапросДляГруппировокБезСделок()
	
	дзДеревоЗапросов = РеквизитФормыВЗначение("ДеревоЗапросов");
	
	Для каждого ГруппировкаПоПроекту Из дзДеревоЗапросов.Строки Цикл
		
		Для каждого ГруппировкаПоВидуНедвижимости Из ГруппировкаПоПроекту.Строки Цикл
			
			Для каждого ГруппировкаПоКлиенту Из ГруппировкаПоВидуНедвижимости.Строки Цикл
				
				Счетчик							= 0;		
				ОбщееКоличествоДетальныхЗаписей = ГруппировкаПоКлиенту.Строки.Количество();
				
				Если ОбщееКоличествоДетальныхЗаписей = 0 Тогда
					
					Продолжить;	
					
				КонецЕсли;
				
				НаличиеУПредыдущейЗаписиЗаявки 		= Ложь;
				НаличиеПредыдущихЗапросовБезЗаявки	= Ложь;
				
				//Помечаем те строки, какие должны будут быть удалены
				Для каждого ДетальнаяЗапись Из ГруппировкаПоКлиенту.Строки Цикл
					
					Счетчик = Счетчик + 1;
					
					//Для последнего запроса потребуется слияние, если даже у него нет сделки
					Если ОбщееКоличествоДетальныхЗаписей = Счетчик
						И НЕ ДетальнаяЗапись.Основной Тогда
						ДетальнаяЗапись.Основной = Истина;
						ДетальнаяЗапись.Слияние  = Ложь;
					КонецЕсли;
					
					Если ОбщееКоличествоДетальныхЗаписей = Счетчик
						И НаличиеУПредыдущейЗаписиЗаявки Тогда
						ДетальнаяЗапись.Удаление = Истина;
					КонецЕсли;
					
					Если Счетчик = 1 
						И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						ДетальнаяЗапись.Удаление = Истина;	
						//Если предыдущая строка - запрос с заявкой на сделку, и в данной строке тоже самое - строку надо удалить
					ИначеЕсли НаличиеУПредыдущейЗаписиЗаявки
						И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						ДетальнаяЗапись.Удаление = Истина;
						//А также если не было предыдущих строк с запросами без заявок, то тоже слияние производить не нужно
					ИначеЕсли НЕ НаличиеПредыдущихЗапросовБезЗаявки
						И ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						ДетальнаяЗапись.Удаление = Истина;	
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДетальнаяЗапись.ЗаявкаНаСделку) Тогда
						НаличиеУПредыдущейЗаписиЗаявки = Истина;
					Иначе
						НаличиеУПредыдущейЗаписиЗаявки 		= Ложь;
						НаличиеПредыдущихЗапросовБезЗаявки 	= Истина
					КонецЕсли;
					
				КонецЦикла;
				
				//Непосредственно удаление тех строк, в которых есть заявки на сделку
				Индекс = ГруппировкаПоКлиенту.Строки.Количество() - 1;
				
				Пока Индекс >= 0 Цикл
					
					Если ГруппировкаПоКлиенту.Строки[Индекс].Удаление Тогда
						ГруппировкаПоКлиенту.Строки.Удалить(Индекс);						
					КонецЕсли;
					Индекс = Индекс - 1;
					
				КонецЦикла;	
				
				Если ГруппировкаПоКлиенту.Строки.Количество() = 1 Тогда 
					ГруппировкаПоКлиенту.Строки[0].Основной	= Ложь;
					ГруппировкаПоКлиенту.Строки[0].Слияние	= ЛожЬ;
				КонецЕсли;	
				
			КонецЦикла;	
			
			//Непосредственно удаление тех строк, в которых нет данных
			Индекс = ГруппировкаПоВидуНедвижимости.Строки.Количество() - 1;
			Пока Индекс >= 0 Цикл
				
				Если ГруппировкаПоВидуНедвижимости.Строки[Индекс].Строки.Количество() = 0 Тогда
					ГруппировкаПоВидуНедвижимости.Строки.Удалить(Индекс);						
				КонецЕсли;
				Индекс = Индекс - 1;
				
			КонецЦикла;	
						
		КонецЦикла;
		
		//Непосредственно удаление тех строк, в которых нет данных
		Индекс = ГруппировкаПоПроекту.Строки.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Если ГруппировкаПоПроекту.Строки[Индекс].Строки.Количество() = 0 Тогда
				ГруппировкаПоПроекту.Строки.Удалить(Индекс);						
			КонецЕсли;
			Индекс = Индекс - 1;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	//Удаляем пустые проекты 
	Индекс = дзДеревоЗапросов.Строки.Количество() - 1;	
	Пока Индекс >= 0 Цикл
		
		Если дзДеревоЗапросов.Строки[Индекс].Строки.Количество() = 0 Тогда
			дзДеревоЗапросов.Строки.Удалить(Индекс);						
		КонецЕсли;
		Индекс = Индекс - 1;
		
	КонецЦикла;			
	
	ЗначениеВРеквизитФормы(дзДеревоЗапросов, "ДеревоЗапросов");
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьРеквизитыЗапросаДляЗамены(МассивЗапросов, ЗапросДляЗамены)

	ПолныйСписокЗапросов = Новый СписокЗначений;
	ПолныйСписокЗапросов.ЗагрузитьЗначения(МассивЗапросов);
	ПолныйСписокЗапросов.Добавить(ЗапросДляЗамены);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеСтатусаСтадииЗапроса.Период КАК Период,
	|	ИзменениеСтатусаСтадииЗапроса.Запрос КАК Запрос,
	|	ИзменениеСтатусаСтадииЗапроса.Стадия КАК Стадия,
	|	ИзменениеСтатусаСтадииЗапроса.Статус КАК Статус,
	|	ИзменениеСтатусаСтадииЗапроса.РасшифровкаСтатуса КАК РасшифровкаСтатуса,
	|	ИзменениеСтатусаСтадииЗапроса.ДокументВзаимодействия КАК ДокументВзаимодействия,
	|	ИзменениеСтатусаСтадииЗапроса.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ИзменениеСтатусаСтадииЗапроса КАК ИзменениеСтатусаСтадииЗапроса
	|ГДЕ
	|	ИзменениеСтатусаСтадииЗапроса.Запрос В(&СписокЗапросов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("СписокЗапросов", ПолныйСписокЗапросов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		НаборЗаписейИзмененияСтатусаЗапроса	= РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();	
		НаборЗаписейИзмененияСтатусаЗапроса.Отбор.Запрос.Установить(ЗапросДляЗамены);
		НаборЗаписейИзмененияСтатусаЗапроса.Очистить();
		НаборЗаписейИзмененияСтатусаЗапроса.Записать();
				
		Выборка 		= РезультатЗапроса.Выбрать();
		ТекущаяСтадия 	= Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			Если ТекущаяСтадия = Перечисления.СтадииЗапроса.Сделка Тогда
				Прервать;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекущаяСтадия) Тогда
				ТекущаяСтадия = Выборка.Стадия;
			ИначеЕсли ТекущаяСтадия = Перечисления.СтадииЗапроса.Звонок
						И Выборка.Стадия = Перечисления.СтадииЗапроса.Переговоры Тогда
				ТекущаяСтадия = Перечисления.СтадииЗапроса.Переговоры;
			ИначеЕсли Выборка.Стадия = Перечисления.СтадииЗапроса.Сделка Тогда
			 	ТекущаяСтадия = Перечисления.СтадииЗапроса.Сделка;
			ИначеЕсли ТекущаяСтадия = Перечисления.СтадииЗапроса.Переговоры
						И Выборка.Стадия = Перечисления.СтадииЗапроса.Звонок Тогда
				Продолжить;
			ИначеЕсли ТекущаяСтадия = Перечисления.СтадииЗапроса.Сделка
						И (Выборка.Стадия = Перечисления.СтадииЗапроса.Звонок ИЛИ Выборка.Стадия = Перечисления.СтадииЗапроса.Переговоры) Тогда
				Продолжить;				
			КонецЕсли;
			
			НаборЗаписейИзмененияСтатусаЗапроса	= РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();	
			НаборЗаписейИзмененияСтатусаЗапроса.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписейИзмененияСтатусаЗапроса.Отбор.Запрос.Установить(ЗапросДляЗамены);
			НоваяЗапись = НаборЗаписейИзмененияСтатусаЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Запрос = ЗапросДляЗамены;
			НаборЗаписейИзмененияСтатусаЗапроса.Записать();
		
		КонецЦикла;	
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запрос.Ссылка КАК Ссылка,
	|	Запрос.РасшифровкаИсточниковПриходаКлиента КАК РасшифровкаИсточниковПриходаКлиента,
	|	Запрос.УточнениеРасшифровкиИсточникаПрихода КАК УточнениеРасшифровкиИсточникаПрихода,
	|	Запрос.Дата КАК Дата
	|ИЗ
	|	Документ.Запрос КАК Запрос
	|ГДЕ
	|	Запрос.Ссылка В(&МассивЗапросов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("МассивЗапросов", МассивЗапросов);
	РезультатЗапроса = Запрос.Выполнить();
	
	РасшифровкаИсточниковПриходаКлиента 	= Справочники.РасшифровкаИсточниковПриходаКлиента.ПустаяСсылка();
	УточнениеРасшифровкиИсточникаПрихода 	= Справочники.УточнениеРасшифровкиИсточниковПриходаКлиента.ПустаяСсылка();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(РасшифровкаИсточниковПриходаКлиента)
					И ЗначениеЗаполнено(УточнениеРасшифровкиИсточникаПрихода) Тогда
				Прервать;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.РасшифровкаИсточниковПриходаКлиента) Тогда
				РасшифровкаИсточниковПриходаКлиента = Выборка.РасшифровкаИсточниковПриходаКлиента;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.УточнениеРасшифровкиИсточникаПрихода) Тогда
				УточнениеРасшифровкиИсточникаПрихода = Выборка.УточнениеРасшифровкиИсточникаПрихода;
			КонецЕсли;		
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасшифровкаИсточниковПриходаКлиента)
			ИЛИ ЗначениеЗаполнено(УточнениеРасшифровкиИсточникаПрихода) Тогда
		ДокументОбъект = ЗапросДляЗамены.ПолучитьОбъект();
		Если ЗначениеЗаполнено(РасшифровкаИсточниковПриходаКлиента) Тогда
			ДокументОбъект.РасшифровкаИсточниковПриходаКлиента = РасшифровкаИсточниковПриходаКлиента;
		КонецЕсли;
		Если ЗначениеЗаполнено(УточнениеРасшифровкиИсточникаПрихода) Тогда
			ДокументОбъект.УточнениеРасшифровкиИсточникаПрихода = УточнениеРасшифровкиИсточникаПрихода;
		КонецЕсли;
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");		
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ДокументОбъект.ОбменДанными.Загрузка = Ложь;
			ДокументОбъект.ДополнительныеСвойства.Вставить("АвторВерсии", Пользователи.ТекущийПользователь());	
			//ДокументОбъект.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);		
			ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ДокументОбъект, Неопределено);								
		Исключение	
		 	Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "При корректировке источника расшифровки или его уточнения возникла следущая ошибка:" + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторПоискаПоЗапросу(Запрос)
	
	ВыгрузкаПоТабличнойЧасти 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос, "Участники").Выгрузить();
	ВыгрузкаПоТабличнойЧасти.Сортировать("Клиент");
	ИдентификаторПоиска 		= "";
	
	//<831583>, Басаргин (13.06.2018) {
	ОбработанныеОбъекты = Новый Массив;	
	//<831583> }
	
	Для Каждого СтрокаТЧ ИЗ ВыгрузкаПоТабличнойЧасти Цикл
		//<831583>, Басаргин (13.06.2018) {
		Если НЕ ОбработанныеОбъекты.Найти(СтрокаТЧ.Клиент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеОбъекты.Добавить(СтрокаТЧ.Клиент);
		//<831583> }			
		ИдентификаторПоиска = ИдентификаторПоиска + Строка(СтрокаТЧ.Клиент.УникальныйИдентификатор());	
	КонецЦикла;
	
	Возврат ИдентификаторПоиска;
	
КонецФункции

&НаСервере
Процедура УдалитьНеДублирующиеЗапросыПоГруппировкеКлиент(ГруппировкаПоКлиентуСтроки, ТаблицаАнализаПоИдентификаторуПоиска)
	
	Для каждого СтрокаТЧ Из ТаблицаАнализаПоИдентификаторуПоиска Цикл
		
		Если СтрокаТЧ.Количество = 1 Тогда
			
			НайденнаяСтрока = ГруппировкаПоКлиентуСтроки.Найти(СтрокаТЧ.ИдентификаторПоиска, "ИдентификаторПоиска");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				ГруппировкаПоКлиентуСтроки.Удалить(НайденнаяСтрока);					
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДополнительныеДействияПоЗамене(ЗапросЗамена, ЗапросДляЗамены)
	
	ВыполнитьЗаменуВРегистре_ПредметыПапкиВзаимодействий(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_ДанныеДляКорректировкиСтатусовДокументаЗапрос(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_Взаимодействия(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_ИсторияЗвонков(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_СрокиБронированияОбъектовНедвижимости(ЗапросЗамена, ЗапросДляЗамены);
	ВыполнитьЗаменуВРегистре_ДанныеCallTracking(ЗапросЗамена, ЗапросДляЗамены);
	//ВыполнитьЗаменуВРегистре_СоответствиеЗапросовЗвонкам(ЗапросЗамена, ЗапросДляЗамены);
	
	УдалитьЗаписиПоРегистру_УчастникиЗапроса(ЗапросЗамена);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВРегистре_ПредметыПапкиВзаимодействий(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма КАК ПапкаЭлектронногоПисьма,
	|	ПредметыПапкиВзаимодействий.Рассмотрено КАК Рассмотрено,
	|	ПредметыПапкиВзаимодействий.РассмотретьПосле КАК РассмотретьПосле
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет";
	Запрос.УстановитьПараметр("Предмет", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Взаимодействие.Установить(Выборка.Взаимодействие);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Предмет = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьКорректировкуРСВзаимодействия(ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие,
	|	ИСТИНА КАК Записывать
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет";
	Запрос.УстановитьПараметр("Предмет", ЗапросДляЗамены);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Взаимодействия.Взаимодействия_ЗаписатьВФоне(РезультатЗапроса.Выгрузить());				
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВРегистре_Взаимодействия(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.Взаимодействия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Взаимодействие.Установить(Выборка.Взаимодействие);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Предмет = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВРегистре_ДанныеДляКорректировкиСтатусовДокументаЗапрос(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.ОснованиеДляИзмененияСтатуса КАК ОснованиеДляИзмененияСтатуса,
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.Запрос КАК Запрос
	|ИЗ
	|	РегистрСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос КАК ДанныеДляКорректировкиСтатусовДокументаЗапрос
	|ГДЕ
	|	ДанныеДляКорректировкиСтатусовДокументаЗапрос.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ДанныеДляКорректировкиСтатусовДокументаЗапрос.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОснованиеДляИзмененияСтатуса.Установить(Выборка.ОснованиеДляИзмененияСтатуса);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Запрос = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВРегистре_ИсторияЗвонков(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияЗвонков.ID_Звонка КАК ID_Звонка,
	|	ИсторияЗвонков.ДатаНачалаЗвонка КАК ДатаНачалаЗвонка,
	|	ИсторияЗвонков.ВызывающийНомер КАК ВызывающийНомер,
	|	ИсторияЗвонков.ВызываемыйНомер КАК ВызываемыйНомер,
	|	ИсторияЗвонков.Контакт КАК Контакт
	|ИЗ
	|	РегистрСведений.ИсторияЗвонков КАК ИсторияЗвонков
	|ГДЕ
	|	ИсторияЗвонков.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ИсторияЗвонков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ID_Звонка.Установить(Выборка.ID_Звонка);
			НаборЗаписей.Отбор.ДатаНачалаЗвонка.Установить(Выборка.ДатаНачалаЗвонка);
			НаборЗаписей.Отбор.ВызывающийНомер.Установить(Выборка.ВызывающийНомер);
			НаборЗаписей.Отбор.ВызываемыйНомер.Установить(Выборка.ВызываемыйНомер);
			НаборЗаписей.Отбор.Контакт.Установить(Выборка.Контакт);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Запрос = ЗапросДляЗамены;
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписиПоРегистру_УчастникиЗапроса(ЗапросЗамена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиЗапроса.Телефон КАК Телефон,
	|	УчастникиЗапроса.Клиент КАК Клиент
	|ИЗ
	|	РегистрСведений.УчастникиЗапроса КАК УчастникиЗапроса
	|ГДЕ
	|	УчастникиЗапроса.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.УчастникиЗапроса.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Телефон.Установить(Выборка.Телефон);
			НаборЗаписей.Отбор.Запрос.Установить(ЗапросЗамена);
			НаборЗаписей.Отбор.Клиент.Установить(Выборка.Клиент);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВРегистре_СрокиБронированияОбъектовНедвижимости(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СрокиБронированияОбъектовНедвижимости.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СрокиБронированияОбъектовНедвижимости КАК СрокиБронированияОбъектовНедвижимости
	|ГДЕ
	|	СрокиБронированияОбъектовНедвижимости.ДокументЗапрос = &ДокументЗапрос";
	
	Запрос.УстановитьПараметр("ДокументЗапрос", ЗапросЗамена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.СрокиБронированияОбъектовНедвижимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
			
				Запись.ДокументЗапрос = ЗапросДляЗамены;	
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаменуВРегистре_ДанныеCallTracking(ЗапросЗамена, ЗапросДляЗамены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеCallTracking.ТипОбращения КАК ТипОбращения,
	|	ДанныеCallTracking.Сайт КАК Сайт,
	|	ДанныеCallTracking.РекламнаяКампания КАК РекламнаяКампания,
	|	ДанныеCallTracking.ПериодОбращения КАК ПериодОбращения,
	|	ДанныеCallTracking.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	РегистрСведений.ДанныеCallTracking КАК ДанныеCallTracking
	|ГДЕ
	|	ДанныеCallTracking.Запрос = &Запрос";
	
	Запрос.УстановитьПараметр("Запрос", ЗапросЗамена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = РегистрыСведений.ДанныеCallTracking.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ТипОбращения.Установить(Выборка.ТипОбращения);
			НаборЗаписей.Отбор.Сайт.Установить(Выборка.Сайт);
			НаборЗаписей.Отбор.РекламнаяКампания.Установить(Выборка.РекламнаяКампания);
			НаборЗаписей.Отбор.ПериодОбращения.Установить(Выборка.ПериодОбращения);
			НаборЗаписей.Отбор.НомерТелефона.Установить(Выборка.НомерТелефона);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
			
				Запись.Запрос = ЗапросДляЗамены;	
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоследовательнаяОбработкаНаСервере(Клиенты, Проект)
	
	ДеревоЗапросов = Обработки.СлияниеДублейЗапросов.ПолучитьДеревоДублейЗапросов(Клиенты, Проект);	
	Если НЕ ДеревоЗапросов = Неопределено И ДеревоЗапросов.Строки.Количество() Тогда
		ПорцияТаблицыЗапросов = Обработки.СлияниеДублейЗапросов.ПолучитьСтрокиНижнегоУровня(ДеревоЗапросов);
		дзДеревоЗапросов = Обработки.СлияниеДублейЗапросов.ДобавитьУровеньРодителяТаблицы(ПорцияТаблицыЗапросов);
		Обработки.СлияниеДублейЗапросов.ОбработатьЗапросы(дзДеревоЗапросов);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследовательнаяОбработка(Команда)
	ПоследовательнаяОбработкаНаСервере(Клиенты, Объект.Проект);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегламентноНаСервере(Клиенты, Проект, Первые)

	ДеревоЗапросов = Обработки.СлияниеДублейЗапросов.ПолучитьДеревоДублейЗапросов(Клиенты, Проект, Первые);	
	Если НЕ ДеревоЗапросов = Неопределено И ДеревоЗапросов.Строки.Количество() Тогда
		Обработки.СлияниеДублейЗапросов.ОбработатьЗапросыРегламентно(ДеревоЗапросов);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Регламентно(Команда)
	РегламентноНаСервере(Клиенты, Объект.Проект, Первые);
КонецПроцедуры

//&НаСервереБезКонтекста
//Процедура ВыполнитьЗаменуВРегистре_СоответствиеЗапросовЗвонкам(ЗапросЗамена, ЗапросДляЗамены)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	СоответствиеЗапросовЗвонкам.Запрос КАК Запрос,
	//|	СоответствиеЗапросовЗвонкам.ID_Звонка КАК ID_Звонка
	//|ПОМЕСТИТЬ вт_СоответствиеПоЗапросуЗамены
	//|ИЗ
	//|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	//|ГДЕ
	//|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СоответствиеЗапросовЗвонкам.Запрос КАК Запрос,
	//|	СоответствиеЗапросовЗвонкам.ID_Звонка КАК ID_Звонка
	//|ПОМЕСТИТЬ вт_СоответствиеПоЗапросДляЗамены
	//|ИЗ
	//|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	//|ГДЕ
	//|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	вт_СоответствиеПоЗапросуЗамены.Запрос КАК Запрос,
	//|	вт_СоответствиеПоЗапросуЗамены.ID_Звонка КАК ID_Звонка
	//|ИЗ
	//|	вт_СоответствиеПоЗапросуЗамены КАК вт_СоответствиеПоЗапросуЗамены
	//|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СоответствиеПоЗапросДляЗамены КАК вт_СоответствиеПоЗапросДляЗамены
	//|		ПО вт_СоответствиеПоЗапросуЗамены.Запрос = вт_СоответствиеПоЗапросДляЗамены.Запрос
	//|			И вт_СоответствиеПоЗапросуЗамены.ID_Звонка = вт_СоответствиеПоЗапросДляЗамены.ID_Звонка
	//|ГДЕ
	//|	вт_СоответствиеПоЗапросДляЗамены.Запрос ЕСТЬ NULL";
	//
	//Запрос.УстановитьПараметр("Запрос", 			ЗапросЗамена);
	//Запрос.УстановитьПараметр("ЗапросДляЗамены", 	ЗапросДляЗамены);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	
	//	Выборка = РезультатЗапроса.Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//	
	//		НаборЗаписей = РегистрыСведений.СоответствиеЗапросовЗвонкам.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Запрос.Установить(Выборка.Запрос);
	//		НаборЗаписей.Отбор.ID_Звонка.Установить(Выборка.ID_Звонка);
	//		НаборЗаписей.Прочитать();
	//		
	//		Для каждого Запись Из НаборЗаписей Цикл
	//		
	//			Запись.Запрос = ЗапросДляЗамены;	
	//		
	//		КонецЦикла;
	//		
	//		НаборЗаписей.Записать();
	//	
	//	КонецЦикла;
	//
	//КонецЕсли;

//КонецПроцедуры


#КонецОбласти
