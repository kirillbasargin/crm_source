
//Перем ДеревоКлиентов Экспорт;

//#Область ПрограммныйИнтерфейс

//Процедура ЗаполнитьДеревоДублей() Экспорт
//		
//	Запрос = Новый Запрос;
//	Запрос.Текст = 	
//	"ВЫБРАТЬ
//	|	КлиентыКонтактнаяИнформация.Ссылка КАК Клиент,
//	|	КлиентыКонтактнаяИнформация.Ссылка.ФИО КАК ФИО,
//	|	КлиентыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефона
//	|ПОМЕСТИТЬ ВТ_КлиентыКонтактнаяИнформация
//	|ИЗ
//	|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияДублированияКлиентов КАК ИсключенияДублированияКлиентов
//	|		ПО КлиентыКонтактнаяИнформация.Ссылка = ИсключенияДублированияКлиентов.Клиент
//	|			И КлиентыКонтактнаяИнформация.НомерТелефонаБезКодов = ИсключенияДублированияКлиентов.ТелефонБезНомеров
//	|ГДЕ
//	|	НЕ КлиентыКонтактнаяИнформация.Ссылка.ПометкаУдаления
//	|	И КлиентыКонтактнаяИнформация.НомерТелефонаБезКодов <> """"
//	|	И ИсключенияДублированияКлиентов.Клиент ЕСТЬ NULL
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Клиент,
//	|	НомерТелефона,
//	|	ФИО
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	КлиентыКонтактнаяИнформация.Клиент КАК Клиент,
//	|	КлиентыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
//	|	ДублирующийКлиентКонтактнаяИнформация.Клиент КАК ДублирующийКлиент,
//	|	ДублирующийКлиентКонтактнаяИнформация.НомерТелефона КАК ДублирующийНомер
//	|ПОМЕСТИТЬ вт_ИсходныеДанные
//	|ИЗ
//	|	ВТ_КлиентыКонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлиентыКонтактнаяИнформация КАК ДублирующийКлиентКонтактнаяИнформация
//	|		ПО КлиентыКонтактнаяИнформация.Клиент <> ДублирующийКлиентКонтактнаяИнформация.Клиент
//	|			И (ДублирующийКлиентКонтактнаяИнформация.НомерТелефона = КлиентыКонтактнаяИнформация.НомерТелефона)
//	|			И (ДублирующийКлиентКонтактнаяИнформация.ФИО = КлиентыКонтактнаяИнформация.ФИО)
//	|ГДЕ
//	|	ИСТИНА
//	|	И КлиентыКонтактнаяИнформация.Клиент = &Клиент
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	вт_ИсходныеДанные.Клиент КАК Клиент,
//	|	вт_ИсходныеДанные.НомерТелефона КАК ТелефонБезНомеров,
//	|	ЛОЖЬ КАК Основной,
//	|	ЛОЖЬ КАК Слияние,
//	|	ЛОЖЬ КАК Исключение,
//	|	0 КАК Уровень,
//	|	0 КАК КоличествоСсылок
//	|ПОМЕСТИТЬ вт_НеСгруппированныйРезультат
//	|ИЗ
//	|	вт_ИсходныеДанные КАК вт_ИсходныеДанные
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	вт_ИсходныеДанные.Клиент,
//	|	вт_ИсходныеДанные.НомерТелефона
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	вт_ИсходныеДанные.ДублирующийКлиент,
//	|	вт_ИсходныеДанные.ДублирующийНомер,
//	|	ЛОЖЬ,
//	|	ЛОЖЬ,
//	|	ЛОЖЬ,
//	|	0,
//	|	0
//	|ИЗ
//	|	вт_ИсходныеДанные КАК вт_ИсходныеДанные
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	вт_ИсходныеДанные.ДублирующийКлиент,
//	|	вт_ИсходныеДанные.ДублирующийНомер
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	вт_НеСгруппированныйРезультат.Клиент КАК Клиент,
//	|	вт_НеСгруппированныйРезультат.ТелефонБезНомеров КАК ТелефонБезНомеров,
//	|	вт_НеСгруппированныйРезультат.Основной КАК Основной,
//	|	вт_НеСгруппированныйРезультат.Слияние КАК Слияние,
//	|	вт_НеСгруппированныйРезультат.Исключение КАК Исключение,
//	|	вт_НеСгруппированныйРезультат.Уровень КАК Уровень,
//	|	вт_НеСгруппированныйРезультат.КоличествоСсылок КАК КоличествоСсылок
//	|ИЗ
//	|	вт_НеСгруппированныйРезультат КАК вт_НеСгруппированныйРезультат
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	вт_НеСгруппированныйРезультат.Клиент,
//	|	вт_НеСгруппированныйРезультат.ТелефонБезНомеров,
//	|	вт_НеСгруппированныйРезультат.Основной,
//	|	вт_НеСгруппированныйРезультат.Слияние,
//	|	вт_НеСгруппированныйРезультат.Исключение,
//	|	вт_НеСгруппированныйРезультат.Уровень,
//	|	вт_НеСгруппированныйРезультат.КоличествоСсылок
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ТелефонБезНомеров
//	|ИТОГИ
//	|	МАКСИМУМ(1) КАК Уровень
//	|ПО
//	|	ТелефонБезНомеров";		
//	
//	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Клиент) Тогда
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КлиентыКонтактнаяИнформация.Клиент = &Клиент", "");
//	Иначе
//		Запрос.УстановитьПараметр("Клиент", ЭтотОбъект.Клиент);	
//	КонецЕсли;

//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		ДеревоКлиентов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);		
//	КонецЕсли;	
//	
//КонецПроцедуры

//Процедура ОбработатьКлиентов(ДеревоКлиентов) Экспорт
//	
//	ВремяНачала = ТекущаяДата();
//	
//	УстановитьПризнакиКлиентовСлияния(ДеревоКлиентов);
//		
//	ПараметрыЗамены = Новый Структура("СпособУдаления,УчитыватьПрикладныеПравила,ВключатьБизнесЛогику", "Пометка", Ложь, Истина);
//	
//	дзДеревоКлиентов = ДеревоКлиентов; 
//	
//	Для каждого ГруппировкаПоТелефону Из дзДеревоКлиентов.Строки Цикл
//		МассивКлиентов = Новый Массив;
//		Для каждого ДетальнаяЗапись Из ГруппировкаПоТелефону.Строки Цикл
//			Если ДетальнаяЗапись.Слияние Тогда			
//				МассивКлиентов.Добавить(ДетальнаяЗапись.Клиент);					
//			КонецЕсли;
//			Если ДетальнаяЗапись.Основной Тогда
//				КлиентДляЗамены = ДетальнаяЗапись.Клиент;
//			КонецЕсли;
//		КонецЦикла;		
//		Если ЗначениеЗаполнено(КлиентДляЗамены) Тогда			
//			Для каждого ЭлементМассива Из МассивКлиентов Цикл
//				СоответствиеЗамены = Новый Соответствие;
//				СоответствиеЗамены.Вставить(ЭлементМассива, КлиентДляЗамены);
//				ОбщегоНазначения.ЗаменитьСсылки(СоответствиеЗамены, ПараметрыЗамены);
//				СкопироватьКонтактнуюИнформацию(ЭлементМассива, КлиентДляЗамены);
//				СкопироватьРеквизиты(ЭлементМассива, КлиентДляЗамены);
//				СкорректироватьГражданство(КлиентДляЗамены);
//			КонецЦикла;		
//		КонецЕсли;
//	КонецЦикла;
//	
//	Длительность = ТекущаяДата() - ВремяНачала;
//	
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Длительность: " + Длительность + " сек.");
//		
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Процедура УстановитьПризнакиКлиентовСлияния(ДеревоКлиентов)
//	
//	Для каждого ГруппировкаПоТелефону Из ДеревоКлиентов.Строки Цикл		
//		ЗаполнитьКоличестваСсылок(ГруппировкаПоТелефону.Строки);
//	КонецЦикла;
//	
//КонецПроцедуры 

//Процедура ЗаполнитьКоличестваСсылок(Строки)
//	
//	Оригинал = Неопределено;	
//	МаксимальноеКоличество = 0;
//	
//	Для каждого ДетальнаяЗапись Из Строки Цикл
//		ДетальнаяЗапись.КоличествоСсылок = ПолучитьКоличествоСсылокКлиента(ДетальнаяЗапись.Клиент);
//		Если ДетальнаяЗапись.КоличествоСсылок > МаксимальноеКоличество Тогда
//			МаксимальноеКоличество = ДетальнаяЗапись.КоличествоСсылок;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если МаксимальноеКоличество > 0 Тогда
//		//НайденныеСтроки = Строки.НайтиСтроки(Новый Структура("КоличествоСсылок", МаксимальноеКоличество));
//		//Если НайденныеСтроки.Количество() > 1 Тогда
//		//	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
//		//		СтруктураЗапросовКлиента = ВернутьСтруктуруДанныхПоЗапросам(НайденнаяСтрока.Клиент);
//		//		Если СтруктураЗапросовКлиента.Количество() Тогда
//		//			НайденнаяСтрока.КоличествоСсылок = НайденнаяСтрока.КоличествоСсылок + 1;
//		//			МаксимальноеКоличество = НайденнаяСтрока.КоличествоСсылок;
//		//		КонецЕсли;
//		//	КонецЦикла;
//		//КонецЕсли;		
//		НайденныеСтроки = Строки.НайтиСтроки(Новый Структура("КоличествоСсылок", МаксимальноеКоличество));
//		Если НайденныеСтроки.Количество() Тогда
//			НайденныеСтроки[0].Основной = Истина;
//			Оригинал = НайденныеСтроки[0].Клиент;
//			Для каждого ДетальнаяЗапись Из Строки Цикл
//				Если НЕ ДетальнаяЗапись.Клиент = Оригинал Тогда
//					ДетальнаяЗапись.Слияние = Истина;	
//				КонецЕсли;
//			КонецЦикла;	
//		КонецЕсли;			
//	КонецЕсли;
//		
//КонецПроцедуры

//Функция ПолучитьКоличествоСсылокКлиента(Клиент)
//	
//	СписокСсылок = Новый Массив;
//	СписокСсылок.Добавить(Клиент);
//	
//	ИсключитьОтбъекты = Новый Массив;
//	ИсключитьОтбъекты.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов);
//	
//	ВключитьОбъекты = Новый Массив;
//	ДеревоМД = ОбменДаннымиСервер.ДеревоМетаданныхКонфигурации();
//	Для Каждого Стр Из ДеревоМД.Строки Цикл
//		Для Каждого Стр1 Из Стр.Строки Цикл
//			ВключитьОбъекты.Добавить(Стр1.ПолноеИмя)
//		КонецЦикла;
//	КонецЦикла;	
//	
//	ОбластьПоиска = Новый Массив;
//	ТабСсылок = НайтиПоСсылкам(СписокСсылок, ОбластьПоиска, ВключитьОбъекты, ИсключитьОтбъекты);

//	Возврат ТабСсылок.Количество();
//	
//КонецФункции

//Процедура СкопироватьКонтактнуюИнформацию(КлиентЗаменяемый, КлиентЗамены)
//	
//	ОбъектКлиентЗамены 			= КлиентЗамены.ПолучитьОбъект();
//	КИ_КлиентаЗамены 			= ОбъектКлиентЗамены.КонтактнаяИнформация;
//	
//	НеобходимоЗаписатьКлиента 	= ЛожЬ;
//	
//	//Телефоны
//	Для каждого СтрокаКИ Из КлиентЗаменяемый.КонтактнаяИнформация Цикл
//		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
//			НайденнаяСтрока = КИ_КлиентаЗамены.Найти(СтрокаКИ.НомерТелефонаБезКодов);
//			Если НайденнаяСтрока = Неопределено Тогда
//				НоваяСтрока = КИ_КлиентаЗамены.Добавить();
//				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
//				НеобходимоЗаписатьКлиента = Истина;
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	//Адрес
//	Для каждого СтрокаКИ Из КлиентЗаменяемый.КонтактнаяИнформация Цикл
//		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
//			НайденнаяСтрока = КИ_КлиентаЗамены.Найти(СтрокаКИ.Представление);
//			Если НайденнаяСтрока = Неопределено Тогда
//				НоваяСтрока = КИ_КлиентаЗамены.Добавить();
//				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
//				НеобходимоЗаписатьКлиента = Истина;
//			КонецЕсли;
//		КонецЕсли;	
//	КонецЦикла;	
//	
//	//Прочая КИ
//	Для каждого СтрокаКИ Из КлиентЗаменяемый.КонтактнаяИнформация Цикл
//		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон
//				И СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
//			НоваяСтрока = КИ_КлиентаЗамены.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
//			НеобходимоЗаписатьКлиента = Истина;
//		КонецЕсли;	
//	КонецЦикла;	
//	
//	Если НеобходимоЗаписатьКлиента Тогда
//		ОбъектКлиентЗамены.ОбменДанными.Загрузка = Истина;
//		ОбъектКлиентЗамены.Записать();
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура СкопироватьРеквизиты(КлиентЗаменяемый, КлиентЗамены)
//	
//	ОбъектКлиентЗамены 			= КлиентЗамены.ПолучитьОбъект();
//	НеобходимоЗаписатьКлиента 	= ЛожЬ;
//	
//	Если ПустаяСтрока(ОбъектКлиентЗамены.МестоРождения) 
//			И НЕ ПустаяСтрока(КлиентЗаменяемый.МестоРождения) Тогда
//		ОбъектКлиентЗамены.МестоРождения 	= КлиентЗаменяемый.МестоРождения;
//		НеобходимоЗаписатьКлиента 			= Истина;
//	КонецЕсли;
//	
//	Если ОбъектКлиентЗамены.ДатаРождения = '00010101' 
//			И НЕ КлиентЗаменяемый.ДатаРождения = '00010101' Тогда
//		ОбъектКлиентЗамены.ДатаРождения 	= КлиентЗаменяемый.ДатаРождения;
//		НеобходимоЗаписатьКлиента 			= Истина;
//	КонецЕсли;	
//	
//	Если НеобходимоЗаписатьКлиента Тогда
//		ОбъектКлиентЗамены.ОбменДанными.Загрузка = Истина;
//		ОбъектКлиентЗамены.Записать();
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура СкорректироватьГражданство(КлиентЗамены)
//	
//	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(КлиентЗамены);
//	НаборЗаписей.Прочитать();
//	Если НаборЗаписей.Количество() > 1 Тогда
//		Для каждого Запись Из НаборЗаписей Цикл
//		    Если Запись.Страна = Справочники.СтраныМира.ПустаяСсылка() Тогда
//				НаборЗаписей.Удалить(Запись);
//				Прервать;
//			КонецЕсли;		
//		КонецЦикла;
//	КонецЕсли;
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры

//Функция ВернутьСтруктуруДанныхПоЗапросам(Клиент)
//	
//	СтруктураРезультат = Новый Структура;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЗапросУчастники.Ссылка КАК Запрос,
//	|	Запрос.Проект КАК Проект,
//	|	Запрос.Стадия КАК Стадия
//	|ИЗ
//	|	Документ.Запрос.Участники КАК ЗапросУчастники
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Запрос КАК Запрос
//	|		ПО ЗапросУчастники.Ссылка = Запрос.Ссылка
//	|ГДЕ
//	|	ЗапросУчастники.Клиент = &Клиент
//	|	И НЕ Запрос.ПометкаУдаления
//	|	И Запрос.Проведен";
//	
//	Запрос.УстановитьПараметр("Клиент", Клиент);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если НЕ РезультатЗапроса.Пустой() Тогда
//		Выборка 	= РезультатЗапроса.Выбрать();
//		НомерСтроки = 1;
//		Пока Выборка.Следующий() Цикл
//			СтруктураСтроки = Новый Структура("Запрос,Проект,Стадия");
//			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
//		 	СтруктураРезультат.Вставить("Строка" + Строка(НомерСтроки), СтруктураСтроки);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Возврат СтруктураРезультат;	
//	
//КонецФункции

//Процедура СоздатьЗаписьИсключенияДублированияКлиентов(Клиент, ТелефонБезНомеров)
//			
//	НаборЗаписей = РегистрыСведений.ИсключенияДублированияКлиентов.СоздатьНаборЗаписей();
//	НаборЗаписей.Отбор.Клиент.Установить(Клиент);
//	НаборЗаписей.Отбор.ТелефонБезНомеров.Установить(ТелефонБезНомеров);
//	НоваяЗапись 					= НаборЗаписей.Добавить();
//	НоваяЗапись.Клиент 				= Клиент;
//	НоваяЗапись.ТелефонБезНомеров 	= ТелефонБезНомеров;	
//	НаборЗаписей.Записать();
//	
//КонецПроцедуры

//#КонецОбласти
