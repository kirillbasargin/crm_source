
#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
&НаКлиенте
Процедура ДеревоКлиентовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьОтборПоЗапросу", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлиентовОсновнойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлиентов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Уровень = 1 Тогда
	
		ТекущиеДанные.Основной = Ложь;
		
	ИначеЕсли ТекущиеДанные <> Неопределено
				И ТекущиеДанные.Уровень = 0 Тогда
				
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		СтрокиВГруппировке = СтрокаРодитель.ПолучитьЭлементы(); 
		
		Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
			Если СтрокаДерева <> ТекущиеДанные Тогда
				СтрокаДерева.Основной = Ложь;			
			КонецЕсли;		
		КонецЦикла;
		
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		СтрокиВГруппировке 	= СтрокаРодитель.ПолучитьЭлементы(); 
		
		Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
			Если СтрокаДерева <> ТекущиеДанные Тогда
				СтрокаДерева.Основной = Ложь;			
			КонецЕсли;		
		КонецЦикла;	
		
		ТекущиеДанные.Слияние = Не ТекущиеДанные.Основной;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлиентовСлияниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлиентов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Уровень = 1 Тогда
	
		//СтрокиВГруппировке 	= ТекущиеДанные.ПолучитьЭлементы();		
		//		
		//Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
		//				
		//	Если СтрокаДерева.Основной Тогда
		//		СтрокаДерева.Слияние = Ложь;
		//	Иначе
		//		СтрокаДерева.Слияние = ТекущиеДанные.Слияние;
		//	КонецЕсли;
		//				
		//КонецЦикла;
		
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ СтрокаРодитель = Неопределено Тогда

			//Если СтрокаРодитель.Основной Тогда
			//	СтрокаРодитель.Слияние = Ложь;
			//Иначе
			//	СтрокаРодитель.Слияние = ТекущиеДанные.Слияние;
			//КонецЕсли;
						
			СтрокиВГруппировке 	= ТекущиеДанные.ПолучитьЭлементы();		
					
			Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
							
				Если СтрокаДерева.Основной Тогда
					СтрокаДерева.Слияние = Ложь;
				Иначе
					СтрокаДерева.Слияние = ТекущиеДанные.Слияние;
				КонецЕсли;
							
			КонецЦикла;

		Иначе
			
			СтрокиРодителя = ТекущиеДанные.ПолучитьЭлементы();
			
			Для каждого СтрокаРодителя Из СтрокиРодителя Цикл
				
				Если СтрокаРодителя.Основной Тогда
					СтрокаРодителя.Слияние = Ложь;
				Иначе
					СтрокаРодителя.Слияние = ТекущиеДанные.Слияние;
				КонецЕсли;
								
				СтрокиВГруппировке 	= СтрокаРодителя.ПолучитьЭлементы();
				
				Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
								
					Если СтрокаДерева.Основной Тогда
						СтрокаДерева.Слияние = Ложь;
					Иначе
						СтрокаДерева.Слияние = ТекущиеДанные.Слияние;
					КонецЕсли;
								
				КонецЦикла;
				
			КонецЦикла;	
		
		КонецЕсли;	
			
		//СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		//Если НЕ СтрокаРодитель = Неопределено Тогда				
		//	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		//	Если СтрокаРодитель.Основной Тогда
		//		СтрокаРодитель.Слияние = Ложь;
		//	Иначе
		//		СтрокаРодитель.Слияние = ТекущиеДанные.Слияние;								
		//	КонецЕсли;			
		//КонецЕсли;
		
		
	ИначеЕсли ТекущиеДанные <> Неопределено
				И ТекущиеДанные.Уровень = 0 Тогда
				
		Если ТекущиеДанные.Основной Тогда
			ТекущиеДанные.Слияние = Ложь;			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлиентовИсключениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлиентов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Уровень = 1 Тогда
						
		//СтрокиВГруппировке 	= ТекущиеДанные.ПолучитьЭлементы();
		//
		//Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
		//	Если СтрокаДерева.Основной Тогда
		//		СтрокаДерева.Основной = НЕ ТекущиеДанные.Исключение;
		//	КонецЕсли;
		//	Если СтрокаДерева.Слияние Тогда
		//		СтрокаДерева.Слияние = НЕ ТекущиеДанные.Исключение;
		//	КонецЕсли;			
		//	СтрокаДерева.Исключение = ТекущиеДанные.Исключение;	
		//	
		//	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
		//	Если НЕ СтрокаРодитель = Неопределено Тогда							
		//		Если СтрокаРодитель.Основной Тогда
		//			СтрокаРодитель.Основной = НЕ ТекущиеДанные.Исключение;
		//		КонецЕсли;
		//		Если СтрокаРодитель.Слияние Тогда
		//			СтрокаРодитель.Слияние = НЕ ТекущиеДанные.Исключение;
		//		КонецЕсли;			
		//		СтрокаРодитель.Исключение = ТекущиеДанные.Исключение;	
		//	КонецЕсли;
		//КонецЦикла;			
			
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ СтрокаРодитель = Неопределено Тогда
			
			СтрокиВГруппировке 	= ТекущиеДанные.ПолучитьЭлементы();
			
			Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
				Если СтрокаДерева.Основной Тогда
					СтрокаДерева.Основной = НЕ ТекущиеДанные.Исключение;
				КонецЕсли;
				Если СтрокаДерева.Слияние Тогда
					СтрокаДерева.Слияние = НЕ ТекущиеДанные.Исключение;
				КонецЕсли;			
				СтрокаДерева.Исключение = ТекущиеДанные.Исключение;	
				
				СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
				Если НЕ СтрокаРодитель = Неопределено Тогда							
					Если СтрокаРодитель.Основной Тогда
						СтрокаРодитель.Основной = НЕ ТекущиеДанные.Исключение;
					КонецЕсли;
					Если СтрокаРодитель.Слияние Тогда
						СтрокаРодитель.Слияние = НЕ ТекущиеДанные.Исключение;
					КонецЕсли;			
					СтрокаРодитель.Исключение = ТекущиеДанные.Исключение;	
				КонецЕсли;
			КонецЦикла;	
			
	    Иначе
			
			СтрокиРодителя = ТекущиеДанные.ПолучитьЭлементы();
			
			Для каждого СтрокаРодителя Из СтрокиРодителя Цикл
				
				Если СтрокаРодителя.Основной Тогда
					СтрокаРодителя.Основной = НЕ ТекущиеДанные.Исключение;
				КонецЕсли;
				Если СтрокаРодителя.Слияние Тогда
					СтрокаРодителя.Слияние = НЕ ТекущиеДанные.Исключение;
				КонецЕсли;			
				СтрокаРодителя.Исключение = ТекущиеДанные.Исключение;	
				
				СтрокиВГруппировке 	= СтрокаРодителя.ПолучитьЭлементы();
				
				Для каждого СтрокаДерева Из СтрокиВГруппировке Цикл
					Если СтрокаДерева.Основной Тогда
						СтрокаДерева.Основной = НЕ ТекущиеДанные.Исключение;
					КонецЕсли;
					Если СтрокаДерева.Слияние Тогда
						СтрокаДерева.Слияние = НЕ ТекущиеДанные.Исключение;
					КонецЕсли;			
					СтрокаДерева.Исключение = ТекущиеДанные.Исключение;	
					
					СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
					Если НЕ СтрокаРодитель = Неопределено Тогда							
						Если СтрокаРодитель.Основной Тогда
							СтрокаРодитель.Основной = НЕ ТекущиеДанные.Исключение;
						КонецЕсли;
						Если СтрокаРодитель.Слияние Тогда
							СтрокаРодитель.Слияние = НЕ ТекущиеДанные.Исключение;
						КонецЕсли;			
						СтрокаРодитель.Исключение = ТекущиеДанные.Исключение;	
					КонецЕсли;
				КонецЦикла;	
						
			КонецЦикла;		
			
		КонецЕсли;	
	
	ИначеЕсли ТекущиеДанные <> Неопределено
				И ТекущиеДанные.Уровень = 0 Тогда
				
		ТекущиеДанные.Основной  	= Ложь;
		ТекущиеДанные.Слияние 		= Ложь;			
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьКлиентов(Команда)
	ОбработатьКлиентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуДублей(Команда)
	ЗаполнитьТаблицуДублейНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуДублейНаСервере()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя
	|ПОМЕСТИТЬ ВТ_ФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлиентыКонтактнаяИнформация.Ссылка КАК Клиент,
	//|	КлиентыКонтактнаяИнформация.Ссылка.ФИО КАК ФИО,
	|	КлиентыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефона,
	|	ВТ_ФИОФизЛиц.Имя КАК Имя
	|ПОМЕСТИТЬ ВТ_КлиентыКонтактнаяИнформация
	|ИЗ
	|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключенияДублированияКлиентов КАК ИсключенияДублированияКлиентов
	|		ПО КлиентыКонтактнаяИнформация.Ссылка = ИсключенияДублированияКлиентов.Клиент
	|			И КлиентыКонтактнаяИнформация.НомерТелефонаБезКодов = ИсключенияДублированияКлиентов.ТелефонБезНомеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ФИОФизЛиц КАК ВТ_ФИОФизЛиц
	|		ПО (ВТ_ФИОФизЛиц.ФизическоеЛицо = КлиентыКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	НЕ КлиентыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И КлиентыКонтактнаяИнформация.НомерТелефонаБезКодов <> """"
	|	И ИсключенияДублированияКлиентов.Клиент ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Клиент,
	|	НомерТелефона,
	|	Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлиентыКонтактнаяИнформация.Клиент КАК Клиент,
	|	КлиентыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	КлиентыКонтактнаяИнформация.Имя КАК Имя,
	|	ДублирующийКлиентКонтактнаяИнформация.Клиент КАК ДублирующийКлиент,
	|	ДублирующийКлиентКонтактнаяИнформация.НомерТелефона КАК ДублирующийНомер,
	|	ДублирующийКлиентКонтактнаяИнформация.Имя КАК ДублирующеесяИмя
	|ПОМЕСТИТЬ вт_ИсходныеДанные
	|ИЗ
	|	ВТ_КлиентыКонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлиентыКонтактнаяИнформация КАК ДублирующийКлиентКонтактнаяИнформация
	|		ПО КлиентыКонтактнаяИнформация.Клиент <> ДублирующийКлиентКонтактнаяИнформация.Клиент
	|			И (ДублирующийКлиентКонтактнаяИнформация.НомерТелефона = КлиентыКонтактнаяИнформация.НомерТелефона)
	|			И (ДублирующийКлиентКонтактнаяИнформация.Имя = КлиентыКонтактнаяИнформация.Имя)
	|ГДЕ
	|	ИСТИНА
	|	И КлиентыКонтактнаяИнформация.Клиент В(&Клиенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ИсходныеДанные.Клиент КАК Клиент,
	|	вт_ИсходныеДанные.НомерТелефона КАК ТелефонБезНомеров,
	|	вт_ИсходныеДанные.Имя КАК Имя,
	|	ЛОЖЬ КАК Основной,
	|	ЛОЖЬ КАК Слияние,
	|	ЛОЖЬ КАК Исключение,
	|	0 КАК Уровень,
	|	0 КАК КоличествоСсылок
	|ПОМЕСТИТЬ вт_НеСгруппированныйРезультат
	|ИЗ
	|	вт_ИсходныеДанные КАК вт_ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ИсходныеДанные.Клиент,
	|	вт_ИсходныеДанные.НомерТелефона,
	|	вт_ИсходныеДанные.Имя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ИсходныеДанные.ДублирующийКлиент,
	|	вт_ИсходныеДанные.ДублирующийНомер,
	|	вт_ИсходныеДанные.ДублирующеесяИмя,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0
	|ИЗ
	|	вт_ИсходныеДанные КАК вт_ИсходныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ИсходныеДанные.ДублирующийКлиент,
	|	вт_ИсходныеДанные.ДублирующийНомер,
	|	вт_ИсходныеДанные.ДублирующеесяИмя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_НеСгруппированныйРезультат.Клиент КАК Клиент,
	|	вт_НеСгруппированныйРезультат.ТелефонБезНомеров КАК ТелефонБезНомеров,
	|	вт_НеСгруппированныйРезультат.Имя КАК Имя,
	|	вт_НеСгруппированныйРезультат.Основной КАК Основной,
	|	вт_НеСгруппированныйРезультат.Слияние КАК Слияние,
	|	вт_НеСгруппированныйРезультат.Исключение КАК Исключение,
	|	вт_НеСгруппированныйРезультат.Уровень КАК Уровень,
	|	вт_НеСгруппированныйРезультат.КоличествоСсылок КАК КоличествоСсылок
	|ИЗ
	|	вт_НеСгруппированныйРезультат КАК вт_НеСгруппированныйРезультат
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_НеСгруппированныйРезультат.Клиент,
	|	вт_НеСгруппированныйРезультат.ТелефонБезНомеров,
	|	вт_НеСгруппированныйРезультат.Имя,
	|	вт_НеСгруппированныйРезультат.Основной,
	|	вт_НеСгруппированныйРезультат.Слияние,
	|	вт_НеСгруппированныйРезультат.Исключение,
	|	вт_НеСгруппированныйРезультат.Уровень,
	|	вт_НеСгруппированныйРезультат.КоличествоСсылок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТелефонБезНомеров,
	|	Имя
	|ИТОГИ
	|	МАКСИМУМ(1) КАК Уровень
	|ПО
	|	ТелефонБезНомеров,
	|	Имя";	
		
	Если НЕ Клиенты.Количество() Тогда //Объект.Клиент
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КлиентыКонтактнаяИнформация.Клиент В(&Клиенты)", "");
	Иначе
		Запрос.УстановитьПараметр("Клиенты", Клиенты);	//Объект.Клиент
	КонецЕсли;
	
	Если Первые > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ПЕРВЫЕ " + СтрЗаменить(Первые, Символы.НПП, ""));		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ПЕРВЫЕ 1", "ВЫБРАТЬ ");	
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "ДеревоКлиентов");
	Иначе
		ДеревоКлиентов.ПолучитьЭлементы().Очистить();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьКлиентовНаСервере()
	
	ПараметрыЗамены = Новый Структура("СпособУдаления,УчитыватьПрикладныеПравила,ВключатьБизнесЛогику", "Пометка", Ложь, Истина);
	
	ТаблицаИсключенийКлиентов 	= Новый ТаблицаЗначений;
	ТаблицаИсключенийКлиентов.Колонки.Добавить("Клиент");
	ТаблицаИсключенийКлиентов.Колонки.Добавить("ТелефонБезНомеров");	
	
	дзДеревоКлиентов = РеквизитФормыВЗначение("ДеревоКлиентов");
	
	Для каждого ГруппировкаПоТелефону Из дзДеревоКлиентов.Строки Цикл
		
		Для каждого ГруппировкаПоИмени Из ГруппировкаПоТелефону.Строки Цикл
		
			МассивКлиентов 				= Новый Массив;
			ТаблицаИсключенийКлиентов.Очистить();
			Для каждого ДетальнаяЗапись Из ГруппировкаПоИмени.Строки Цикл
				Если ДетальнаяЗапись.Слияние Тогда			
					МассивКлиентов.Добавить(ДетальнаяЗапись.Клиент);					
				КонецЕсли;
				Если ДетальнаяЗапись.Основной Тогда
					КлиентДляЗамены = ДетальнаяЗапись.Клиент;
				КонецЕсли;
				Если ДетальнаяЗапись.Исключение Тогда
					НоваяСтрока = ТаблицаИсключенийКлиентов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальнаяЗапись);
				КонецЕсли;
			КонецЦикла;		
			Если ЗначениеЗаполнено(КлиентДляЗамены) Тогда			
				Для каждого ЭлементМассива Из МассивКлиентов Цикл
					СоответствиеЗамены = Новый Соответствие;
					СоответствиеЗамены.Вставить(ЭлементМассива, КлиентДляЗамены);
					ОбщегоНазначения.ЗаменитьСсылки(СоответствиеЗамены, ПараметрыЗамены);
					СкопироватьКонтактнуюИнформацию(ЭлементМассива, КлиентДляЗамены);
					СкопироватьРеквизиты(ЭлементМассива, КлиентДляЗамены);
					СкорректироватьГражданство(КлиентДляЗамены);
				КонецЦикла;		
			КонецЕсли;
			Для каждого строкаТЗ Из ТаблицаИсключенийКлиентов Цикл
				СоздатьЗаписьИсключенияДублированияКлиентов(строкаТЗ.Клиент, строкаТЗ.ТелефонБезНомеров);
			КонецЦикла;	
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоЗапросу()
	
	//ТекущиеДанные = Элементы.ДеревоКлиентов.ТекущиеДанные;
	//Если ТекущиеДанные <> Неопределено
	//		И ЗначениеЗаполнено(ТекущиеДанные.Клиент) Тогда
	//
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗапросыДин, , ТекущиеДанные.Клиент, ВидСравненияКомпоновкиДанных.Равно, "КлиентОтбор", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);		
	//
	//КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоКлиентов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанные.Клиент) Тогда
	
		СтруктураТаблицыЗапросов = ВернутьСтруктуруДанныхПоЗапросам(ТекущиеДанные.Клиент);
		
		Запросы.Очистить();
		
		Для каждого ЭлементСтруктуры Из СтруктураТаблицыЗапросов Цикл
			НоваяСтрока = Запросы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		Элементы.Запросы.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗаписьИсключенияДублированияКлиентов(Клиент, ТелефонБезНомеров)
			
	НаборЗаписей = РегистрыСведений.ИсключенияДублированияКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Клиент.Установить(Клиент);
	НаборЗаписей.Отбор.ТелефонБезНомеров.Установить(ТелефонБезНомеров);
	НоваяЗапись 					= НаборЗаписей.Добавить();
	НоваяЗапись.Клиент 				= Клиент;
	НоваяЗапись.ТелефонБезНомеров 	= ТелефонБезНомеров;	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьСтруктуруДанныхПоЗапросам(Клиент)
	
	СтруктураРезультат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапросУчастники.Ссылка КАК Запрос,
	|	Запрос.Проект КАК Проект,
	|	Запрос.Стадия КАК Стадия
	|ИЗ
	|	Документ.Запрос.Участники КАК ЗапросУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Запрос КАК Запрос
	|		ПО ЗапросУчастники.Ссылка = Запрос.Ссылка
	|ГДЕ
	|	ЗапросУчастники.Клиент = &Клиент
	|	И НЕ Запрос.ПометкаУдаления";
	Запрос.УстановитьПараметр("Клиент", Клиент);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка 	= РезультатЗапроса.Выбрать();
		НомерСтроки = 1;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура("Запрос,Проект,Стадия");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		 	СтруктураРезультат.Вставить("Строка" + Строка(НомерСтроки), СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураРезультат;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура СкорректироватьГражданство(КлиентЗамены)
	
	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(КлиентЗамены);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для каждого Запись Из НаборЗаписей Цикл
		    Если Запись.Страна = Справочники.СтраныМира.ПустаяСсылка() Тогда
				НаборЗаписей.Удалить(Запись);
				Прервать;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьРеквизиты(КлиентЗаменяемый, КлиентЗамены)
	
	ОбъектКлиентЗамены 			= КлиентЗамены.ПолучитьОбъект();
	НеобходимоЗаписатьКлиента 	= ЛожЬ;
	
	Если ПустаяСтрока(ОбъектКлиентЗамены.МестоРождения) 
			И НЕ ПустаяСтрока(КлиентЗаменяемый.МестоРождения) Тогда
		ОбъектКлиентЗамены.МестоРождения 	= КлиентЗаменяемый.МестоРождения;
		НеобходимоЗаписатьКлиента 			= Истина;
	КонецЕсли;
	
	Если ОбъектКлиентЗамены.ДатаРождения = '00010101' 
			И НЕ КлиентЗаменяемый.ДатаРождения = '00010101' Тогда
		ОбъектКлиентЗамены.ДатаРождения 	= КлиентЗаменяемый.ДатаРождения;
		НеобходимоЗаписатьКлиента 			= Истина;
	КонецЕсли;	
	
	Если НеобходимоЗаписатьКлиента Тогда
		ОбъектКлиентЗамены.ОбменДанными.Загрузка = Истина;
		ОбъектКлиентЗамены.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьКонтактнуюИнформацию(КлиентЗаменяемый, КлиентЗамены)
	
	ОбъектКлиентЗамены 			= КлиентЗамены.ПолучитьОбъект();
	КИ_КлиентаЗамены 			= ОбъектКлиентЗамены.КонтактнаяИнформация;
	
	НеобходимоЗаписатьКлиента 	= ЛожЬ;
	
	//Телефоны
	Для каждого СтрокаКИ Из КлиентЗаменяемый.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			НайденнаяСтрока = КИ_КлиентаЗамены.Найти(СтрокаКИ.НомерТелефонаБезКодов);
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = КИ_КлиентаЗамены.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
				НеобходимоЗаписатьКлиента = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	//Адрес
	Для каждого СтрокаКИ Из КлиентЗаменяемый.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			НайденнаяСтрока = КИ_КлиентаЗамены.Найти(СтрокаКИ.Представление);
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = КИ_КлиентаЗамены.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
				НеобходимоЗаписатьКлиента = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	//Прочая КИ
	Для каждого СтрокаКИ Из КлиентЗаменяемый.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон
				И СтрокаКИ.Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			НоваяСтрока = КИ_КлиентаЗамены.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
			НеобходимоЗаписатьКлиента = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если НеобходимоЗаписатьКлиента Тогда		
		УстановитьПривилегированныйРежим(Истина);
		ОбъектКлиентЗамены.ДополнительныеСвойства.Вставить("ПропуститьЗаписьВерсииОбъекта");		
		ОбъектКлиентЗамены.ОбменДанными.Загрузка = Истина;
		ОбъектКлиентЗамены.Записать();
		
		ОбъектКлиентЗамены.ОбменДанными.Загрузка = Ложь;
		ОбъектКлиентЗамены.ДополнительныеСвойства.Вставить("АвторВерсии", Пользователи.ТекущийПользователь());	
		//ОбъектКлиентЗамены.ДополнительныеСвойства.Вставить("СистемноеПроведение", Истина);		
		ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ОбъектКлиентЗамены, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РегламентноНаСервере(Клиенты, Первые)

	////В одном потоке
	//ОбработкаОбъкт = Обработки.СлияниеДублейКлиентов.Создать();
	//Если ЗначениеЗаполнено(Клиент) Тогда
	//	ОбработкаОбъкт.Клиент = Клиент;
	//КонецЕсли;
	//ОбработкаОбъкт.ЗаполнитьДеревоДублей();
	//Если НЕ ОбработкаОбъкт.ДеревоКлиентов = Неопределено И ОбработкаОбъкт.ДеревоКлиентов.Строки.Количество() Тогда
	//	ОбработкаОбъкт.ОбработатьКлиентов();
	//КонецЕсли;
	
	//В нескольких потоках	
	ДеревоКлиентов = Обработки.СлияниеДублейКлиентов.ЗаполнитьДеревоДублей(Клиенты, Первые);	
	Если НЕ ДеревоКлиентов = Неопределено И ДеревоКлиентов.Строки.Количество() Тогда
		Обработки.СлияниеДублейКлиентов.ОбработатьКлиентовРегламентно(ДеревоКлиентов);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Регламентно(Команда)
	РегламентноНаСервере(Клиенты, Первые);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоследовательнаяОбработкаНаСервере(Клиенты)
	
	ДеревоКлиентов = Обработки.СлияниеДублейКлиентов.ЗаполнитьДеревоДублей(Клиенты);	
	Если НЕ ДеревоКлиентов = Неопределено И ДеревоКлиентов.Строки.Количество() Тогда
		Обработки.СлияниеДублейКлиентов.ОбработатьКлиентов(ДеревоКлиентов);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследовательнаяОбработка(Команда)
	ПоследовательнаяОбработкаНаСервере(Клиенты);
КонецПроцедуры

#КонецОбласти
