
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	ОтборСтатус.Добавить(Перечисления.СтатусЗаявкиCallBack.НеОбработано);
	ОтборТолькоАктивные = Истина;
	ОтборНачалоПериода = НачалоДня(ТекущаяДата());
	ОтборКонецПериода = КонецДня(ТекущаяДата());
	ОтборГруппаРаспределения = Перечисления.ГруппыРаспределенияЗаявок.ГПТ;
	
	ОбновитьДанные();
	Автораспределение = ПолучитьЗначениеАвтораспределения();
	УстановитьВидКнопкиИспользованияАвтораспределения();
	ЗаполнитьСписокСайтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Автораспределение Тогда //ПолучитьЗначениеАвтораспределения()				
		ОписаниеОповещения = Новый ОписаниеОповещения("Вопрос_ВыключитьАвтораспределение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Внимание! В режиме ручного распределении заявок рекоменжуется выключить регламентное автораспределдение" + Символы.ПС + "Выключить автораспределение?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда	
		Если НЕ Автораспределение Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("Вопрос_ВключитьАвтораспределение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Включить автораспределение?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РегламентноОбновленыЗаявки" Тогда
		Элементы.ФормаОбновить.Заголовок = "Обновить" + " (" + Параметр + ")"; 
		Элементы.ФормаОбновить.ЦветФона = WebЦвета.Лосось;
		//Элементы.ФормаОбновить.Картинка = БиблиотекаКартинок.Обменяться;
	ИначеЕсли ИмяСобытия = "ЗаявкаНаЗвонокИзменена" Тогда
		ОбновитьДанные(Параметр);
	КонецЕсли;
	
КонецПроцедуры
  
#КонецОбласти   

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборКонецПериодаПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ВидОтбораПоПериодуПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпамПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиСпамПриИзменении(Элемент)
	
	ДанныеЗаявки = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ ДанныеЗаявки = Неопределено Тогда
		ДанныеЗаявки.Распределять = НЕ ДанныеЗаявки.Спам;
		ОтметитьКакСпам(ДанныеЗаявки.Ссылка, ДанныеЗаявки.Спам);  
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура РаспределениеЗаявкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеЗаявки = Элемент.ТекущиеДанные;
	Если НЕ ДанныеЗаявки = Неопределено Тогда		
		Если Элемент.ТекущийЭлемент.Имя = "РаспределениеЗаявкиОтветственный"
			ИЛИ Элемент.ТекущийЭлемент.Имя = "РаспределениеЗаявкиРаспределять"
			ИЛИ Элемент.ТекущийЭлемент.Имя = "РаспределениеЗаявкиСтатус" Тогда
			Возврат;
		КонецЕсли;
		//ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОписаниеОповещенияОЗавершении", ЭтотОбъект);
		ПоказатьЗначение(, ДанныеЗаявки.Ссылка); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиСтатусПриИзменении(Элемент)
	
	ДанныеЗаявки = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ ДанныеЗаявки = Неопределено Тогда
		УстановитьСтатус(ДанныеЗаявки.Ссылка, ДанныеЗаявки.Статус);	
		ДанныеЗаявки.Распределять = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Пользователь = Элементы.РаспределениеПользователи.ДанныеСтроки(Строка).Пользователь;
	Заявки = Новый Массив;
	Для каждого ДанныеЗаявки Из ПараметрыПеретаскивания.Значение Цикл
		Заявки.Добавить(ДанныеЗаявки.Ссылка);
	КонецЦикла;
	РаспределениеПользователиПеретаскиваниеНаСервере(Заявки, Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидНедвижимостиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидНедвижимостиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиОтветственныйПриИзменении(Элемент)
	
	ДанныеЗаявки = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ ДанныеЗаявки = Неопределено Тогда
		УстановитьОтветственного(ДанныеЗаявки.Ссылка, ДанныеЗаявки.Ответственный);
	КонецЕсли;
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиПередНачаломИзменения(Элемент, Отказ)
	//Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиРаспределениеЗаявокПриИзменении(Элемент)
	
	Строка = Элементы.РаспределениеПользователи.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("УчаствуетВРаспределении", Строка.РаспределениеЗаявок, Строка.Пользователь, ОтборГруппаРаспределения); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиРаспределениеГПТ_ОБЩПриИзменении(Элемент)
	
	Строка = Элементы.РаспределениеПользователи.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("Общая", Строка.РаспределениеГПТ_ОБЩ, Строка.Пользователь, ОтборГруппаРаспределения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиРаспределениеГПТ_ЖНПриИзменении(Элемент)
	
	Строка = Элементы.РаспределениеПользователи.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("ЖилаяНедвижимость", Строка.РаспределениеГПТ_ЖН, Строка.Пользователь, ОтборГруппаРаспределения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиРаспределениеГПТ_ЗУКНПриИзменении(Элемент)
	
	Строка = Элементы.РаспределениеПользователи.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("КоммерческаяНедвижимость", Строка.РаспределениеГПТ_ЗУКН, Строка.Пользователь, ОтборГруппаРаспределения);
		УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("ЗемельныеУчастки", Строка.РаспределениеГПТ_ЗУКН, Строка.Пользователь, ОтборГруппаРаспределения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПользователиПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(ОтборТекущийПользователь) Тогда
		ПодключитьОбработчикОжидания("УстановитьОтборЗаявок_Асинхр", 0.2, Истина);				
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиРаспределятьПриИзменении(Элемент)
	
	Строка = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		Если НЕ Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеОбработано") ИЛИ Строка.Спам Тогда
			Строка.Распределять = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНачалоПериодаПриИзменении(Элемент)
  	ЗаполнитьЗаявки();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЭтапПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНачалоКонецПериодаПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипВызоваПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСайтПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидНедвижимостиПриИзменении(Элемент)	
	ЗаполнитьЗаявки();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТолькоАктивныеПриИзменении(Элемент)	
	ЗаполнитьПользователи();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСменаПриИзменении(Элемент)
	ЗаполнитьПользователи();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаявкиПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеОбработанныйСпамПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗаявкиВысокийПриоритетПриИзменении(Элемент)
	
	ДанныеЗаявки = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ ДанныеЗаявки = Неопределено Тогда
		ОтметитьВысокийПриоритет(ДанныеЗаявки.Ссылка, ДанныеЗаявки.Приоритет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипОтбораСпамПриИзменении(Элемент)
	ЗаполнитьЗаявки();
КонецПроцедуры

#КонецОбласти   

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЗаявку(Команда)
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", УправлениеЗаявкамиНаЗвонок.СоздатьЗначенияЗаполнения());	
	ОткрытьФорму("Документ.ЗаявкаНаЗвонок.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявки(Команда)
	ОткрытьФорму("Документ.ЗаявкаНаЗвонок.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗвонки(Команда)
	
	ДанныеЗаявки = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ ДанныеЗаявки = Неопределено Тогда
		УсловияОтбора = Новый Структура;
		УсловияОтбора.Вставить("ЗаявкаИнициатор", ДанныеЗаявки.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", УсловияОтбора);
		ОткрытьФорму("РегистрСведений.ИсторияЗвонков.ФормаСписка", ПараметрыФормы);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	
	//ОткрытьЗначение(БиблиотекаКартинок.ОбщаяКартинка1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтораспределение(Команда)
	
	ИспользоватьАвтораспределениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Автораспределение(Команда)
	
	Если Автораспределение Тогда //ПолучитьЗначениеАвтораспределения() 
		АвтораспределениеНаСервере();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Автораспределение не включено");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	
	Элементы.ФормаОбновить.Заголовок = "Обновить";
 	Модифицированность = Ложь;	
	ОбновитьДанные();
		
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьВыбранные(Команда)	
	АвтоРаспределениеЗаявок();	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНеОбработанные(Команда)
	
	//АвтоРаспределениеЗаявок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОтметитьВсе(Команда)
	
	УстановитьНастройкуРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСнятьВсе(Команда)
	
	УстановитьНастройкуРаспределения(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиОтметитьВсе(Команда)
	
	Для каждого Строка Из РаспределениеЗаявки Цикл
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеОбработано") И НЕ Строка.Спам Тогда
			Строка.Распределять = Истина;		
		КонецЕсли;		
		//Если ОтборСпам = 0 Тогда // И НЕ ЗначениеЗаполнено(ОтборСтатус)
		//	Если НЕ Строка.Спам Тогда
		//		Строка.Распределять = Истина;
		//	КонецЕсли; 	
		//КонецЕсли;		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиСнятьВсе(Команда)
	
	Для каждого Строка Из РаспределениеЗаявки Цикл
		Строка.Распределять = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеОбработанные(Команда)
	
	Элементы.РаспределениеЗаявкиТолькоНеОбработанные.Пометка = НЕ Элементы.РаспределениеЗаявкиТолькоНеОбработанные.Пометка;
	ОтборТолькоНеОбработанные = Элементы.РаспределениеЗаявкиТолькоНеОбработанные.Пометка; 
	ЗаполнитьЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПользователю(Команда)
	
	Элементы.ФормаОтборПоПользователю.Пометка = НЕ Элементы.ФормаОтборПоПользователю.Пометка; 
	
	Если НЕ Элементы.ФормаОтборПоПользователю.Пометка Тогда	
		ОтборТекущийПользователь = 0;	
	Иначе		
		Строка = Элементы.РаспределениеПользователи.ТекущиеДанные;
		Если НЕ Строка = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Пользователь) Тогда
				Возврат;
			КонецЕсли;
			ОтборТекущийПользователь = Строка.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтветственных(Команда)
	ОчиститьОтветственныхНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура Спам(Команда)	
	ОтметитьКакСпамНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпамНомера(Команда)
	ОткрытьФорму("Справочник.СпамНомера.ФормаСписка");			
КонецПроцедуры

&НаКлиенте
Процедура Обработать(Команда)
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.Обработано"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеДозвон"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеОбработано"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.Отменено"));

	СписокСтатусов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПоказатьВыборЭлемента_Завершение", ЭтотОбъект), "Выберите статус заявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриоритет(Команда)
	
	СписокПриоритетов = Новый СписокЗначений;
	СписокПриоритетов.Добавить(ПредопределенноеЗначение("Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет1"));
	СписокПриоритетов.Добавить(ПредопределенноеЗначение("Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет2"));
	СписокПриоритетов.Добавить(ПредопределенноеЗначение("Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет3"));
	СписокПриоритетов.Добавить(ПредопределенноеЗначение("Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4"));
	СписокПриоритетов.Добавить(ПредопределенноеЗначение("Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5"));	
	СписокПриоритетов.Добавить(ПредопределенноеЗначение("Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет6"));	
	СписокПриоритетов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ПоказатьВыборПриоритета_Завершение", ЭтотОбъект), "Выберите приоритет заявок");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОбработанныйСпам(Команда)
	
	Элементы.РаспределениеЗаявкиНеОбработанныйСпам.Пометка = НЕ Элементы.РаспределениеЗаявкиНеОбработанныйСпам.Пометка;
	ОтборНеОбработанныйСпам = Элементы.РаспределениеЗаявкиНеОбработанныйСпам.Пометка;
	ЗаполнитьЗаявки();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидНедвижимости(Команда)
	
	Сайт = Сайты.ВыбратьЭлемент("Выберите сайт для установики");
	Если Сайт = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран сайт.");
	Иначе
		УстановитьВидНедвижимостиНаСервере(Сайт.Значение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаявку(Команда)
	
	Строка = Элементы.РаспределениеЗаявки.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		ПоказатьЗначение(, Строка.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Распровести(Команда)
	РаспровестиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуРаспределения(Команда)
	
	ДатаНапоминания = ТекущаяДата();
	Подсказка = "Введите дату распределения";
	ЧастьДаты = ЧастиДаты.ДатаВремя;
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтотОбъект, Параметры);
	ПоказатьВводДаты(Оповещение, ДатаНапоминания, Подсказка, ЧастьДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДопОтборПоДатеЗаявки(Команда)
	
	//1
	//Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	//
	//Диалог.Период.ДатаНачала = ДатаЗаявкиС;
	//Диалог.Период.ДатаОкончания = ДатаЗаявкиПо;	
	//Если Диалог.Редактировать() Тогда		
	//	ДатаЗаявкиС = НачалоДня(Диалог.Период.ДатаНачала);
	//	ДатаЗаявкиПо = КонецДня(Диалог.Период.ДатаОкончания);
	//КонецЕсли;		
	//ОбновитьДанные();
	
	//2	
	ВыбранныйПериод = Новый СтандартныйПериод;
	
	ВыбранныйПериод.ДатаНачала = ДатаЗаявкиС;
	ВыбранныйПериод.ДатаОкончания = ДатаЗаявкиПо;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
		
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьЗаявки(Команда)

	Элементы.РаспределениеЗаявкиВыделитьЗаявки.Пометка = НЕ Элементы.РаспределениеЗаявкиВыделитьЗаявки.Пометка;
	Для каждого Строка Из РаспределениеЗаявки Цикл
		Строка.Распределять = Элементы.РаспределениеЗаявкиВыделитьЗаявки.Пометка;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаспределенияЗаявок(Команда)
	ОткрытьФорму("РегистрСведений.ПользовательскиеНастройкиРаспределенияЗаявок.ФормаСписка");	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТелефонии(Команда)
	ОткрытьФорму("РегистрСведений.ПользовательскиеНастройкиТелефонии.ФормаСписка");	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьВыборЭлемента_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьНаСервере(ВыбранныйЭлемент.Значение);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСайтов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыПолученияЗаявокНаCallBack.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПараметрыПолученияЗаявокНаCallBack КАК ПараметрыПолученияЗаявокНаCallBack
	|ГДЕ
	|	НЕ ПараметрыПолученияЗаявокНаCallBack.ПометкаУдаления
	|	И НЕ ПараметрыПолученияЗаявокНаCallBack.ВидНедвижимости = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНедвижимости.пустаяссылка)";
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сайты.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Сайты.Добавить(Перечисления.ВидыОбъектовНедвижимости.пустаяссылка());
	
КонецПроцедуры

&НаКлиенте
Процедура Вопрос_ВключитьАвтораспределение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьЗначениеАвтораспределения(Истина);
		УстановитьВидКнопкиИспользованияАвтораспределения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вопрос_ВыключитьАвтораспределение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьЗначениеАвтораспределения(Ложь);
		УстановитьВидКнопкиИспользованияАвтораспределения();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РаспределениеПользователиПеретаскиваниеНаСервере(Заявки, Пользователь)
	
	Для каждого Заявка Из Заявки Цикл  
		УстановитьОтветственного(Заявка, Пользователь);	
	КонецЦикла;
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура АвтораспределениеНаСервере()
		
	ЗаполнитьПользователи(Истина);	
	УправлениеЗаявкамиНаЗвонок.АвтоРаспределениеЗаявок(ОтборГруппаРаспределения);
	ОбновитьДанные();
	УстановитьВидКнопкиИспользованияАвтораспределения();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьЗначениеАвтораспределения()
	
	Возврат Константы.ИспользоватьАвтораспределениеЗаявок.Получить();
	
КонецФункции 

&НаСервере
Процедура УстановитьЗначениеАвтораспределения(Значение)
	
	Константы.ИспользоватьАвтораспределениеЗаявок.Установить(Значение);
	Автораспределение = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьАвтораспределениеНаСервере()
	
	УстановитьЗначениеАвтораспределения(НЕ Автораспределение); //ПолучитьЗначениеАвтораспределения() 
	УстановитьВидКнопкиИспользованияАвтораспределения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидКнопкиИспользованияАвтораспределения()
	
	Если Автораспределение Тогда //ПолучитьЗначениеАвтораспределения()
		Элементы.ФормаИспользоватьАвтораспределение.Картинка = БиблиотекаКартинок.УстановитьПризнакРассмотреноДляВзаимодействия;
		Элементы.ФормаИспользоватьАвтораспределение.Пометка = Истина;
		Элементы.ФормаИспользоватьАвтораспределение.Заголовок = "Автораспределение";
	Иначе
		Элементы.ФормаИспользоватьАвтораспределение.Картинка = БиблиотекаКартинок.СнятьПризнакРассмотреноУВзаимодействия;
		Элементы.ФормаИспользоватьАвтораспределение.Пометка = Ложь;
		Элементы.ФормаИспользоватьАвтораспределение.Заголовок = "Вручную";
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОтметитьКакСпамНаСервере()
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять Тогда
			ОтметитьКакСпам(ДанныеЗаявки.Ссылка, );	
		КонецЕсли;
	КонецЦикла; 
		
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОтветственныхНаСервере()
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять И НЕ ДанныеЗаявки.Спам Тогда
			УстановитьОтветственного(ДанныеЗаявки.Ссылка, Неопределено);	
		КонецЕсли;
	КонецЦикла; 
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(ЭлементПозиционирования = Неопределено)
	
	ЗаполнитьПользователи();	
	ЗаполнитьЗаявки(ЭлементПозиционирования);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователи(Автораспредедение = Ложь)
			
	РаспределениеПользователи_ТЗ = РеквизитФормыВЗначение("РаспределениеПользователи");
	РаспределениеПользователи_ТЗ.Очистить();
	
	АктивныеПользователиГПТ = УправлениеЗаявкамиНаЗвонок.ПолучитьАктивныхПользователей(ОтборГруппаРаспределения, , , Истина);//ПолучитьАктивныхПользователей();
	
	//СотрудникиСмены = Новый Массив;
	//Если ЗначениеЗаполнено(ОтборСмена) И НЕ Автораспредедение Тогда
	//	ТЗ_Состав = Справочники.Смены.ПолучитьСоставСмены(ОтборСмена);
	//	Если НЕ ТЗ_Состав = Неопределено И ТЗ_Состав.Количество() Тогда
	//		СотрудникиСмены = ТЗ_Состав.ВыгрузитьКолонку("Сотрудник");
	//	КонецЕсли;			
	//КонецЕсли;
	
	Для каждого Пользователь Из АктивныеПользователиГПТ Цикл		
		
		//Если ЗначениеЗаполнено(ОтборСмена) И НЕ Автораспредедение  Тогда
		//	Если СотрудникиСмены.Найти(Пользователь) = Неопределено Тогда
		//		Продолжить;	
		//	КонецЕсли;	
		//КонецЕсли; 
		
		НоваяСтрока = РаспределениеПользователи_ТЗ.Добавить();
		НоваяСтрока.Активность = Истина;
				
		Если Пользователи.РолиДоступны("ОбработкаЗаявокНаЗвонок_Администратор", Пользователь) Тогда
			НоваяСтрока.ИндексКартинки = 0;
		Иначе
			НоваяСтрока.ИндексКартинки = 2;
		КонецЕсли;
		
		НоваяСтрока.Пользователь = Пользователь;
		НоваяСтрока.РаспределениеЗаявок = УправлениеЗаявкамиНаЗвонок.ПолучитьНастройкуРаспределенияЗаявокПользователя("УчаствуетВРаспределении", Пользователь, ОтборГруппаРаспределения); //ПолучитьНастройкуПользователя(Пользователь, "РаспределениеЗаявок");
		ЗаполнитьДанныеГруппПользователяГПТ(НоваяСтрока);
	КонецЦикла; 				
	
	Если НЕ ОтборТолькоАктивные И НЕ Автораспредедение Тогда
		НеАктивныеПользователи = Неопределено;
		УправлениеЗаявкамиНаЗвонок.ПользователиВГруппеРаспределения(НеАктивныеПользователи, ОтборГруппаРаспределения);  //ПолучитьНеАктивныхПользователей();
		Если НЕ НеАктивныеПользователи = Неопределено Тогда
			Для каждого Пользователь Из НеАктивныеПользователи Цикл
				Если НЕ АктивныеПользователиГПТ.Найти(Пользователь) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = РаспределениеПользователи_ТЗ.Добавить();
				НоваяСтрока.Активность = Ложь;
				НоваяСтрока.ИндексКартинки = 1;
				НоваяСтрока.Пользователь = Пользователь;
				НоваяСтрока.РаспределениеЗаявок = УправлениеЗаявкамиНаЗвонок.ПолучитьНастройкуРаспределенияЗаявокПользователя("УчаствуетВРаспределении", Пользователь, ОтборГруппаРаспределения); //ПолучитьНастройкуПользователя(Пользователь, "РаспределениеЗаявок");
				ЗаполнитьДанныеГруппПользователяГПТ(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	ИтогоКоличество = РаспределениеПользователи_ТЗ.Итог("ИтогоКоличество");
	ИтогоНеОбработано = РаспределениеПользователи_ТЗ.Итог("ИтогоНеОбработано");
	ИтогоСпам = РаспределениеПользователи_ТЗ.Итог("ИтогоСпам");
	ИтогоКоличествоОбщее = РаспределениеПользователи_ТЗ.Итог("ИтогоКоличествоОбщее");
	
	ИтогоКоличествоГПТ_ОБЩ = РаспределениеПользователи_ТЗ.Итог("КоличествоГПТ_ОБЩ");
	ИтогоНеОбработаноГПТ_ОБЩ = РаспределениеПользователи_ТЗ.Итог("НеОбработаноГПТ_ОБЩ");
	
	ИтогоКоличествоГПТ_ЖН = РаспределениеПользователи_ТЗ.Итог("КоличествоГПТ_ЖН");
	ИтогоНеОбработаноГПТ_ЖН = РаспределениеПользователи_ТЗ.Итог("НеОбработаноГПТ_ЖН");
	
	ИтогоКоличествоГПТ_ЗУКН = РаспределениеПользователи_ТЗ.Итог("КоличествоГПТ_ЗУКН");
	ИтогоНеОбработаноГПТ_ЗУКН = РаспределениеПользователи_ТЗ.Итог("НеОбработаноГПТ_ЗУКН");
	
	РаспределениеПользователи_ТЗ.Сортировать("Активность УБЫВ, Пользователь");
	
	ЗначениеВРеквизитФормы(РаспределениеПользователи_ТЗ, "РаспределениеПользователи");	 
	
	УстановитьУсловноеОформление();
	
	Элементы.ГруппаПользователи.Заголовок = "Пользователи (" + РаспределениеПользователи.Количество() + ")";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
  	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("РаспределениеПользователи");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Активность");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.ПравоеЗначение = Ложь; 
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый); 
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявки(ЭлементПозиционирования = Неопределено) Экспорт
			
	Запрос = Новый Запрос;		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ЗаявкиНаCallBack.ДатаРаспределения КАК ДатаРаспределения,
	|	ЗаявкиНаCallBack.reqData КАК ДатаЗаявки,
	|	ЗаявкиНаCallBack.reqContact КАК reqContact,
	|	ЗаявкиНаCallBack.ЭтоТестоваяЗаявка КАК Спам,
	|	ЗаявкиНаCallBack.ID КАК ID,
	|	ЗаявкиНаCallBack.Ссылка КАК Ссылка,
	|	ЗаявкиНаCallBack.ТипВызова КАК ТипВызова,
	|	ЗаявкиНаCallBack.Статус КАК Статус,
	|	ЗаявкиНаCallBack.ЭтапРаботы КАК ЭтапРаботы,
	|	ЗаявкиНаCallBack.ТипПоступленияЗаявки КАК ТипПоступленияЗаявки,
	|	ЗаявкиНаCallBack.Ответственный КАК Ответственный,
	|	ЗаявкиНаCallBack.ПопытокДозвониться КАК ПопытокДозвониться,
	|	ЗаявкиНаCallBack.Сайт КАК Сайт,
	|	ЗаявкиНаCallBack.Проект КАК ОбъектНедвижимости,
	|	ЗаявкиНаCallBack.ВидНедвижимости КАК ВидНедвижимости,
	//|	ВЫБОР
	//|		КОГДА ЗаявкиНаCallBack.reqData <= &КонецВчерашнегоДня
	//|				И НЕ(ЗаявкиНаCallBack.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.Обработано)
	//|						ИЛИ ЗаявкиНаCallBack.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеДозвон)
	//|						ИЛИ ЗаявкиНаCallBack.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.Отменено))
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ПорядокПоЭтапу,
	|	-1 КАК ПорядокПоЭтапу,	
	|	ЗаявкиНаCallBack.ПлановоеВремя КАК ПлановоеВремя,
	|	ЗаявкиНаCallBack.Приоритет КАК Приоритет,
	|	ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок КАК ВидЗаявкиНаЗвонок,
	|	ЗаявкиНаCallBack.Взаимодействие КАК Взаимодействие,
	|	ВЫБОР
	|		КОГДА ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.Встреча
	|			ТОГДА ЗаявкиНаCallBack.Взаимодействие.Автор
	|		ИНАЧЕ ЗаявкиНаCallBack.Взаимодействие.Ответственный
	|	КОНЕЦ КАК ВзаимодействиеАвтор,
	|	ЗаявкиНаCallBack.Контакт КАК Контакт,
	|	ЗаявкиНаCallBack.Дата КАК Дата,
	|	ЗаявкиНаCallBack.Взаимодействие.Дата КАК ВзаимодействиеДата,
	|	ЗаявкиНаCallBack.ТипРаспределения КАК ТипРаспределения
	|ПОМЕСТИТЬ ВТ_Распределение
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкиНаCallBack
	|ГДЕ
	|	ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаявкиНаCallBack.reqData МЕЖДУ &ДатаЗаявкиС И &ДатаЗаявкиПо
	|	И ЗаявкиНаCallBack.Ответственный = &ОтборТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиНаCallBack.ДатаРаспределения КАК ДатаРаспределения,
	|	ЗаявкиНаCallBack.ДатаЗаявки КАК ДатаЗаявки,
	|	ЗаявкиНаCallBack.reqContact КАК reqContact,
	|	ЗаявкиНаCallBack.Спам КАК Спам,
	|	ЗаявкиНаCallBack.ID КАК ID,
	|	ЗаявкиНаCallBack.Ссылка КАК Ссылка,
	|	ЗаявкиНаCallBack.ТипВызова КАК ТипВызова,
	|	ЗаявкиНаCallBack.Статус КАК Статус,
	|	ЗаявкиНаCallBack.ЭтапРаботы КАК ЭтапРаботы,
	|	ЗаявкиНаCallBack.ТипПоступленияЗаявки КАК ТипПоступленияЗаявки,
	|	ЗаявкиНаCallBack.Ответственный КАК Ответственный,
	|	ЗаявкиНаCallBack.ПопытокДозвониться КАК ПопытокДозвониться,
	|	ЗаявкиНаCallBack.Сайт КАК Сайт,
	|	ЗаявкиНаCallBack.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ЗаявкиНаCallBack.ВидНедвижимости КАК ВидНедвижимости,
	|	ЗаявкиНаCallBack.ПорядокПоЭтапу КАК ПорядокПоЭтапу,
	|	ИСТИНА КАК Распределять,
	|	ЗаявкиНаCallBack.ПлановоеВремя КАК ПлановоеВремя,
	|	ЗаявкиНаCallBack.Приоритет КАК Приоритет,
	|	ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок КАК ВидЗаявкиНаЗвонок,
	|	ЗаявкиНаCallBack.Взаимодействие КАК Взаимодействие,
	|	ЗаявкиНаCallBack.ВзаимодействиеАвтор КАК ВзаимодействиеАвтор,
	|	ЗаявкиНаCallBack.Контакт КАК Контакт,
	|	ЗаявкиНаCallBack.Дата,
	|	ЗаявкиНаCallBack.ВзаимодействиеДата,
	|	ЗаявкиНаCallBack.ТипРаспределения
	|ИЗ
	|	ВТ_Распределение КАК ЗаявкиНаCallBack
	|ГДЕ
	|	ИСТИНА
	|	И ЗаявкиНаCallBack.Ответственный = &Ответственный
	|	И ЗаявкиНаCallBack.ТипВызова = &ТипВызова
	|	И ЗаявкиНаCallBack.Статус В(&Статус)
	|	И ЗаявкиНаCallBack.Сайт = &Сайт
	|	И ЗаявкиНаCallBack.ВидНедвижимости = &ВидНедвижимости
	|	И ЗаявкиНаCallBack.Спам = &Спам
	|	И ЗаявкиНаCallBack.ЭтапРаботы В(&ЭтапРаботы)
	|	И ЗаявкиНаCallBack.Спам = &НеОбработаноСпам
	|	И ЗаявкиНаCallBack.Статус = &НеОбработаноСтатус
	|	И ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок
	|	И ЗаявкиНаCallBack.Приоритет В(&Приоритет)
	|	И ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок
	|	И ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.Встреча
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРаспределения";
				   
	Если ВидОтбораПоПериоду Тогда
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода", "ЗаявкиНаCallBack.reqData МЕЖДУ &НачалоПериода И &КонецПериода");
	КонецЕсли;				   
	
	Если НЕ ЗначениеЗаполнено(ДатаЗаявкиС) И НЕ ЗначениеЗаполнено(ДатаЗаявкиПо) Тогда
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.reqData МЕЖДУ &ДатаЗаявкиС И &ДатаЗаявкиПо", "");
	Иначе
		Запрос.УстановитьПараметр("ДатаЗаявкиС", ДатаЗаявкиС); 
		Запрос.УстановитьПараметр("ДатаЗаявкиПо", ДатаЗаявкиПо); 			 
	КонецЕсли;			
	
	Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(ОтборНачалоПериода), ОтборНачалоПериода, НачалоДня(ТекущаяДата()))); 
	Запрос.УстановитьПараметр("КонецПериода", ?(ЗначениеЗаполнено(ОтборКонецПериода), ОтборКонецПериода, КонецДня(ТекущаяДата()))); 	
	Запрос.УстановитьПараметр("НачалоВчерашнегоДня", ?(ЗначениеЗаполнено(ОтборНачалоПериода), НачалоДня(ОтборНачалоПериода - 86400), НачалоДня(ТекущаяДата() - 86400)));
	Запрос.УстановитьПараметр("КонецВчерашнегоДня", ?(ЗначениеЗаполнено(ОтборКонецПериода), КонецДня(ОтборКонецПериода - 86400), КонецДня(ТекущаяДата() - 86400)));
	
	Если ЗначениеЗаполнено(ОтборТекущийПользователь) Тогда //ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)		
		Запрос.УстановитьПараметр("ОтборТекущийПользователь", ОтборТекущийПользователь);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Ответственный = &ОтборТекущийПользователь", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда 
		Запрос.УстановитьПараметр("Ответственный", ОтборОтветственный);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Ответственный = &Ответственный", "");
	КонецЕсли;
		
	Если ОтборПриоритет.Количество() Тогда 
		Запрос.УстановитьПараметр("Приоритет", ОтборПриоритет);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Приоритет В(&Приоритет)", "");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ОтборВидЗаявки) Тогда 
		Запрос.УстановитьПараметр("ВидЗаявкиНаЗвонок", ОтборВидЗаявки);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок = &ВидЗаявкиНаЗвонок", "");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОтборТипВызова) Тогда 
		Запрос.УстановитьПараметр("ТипВызова", ОтборТипВызова);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.ТипВызова = &ТипВызова", "");
	КонецЕсли;

	Если ОтборСтатус.Количество() Тогда //ЗначениеЗаполнено(ОтборСтатус) 
		Запрос.УстановитьПараметр("Статус", ОтборСтатус);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Статус В(&Статус)", "");
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(ОтборСайт) Тогда 
		Запрос.УстановитьПараметр("Сайт", ОтборСайт);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Сайт = &Сайт", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(ОтборВидНедвижимости) Тогда 
		Запрос.УстановитьПараметр("ВидНедвижимости", ОтборВидНедвижимости);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.ВидНедвижимости = &ВидНедвижимости", "");
	КонецЕсли;
	
	//Если ОтборСпам Тогда 
	//	Запрос.УстановитьПараметр("Спам", ОтборСпам);	
	//Иначе
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Спам = &Спам", "");				
	//КонецЕсли;
	
	Если ТипОтбораСпам = 0 Тогда 
		Запрос.УстановитьПараметр("Спам", Ложь);
	ИначеЕсли ТипОтбораСпам = 1 Тогда
		Запрос.УстановитьПараметр("Спам", Истина);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Спам = &Спам", "");				
	КонецЕсли;	
	
	Если ОтборЭтап.Количество() Тогда
		Запрос.УстановитьПараметр("ЭтапРаботы", ОтборЭтап);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.ЭтапРаботы В(&ЭтапРаботы)", "");				
	КонецЕсли;
	
	Если ОтборНеОбработанныйСпам Тогда
		Запрос.УстановитьПараметр("НеОбработаноСтатус", Перечисления.СтатусЗаявкиCallBack.НеОбработано);
		Запрос.УстановитьПараметр("НеОбработаноСпам", Истина);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Спам = &Спам", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Статус В(&Статус)", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Спам = &НеОбработаноСпам", "");
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Статус = &НеОбработаноСтатус", "");
	КонецЕсли; 

	Если ОтборТипВзаимодействия = 0 Тогда		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.Встреча", "");
	ИначеЕсли ОтборТипВзаимодействия = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.Встреча", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаявкиНаCallBack.Взаимодействие ССЫЛКА Документ.ТелефонныйЗвонок", "");			
	КонецЕсли;		
	
	Результат = Запрос.Выполнить();
	НомерСтроки = 1;
	РаспределениеЗаявки.Очистить();
	РаспределениеЗаявки_ТЗ = РеквизитФормыВЗначение("РаспределениеЗаявки");
	РаспределениеЗаявки_ТЗ.Очистить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = РаспределениеЗаявки_ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Если НЕ НоваяСтрока.Статус = ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеОбработано")
				ИЛИ НоваяСтрока.Спам
				ИЛИ ЗначениеЗаполнено(НоваяСтрока.Ответственный) Тогда
				НоваяСтрока.Распределять = Ложь;
			КонецЕсли; 
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(РаспределениеЗаявки_ТЗ, "РаспределениеЗаявки");

	Если НЕ ЭлементПозиционирования = Неопределено Тогда
		Строки = РаспределениеЗаявки.Найтистроки(Новый Структура("Ссылка", ЭлементПозиционирования));
		Если НЕ Строки = Неопределено И Строки.Количество() Тогда
			Элементы.РаспределениеЗаявки.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;	
		
	Элементы.ГруппаЗаявки.Заголовок = "Заявки (" + РаспределениеЗаявки.Количество() + ")";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуРаспределения(Значение = Истина)
	
	Для каждого Строка Из РаспределениеПользователи Цикл
		УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("УчаствуетВРаспределении", Значение, Строка.Пользователь, ОтборГруппаРаспределения);
		Строка.РаспределениеЗаявок = Значение;
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеГруппПользователяГПТ(НоваяСтрока)
		
	НоваяСтрока.РаспределениеГПТ_ЖН = УправлениеЗаявкамиНаЗвонок.ПолучитьНастройкуРаспределенияЗаявокПользователя("ЖилаяНедвижимость", НоваяСтрока.Пользователь, ОтборГруппаРаспределения);
	НоваяСтрока.РаспределениеГПТ_ЗУКН = УправлениеЗаявкамиНаЗвонок.ПолучитьНастройкуРаспределенияЗаявокПользователя("ЗемельныеУчастки", НоваяСтрока.Пользователь, ОтборГруппаРаспределения) ИЛИ УправлениеЗаявкамиНаЗвонок.ПолучитьНастройкуРаспределенияЗаявокПользователя("КоммерческаяНедвижимость", НоваяСтрока.Пользователь, ОтборГруппаРаспределения);
	НоваяСтрока.РаспределениеГПТ_ОБЩ = УправлениеЗаявкамиНаЗвонок.ПолучитьНастройкуРаспределенияЗаявокПользователя("Общая", НоваяСтрока.Пользователь, ОтборГруппаРаспределения);
	
	ЗаполнитьКоличестваЗаявокПользователяПоГруппе(НоваяСтрока);
	
	НоваяСтрока.ИтогоНеОбработано = НоваяСтрока.НеОбработаноГПТ_ЖН + НоваяСтрока.НеОбработаноГПТ_ЗУКН + НоваяСтрока.НеОбработаноГПТ_ОБЩ;
	НоваяСтрока.ИтогоКоличество = НоваяСтрока.КоличествоГПТ_ЖН + НоваяСтрока.КоличествоГПТ_ЗУКН + НоваяСтрока.КоличествоГПТ_ОБЩ; //Не спам
	НоваяСтрока.ИтогоСпам = ПолучитьКоличествоСпамаПоОтветственному(НоваяСтрока.Пользователь);	
	НоваяСтрока.ИтогоКоличествоОбщее = ПолучитьОбщееКоличествоЗаявокПользователя(НоваяСтрока.Пользователь); //НоваяСтрока.ИтогоКоличество + НоваяСтрока.ИтогоСпам;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщееКоличествоЗаявокПользователя(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаявкиНаCallBack.ID) КАК КоличествоСпам
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкиНаCallBack
	|ГДЕ
	|	ЗаявкиНаCallBack.Ответственный = &Пользователь
	|	И ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));  
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата())); 
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.КоличествоСпам;
	КонецЕсли;
	
	Возврат 0;

КонецФункции 

&НаСервере
Функция ПолучитьКоличествоСпамаПоОтветственному(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗаявкиНаCallBack.Ссылка) КАК КоличествоСпам
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкиНаCallBack
	|ГДЕ
	|	ЗаявкиНаCallBack.Ответственный = &Пользователь
	|	И ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗаявкиНаCallBack.ЭтоТестоваяЗаявка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));  
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата())); 
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.КоличествоСпам;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьКоличестваЗаявокПользователяПоГруппе(НоваяСтрока)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗаявкиНаCallBack.ВидНедвижимости В(&ВидНедвижимостиЖН)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоГПТ_ЖН,
	|	ВЫБОР
	|		КОГДА ЗаявкиНаCallBack.ВидНедвижимости В(&ВидНедвижимостиЖН)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкиНаCallBack.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеОбработаноГПТ_ЖН,
	|	ВЫБОР
	|		КОГДА ЗаявкиНаCallBack.ВидНедвижимости В (&ВидНедвижимостиЗУКН)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоГПТ_ЗУКН,
	|	ВЫБОР
	|		КОГДА ЗаявкиНаCallBack.ВидНедвижимости В (&ВидНедвижимостиЗУКН)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкиНаCallBack.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеОбработаноГПТ_ЗУКН,
	|	ВЫБОР
	|		КОГДА 
	|				//ЗаявкиНаCallBack.Сайт = ЗНАЧЕНИЕ(справочник.ПараметрыПолученияЗаявокНаCallBack.пустаяссылка) ИЛИ 
	|				ЗаявкиНаCallBack.ВидНедвижимости = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНедвижимости.пустаяссылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоГПТ_ОБЩ,
	|	ВЫБОР
	|		КОГДА 
	|				//ЗаявкиНаCallBack.Сайт = ЗНАЧЕНИЕ(справочник.ПараметрыПолученияЗаявокНаCallBack.пустаяссылка) ИЛИ
	|				ЗаявкиНаCallBack.ВидНедвижимости = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовНедвижимости.пустаяссылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЗаявкиНаCallBack.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеОбработаноГПТ_ОБЩ,
	|	ЗаявкиНаCallBack.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкиНаCallBack
	|ГДЕ
	|	ЗаявкиНаCallBack.Ответственный = &Пользователь
	|	И ЗаявкиНаCallBack.ДатаРаспределения МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ЗаявкиНаCallBack.ЭтоТестоваяЗаявка
	|ИТОГИ
	|	СУММА(КоличествоГПТ_ЖН),
	|	СУММА(НеОбработаноГПТ_ЖН),
	|	СУММА(КоличествоГПТ_ЗУКН),
	|	СУММА(НеОбработаноГПТ_ЗУКН),
	|	СУММА(КоличествоГПТ_ОБЩ),
	|	СУММА(НеОбработаноГПТ_ОБЩ)
	|ПО
	|	Ответственный";
	
	ВидНедвижимостиЖН = Новый Массив;
	ВидНедвижимостиЖН.Добавить(Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость);
	ВидНедвижимостиЖН.Добавить(Перечисления.ВидыОбъектовНедвижимости.Машиноместо);
	ВидНедвижимостиЖН.Добавить(Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость);
	
	ВидНедвижимостиЗУКН = Новый Массив;
	ВидНедвижимостиЗУКН.Добавить(Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток);
	ВидНедвижимостиЗУКН.Добавить(Перечисления.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость);	
	
	Запрос.УстановитьПараметр("ВидНедвижимостиЗУКН", ВидНедвижимостиЗУКН);
	Запрос.УстановитьПараметр("ВидНедвижимостиЖН", ВидНедвижимостиЖН);
	
	Запрос.УстановитьПараметр("Пользователь", НоваяСтрока.Пользователь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущаяДата()));  
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущаяДата())); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПредварительнуюСортировку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкиНаCallBack.ДатаРаспределения КАК ДатаРаспределения,
	|	ЗаявкиНаCallBack.ДатаЗаявки КАК ДатаЗаявки,
	|	ЗаявкиНаCallBack.reqContact КАК reqContact,
	|	ЗаявкиНаCallBack.Спам КАК Спам,
	|	ЗаявкиНаCallBack.ID КАК ID,
	|	ЗаявкиНаCallBack.Ссылка КАК Ссылка,
	|	ЗаявкиНаCallBack.ТипВызова КАК ТипВызова,
	|	ЗаявкиНаCallBack.Статус КАК Статус,
	|	ЗаявкиНаCallBack.ЭтапРаботы КАК ЭтапРаботы,
	|	ЗаявкиНаCallBack.ТипПоступленияЗаявки КАК ТипПоступленияЗаявки,
	|	ЗаявкиНаCallBack.Ответственный КАК Ответственный,
	|	ЗаявкиНаCallBack.ПопытокДозвониться КАК ПопытокДозвониться,
	|	ЗаявкиНаCallBack.Сайт КАК Сайт,
	|	ЗаявкиНаCallBack.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ЗаявкиНаCallBack.ВидНедвижимости КАК ВидНедвижимости,
	|	ЗаявкиНаCallBack.ПорядокПоЭтапу КАК ПорядокПоЭтапу,
	|	ЗаявкиНаCallBack.ПлановоеВремя КАК ПлановоеВремя,
	|	ЗаявкиНаCallBack.Приоритет КАК Приоритет,
	|	ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок КАК ВидЗаявкиНаЗвонок,
	|	ЗаявкиНаCallBack.Взаимодействие КАК Взаимодействие,
	|	ЗаявкиНаCallBack.ВзаимодействиеАвтор КАК ВзаимодействиеАвтор,
	|	ЗаявкиНаCallBack.Контакт КАК Контакт,
	|	ЗаявкиНаCallBack.Распределять КАК Распределять,
	|	ЗаявкиНаCallBack.Дата КАК Дата,
	|	ЗаявкиНаCallBack.ТипРаспределения КАК ТипРаспределения,
	|	ЗаявкиНаCallBack.ВзаимодействиеДата КАК ВзаимодействиеДата
	|ПОМЕСТИТЬ ВТ_Распределение
	|ИЗ
	|	&ТЗ КАК ЗаявкиНаCallBack
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиНаCallBack.ДатаРаспределения КАК ДатаРаспределения,
	|	ЗаявкиНаCallBack.ДатаЗаявки КАК ДатаЗаявки,
	|	ЗаявкиНаCallBack.reqContact КАК reqContact,
	|	ЗаявкиНаCallBack.Спам КАК Спам,
	|	ЗаявкиНаCallBack.ID КАК ID,
	|	ЗаявкиНаCallBack.Ссылка КАК Ссылка,
	|	ЗаявкиНаCallBack.ТипВызова КАК ТипВызова,
	|	ЗаявкиНаCallBack.Статус КАК Статус,
	|	ЗаявкиНаCallBack.ЭтапРаботы КАК ЭтапРаботы,
	|	ЗаявкиНаCallBack.ТипПоступленияЗаявки КАК ТипПоступленияЗаявки,
	|	ЗаявкиНаCallBack.Ответственный КАК Ответственный,
	|	ЗаявкиНаCallBack.ПопытокДозвониться КАК ПопытокДозвониться,
	|	ЗаявкиНаCallBack.Сайт КАК Сайт,
	|	ЗаявкиНаCallBack.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ЗаявкиНаCallBack.ВидНедвижимости КАК ВидНедвижимости,
	|	ЗаявкиНаCallBack.ПорядокПоЭтапу КАК ПорядокПоЭтапу,
	|	ЗаявкиНаCallBack.Распределять КАК Распределять,
	|	ЗаявкиНаCallBack.ПлановоеВремя КАК ПлановоеВремя,
	|	ЗаявкиНаCallBack.Приоритет КАК Приоритет,
	|	ЗаявкиНаCallBack.ВидЗаявкиНаЗвонок КАК ВидЗаявкиНаЗвонок,
	|	ЗаявкиНаCallBack.Взаимодействие КАК Взаимодействие,
	|	ЗаявкиНаCallBack.ВзаимодействиеАвтор КАК ВзаимодействиеАвтор,
	|	ЗаявкиНаCallBack.Контакт КАК Контакт,
	|	ЗаявкиНаCallBack.Дата КАК Дата,
	|	ЗаявкиНаCallBack.ТипРаспределения КАК ТипРаспределения,
	|	ЗаявкиНаCallBack.ВзаимодействиеДата КАК ВзаимодействиеДата
	|ИЗ
	|	ВТ_Распределение КАК ЗаявкиНаCallBack
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ЗаявкиНаCallBack.ВзаимодействиеАвтор В (&АктивныеПользователи)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТЗ", РаспределениеЗаявки.Выгрузить());	
	Запрос.УстановитьПараметр("АктивныеПользователи", УправлениеЗаявкамиНаЗвонок.ПолучитьАктивныхПользователей(ОтборГруппаРаспределения));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РаспределениеЗаявки.Очистить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НоваяСтрока = РаспределениеЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		//ЗначениеВРеквизитФормы(РаспределениеЗаявки_ТЗ, "РаспределениеЗаявки");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОпределеитьПорядокПоЭтапу(Ссылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
		|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
		|				И (ЗаявкаНаЗвонок.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ НАЧАЛОПЕРИОДА(ЗаявкаНаЗвонок.ДатаРаспределения, ДЕНЬ) = &НачалоЭтогоДня)
		|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
		|				И НЕ ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5))
		|				И ЗаявкаНаЗвонок.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
		|			ТОГДА 1
		|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
		|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
		|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
		|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
		|				И НЕ ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5))
		|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
		|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
		|			ТОГДА 2
		|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
		|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
		|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
		|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
		|				И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
		|				И НЕ ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5))
		|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
		|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
		|			ТОГДА 3
		|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
		|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
		|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня)
		|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
		|				И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4)
		|				И ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеДозвон)
		|			ТОГДА 4
		|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
		|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
		|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
		|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
		|				И НЕ ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет3)
		|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
		|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
		|			ТОГДА 5
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ПорядокПоЭтапу
		|ИЗ
		|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
		|ГДЕ
		|	ЗаявкаНаЗвонок.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Запрос.УстановитьПараметр("НачалоЭтогоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецЭтогоДня", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("НачалоВчерашнегоДня", НачалоДня(ТекущаяДата() - 86400));
	Запрос.УстановитьПараметр("КонецВчерашнегоДня", КонецДня(ТекущаяДата() - 86400));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ПорядокПоЭтапу;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат -1;
		
КонецФункции

&НаСервере
Функция ОпределитьПорядокПоТипуРаспределения(Ссылка)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения = ДАТАВРЕМЯ(1, 1, 1)
	|					ИЛИ НАЧАЛОПЕРИОДА(ЗаявкаНаЗвонок.ДатаРаспределения, ДЕНЬ) = &НачалоЭтогоДня)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
	|				И НЕ ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет6), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5))
	|				И ЗаявкаНаЗвонок.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|				И ЗаявкаНаЗвонок.ТипРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыРаспределенияЗаявокНаЗвонок.Сегодняшние)
	|			ТОГДА ""Сегодняшние""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.Приоритет В (ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет1), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет2), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет3), ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет4))
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И ЗаявкаНаЗвонок.ПопытокДозвониться = 0
	|			ТОГДА ""A""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок <> ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И ЗаявкаНаЗвонок.ПопытокДозвониться > 0
	|			ТОГДА ""B""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И ВЫБОР
	|					КОГДА ЗаявкаНаЗвонок.Взаимодействие ССЫЛКА Документ.Встреча
	|							И НЕ ПредметыПапкиВзаимодействий.РассмотретьПосле ЕСТЬ NULL
	|						ТОГДА НАЧАЛОПЕРИОДА(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДЕНЬ) <> &НачалоЭтогоДня
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|				И ЗаявкаНаЗвонок.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы В (ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Начальный), ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный))
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И (ЗаявкаНаЗвонок.ПопытокДозвониться < 6
	|						И ЗаявкаНаЗвонок.ПопытокДозвониться > 0
	|					ИЛИ ЗаявкаНаЗвонок.ПопытокСегодня < 2
	|						И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	|					ИЛИ ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	|						И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	|						И ЗаявкаНаЗвонок.ДеньОбработки < 5)
	|			ТОГДА ""V""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок <> ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И (ЗаявкаНаЗвонок.ПопытокДозвониться < 6
	|					ИЛИ ЗаявкаНаЗвонок.ПопытокСегодня < 2)
	|			ТОГДА ""C""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоЭтогоДня И &КонецЭтогоДня)
	|				И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|				И ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано)
	|			ТОГДА ""W""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И ЗаявкаНаЗвонок.ПопытокСегодня < 2
	|			ТОГДА ""X""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|				И ЗаявкаНаЗвонок.Приоритет <> ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	|				И ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	|				И ЗаявкаНаЗвонок.ДеньОбработки >= 5
	|			ТОГДА ""Y""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.ВидЗаявкиНаЗвонок <> ЗНАЧЕНИЕ(Перечисление.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И ЗаявкаНаЗвонок.ПопытокДозвониться >= 6
	|				И ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	|			ТОГДА ""D""
	|		КОГДА НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|				И НЕ ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка
	|				И (ЗаявкаНаЗвонок.ДатаРаспределения МЕЖДУ &НачалоВчерашнегоДня И &КонецВчерашнегоДня)
	|				И ЗаявкаНаЗвонок.Приоритет = ЗНАЧЕНИЕ(Перечисление.ПриоритетыЗаявокНаЗвонок.Приоритет5)
	|				И ЗаявкаНаЗвонок.ЭтапРаботы = ЗНАЧЕНИЕ(Перечисление.ЭтапыРаботыЗавок.Контрольный)
	|				И (ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.БылиПопыткиДозвониться)
	|					ИЛИ ЗаявкаНаЗвонок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусЗаявкиCallBack.НеОбработано))
	|				И ЗаявкаНаЗвонок.ПопытокСегодня >= 2
	|			ТОГДА ""Z""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПорядокПоЭтапу
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЗаявкаНаЗвонок.Взаимодействие)
	|ГДЕ
	|	ЗаявкаНаЗвонок.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	Запрос.УстановитьПараметр("НачалоЭтогоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецЭтогоДня", КонецДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("НачалоВчерашнегоДня", НачалоДня(ТекущаяДата() - 86400));
	Запрос.УстановитьПараметр("КонецВчерашнегоДня", КонецДня(ТекущаяДата() - 86400));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ПорядокПоЭтапу;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
		
КонецФункции

&НаСервере
Процедура АвтоРаспределениеЗаявок(Выбранные = Истина)
		
	ВыполнитьПредварительнуюСортировку();
	
	Для каждого Строка Из РаспределениеЗаявки Цикл		
		Если Выбранные Тогда			
			Если НЕ Строка.Распределять Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если НЕ Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусЗаявкиCallBack.НеОбработано") Тогда  
				Продолжить;
			КонецЕсли;		
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Ответственный) И НЕ Строка.Спам Тогда													
			
			Ответственный = Неопределено;
			Если ЗначениеЗаполнено(Строка.reqContact) Тогда
				НайденныйОтветственный = УправлениеЗаявкамиНаЗвонок.НайтиОтветственногоЗаявокПоКлиенту(Строка.reqContact);
				Если ЗначениеЗаполнено(НайденныйОтветственный) Тогда
					АктивныеПользователи = УправлениеЗаявкамиНаЗвонок.ПолучитьАктивныхПользователей(ОтборГруппаРаспределения, Строка.ВидНедвижимости, , );
					Если НЕ АктивныеПользователи.Найти(НайденныйОтветственный) = Неопределено Тогда
						Ответственный = НайденныйОтветственный;
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;	
			
			Если Строка.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия Тогда
				Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
					Если ЗначениеЗаполнено(Строка.ВзаимодействиеАвтор) Тогда				
						Если Строка.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано И НЕ Строка.Ответственный = Строка.ВзаимодействиеАвтор Тогда	
							АктивныеПользователи = УправлениеЗаявкамиНаЗвонок.ПолучитьАктивныхПользователей(ОтборГруппаРаспределения, Строка.ВидНедвижимости, , );
							Если НЕ АктивныеПользователи.Найти(Строка.ВзаимодействиеАвтор) = Неопределено Тогда
								Ответственный = Строка.ВзаимодействиеАвтор;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Ответственный) Тогда	
				Ответственный = УправлениеЗаявкамиНаЗвонок.ПолучитьОтветственногоПоРаспределению(ОтборГруппаРаспределения, Строка.ВидНедвижимости, Строка.Сайт, ПолучаитьНаборПользователейДляРаспределения(Строка.Сайт, Строка.ВидНедвижимости), Строка.ВидЗаявкиНаЗвонок, Строка.Приоритет);				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Ответственный) Тогда
				ЗаявкаОбъект = Строка.Ссылка.ПолучитьОбъект();
				Если ЗаявкаОбъект = Неопределено Тогда
					Продолжить;	
				КонецЕсли;				
				ЗаявкаОбъект.Ответственный = Ответственный;
				ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();								
				ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
								
			//////v3 			
			//ПорядокПоТипуРаспределения = ОпределитьПорядокПоТипуРаспределения(Строка.Ссылка);			
			//
			//Если НЕ ЗначениеЗаполнено(ПорядокПоТипуРаспределения) Тогда
			//	Продолжить;
			//КонецЕсли;
			//
			//УправлениеЗаявкамиНаЗвонок.РаспределитьЗаявкуПоТипуРаспределения(Строка, ПорядокПоТипуРаспределения, ОтборГруппаРаспределения);
			
			////v2
			//ПорядокПоЭтапу = ОпределеитьПорядокПоЭтапу(Строка.Ссылка);			
			//Если ПорядокПоЭтапу = 3 Тогда
			//	ЗаявкаОбъект = Строка.Ссылка.ПолучитьОбъект();
			//	Если НЕ ЗаявкаОбъект = Неопределено Тогда
			//		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет4;
			//		ЗаявкаОбъект.ДатаРаспределения = ДобавитьМесяц(НачалоДня(ТекущаяДата()) - 86400, 1);
			//		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеДозвон;
			//		ЗаявкаОбъект.Ответственный = Справочники.Пользователи.ПустаяСсылка();
			//		ЗаявкаОбъект.Записать();
			//	КонецЕсли;
			//	Продолжить;
			//ИначеЕсли ПорядокПоЭтапу = 5 Тогда
			//	ЗаявкаОбъект = Строка.Ссылка.ПолучитьОбъект();
			//	Если НЕ ЗаявкаОбъект = Неопределено Тогда
			//		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет5;
			//		ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет6;
			//		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеДозвон;
			//		ЗаявкаОбъект.Записать();
			//	КонецЕсли;
			//	Продолжить;
			//КонецЕсли;			
			//Ответственный = Неопределено;
			//Если ЗначениеЗаполнено(Строка.НомерТелефона) Тогда
			//	НайденныйОтветственный = УправлениеЗаявкамиНаЗвонок.НайтиОтветственногоЗаявокПоКлиенту(Строка.НомерТелефона);
			//	Если ЗначениеЗаполнено(НайденныйОтветственный) Тогда
			//		АктивныеПользователи = УправлениеЗаявкамиНаЗвонок.ПолучитьАктивныхПользователей(ОтборГруппаРаспределения, Строка.ВидНедвижимости, , );
			//		Если НЕ АктивныеПользователи.Найти(НайденныйОтветственный) = Неопределено Тогда
			//			Ответственный = НайденныйОтветственный;
			//		КонецЕсли;		
			//	КонецЕсли;
			//КонецЕсли;	
			//Если Строка.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия Тогда
			//	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			//		Если ЗначениеЗаполнено(Строка.ВзаимодействиеАвтор) Тогда				
			//			Если Строка.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано И НЕ Строка.Ответственный = Строка.ВзаимодействиеАвтор Тогда	
			//				АктивныеПользователи = УправлениеЗаявкамиНаЗвонок.ПолучитьАктивныхПользователей(ОтборГруппаРаспределения, Строка.ВидНедвижимости, , );
			//				Если НЕ АктивныеПользователи.Найти(Строка.ВзаимодействиеАвтор) = Неопределено Тогда
			//					Ответственный = Строка.ВзаимодействиеАвтор;
			//				КонецЕсли;
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;	
			//Если НЕ ЗначениеЗаполнено(Ответственный) Тогда	
			//	Ответственный = УправлениеЗаявкамиНаЗвонок.ПолучитьОтветственногоПоРаспределению(ОтборГруппаРаспределения, Строка.ВидНедвижимости, Строка.Сайт, ПолучаитьНаборПользователейДляРаспределения(Строка.Сайт, Строка.ВидНедвижимости), Строка.ВидЗаявкиНаЗвонок);
			//КонецЕсли;	
			//Если ЗначениеЗаполнено(Ответственный) Тогда				
			//	ЗаявкаОбъект = Строка.Ссылка.ПолучитьОбъект();
			//	Если НЕ ЗаявкаОбъект = Неопределено Тогда
			//		ЗаявкаОбъект.Ответственный = Ответственный;
			//		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();
			//		ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
			//		Если ПорядокПоЭтапу = 2 Тогда
			//			ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;
			//		КонецЕсли;
			//		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//	КонецЕсли;
			//	ЗаявкаОбъект = Строка.Ссылка.ПолучитьОбъект();
			//	Если НЕ ЗаявкаОбъект = Неопределено Тогда
			//		ЗаявкаОбъект.Ответственный = Ответственный;
			//		ЗаявкаОбъект.ДатаРаспределения = ТекущаяДата();								
			//		Если Строка.ПорядокПоЭтапу > 0 Тогда
			//			Если ЗаявкаОбъект.ПопытокДозвониться > 0 Тогда
			//				ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Контрольный;	
			//			Иначе
			//				ЗаявкаОбъект.ЭтапРаботы = Перечисления.ЭтапыРаботыЗавок.Начальный;
			//			КонецЕсли; 					
			//			ЗаявкаОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;
			//			Если НЕ ЗаявкаОбъект.ВидЗаявкиНаЗвонок = Перечисления.ВидыЗаявокНаЗвонок.НаОснованииВзаимодействия Тогда
			//				ЗаявкаОбъект.Приоритет = Перечисления.ПриоритетыЗаявокНаЗвонок.Приоритет2;
			//				ЗаявкаОбъект.ПлановоеВремя = Неопределено;
			//			КонецЕсли;
			//		КонецЕсли;	
			//		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//	КонецЕсли;
			//КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла; 
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Функция ПолучаитьНаборПользователейДляРаспределения(Сайт = Неопределено, ВидНедвижимости = Неопределено)
	
	УчастникиРаспределения = РаспределениеПользователи.НайтиСтроки(Новый Структура("РаспределениеЗаявок", Истина));
		
	ВидНедвижимостиЖН = Новый Массив;
	ВидНедвижимостиЖН.Добавить(Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость);
	ВидНедвижимостиЖН.Добавить(Перечисления.ВидыОбъектовНедвижимости.Машиноместо);	
	ВидНедвижимостиЖН.Добавить(Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость);	
	
	ВидНедвижимостиЗУКН = Новый Массив;
	ВидНедвижимостиЗУКН.Добавить(Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток);
	ВидНедвижимостиЗУКН.Добавить(Перечисления.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость);	

	НаборПользователейДляРаспределения = Новый Массив;
	Для каждого Участник Из УчастникиРаспределения Цикл
		Если Сайт = Неопределено Тогда
			НаборПользователейДляРаспределения.Добавить(Участник.Пользователь);
			Продолжить;			
		КонецЕсли; 		
		Если НЕ ВидНедвижимостиЖН.Найти(ВидНедвижимости) = Неопределено И Участник.РаспределениеГПТ_ЖН Тогда
			НаборПользователейДляРаспределения.Добавить(Участник.Пользователь);
			Продолжить;
		КонецЕсли;						
		Если НЕ ВидНедвижимостиЗУКН.Найти(ВидНедвижимости) = Неопределено И Участник.РаспределениеГПТ_ЗУКН Тогда
			НаборПользователейДляРаспределения.Добавить(Участник.Пользователь);
			Продолжить;
		КонецЕсли;		
		Если НЕ ЗначениеЗаполнено(ВидНедвижимости) И Участник.РаспределениеГПТ_ОБЩ Тогда
			НаборПользователейДляРаспределения.Добавить(Участник.Пользователь);
			Продолжить;
		КонецЕсли;	
	КонецЦикла; 
	
	Возврат НаборПользователейДляРаспределения;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборЗаявок_Асинхр() Экспорт
	
	Строка = Элементы.РаспределениеПользователи.ТекущиеДанные;
	Если НЕ Строка = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(Строка.Пользователь) И НЕ Строка.Спам Тогда
			Возврат;
		КонецЕсли;
		ОтборТекущийПользователь = Строка.Пользователь; 
		ЗаполнитьЗаявки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьКакСпам(Ссылка, Значение = Истина)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	Если НЕ ДокОбъект = Неопределено Тогда
		ДокОбъект.ЭтоТестоваяЗаявка = Значение;//НЕ ДокОбъект.ЭтоТестоваяЗаявка;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтветственного(Ссылка, Ответственный)

	ДокОбъект = Ссылка.ПолучитьОбъект();
	Если НЕ ДокОбъект = Неопределено Тогда
		ДокОбъект.ДатаРаспределения = ТекущаяДата();
		ДокОбъект.Ответственный = Ответственный;
		//Если НЕ ЗначениеЗаполнено(ДокОбъект.Ответственный) Тогда
		//	ДокОбъект.Статус = Перечисления.СтатусЗаявкиCallBack.НеОбработано;	
		//КонецЕсли;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатус(Ссылка, Статус)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	Если НЕ ДокОбъект = Неопределено Тогда
		ДокОбъект.ДатаРаспределения = ТекущаяДата();
		ДокОбъект.Статус = Статус;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНаСервере(Статус = Неопределено)
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять Тогда
			ОбработатьНеОбработанную(ДанныеЗаявки.Ссылка, Статус);	
		КонецЕсли;
	КонецЦикла; 
		
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНеОбработанную(Ссылка, Статус = Неопределено)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	Если НЕ ДокОбъект = Неопределено Тогда
		ДокОбъект.Статус = ?(Статус = Неопределено, Перечисления.СтатусЗаявкиCallBack.Обработано, Статус);
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуРаспределенияЗаявки(Ссылка, ДатаРаспределения = Неопределено)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	Если НЕ ДокОбъект = Неопределено Тогда
		ДокОбъект.ДатаРаспределения = ДатаРаспределения;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьВысокийПриоритет(Ссылка, Приоритет)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	Если НЕ ДокОбъект = Неопределено Тогда
		ДокОбъект.Приоритет = Приоритет;//Перечисления.ПриоритетыЗаявокНаЗвонок.Высокий;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидНедвижимостиНаСервере(Сайт)
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять Тогда
			ДокОбъект = ДанныеЗаявки.Ссылка.ПолучитьОбъект();
			Если НЕ ДокОбъект = Неопределено Тогда
				ДокОбъект.Сайт = Сайт;
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла; 
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура РаспровестиНаСервере()
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять И НЕ ДанныеЗаявки.Спам Тогда
			ДокОбъект = ДанныеЗаявки.Ссылка.ПолучитьОбъект();
			Если НЕ ДокОбъект = Неопределено Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);		
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла; 
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Тест(Пользователь)
	УправлениеЗаявкамиНаЗвонок.УстановитьНастройкуРаспределенияЗаявокПользователя("Общая", Истина, Пользователь, ОтборГруппаРаспределения);
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуРаспределенияНаСервере(ДатаРаспределения)
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять Тогда
			УстановитьДатуРаспределенияЗаявки(ДанныеЗаявки.Ссылка, ДатаРаспределения);	
		КонецЕсли;
	КонецЦикла; 
		
	ОбновитьДанные();

КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДаты(Дата, Параметры) Экспорт
  
	Если НЕ Дата = Неопределено Тогда
		УстановитьДатуРаспределенияНаСервере(Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	ВыбранныйПериод = Диалог.Период;
	ДатаЗаявкиС = ВыбранныйПериод.ДатаНачала;
	ДатаЗаявкиПо = ВыбранныйПериод.ДатаОкончания;			
	ОбновитьДанные();	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПриоритетНаСервере(Приоритет)
	
	Для каждого ДанныеЗаявки Из РаспределениеЗаявки Цикл
		Если ДанныеЗаявки.Распределять Тогда
			ДокОбъект = ДанныеЗаявки.Ссылка.ПолучитьОбъект();
			Если НЕ ДокОбъект = Неопределено Тогда
				ДокОбъект.Приоритет = Приоритет;
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла; 		
	ОбновитьДанные();
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборПриоритета_Завершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПриоритетНаСервере(ВыбранныйЭлемент.Значение);	
	
КонецПроцедуры

#КонецОбласти
