
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Взаимодействия.ИнициализироватьФормуСпискаВзаимодействий(ЭтотОбъект, Параметры);
	Элементы.СписокСоздатьЭлектронноеПисьмоОтдельнаяКнопкаДерево.Видимость = ТолькоПочта;
	Элементы.ГруппаСоздатьДерево.Видимость = НЕ ТолькоПочта;
	Если ТолькоПочта Тогда
		ЗаголовокУчастникиПочта =  НСтр("ru = 'Кому, от'");
		Элементы.ДеревоВзаимодействийУчастники.Заголовок = ЗаголовокУчастникиПочта;
		Элементы.Участники.Заголовок = ЗаголовокУчастникиПочта;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Предмет") Тогда
			
			Если Параметры.Свойство("ДополнительныеПараметры")
				И Параметры.ДополнительныеПараметры.Свойство("ТипВзаимодействия") Тогда
				
				Если Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Взаимодействие" Тогда
					ПредметДляОтбора = Взаимодействия.ПолучитьЗначениеПредмета(Параметры.Отбор.Предмет);
					Параметры.Отбор.Предмет = ПредметДляОтбора ;
				ИначеЕсли Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Предмет" Тогда
					ПредметДляОтбора = Параметры.Отбор.Предмет;
				КонецЕсли;
			КонецЕсли;
			
			Параметры.Отбор.Удалить("Предмет");
			УстановитьОтборПоПредмету();
			
		ИначеЕсли Параметры.Отбор.Свойство("Контакт") Тогда
			
			Контакт = Параметры.Отбор.Контакт;
			Параметры.Отбор.Удалить("Контакт");
			УстановитьОтборПоКонтакту();
			
		КонецЕсли;
		//EXTCODE Шумилин Сергей 26.09.2017 {{ --->
		УстановитьОтборыДляРабочегоСтолаМенеджера(Параметры);
		//EXTCODE Шумилин Сергей 26.09.2017 <--- }} 
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьСписокДоступныхДляСозданияДокументов(ДокументыДоступныеДляСоздания);
	Взаимодействия.ЗаполнитьПодменюПоТипуВзаимодействия(Элементы.ДеревоТипВзаимодействия, ЭтотОбъект);
	Взаимодействия.ЗаполнитьПодменюПоТипуВзаимодействия(Элементы.СписокТипВзаимодействия, ЭтотОбъект);
	
	//++ Юкаев Роман 20171225 ( //Задача 750934
	Если Параметры.Свойство("ОтборДляМенеджераФилиала") Тогда
		ТипВзаимодействия = "Все";
	Иначе
	//-- Юкаев Роман 20171225 )
		ТипВзаимодействия = ?(ТолькоПочта,"ВсеПисьма","Все");
	//++ Юкаев Роман 20171225 ( //Задача 750934
	КонецЕсли;
	//-- Юкаев Роман 20171225 )
	Статус = "Все";
	
	//<789123>, Басаргин (27.03.2018) {
	ЭтоМенеджерГПТ = УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , ПользователиКлиентСервер.АвторизованныйПользователь()) И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ПользователиКлиентСервер.АвторизованныйПользователь());
	//<789123> }
	
	//<843560>, Басаргин (10.07.2018) {
	Если Параметры.Свойство("ДополнительныеПараметры") 
		 И	Параметры.ДополнительныеПараметры.Свойство("ТипВзаимодействия")
		 И	Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Контакт" Тогда
		 ТипВзаимодействия = "Все";	 
	 КонецЕсли;
	//<843560> }	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//<843560>, Басаргин (10.07.2018) {
	Если Параметры.Свойство("ДополнительныеПараметры") 
		 И	Параметры.ДополнительныеПараметры.Свойство("ТипВзаимодействия")
		 И	Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Контакт" Тогда
		 ТипВзаимодействия = "Все";
		 Если НЕ Настройки.Получить("ТипВзаимодействия") = Неопределено Тогда
		 	Настройки["ТипВзаимодействия"] = ТипВзаимодействия;
		КонецЕсли;
	КонецЕсли;
	//<843560> }	
	
	Статус = Настройки.Получить("Статус");
	Если Статус <> Неопределено Тогда
		Настройки.Удалить("Статус");
	КонецЕсли;
	Если Не ИспользоватьПризнакРассмотрено Или НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = "Все";
	КонецЕсли;
	Ответственный = Настройки.Получить("Ответственный");
	Если Ответственный <> Неопределено Тогда
		Настройки.Удалить("Ответственный");
	КонецЕсли;
	ВВидеДерева = Настройки.Получить("ВВидеДерева");
	Если ВВидеДерева <> Неопределено Тогда
		Настройки.Удалить("ВВидеДерева");
	КонецЕсли;
	
	Взаимодействия.ПриЗагрузкеТипаВзаимодействийИзНастроек(ЭтотОбъект, Настройки);
	
	УправлениеСтраницамиСервер();
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Источник) Тогда
		Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаДерево Тогда
			ЗаполнитьДеревоВзаимодействийКлиент();
		Иначе
			Если ОтборПоПредмету Тогда
				УстановитьОтборПоПредмету();
			Иначе
				УстановитьОтборПоКонтакту();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Пользователи.Форма.ФормаСписка") Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ВыполненаЗамена = Ложь;
			УстановитьОтветственного(ВыбранноеЗначение, ВыполненаЗамена);
			
			Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
				Если ВыполненаЗамена Тогда
					Элементы.Список.Обновить();
				КонецЕсли;
			Иначе
				Если ВыполненаЗамена Тогда
					РазвернутьВсеСтрокиДерева();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли КонтекстВыбора = "ПредметВыполнитьТипПредмета" Тогда
		
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КонтекстВыбора = "ПредметВыполнить";
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму(ВыбранноеЗначение + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
		
		Возврат;
		
	ИначеЕсли КонтекстВыбора = "ПредметВыполнить" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			Если ОтборПоПредмету И ПредметДляОтбора = ВыбранноеЗначение Тогда
				Возврат;
			КонецЕсли;
			
			ВыполненаЗамена = Ложь;
			УстановитьПредмет(ВыбранноеЗначение, ВыполненаЗамена);
			
			Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
				Если ВыполненаЗамена Тогда
					Элементы.Список.Обновить();
				КонецЕсли;
			Иначе
				Если ВыполненаЗамена Тогда
					РазвернутьВсеСтрокиДерева();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтотОбъект,Элемент.Имя,ОтборПоПредмету);
		
	Иначе
		
		ЗаполнитьДеревоВзаимодействийКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтотОбъект,Элемент.Имя,ОтборПоПредмету);
		
	Иначе
		
		ЗаполнитьДеревоВзаимодействийКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЗначенияЗаполнения = Новый Структура("Предмет,Контакт",ПредметДляОтбора,Контакт);
	
	ВзаимодействияКлиент.СписокПередНачаломДобавления(
		Элемент,Отказ,Копирование,ТолькоПочта,ДокументыДоступныеДляСоздания,
		Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоВзаимодействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.ДеревоВзаимодействий.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ЕстьПомеченныеНаУдаление = Ложь;
		Для каждого ВыделеннаяСтрока Из Элементы.ДеревоВзаимодействий.ВыделенныеСтроки Цикл
			Если Элементы.ДеревоВзаимодействий.ДанныеСтроки(ВыделеннаяСтрока).ПометкаУдаления Тогда
				ЕстьПомеченныеНаУдаление = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПомеченныеНаУдаление Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные строки на удаление?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("ЕстьПомеченныеНаУдаление", ЕстьПомеченныеНаУдаление);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОПометкеНаУдалениеПослеЗавершения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,
		               ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоВзаимодействийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
				ИЛИ ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				ПоказатьПредупреждение(, НСтр("ru = 'Копирование электронных писем запрещено'"));
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.Встреча") Тогда
				
				ОткрытьФорму("Документ.Встреча.ФормаОбъекта",
					Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка), ЭтотОбъект);
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
				
				ОткрытьФорму("Документ.ЗапланированноеВзаимодействие.ФормаОбъекта",
					Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка), ЭтотОбъект);
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				
				ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", 
					Новый Структура("ЗначениеКопирования",ТекущиеДанные.Ссылка), ЭтотОбъект);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВзаимодействияПриИзменении(Элемент)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		ВзаимодействияКлиентСервер.ПриИзмененииОтбораТипВзаимодействий(ЭтотОбъект, ТипВзаимодействия);
	Иначе
		ЗаполнитьДеревоВзаимодействийКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВзаимодействияСтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ИзменитьОтборТипВзаимодействия(Команда)

	ТипВзаимодействия = ВзаимодействияКлиентСервер.ТипВзаимодействияПоИмениКоманды(Команда.Имя, ТолькоПочта);
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		ПриИзмененииТипаСервер();
	Иначе
		ЗаполнитьДеревоВзаимодействийКлиент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Установить флаг "Рассмотрено" в выбранных взаимодействиях - клиентская часть.
Процедура РассмотреноВыполнить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ФлагРассмотрено = (Не Команда.Имя = "НеРассмотрено");
	
	ВыполненаЗамена = Ложь;
	УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено);
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		Если ВыполненаЗамена Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		
	Иначе
		
		Если ВыполненаЗамена Тогда
			РазвернутьВсеСтрокиДерева();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Установить ответственного в выбранных взаимодействиях - клиентская часть.
Процедура ОтветственныйВыполнить()
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыбора = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Установить предмет в выбранных взаимодействиях - клиентская часть.
Процедура ПредметВыполнить()
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыбора = "ПредметВыполнитьТипПредмета";
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.Форма.ВыборТипаПредмета",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Интервал;
	ОбработчикОповещенияЗакрытия = Новый ОписаниеОповещения("ВыборИнтервалаЗакрытие", ЭтотОбъект);
	Диалог.Показать(ОбработчикОповещенияЗакрытия);
	
КонецПроцедуры 

&НаКлиенте
// Устанавливает реквизит "отработать после" в выбранных взаимодействиях - клиентская часть.
Процедура ОтложитьРассмотрениеВыполнить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтработки = ОбщегоНазначенияКлиент.ДатаСеанса();
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВводДатыОтложитьРассмотрениеПослеЗавершения", ЭтотОбъект);
	ПоказатьВводДаты(ОбработчикОповещенияОЗакрытии, ДатаОтработки, НСтр("ru = 'Отработать после'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВстречу(Команда)
	
	СоздатьНовоеВзаимодействие("Встреча");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапланированноеВзаимодействие(Команда)
	
	СоздатьНовоеВзаимодействие("ЗапланированноеВзаимодействие");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТелефонныйЗвонок(Команда)
	
	СоздатьНовоеВзаимодействие("ТелефонныйЗвонок");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмо(Команда)
	
	СоздатьНовоеВзаимодействие("ЭлектронноеПисьмоИсходящее");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеВзаимодействие(ТипОбъекта)

	ЗначенияЗаполнения = Новый Структура("Предмет,Контакт",ПредметДляОтбора,Контакт);
	
	ВзаимодействияКлиент.СоздатьНовоеВзаимодействие(
	          ТипОбъекта,
	          Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения),
	          ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСообщениеSMS(Команда)
	
	СоздатьНовоеВзаимодействие("СообщениеSMS");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимПросмотра(Команда)
	
	ПереключитьРежимПросмотраСервер();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ЗаполнитьДеревоВзаимодействийКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "ДеревоВзаимодействий.Дата", Элементы.ДеревоВзаимодействийДата.Имя);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Рассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПризнакРассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоВзаимодействий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоВзаимодействий.Рассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПризнакРассмотрено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

КонецПроцедуры

&НаСервере
// Установить флаг "Рассмотрено" в выбранных взаимодействиях - серверная часть.
Процедура УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено)
	
	ВыполненаЗамена = Ложь;
	МассивВзаимодействий = Новый Массив;
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка Тогда
					МассивВзаимодействий.Добавить(Взаимодействие);
			КонецЕсли;
		КонецЦикла;
		
		Взаимодействия.УстановитьПризнакРассмотрено(МассивВзаимодействий,ФлагРассмотрено, ВыполненаЗамена);
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И (НЕ ЭлементДерева.Рассмотрено = ФлагРассмотрено) Тогда
				МассивВзаимодействий.Добавить(ЭлементДерева.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Взаимодействия.УстановитьПризнакРассмотрено(МассивВзаимодействий,ФлагРассмотрено, ВыполненаЗамена);
		
		Если ВыполненаЗамена Тогда
			ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
	////<>, Басаргин (10.09.2018) {
	//Для каждого Взаимодействие Из МассивВзаимодействий Цикл
	//	Попытка
	//		ВзаимодействиеОбъект = Взаимодействие.ПолучитьОбъект();
	//		Если ВзаимодействиеОбъект.Отменено Тогда
	//			ВзаимодействиеОбъект.Отменено = Ложь;				
	//		КонецЕсли;
	//		ВзаимодействиеОбъект.ДатаОкончания = ТекущаяДата();
	//		ВзаимодействиеОбъект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	//		ВзаимодействиеОбъект.Записать();
	//		РегистрыСведений.Взаимодействия.ЗаписатьВзаимодействие(ВзаимодействиеОбъект);
	//	Исключение
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка в " + Строка(Взаимодействие) + ": " + ОписаниеОшибки());
	//		Продолжить;
	//	КонецПопытки;		
	//КонецЦикла;	
	////<> }
	
КонецПроцедуры

&НаСервере
// Установить ответственного в выбранных взаимодействиях - серверная часть.
// Параметры:
//  Взаимодействия - список выбранных взаимодействий.
//  Ответственный - устанавливаемый ответственный.
Процедура УстановитьОтветственного(Ответственный,ВыполненаЗамена = Ложь)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка
				И Взаимодействие.Ответственный <> Ответственный Тогда
					Взаимодействия.ЗаменитьОтветственногоВДокументе(Взаимодействие, Ответственный);
					ВыполненаЗамена = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И ЭлементДерева.Ответственный <> Ответственный Тогда
				Взаимодействия.ЗаменитьОтветственногоВДокументе(ЭлементДерева.Ссылка, Ответственный);
				ВыполненаЗамена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполненаЗамена Тогда
				ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Установить предмет в выбранных взаимодействиях - серверная часть.
Процедура УстановитьПредмет(Предмет,ВыполненаЗамена)
	
	МассивВзаимодействий = Новый Массив;
		
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка Тогда
					МассивВзаимодействий.Добавить(Взаимодействие)
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВзаимодействий.Количество() > 0 Тогда
			ВзаимодействияВызовСервера.УстановитьПредметДляМассиваВзаимодействий(МассивВзаимодействий, Предмет, Истина);
			ВыполненаЗамена = Истина;
		КонецЕсли;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И ЭлементДерева.Предмет <> Предмет Тогда
				МассивВзаимодействий.Добавить(ЭлементДерева.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивВзаимодействий.Количество() > 0 Тогда
			ВзаимодействияВызовСервера.УстановитьПредметДляМассиваВзаимодействий(МассивВзаимодействий, Предмет, Истина);
			ВыполненаЗамена = Истина;
			ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьРассмотрение(ДатаРассмотрения, ВыполненаЗамена = Ложь)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		МассивВзаимодействий = Новый Массив;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка Тогда
					МассивВзаимодействий.Добавить(Взаимодействие);
			КонецЕсли;
		КонецЦикла;
		
		МассивВзаимодействий = Взаимодействия.МассивВзаимодействийДляИзмененияДатыРассмотрения(МассивВзаимодействий, ДатаРассмотрения);
		
		Для Каждого Взаимодействие Из МассивВзаимодействий Цикл
			
			Реквизиты = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
			Реквизиты.РассмотретьПосле        = ДатаРассмотрения;
			Реквизиты.РассчитыватьРассмотрено = Ложь;
			
			ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(Взаимодействие, Реквизиты);
			ВыполненаЗамена = Истина;
			
		КонецЦикла;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		МассивВзаимодействий = Новый Массив;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И НЕ ЭлементДерева.Рассмотрено Тогда
				
				Реквизиты = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
				Реквизиты.РассмотретьПосле        = ДатаРассмотрения;
				Реквизиты.РассчитыватьРассмотрено = Ложь;

				ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(ЭлементДерева.Ссылка, Реквизиты);
				ВыполненаЗамена = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполненаЗамена Тогда
			ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыборКорректен()
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого Элемент Из Элементы.Список.ВыделенныеСтроки Цикл
			Если ТипЗнч(Элемент) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Если Элементы.ДеревоВзаимодействий.ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПереключитьРежимПросмотраСервер()
	
	ВВидеДерева = НЕ ВВидеДерева;
	
	УправлениеСтраницамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСтраницамиСервер()

	Если ВВидеДерева Тогда
		Интервал = Элементы.Список.Период;
		Команды.ПереключитьРежимПросмотра.Подсказка = НСтр("ru = 'Установить режим просмотра в виде списка'");
		Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаДерево;
		ЗаполнитьДеревоВзаимодействий();
	Иначе
		Элементы.Список.Период = Интервал;
		Команды.ПереключитьРежимПросмотра.Подсказка = НСтр("ru = 'Установить режим просмотра в виде дерева'");
		Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок;
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтотОбъект,"Статус", ОтборПоПредмету);
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтотОбъект,"Ответственный", ОтборПоПредмету);
		ПриИзмененииТипаСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВзаимодействий()
	
	Запрос = Новый Запрос;
	
	Если ОтборПоПредмету Тогда
		СхемаОтбора = ЖурналыДокументов.Взаимодействия.ПолучитьМакет("ИерархияВзаимодействийПредмет");
	Иначе
		СхемаОтбора = ЖурналыДокументов.Взаимодействия.ПолучитьМакет("ИерархияВзаимодействийКонтакт");
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтбора));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаОтбора.НастройкиПоУмолчанию);
	
	Если ОтборПоПредмету Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(КомпоновщикНастроек.Настройки.Отбор,
			"Предмет", ВидСравненияКомпоновкиДанных.Равно, ПредметДляОтбора);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Контакт",Контакт);
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Интервал",Интервал);
	
	ОтборНастройщикаКомпоновок = КомпоновщикНастроек.Настройки.Отбор;
	
	Если ТолькоПочта Тогда
		
		СписокТипыПрочиеВзаимодействия = Новый СписокЗначений;
		СписокТипыПрочиеВзаимодействия.Добавить(Тип("ДокументСсылка.Встреча"));
		СписокТипыПрочиеВзаимодействия.Добавить(Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
		СписокТипыПрочиеВзаимодействия.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип", ВидСравненияКомпоновкиДанных.НеВСписке, СписокТипыПрочиеВзаимодействия);
		
	КонецЕсли;
	
	// Быстрый отбор "Ответственный".
	Если НЕ Ответственный.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,"Ответственный",
			ВидСравненияКомпоновкиДанных.Равно, Ответственный);
	КонецЕсли;
	
	// Быстрый отбор "Статус"
	Если Статус = "КРассмотрению" Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Рассмотрено", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"РассмотретьПосле", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ТекущаяДатаСеанса());
	ИначеЕсли Статус = "Отложенные" Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Рассмотрено", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"РассмотретьПосле", ВидСравненияКомпоновкиДанных.Заполнено,);
	ИначеЕсли Статус = "Рассмотренные" Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Рассмотрено" ,ВидСравненияКомпоновкиДанных.Равно, Истина);
	КонецЕсли;
	
	// Быстрый отбор "Тип взаимодействия".
	Если ТипВзаимодействия = "ВсеПисьма" И Не ТолькоПочта Тогда
		
		СписокТипыПисьма = Новый СписокЗначений;
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.ВСписке,СписокТипыПисьма);
		
	ИначеЕсли ТипВзаимодействия = "ВходящиеПисьма" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ИначеЕсли ТипВзаимодействия = "ПисьмаЧерновики" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления",ВидСравненияКомпоновкиДанных.Равно,Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"СтатусИсходящегоПисьма", ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
		
	ИначеЕсли ТипВзаимодействия = "ИсходящиеПисьма" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления",ВидСравненияКомпоновкиДанных.Равно,Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"СтатусИсходящегоПисьма", ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
		
	ИначеЕсли ТипВзаимодействия = "Отправленные" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, "СтатусИсходящегоПисьма",
			ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
		
	ИначеЕсли ТипВзаимодействия = "УдаленныеПисьма" Тогда
		
		СписокТипыПисьма = Новый СписокЗначений;
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип", ВидСравненияКомпоновкиДанных.ВСписке, СписокТипыПисьма);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ИначеЕсли ТипВзаимодействия = "Встречи" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип", ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.Встреча"));
		
	ИначеЕсли ТипВзаимодействия = "ЗапланированныеВзаимодействия" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип", ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
		
	ИначеЕсли ТипВзаимодействия = "ТелефонныеЗвонки" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.ТелефонныйЗвонок"));
		
	ИначеЕсли ТипВзаимодействия = "ИсходящиеЗвонки" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Входящий",ВидСравненияКомпоновкиДанных.Равно,Ложь);
		
	ИначеЕсли ТипВзаимодействия = "ВходящиеЗвонки" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Входящий",ВидСравненияКомпоновкиДанных.Равно,Истина);
		
	ИначеЕсли ТипВзаимодействия = "СообщенияSMS" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.СообщениеSMS"));
		
	КонецЕсли;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаОтбора, КомпоновщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоВзаимодействий");
	ДеревоОбъект.Строки.Очистить();
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений =
		Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ДеревоОбъект);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоВзаимодействий");
	
	ШаблонЗаголовка = НСтр("ru = 'Тип взаимодействий: %1'");
	ПредставлениеТипа = ВзаимодействияКлиентСервер.СписокОтборовПоТипуВзаимодействий(ТолькоПочта).НайтиПоЗначению(ТипВзаимодействия).Представление;
	Элементы.ДеревоТипВзаимодействия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеТипа);
	Для Каждого ЭлементПодменю Из Элементы.ДеревоТипВзаимодействия.ПодчиненныеЭлементы Цикл
		Если ЭлементПодменю.Имя = ("УстановитьОтборТипВзаимодействия_ДеревоТипВзаимодействия_" + ТипВзаимодействия) Тогда
			ЭлементПодменю.Пометка = Истина;
		Иначе
			ЭлементПодменю.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоВзаимодействийКлиент()

	ЗаполнитьДеревоВзаимодействий();
	РазвернутьВсеСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()

	Для каждого СтрокаВерхнегоУровня Из ДеревоВзаимодействий.ПолучитьЭлементы() Цикл
		Элементы.ДеревоВзаимодействий.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПометкиУдаленияВДереве(ЗНАЧ ВыделенныеСтроки,СниматьПометку);
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки =ДеревоВзаимодействий.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.ПометкаУдаления = СниматьПометку Тогда
			ВзаимодействиеОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
			ВзаимодействиеОбъект.УстановитьПометкуУдаления(Не СниматьПометку);
			ДанныеСтроки.ПометкаУдаления = НЕ ДанныеСтроки.ПометкаУдаления;
			ДанныеСтроки.НомерКартинки = ?(СниматьПометку,
			                               ДанныеСтроки.НомерКартинки - ?(ДанныеСтроки.Рассмотрено,5,10),
			                               ДанныеСтроки.НомерКартинки + ?(ДанныеСтроки.Рассмотрено,5,10));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

// Получает массив, который передается в качестве параметра запроса при получении взаимодействий по контакту.
//
// Параметры:
//  Контакт  - Ссылка - контакт, для которого необходимо выполнить поиск связанных контактов. 
//
// Возвращаемое значение:
//  Массив
//
&НаСервере
Функция ПараметрКонтактВЗависимостиОтТипа(Контакт)
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	ЕстьДополнительныеТаблицы = Ложь;
	ТекстЗапроса = "";
	ИмяТаблицыКонтакта = Контакт.Метаданные().Имя;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = ИмяТаблицыКонтакта Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникКонтакт.Ссылка КАК Контакт
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК СправочникКонтакт
			|ГДЕ
			|	СправочникКонтакт.Ссылка = &Контакт";
			
			Связь = ЭлементМассиваОписания.Связь;
			
			Если НЕ ПустаяСтрока(Связь) Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|   
				|ВЫБРАТЬ
				|	СправочникКонтакт.Ссылка 
				|ИЗ
				|	Справочник." + Лев(Связь,СтрНайти(Связь,".")-1) + " КАК СправочникКонтакт
				|ГДЕ
				|	СправочникКонтакт." + Прав(Связь,СтрДлина(Связь) - СтрНайти(Связь,".")) + " = &Контакт"; 
				
				ЕстьДополнительныеТаблицы = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементМассиваОписания.ИмяВладельца = ИмяТаблицыКонтакта Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СправочникКонтакт.Ссылка
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК СправочникКонтакт
			|ГДЕ
			|	СправочникКонтакт.Владелец = &Контакт";
			
			ЕстьДополнительныеТаблицы = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) ИЛИ (НЕ ЕстьДополнительныеТаблицы) Тогда
		Возврат Новый Массив;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Контакт",Контакт);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Новый Массив;
		Иначе
			Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоКонтакту()

	//EXTCODE Шумилин Сергей 25.10.2017 {{ --->
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;	
	КонецЕсли;
	//EXTCODE Шумилин Сергей 25.10.2017 <--- }} 	
	
	Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	КонтактыВзаимодействий.Взаимодействие КАК Ссылка
			|ИЗ
			|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
			|		ПО Взаимодействия.Ссылка = КонтактыВзаимодействий.Взаимодействие
			|ГДЕ
			|	КонтактыВзаимодействий.Контакт В(&Контакт)");
			
	МассивПараметрКонтакт = ПараметрКонтактВЗависимостиОтТипа(Контакт);
	Если МассивПараметрКонтакт.Количество() = 0 Тогда
		МассивПараметрКонтакт.Добавить(Контакт);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контакт",МассивПараметрКонтакт);
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(
	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"Ссылка",СписокОтбора,ВидСравненияКомпоновкиДанных.ВСписке,,Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПредмету()

	ОтборПоПредмету = Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Предмет",
			ПредметДляОтбора,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПометкеНаУдалениеПослеЗавершения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеПометкиУдаленияВДереве(Элементы.ДеревоВзаимодействий.ВыделенныеСтроки, ДополнительныеПараметры.ЕстьПомеченныеНаУдаление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДатыОтложитьРассмотрениеПослеЗавершения(ВведеннаяДата, ДополнительныеПараметры) Экспорт

	Если ВведеннаяДата <> Неопределено Тогда
		
		ВыполненаЗамена = Ложь;
		ОтложитьРассмотрение(ВведеннаяДата,ВыполненаЗамена);
		
		Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
			
			Если ВыполненаЗамена Тогда
				Элементы.Список.Обновить();
			КонецЕсли;
			
		Иначе
			
			Если ВыполненаЗамена Тогда
				РазвернутьВсеСтрокиДерева();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборИнтервалаЗакрытие(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод <> Неопределено Тогда
		Интервал = ВыбранныйПериод;
		ЗаполнитьДеревоВзаимодействийКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаСервер()
	
	Взаимодействия.ОбработатьПодменюОтборПоТипуВзаимодействий(ЭтотОбъект);
	
	ВзаимодействияКлиентСервер.ПриИзмененииОтбораТипВзаимодействий(ЭтотОбъект, ТипВзаимодействия);
	
КонецПроцедуры

//EXTCODE Шумилин Сергей 26.09.2017 {{ --->
&НаСервере
Процедура УстановитьОтборыДляРабочегоСтолаМенеджера(ПараметрыОтбора, Ключ = Ложь)     // Юкаев Роман 20171225 ()
	
	//++ Юкаев Роман 20171225 (
	//Удаеление установленных отборов (Форма открывается повторно)
	Если Ключ Тогда
		МассивЭлементовКУдалению = Новый Массив;
		Для Каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Для Каждого ЭлементГруппы Из ЭлементОтбора.Элементы Цикл
					ЭлементГруппы.Использование = Ложь;
				КонецЦикла;
			Иначе
				МассивЭлементовКУдалению.Добавить(ЭлементОтбора.ЛевоеЗначение);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МассивЭлементовКУдалению Цикл
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, Элемент);
		КонецЦикла;
	КонецЕсли;
	//-- Юкаев Роман 20171225 )
	
	Если ПараметрыОтбора.Свойство("УстанавливатьОтборАктуальныеВзаимодействия") Тогда
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Запланировано");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.Использование 	= Истина;
		КонецЦикла;
		
		//Если ПараметрыОтбора.Свойство("Ответственный") Тогда
		//	//++ Юкаев Роман 20180110 ( //
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//	//-- Юкаев Роман 20180110 )
		//	Элементы.ГруппаФильтры.Видимость = Ложь;	
		//КонецЕсли;
		//
		//Если ПараметрыОтбора.Свойство("Автор") Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Автор", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);			
		//КонецЕсли;
		
		//<813517>, Басаргин (15.05.2018) {
		Если ПараметрыОтбора.Свойство("Ответственный")
			И ПараметрыОтбора.Свойство("Автор") Тогда
			Элементы.ГруппаФильтры.Видимость = Ложь;	
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "АвторОтветственный");
			Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				ЭлементОтбора.Использование = Истина;
			КонецЦикла;	
			Если ПараметрыОтбора.Свойство("Ответственный") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);			
			КонецЕсли;
			Если ПараметрыОтбора.Свойство("Автор") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Автор", ПараметрыОтбора.Автор, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);			
			КонецЕсли;
		КонецЕсли;		
		//<813517> }
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДатаРассмотренияДо", КонецДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДатаРассмотренияПосле", НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.БольшеИлиРавно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		////++ Юкаев Роман 20180110 ( //
		//Если ПараметрыОтбора.Свойство("Проект") Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проект", ПараметрыОтбора.Проект, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//КонецЕсли;
		////-- Юкаев Роман 20180110 )
		
		//ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, "ГруппаРассмотретьПосле", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "РассмотретьПосле", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(ТекущаяДата()), , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "РассмотретьПосле",  ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(ТекущаяДата()), , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);		
	ИначеЕсли ПараметрыОтбора.Свойство("УстанавливатьОтборПросроченныеВзаимодействия") Тогда
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Запланировано");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "РассмотретьПосле",	НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.Меньше, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);	
		//++ Юкаев Роман 20180110 ( //
		//Если ПараметрыОтбора.Свойство("Проект") Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проект", ПараметрыОтбора.Проект, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//КонецЕсли;
		//
		//Если ПараметрыОтбора.Свойство("Ответственный") Тогда
		//	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Автор", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//	Элементы.ГруппаФильтры.Видимость = Ложь;	
		//КонецЕсли;
		//-- Юкаев Роман 20180110 )
		
		//<813517>, Басаргин (15.05.2018) {
		Если ПараметрыОтбора.Свойство("Ответственный")
			И ПараметрыОтбора.Свойство("Автор") Тогда
			Элементы.ГруппаФильтры.Видимость = Ложь;	
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "АвторОтветственный");
			Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				ЭлементОтбора.Использование = Истина;
			КонецЦикла;	
			Если ПараметрыОтбора.Свойство("Ответственный") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);			
			КонецЕсли;
			Если ПараметрыОтбора.Свойство("Автор") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Автор", ПараметрыОтбора.Автор, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);			
			КонецЕсли;
		КонецЕсли;	
		//<813517> }			
		
	ИначеЕсли ПараметрыОтбора.Свойство("УстанавливатьОтборЗавершенныеВзаимодействия") Тогда		
		
		//Если ПараметрыОтбора.Свойство("Ответственный") Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);							
		//	Элементы.ГруппаФильтры.Видимость = Ложь;	
		//КонецЕсли;	
		
		//<813517>, Басаргин (15.05.2018) {
		Если ПараметрыОтбора.Свойство("Ответственный") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПользователиКлиентСервер.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			Элементы.ГруппаФильтры.Видимость = Ложь;
			
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "АвторОтветственный");
			Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				ЭлементОтбора.Использование = Истина;
			КонецЦикла;		
			
		КонецЕсли;		
		//<813517> }		
		
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Завершено");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЦикла;
		
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Отменено");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЦикла;
		
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Запланировано");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЦикла;		
		////++ Юкаев Роман 20180110 ( //
		//Если ПараметрыОтбора.Свойство("Проект") Тогда
		//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проект", ПараметрыОтбора.Проект, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//КонецЕсли;
		////-- Юкаев Роман 20180110 )
		//ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы, "ГруппаРассмотретьПосле", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "ДатаОкончанияДо", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(ТекущаяДата()), , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "ДатаОкончанияПосле",  ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(ТекущаяДата()), , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);		
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДатаОкончанияДо", КонецДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДатаОкончанияПосле", НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.БольшеИлиРавно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);						
	КонецЕсли;
	
	//++ Юкаев Роман 20171220 ( //Задача 750934
	//Если ПараметрыОтбора.Свойство("ОтборДляСтаршегоМенеджера") Тогда
	//	УстановитьОтборыДляРабочегоСтолаСтаршегоМенеджера(ПараметрыОтбора);
	//Иначе
	//-- Юкаев Роман 20171220 )
		Если НЕ ПараметрыОтбора.Свойство("УстанавливатьОтборЗавершенныеВзаимодействия")
			 И НЕ ПараметрыОтбора.Свойство("УстанавливатьОтборПросроченныеВзаимодействия")
			 И НЕ ПараметрыОтбора.Свойство("УстанавливатьОтборАктуальныеВзаимодействия")
				И ПараметрыОтбора.Свойство("Ответственный") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);							
			Элементы.ГруппаФильтры.Видимость = Ложь;	
		КонецЕсли;
	//++ Юкаев Роман 20171220 ( //Задача 750934
	//КонецЕсли;
	Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	//-- Юкаев Роман 20171220 )
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработкуРаботаСКлиентами(Команда)
	
	Клиент = Неопределено;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Клиент = ПолучитьКлиентаНаСервере(ТекущиеДанные.Ссылка);	
	КонецЕсли;
	
	Если Клиент <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("ПозиционированиеНаКлиенте", Клиент);
		ОткрытьФорму("Обработка.РаботаСКлиентом.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		
		////<789123>, Басаргин (27.03.2018) {
		//Если ЭтоМенеджерГПТ Тогда
		//	ОткрытьФорму("ОбщаяФорма.РабочийСтолГПТ", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		//Иначе
		//	ОткрытьФорму("Обработка.РаботаСКлиентом.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		//КонецЕсли;	 
		////<789123> }
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлиентаНаСервере(Знач ДокументВзаимодействия)
	
	Если ТипЗнч(ДокументВзаимодействия) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВзаимодействия, "АбонентКонтакт");
	ИначеЕсли ТипЗнч(ДокументВзаимодействия) = Тип("ДокументСсылка.Встреча") Тогда		
		Если ДокументВзаимодействия.Участники.Количество() > 0 
			И ЗначениеЗаполнено(ДокументВзаимодействия.Участники[0].Контакт) Тогда
			Клиент = ДокументВзаимодействия.Участники[0].Контакт
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументВзаимодействия) = Тип("ДокументСсылка.СообщениеSMS") Тогда
		Если ДокументВзаимодействия.Адресаты.Количество() > 0 
			И ЗначениеЗаполнено(ДокументВзаимодействия.Адресаты[0].Контакт) Тогда
			Клиент = ДокументВзаимодействия.Адресаты[0].Контакт
		КонецЕсли;
	КонецЕсли;
	
	Возврат Клиент
	
КонецФункции
//EXTCODE Шумилин Сергей 26.09.2017 <--- }} 

//++ Юкаев Роман 20171220 ( //Задача 750934
&НаСервере
Процедура УстановитьОтборыДляРабочегоСтолаСтаршегоМенеджера(ПараметрыОтбора)
	
	Если Не ПараметрыОтбора.Свойство("Просроченные") Тогда
		Если ПараметрыОтбора.Свойство("Запланировано") Тогда
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Запланировано");
			ДатаДо = "ДатаРассмотренияДо";
			ДатаОт = "ДатаРассмотренияПосле";
		КонецЕсли;
		
		Если ПараметрыОтбора.Свойство("Завершено") Тогда
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Завершено");
			ДатаДо = "ДатаОкончанияДо";
			ДатаОт = "ДатаОкончанияПосле";
		КонецЕсли;
		
		ВидСравнения1 = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ДатаДо, ПараметрыОтбора.ДатаДо, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Иначе
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, , "Запланировано");
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
		ДатаОт = "РассмотретьПосле";
		ВидСравнения1 = ВидСравненияКомпоновкиДанных.Меньше;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Проект") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проект", ПараметрыОтбора.Проект, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ДатаОт, ПараметрыОтбора.ДатаОт, ВидСравнения1, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ПараметрыОтбора.Ответственный, ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Элементы.ГруппаФильтры.Видимость = Ложь;
	
	Если ПараметрыОтбора.Свойство("Заголовок") Тогда
		ЭтаФорма.Заголовок = ПараметрыОтбора.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Если ТипЗнч(КонтекстВыбора) = Тип("Структура") Тогда
		Если КонтекстВыбора.Свойство("ОтборДляМенеджераФилиала") Тогда
			ТипВзаимодействия = "Все";
		КонецЕсли;
		
		УстановитьОтборыДляРабочегоСтолаМенеджера(КонтекстВыбора, Истина);
	КонецЕсли;
	
КонецПроцедуры
//-- Юкаев Роман 20171220 )

#КонецОбласти
