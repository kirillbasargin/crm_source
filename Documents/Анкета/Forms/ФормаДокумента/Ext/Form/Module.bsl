
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Для предотвращения открытия документа "Анкета" другими внешними пользователями.
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.Респондент <> ВнешниеПользователи.ПолучитьОбъектАвторизацииВнешнегоПользователя() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭтоСеансОбычногоПользователя = Истина;
	КонецЕсли;
	
	ПозиционированиеНаРазделе = Ложь;
	
	//<590625>, Басаргин (21.12.2016) {
	//Объект.Опрос = Документы.НазначениеОпросов.НайтиПоРеквизиту("Наименование", "опрос");
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Опрос = ПолучитьАктуальныйОпрос();	
	КонецЕсли;
	//<590625> }
	
	Если НЕ Объект.Опрос.Пустая() Тогда
		
		РеквизитыОпрос = ПолучитьЗначенияРеквизитовНазначениеОпроса(Объект.Опрос);
		УстановитьЗначенияРеквизитовСогласноОпросу(РеквизитыОпрос);
		
		Если Не ШаблонАнкеты.Пустая() Тогда
			
			Если Параметры.Свойство("ТолькоФормаЗаполнения") Тогда
				АвтоЗаголовок = Ложь;
				УстановитьЗаголовкиНадписей(РеквизитыОпрос);
			КонецЕсли;
			
			Анкетирование.УстановитьЭлементДереваРазделовАнкетыВступлениеЗаключение(ДеревоРазделов,"Вступление");
			Анкетирование.ЗаполнитьДеревоРазделов(ЭтотОбъект,ДеревоРазделов);
			Анкетирование.УстановитьЭлементДереваРазделовАнкетыВступлениеЗаключение(ДеревоРазделов,"Заключение");
			АнкетированиеКлиентСервер.СформироватьНумерациюДерева(ДеревоРазделов,Истина);
			
			Если (НЕ Объект.Проведен) И ЗначениеЗаполнено(Объект.РедактируемыйРаздел) Тогда
				
				Если ТипЗнч(Объект.РедактируемыйРаздел) = Тип("СправочникСсылка.ВопросыШаблонаАнкеты") Тогда
					
					НомерТекущегоРаздела = АнкетированиеКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоРазделов,Объект.РедактируемыйРаздел,"Ссылка",Истина);
					
				Иначе
					
					НомерТекущегоРаздела = АнкетированиеКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоРазделов,Объект.РедактируемыйРаздел,"ТипСтроки",Истина);
				
				КонецЕсли;
				
				Если НомерТекущегоРаздела >= 0 Тогда
				
					Элементы.ДеревоРазделов.ТекущаяСтрока = НомерТекущегоРаздела;
					ПостроениеФормыСогласноРаздела();
					ПозиционированиеНаРазделе = Истина;
					
				КонецЕсли;
			
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредыдущийРазделПодвал.Видимость = Ложь;
	Элементы.СледующийРазделПодвал.Видимость  = Ложь;
	Если Не ПозиционированиеНаРазделе Тогда
		АнкетированиеКлиентСервер.ПереключитьВидимостьГруппТелаАнкеты(ЭтотОбъект, Истина);
	КонецЕсли;
	
	ДействияВЗависимостиОтВидаФормы();
	
	Элементы.ГруппаДеревоРазделов.Видимость         = Ложь;
	ЗаголовокКомандаРазделы = НСтр("ru = 'Показать разделы'");
	Элементы.СкрытьПоказатьДеревоРазделов.Заголовок         = ЗаголовокКомандаРазделы;
	Элементы.СкрытьПоказатьДеревоРазделовДокумент.Заголовок = ЗаголовокКомандаРазделы;
	Элементы.ДекорацияОжиданиеЭлементы.Ширина       = 45;
	
	//<590625>, Басаргин (20.12.2016) {
	Элементы.ГруппаТелоАнкеты.ТолькоПросмотр          = Ложь;
	Элементы.ГруппаОсновныеРеквизиты.ТолькоПросмотр   = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	НЕ Банки.ПометкаУдаления
		|	И НЕ Банки.ИмяМакетаАнкеты = """"";
		
	РезультатЗапроса = Запрос.Выполнить(); 	
	Выборка = РезультатЗапроса.Выбрать();   //Выборка = Справочники.Банки.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СписокИпотечныхБанков.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
			СписокИпотечныхБанков.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если ДеревоРазделов.ПолучитьЭлементы().Количество() > 1 Тогда
		НомерТекущегоРаздела = ДеревоРазделов.ПолучитьЭлементы()[1].ПолучитьИдентификатор(); 
		Если НомерТекущегоРаздела >= 0 Тогда
			Элементы.ДеревоРазделов.ТекущаяСтрока  = НомерТекущегоРаздела;			
			ПостроениеФормыСогласноРаздела();
			ПозиционированиеНаРазделе = Истина;		
		КонецЕсли;
	КонецЕсли;
	//РеквизитФормыВЗначение("ДеревоРазделов");
	//РеквизитФормыВЗначение("ДеревоРазделов").Строки[1].ПолучитьИдентификатор()
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Объект.ДатаРедактирования = ТекущаяДата();
		//Объект.Опрос = Документы.НазначениеОпросов.НайтиПоРеквизиту("Наименование", "опрос");
		Объект.Опрос = ?(ЗначениеЗаполнено(Объект.Опрос), Объект.Опрос, ПолучитьАктуальныйОпрос());
	Иначе
		Элементы.ГруппаДеревоРазделов.Видимость         = Истина;
		Элементы.ДекорацияОжиданиеЭлементы.Ширина       = ?(Элементы.ГруппаДеревоРазделов.Видимость,20,45);
		ЗаголовокКомандаРазделы = ?(Элементы.ГруппаДеревоРазделов.Видимость,НСтр("ru = 'Скрыть разделы'"),НСтр("ru = 'Показать разделы'"));
		Элементы.СкрытьПоказатьДеревоРазделов.Заголовок         = ЗаголовокКомандаРазделы;
		Элементы.СкрытьПоказатьДеревоРазделовДокумент.Заголовок = ЗаголовокКомандаРазделы;		
	КонецЕсли;
	//<590625> }
	
КонецПроцедуры

//<590625>, Басаргин (20.12.2016) {
&НаСервере
Функция ПолучитьАктуальныйОпрос()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	НазначениеОпросов.Ссылка
	               |ИЗ
	               |	Документ.НазначениеОпросов КАК НазначениеОпросов
	               |ГДЕ
	               |	НазначениеОпросов.Проведен
	               |	И НЕ НазначениеОпросов.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НазначениеОпросов.МоментВремени УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
//<590625> }

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДеревоРазделов.ТекущаяСтрока = НомерТекущегоРаздела;
	УправлениеДоступностьюКнопкиНавигацияРазделов();
	
	Если (Не ЭтотОбъект.ТолькоПросмотр) Тогда
		УправлениеДоступностьюПодчиненныеВопросы(Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Элементы.ГруппаТелоАнкеты.ТолькоПросмотр Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РеспондентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//<590625>, Басаргин (21.12.2016) {
	//СтандартнаяОбработка = Ложь;
	//
	//МассивОтбора = Новый Массив;
	//Если ОтборРеспондентов.Количество() > 0 Тогда
	//	МассивОтбора.Добавить(АнкетированиеКлиент.СоздатьСтруктуруПараметраОтбора(Тип("ЭлементОтбораКомпоновкиДанных"),"Ссылка",ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,ОтборРеспондентов));
	//КонецЕсли;

	//ОткрытьФорму(ИмяМетаданныхРеспондент + ".ФормаВыбора",Новый Структура("МассивОтбора",МассивОтбора),Элемент);
	//<590625> }
	
КонецПроцедуры

// Обработчик события ПриИзменении для вопросов с условием.
&НаКлиенте
Процедура Подключаемый_ПриИзмененииВопросовСУсловием(Элемент)

	УправлениеДоступностьюПодчиненныеВопросы();

КонецПроцедуры

// Обработчик события при изменении для простых и табличных вопросов.
&НаКлиенте
Процедура Подключаемый_ПриИзмененииВопроса(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик начало выбора текстовых ячеек табличных вопросов.
&НаКлиенте
Процедура Подключаемый_НачалоВыбораТекстовыхЯчеекТабличныхВопросов(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = "";
	
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
	ОбработчикОповещения = Новый ОписаниеОповещения("РедактированиеМногострочногоТекстаПриОкончании", ЭтотОбъект, ДополнительныеПараметры); 
	//<590625>, Басаргин (26.12.2016) {
	//ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(ОбработчикОповещения,
	//                                                                       Элемент.ТекстРедактирования);	
	ПоказатьФормуРедактированияМногострочногоТекста(ОбработчикОповещения,
	                                                                       Элемент.ТекстРедактирования);		
	//<590625> }
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазделовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРазделов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьПостроениеФормыЗаполнения();
	УправлениеДоступностьюКнопкиНавигацияРазделов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//<590625>, Басаргин (26.12.2016) {
	//ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	//<590625> }
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФормаЗаполненияЗаписать(Команда)
	
	Отказ = ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписиДокумента.Запись);
	
	Если НЕ Отказ Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение'"),
		,
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
		Оповестить("Запись_Анкета",Новый Структура,Объект.Ссылка);
		
		Прочитать();
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияПровестиЗакрыть(Команда)
	
	Отказ = Ложь;
	
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОПринятииАнкетыПослеЗавершения", ЭтотОбъект);
	ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,
	                 НСтр("ru='Ваша анкета будет принята. 
	                 //|Дальнейшее заполнение анкеты будет невозможно
	                 |Продолжить?'")
	                 ,РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьДеревоРазделов(Команда)

	ИзменитьВидимостьДеревоРазделов();

КонецПроцедуры 

&НаКлиенте
Процедура СледующийРаздел(Команда)
	
	ИзменитьРаздел("Вперед");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийРаздел(Команда)
	
	ИзменитьРаздел("Назад");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРаздела(Команда)
	
	ВыполнитьПостроениеФормыЗаполнения();
	УправлениеДоступностьюКнопкиНавигацияРазделов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Установка значений реквизитов формы.

// Устанавливает значения реквизитов формы заполнения, согласно данным ранее ответам.
//
&НаСервере
Процедура УстановитьЗначенияРеквизитовФормыЗаполненияРаздела()
	
	ТаблицаВопросовРаздела.Выгрузить().ВыгрузитьКолонку("ВопросШаблона");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВнешнийИсточник.Вопрос КАК Вопрос,
	|	ВнешнийИсточник.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	ВнешнийИсточник.НомерЯчейки КАК НомерЯчейки,
	|	ВнешнийИсточник.Ответ КАК Ответ,
	|	ВнешнийИсточник.ОткрытыйОтвет КАК ОткрытыйОтвет
	|ПОМЕСТИТЬ ТаблицаОтветов
	|ИЗ
	|	&ВнешнийИсточник КАК ВнешнийИсточник
	|ГДЕ
	|	ВнешнийИсточник.Вопрос В(&ВопросыРаздела)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтветов.Вопрос КАК Вопрос,
	|	ТаблицаОтветов.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	ТаблицаОтветов.НомерЯчейки КАК НомерЯчейки,
	|	ТаблицаОтветов.Ответ КАК Ответ,
	|	ТаблицаОтветов.ОткрытыйОтвет КАК ОткрытыйОтвет
	|ИЗ
	|	ТаблицаОтветов КАК ТаблицаОтветов
	|ИТОГИ ПО
	|	Вопрос";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",Объект.Состав.Выгрузить());
	Запрос.УстановитьПараметр("ВопросыРаздела",ТаблицаВопросовРаздела.Выгрузить().ВыгрузитьКолонку("ВопросШаблона"));
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			ВыборкаВопрос = Выборка.Выбрать();
			УстановитьЗначениеРеквизита(Выборка.Вопрос,ВыборкаВопрос);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Анкетирование.УстановитьЗначенияРеквизитовВариантОтветаОдинИз(ЭтотОбъект);
	
КонецПроцедуры

// Анализирует тип вопроса и вызывает соответствующие процедуры для установки значений реквизита.
//
// Параметры:
//  ВопросШаблона  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//                 для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос  - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                 на вопрос шаблона анкеты.
//  ДеревоАнкетыСервер  - ДеревоЗначений - дерево значений, содержащее шаблон анкеты.
&НаСервере
Процедура УстановитьЗначениеРеквизита(ВопросШаблона,ВыборкаВопрос)
	
	НайденныеСтроки = ТаблицаВопросовРаздела.НайтиСтроки(Новый Структура("ВопросШаблона",ВопросШаблона));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		Если НайденнаяСтрока.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Табличный Тогда
			УстановитьЗначениеРеквизитаТабличныйВопрос(ВопросШаблона,ВыборкаВопрос,НайденнаяСтрока);
		Иначе
			УстановитьЗначениеРеквизитаПростойВопрос(ВопросШаблона,ВыборкаВопрос,НайденнаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает значения реквизитов простого вопроса.
//
// Параметры:
//  Вопрос  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//                 для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос  - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                 на вопрос шаблона анкеты.
//  СтрокаДерева  - СтрокаДереваЗначений - строка дерева значений, содержащая данные вопроса шаблона анкеты.
&НаСервере
Процедура УстановитьЗначениеРеквизитаПростойВопрос(Вопрос,ВыборкаВопрос,СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	
	Если СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		ВариантыОтветовНаВопрос = Анкетирование.ПолучитьВариантыОтветовНаВопрос(СтрокаДерева.ЭлементарныйВопрос,ЭтотОбъект);
		
		Пока ВыборкаВопрос.Следующий() Цикл
			
			ПараметрыОтвета = НайтиОтветВМассиве(ВыборкаВопрос.Ответ,ВариантыОтветовНаВопрос);
			
			Если ПараметрыОтвета <> Неопределено Тогда
				ЭтотОбъект[ИмяВопроса + "_Реквизит_" + ПараметрыОтвета.ПорядковыйНомерРеквизита] = Истина; 
				Если ПараметрыОтвета.ТребуетОткрытогоОтвета Тогда
					
					ЭтотОбъект[ИмяВопроса + "_Комментарий_" + ПараметрыОтвета.ПорядковыйНомерРеквизита] = ВыборкаВопрос.ОткрытыйОтвет;
					
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Если ВыборкаВопрос.Следующий() Тогда
					
			Если СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
				
				ЭтотОбъект[ИмяВопроса] = ВыборкаВопрос.ОткрытыйОтвет;
				
			Иначе
				
				ЭтотОбъект[ИмяВопроса] = ВыборкаВопрос.Ответ;
				
				Если (СтрокаДерева.ТребуетсяКомментарий) Тогда
					ЭтотОбъект[ИмяВопроса + "_Комментарий"] = ВыборкаВопрос.ОткрытыйОтвет;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Анализирует тип табличного вопроса и вызывает соответствующие процедуры для установки значений реквизитов.
//
// Параметры:
//  Вопрос  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//                 для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос  - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                 на вопрос шаблона анкеты.
//  СтрокаДерева  - СтрокаДереваЗначений - строка дерева значений, содержащая данные вопроса шаблона анкеты.
&НаСервере
Процедура УстановитьЗначениеРеквизитаТабличныйВопрос(Вопрос,ВыборкаВопрос,СтрокаДерева)
	
	Если СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.Составной Тогда
		
		УстановитьЗначенияРеквизитаТабличныйВопросСоставной(Вопрос,ВыборкаВопрос,СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВСтроках Тогда
		
		УстановитьЗначенияРеквизитаТабличныйВопросОтветыВСтроках(Вопрос,ВыборкаВопрос,СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВКолонках Тогда
		
		УстановитьЗначенияРеквизитаТабличныйВопросОтветыВКолонках(Вопрос,ВыборкаВопрос,СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВСтрокахИКолонках Тогда
		
		УстановитьЗначенияРеквизитаТабличныйВопросОтветыВСтрокахКолонках(Вопрос,ВыборкаВопрос,СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения реквизитов составного табличного вопроса.
//
// Параметры:
//  Вопрос  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//                 для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос  - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                 на вопрос шаблона анкеты.
//  СтрокаДерева  - СтрокаДереваЗначений - строка дерева значений, содержащая данные вопроса шаблона анкеты.
&НаСервере
Процедура УстановитьЗначенияРеквизитаТабличныйВопросСоставной(Вопрос,ВыборкаВопрос,СтрокаДерева);

	ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	ИмяТаблицы = ИмяВопроса + "_Таблица";
	Таблица    = РеквизитФормыВЗначение(ИмяТаблицы);
	
	МассивВопросы = СтрокаДерева.СоставТабличногоВопроса.Выгрузить().ВыгрузитьКолонку("ЭлементарныйВопрос");
	
	Пока ВыборкаВопрос.Следующий() Цикл
		
		Если ВыборкаВопрос.НомерЯчейки > Таблица.Количество() Тогда
			ДобавитьСтрокиВТаблицу(Таблица,ВыборкаВопрос.НомерЯчейки - Таблица.Количество());
		КонецЕсли;
		
		НомерВопросаВМассиве = МассивВопросы.Найти(ВыборкаВопрос.ЭлементарныйВопрос);
		Если НомерВопросаВМассиве <> Неопределено Тогда
			Таблица[ВыборкаВопрос.НомерЯчейки - 1][НомерВопросаВМассиве] = ВыборкаВопрос.Ответ;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Таблица,ИмяТаблицы);

КонецПроцедуры

// Устанавливает значения реквизитов табличного вопроса с предопределенными ответами в строках.
//
// Параметры:
//  Вопрос  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//                 для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос  - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                 на вопрос шаблона анкеты.
//  СтрокаДерева  - СтрокаДереваЗначений - строка дерева значений, содержащая данные вопроса шаблона анкеты.
&НаСервере
Процедура УстановитьЗначенияРеквизитаТабличныйВопросОтветыВСтроках(Вопрос,ВыборкаВопрос,СтрокаДерева);
	
	ИмяВопроса          = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	ИмяТаблицы          = ИмяВопроса + "_Таблица";
	ИмяКолонкиБезНомера = ИмяТаблицы + "_Колонка_";
	Таблица             = РеквизитФормыВЗначение(ИмяТаблицы);
	
	МассивВопросы = СтрокаДерева.СоставТабличногоВопроса.Выгрузить().ВыгрузитьКолонку("ЭлементарныйВопрос");
	
	Пока ВыборкаВопрос.Следующий() Цикл
		
		НомерВопросаВМассиве = МассивВопросы.Найти(ВыборкаВопрос.ЭлементарныйВопрос);
		Если (НомерВопросаВМассиве <> Неопределено) И (ВыборкаВопрос.НомерЯчейки <= Таблица.Количество()) Тогда
			Таблица[ВыборкаВопрос.НомерЯчейки - 1][ИмяКолонкиБезНомера + Строка(НомерВопросаВМассиве+1)] = ВыборкаВопрос.Ответ;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Таблица,ИмяТаблицы);
	
КонецПроцедуры

// Устанавливает значения реквизитов табличного вопроса с предопределенными ответами в колонках.
//
// Параметры:
//  Вопрос  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//                 для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос  - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                 на вопрос шаблона анкеты.
//  СтрокаДерева  - СтрокаДереваЗначений - строка дерева значений, содержащая данные вопроса шаблона анкеты.
&НаСервере
Процедура УстановитьЗначенияРеквизитаТабличныйВопросОтветыВКолонках(Вопрос,ВыборкаВопрос,СтрокаДерева);
	
	ИмяВопроса          = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	ИмяТаблицы          = ИмяВопроса + "_Таблица";
	ИмяКолонкиБезНомера = ИмяТаблицы + "_Колонка_";
	Таблица             = РеквизитФормыВЗначение(ИмяТаблицы);
	
	МассивВопросы = СтрокаДерева.СоставТабличногоВопроса.Выгрузить().ВыгрузитьКолонку("ЭлементарныйВопрос");
	МассивВопросы.Удалить(0);
	
	Пока ВыборкаВопрос.Следующий() Цикл
		
		НомерВопросаВМассиве = МассивВопросы.Найти(ВыборкаВопрос.ЭлементарныйВопрос);
		Если (НомерВопросаВМассиве <> Неопределено) Тогда
			Если (НомерВопросаВМассиве <= Таблица.Количество()) И (ВыборкаВопрос.НомерЯчейки <= Таблица.Колонки.Количество()) Тогда
				Таблица[НомерВопросаВМассиве][ИмяКолонкиБезНомера + Строка(ВыборкаВопрос.НомерЯчейки + 1)] = ВыборкаВопрос.Ответ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Таблица,ИмяТаблицы);
	
КонецПроцедуры

// Устанавливает значения реквизитов табличного вопроса с предопределенными ответами в строках и колонках.
//
// Параметры:
//  Вопрос  - СправочникСсылка.ВопросыШаблонаАнкет - вопрос шаблона анкеты, 
//            для которого устанавливаются значения реквизитов.
//  ВыборкаВопрос - ВыборкаИзРезультатаЗапроса - выборка, содержащая значения ответов 
//                  на вопрос шаблона анкеты.
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева значений, содержащая данные вопроса шаблона анкеты.
&НаСервере
Процедура УстановитьЗначенияРеквизитаТабличныйВопросОтветыВСтрокахКолонках(Вопрос,ВыборкаВопрос,СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	ИмяТаблицы = ИмяВопроса + "_Таблица";
	ИмяКолонкиБезНомера = ИмяТаблицы + "_Колонка_";
	Таблица = РеквизитФормыВЗначение(ИмяТаблицы);
	КоличествоКолонок = Таблица.Колонки.Количество();
	КоличествоСтрока  = Таблица.Количество();

	ВопросЯчейка = СтрокаДерева.СоставТабличногоВопроса[2].ЭлементарныйВопрос;
	
	Пока ВыборкаВопрос.Следующий() Цикл
		Если ВыборкаВопрос.ЭлементарныйВопрос = ВопросЯчейка Тогда
			НомерКолонки = ?(ВыборкаВопрос.НомерЯчейки%(КоличествоКолонок - 1)=0,КоличествоКолонок - 1,ВыборкаВопрос.НомерЯчейки%(КоличествоКолонок - 1));
			НомерСтроки  = ЦЕЛ((ВыборкаВопрос.НомерЯчейки + ЦЕЛ(ВыборкаВопрос.НомерЯчейки/КоличествоКолонок))/КоличествоКолонок);
			Таблица[НомерСтроки ][ИмяКолонкиБезНомера + Строка(НомерКолонки+1)] = ВыборкаВопрос.Ответ;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Таблица,ИмяТаблицы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Преобразование результатов заполнения анкеты в табличную часть документа.

&НаСервере
Функция ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписи)
	
	ПреобразоватьРезультатыЗаполненияРазделаВТабличнуюЧасть();
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ПроверитьЗаполнениеАнкеты()  Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДатаРедактирования = ТекущаяДатаСеанса();
	ДокументОбъект.Записать(РежимЗаписи);
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Преобразовывает данные в форме заполнения ответы в данные табличной части.
//
&НаСервере
Процедура ПреобразоватьРезультатыЗаполненияРазделаВТабличнуюЧасть()
	
	ТекущийРаздел = ДеревоРазделов.НайтиПоИдентификатору(Элементы.ДеревоРазделов.ТекущаяСтрока);
	Если ТекущийРаздел <> Неопределено Тогда
		 Если ТекущийРаздел.ТипСтроки = "Раздел" Тогда
			Объект.РедактируемыйРаздел = ТекущийРаздел.Ссылка;
		Иначе
			Объект.РедактируемыйРаздел = ТекущийРаздел.ТипСтроки;
		 КонецЕсли;
	КонецЕсли;
	
	ПредыдущийРазделБезВопросов = (ТаблицаВопросовРаздела.Количество() = 0);
	
	Для каждого СтрокаТаблицы Из ТаблицаВопросовРаздела Цикл
		
		// Удаление из табличной части предыдущей информации.
		НайденныеСтроки = Объект.Состав.НайтиСтроки(Новый Структура("Вопрос",СтрокаТаблицы.ВопросШаблона));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.Состав.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.РодительВопрос) Тогда
			НайденныеСтроки = ТаблицаВопросовРаздела.НайтиСтроки(Новый Структура("ВопросШаблона",СтрокаТаблицы.РодительВопрос));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаРодитель = НайденныеСтроки[0];
				Если (НЕ ЭтотОбъект[АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаРодитель.КлючСтроки)] = Истина) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Табличный Тогда
			ЗаполнитьТаблицуОтветовТабличныйВопрос(СтрокаТаблицы);
		Иначе
			 ЗаполнитьОтветПростойВопрос(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
 КонецПроцедуры

// Анализирует тип табличного вопроса и вызывает соответствующую процедуру для 
// получения ответов, данных респондентом на табличный вопрос.
//
// Параметры:
// СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты.
//
&НаСервере
Процедура ЗаполнитьТаблицуОтветовТабличныйВопрос(СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	ИмяТаблицы = ИмяВопроса + "_Таблица";
	Таблица = РеквизитФормыВЗначение(ИмяТаблицы);
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.Составной Тогда
		
		ЗаполнитьОтветыТабличныйВопросСоставной(СтрокаДерева,Таблица);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВСтроках Тогда	
		
		ЗаполнитьОтветыТабличныйВопросОтветыВСтроках(СтрокаДерева,Таблица);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВКолонках Тогда
		
		ЗаполнитьОтветыТабличныйВопросОтветыВКолонках(СтрокаДерева,Таблица);
		
	ИначеЕсли СтрокаДерева.ТипТабличногоВопроса = Перечисления.ТипыТабличныхВопросов.ПредопределенныеОтветыВСтрокахИКолонках Тогда
		
		ЗаполнитьОтветыТабличныйВопросОтветыВСтрокахИКолонках(СтрокаДерева,Таблица);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает ответы, данные респондентом на составной табличный вопрос и аккумулирует их в общей
//  таблице ответов.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты.
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса.
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросСоставной(СтрокаДерева,Таблица)
	
	Для ИндексКолонки = 0 По СтрокаДерева.СоставТабличногоВопроса.Количество()-1 Цикл
		
		Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
			
			Ответ = Таблица[ИндексСтроки][ИндексКолонки];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.СоставТабличногоВопроса[ИндексКолонки].ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на табличный вопрос с предопределенными ответами в строках и 
// аккумулирует их в общей таблице ответов.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты.
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса.
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросОтветыВСтроках(СтрокаДерева,Таблица)
	
	ВопросПерваяКолонка = СтрокаДерева.СоставТабличногоВопроса[0].ЭлементарныйВопрос;
	ИмяКолонкиБезНомера = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки) + "_Таблица_Колонка_";
	
	Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
		
		ЕстьХотяБыОдинОтветУказанныйРеспондентом = ЛОЖЬ;
		
		Для ИндексКолонки = 1 По СтрокаДерева.СоставТабличногоВопроса.Количество()-1 Цикл
		
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + Строка(ИндексКолонки+1)];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				ЕстьХотяБыОдинОтветУказанныйРеспондентом = Истина;
				
				НоваяСтрока                    = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.СоставТабличногоВопроса[ИндексКолонки].ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексСтроки + 1;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЕстьХотяБыОдинОтветУказанныйРеспондентом Тогда
			
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + "1"];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросПерваяКолонка;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексСтроки + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на табличный вопрос с предопределенными ответами в строках и колонках и 
// аккумулирует их в общей таблице ответов.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты.
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса.
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросОтветыВСтрокахИКолонках(СтрокаДерева,Таблица)
	
	ВопросДляСтрок   = СтрокаДерева.СоставТабличногоВопроса[0].ЭлементарныйВопрос;
	ВопросДляКолонок = СтрокаДерева.СоставТабличногоВопроса[1].ЭлементарныйВопрос;
	ВопросДляЯчеек   = СтрокаДерева.СоставТабличногоВопроса[2].ЭлементарныйВопрос;
	
	ОтветыСтроки  = СтрокаДерева.ПредопределенныеОтветы.НайтиСтроки(Новый Структура("ЭлементарныйВопрос",ВопросДляСтрок));
	ОтветыКолонки = СтрокаДерева.ПредопределенныеОтветы.НайтиСтроки(Новый Структура("ЭлементарныйВопрос",ВопросДляКолонок));
	
	ИмяКолонкиБезНомера = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки) + "_Таблица_Колонка_";
	
	Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
		Для ИндексКолонки = 1 По Таблица.Колонки.Количество() - 1 Цикл
			
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + Строка(ИндексКолонки+1)];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НомерЯчейки = ИндексКолонки + ИндексСтроки * (Таблица.Колонки.Количество() - 1);
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросДляСтрок;
				НоваяСтрока.Ответ              = ОтветыСтроки[ИндексСтроки].Ответ;
				НоваяСтрока.НомерЯчейки        = НомерЯчейки;
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросДляКолонок;
				НоваяСтрока.Ответ              = ОтветыКолонки[ИндексКолонки - 1].Ответ;
				НоваяСтрока.НомерЯчейки        = НомерЯчейки;
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = ВопросДляЯчеек;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = НомерЯчейки;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на табличный вопрос с предопределенными ответами в колонках и 
// аккумулирует их в общей таблице ответов.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева шаблона анкеты.
//  Таблица      - ТаблицаЗначений - таблица табличного вопроса.
//
&НаСервере
Процедура ЗаполнитьОтветыТабличныйВопросОтветыВКолонках(СтрокаДерева,Таблица)
	
	ВопросДляКолонок = СтрокаДерева.СоставТабличногоВопроса[0].ЭлементарныйВопрос;
	ИмяКолонкиБезНомера = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки) + "_Таблица_Колонка_";
	
	Для ИндексКолонки = 1 По Таблица.Колонки.Количество() - 1 Цикл
		
		ЕстьХотяБыОдинОтветУказанныйРеспондентом = ЛОЖЬ;
		
		Для ИндексСтроки = 0 По Таблица.Количество() - 1 Цикл
			
			Ответ = Таблица[ИндексСтроки][ИмяКолонкиБезНомера + Строка(ИндексКолонки + 1)];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				ЕстьХотяБыОдинОтветУказанныйРеспондентом = Истина;
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.СоставТабличногоВопроса[ИндексСтроки+1].ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = Ответ;
				НоваяСтрока.НомерЯчейки        = ИндексКолонки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		 Если  ЕстьХотяБыОдинОтветУказанныйРеспондентом Тогда
			
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
			НоваяСтрока.ЭлементарныйВопрос = ВопросДляКолонок;
			НоваяСтрока.Ответ              = СтрокаДерева.ПредопределенныеОтветы[ИндексКолонки - 1].Ответ;
			НоваяСтрока.НомерЯчейки        = ИндексКолонки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает ответы, данные респондентом на простой вопрос и 
// аккумулирует их в общей таблице ответов.
//
// Параметры:
//  СтрокаДерева   - СтрокаДереваЗначений - строка дерева шаблона анкеты.
//
&НаСервере
Процедура ЗаполнитьОтветПростойВопрос(СтрокаДерева)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаДерева.КлючСтроки);
	
	Если СтрокаДерева.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		Ответ = ЭтотОбъект[ИмяВопроса];
		Если ЗначениеЗаполнено(Ответ) Тогда
			
			НоваяСтрока = Объект.Состав.Добавить();
			НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
			НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.ЭлементарныйВопрос;
			Если СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
				НоваяСтрока.ОткрытыйОтвет = Ответ;
			Иначе
				НоваяСтрока.Ответ = Ответ;
				Если СтрокаДерева.ТребуетсяКомментарий Тогда
					НоваяСтрока.ОткрытыйОтвет = ЭтотОбъект[ИмяВопроса + "_Комментарий"];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантыОтветовНаВопрос = Анкетирование.ПолучитьВариантыОтветовНаВопрос(СтрокаДерева.ЭлементарныйВопрос,ЭтотОбъект);
		
		Счетчик = 0;
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			
			Счетчик = Счетчик + 1;
			ИмяРеквизита =  ИмяВопроса + "_Реквизит_" + Счетчик;
			
			Если ЭтотОбъект[ИмяРеквизита] Тогда
				
				НоваяСтрока = Объект.Состав.Добавить();
				НоваяСтрока.Вопрос             = СтрокаДерева.ВопросШаблона;
				НоваяСтрока.ЭлементарныйВопрос = СтрокаДерева.ЭлементарныйВопрос;
				НоваяСтрока.Ответ              = ВариантОтвета.Ответ;
				НоваяСтрока.НомерЯчейки        = Счетчик;
				Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
					НоваяСтрока.ОткрытыйОтвет	= ЭтотОбъект[ИмяВопроса + "_Комментарий_" + Счетчик];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Отвечает за построение формы заполнения.
&НаСервере
Процедура ПостроениеФормыСогласноРаздела()
	
	// Определение выбранного раздела.
	ТекущиеДанныеДеревоРазделов = ДеревоРазделов.НайтиПоИдентификатору(Элементы.ДеревоРазделов.ТекущаяСтрока);
	Если ТекущиеДанныеДеревоРазделов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаТелоАнкеты.ТолькоПросмотр Тогда
		ПреобразоватьРезультатыЗаполненияРазделаВТабличнуюЧасть();
	КонецЕсли;
	НомерТекущегоРаздела = Элементы.ДеревоРазделов.ТекущаяСтрока;
	Анкетирование.ПостроениеФормыЗаполненияПоРазделу(ЭтотОбъект,ТекущиеДанныеДеревоРазделов);
	УстановитьЗначенияРеквизитовФормыЗаполненияРаздела();
	Анкетирование.СформироватьТаблицуПодчиненияВопросов(ЭтотОбъект);
	УстановитьОбработчикСобытияПриИзмененииДляВопросов();
	
	Элементы.ПредыдущийРазделПодвал.Видимость = (ТаблицаВопросовРаздела.Количество() > 0);
	Элементы.СледующийРазделПодвал.Видимость  = (ТаблицаВопросовРаздела.Количество() > 0);
	
	АнкетированиеКлиентСервер.ПереключитьВидимостьГруппТелаАнкеты(ЭтотОбъект, Истина);
	
КонецПроцедуры

// Добавляет пустые элементы в Коллекцию.
//
// Параметры:
//  Таблица    - Коллекция - коллекция в которую добавляются строки.
//  ЧислоСтрок - Число - число добавляемых строк.
//
&НаСервереБезКонтекста
Процедура ДобавитьСтрокиВТаблицу(Коллекция,ЧислоСтрок);

	Для инд = 1 По ЧислоСтрок Цикл
		Коллекция.Добавить();
	КонецЦикла;

КонецПроцедуры

// Проверяет, даны ли ответы на обязательные вопросы.
//
// Возвращаемое значение:
//   Булево   - Истина, в случае если проверка заполнения обязательных ответов закончилась неудачей,
//              Ложь, в обратном случае.
&НаСервере
Функция ПроверитьЗаполнениеАнкеты()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СоставОтветов.Вопрос,
	|	СоставОтветов.ЭлементарныйВопрос,
	|	СоставОтветов.НомерЯчейки,
	|	СоставОтветов.Ответ,
	|	СоставОтветов.ОткрытыйОтвет
	|ПОМЕСТИТЬ СоставОтветов
	|ИЗ
	|	&ВнешнийИсточник КАК СоставОтветов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВопросыБезОтветов.Ссылка
	|ПОМЕСТИТЬ ОбязательныеВопросыБезОтветов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВопросыШаблонаАнкеты.Ссылка КАК Ссылка,
	|		СУММА(ВЫБОР
	|				КОГДА СоставОтветов.Ответ ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК КоличествоОтветов
	|	ИЗ
	|		Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоставОтветов КАК СоставОтветов
	|			ПО (СоставОтветов.Вопрос = ВопросыШаблонаАнкеты.Ссылка)
	|	ГДЕ
	|		ВопросыШаблонаАнкеты.Обязательный
	|		И (НЕ ВопросыШаблонаАнкеты.ПометкаУдаления)
	|		И (НЕ ВопросыШаблонаАнкеты.ЭтоГруппа)
	//<>, Басаргин (16.01.2017) {
	//|		И ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты	
	//<> }
	|		И ВопросыШаблонаАнкеты.РодительВопрос = ЗНАЧЕНИЕ(Справочник.ВопросыШаблонаАнкеты.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВопросыШаблонаАнкеты.Ссылка
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВЫБОР
	|				КОГДА СоставОтветов.Ответ ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) = 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВопросыШаблонаАнкеты.Ссылка,
	|		СУММА(ВЫБОР
	|				КОГДА СоставОтветов.Ответ ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ)
	|	ИЗ
	|		Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоставОтветов КАК СоставОтветов
	|			ПО ВопросыШаблонаАнкеты.Ссылка = СоставОтветов.Вопрос
	|	ГДЕ
	//<>, Басаргин (16.01.2017) {
	//|		ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты И 	
	//<> }	
	|		(НЕ ВопросыШаблонаАнкеты.ПометкаУдаления)
	|		И (НЕ ВопросыШаблонаАнкеты.ЭтоГруппа)
	|		И ВопросыШаблонаАнкеты.РодительВопрос <> ЗНАЧЕНИЕ(Справочник.ВопросыШаблонаАнкеты.ПустаяСсылка)
	|		И ВопросыШаблонаАнкеты.РодительВопрос В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВложенныйЗапрос.Ссылка
	|				ИЗ
	|					(ВЫБРАТЬ
	|						ВопросыШаблонаАнкеты.Ссылка КАК Ссылка,
	|						ЕСТЬNULL(СоставОтветов.Ответ, ЛОЖЬ) КАК Ответ
	|					ИЗ
	|						Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты ЛЕВОЕ СОЕДИНЕНИЕ СоставОтветов КАК СоставОтветов
	|							ПО
	|								ВопросыШаблонаАнкеты.Ссылка = СоставОтветов.Вопрос
	|					ГДЕ
	|						ВопросыШаблонаАнкеты.ТипВопроса = ЗНАЧЕНИЕ(Перечисление.ТипыВопросовШаблонаАнкеты.ВопросСУсловием)
	|						И (НЕ ВопросыШаблонаАнкеты.ПометкаУдаления)
	|						И (НЕ ВопросыШаблонаАнкеты.ЭтоГруппа)
	//<>, Басаргин (16.01.2017) {
	//|						И ВопросыШаблонаАнкеты.Владелец = &ШаблонАнкеты	
	//<> }
	|						И ЕСТЬNULL(СоставОтветов.Ответ, ЛОЖЬ) = ИСТИНА
	|					) КАК ВложенныйЗапрос)
	|		И ВопросыШаблонаАнкеты.Обязательный
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВопросыШаблонаАнкеты.Ссылка
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВЫБОР
	|				КОГДА СоставОтветов.Ответ ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) = 0) КАК ВопросыБезОтветов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВопросыШаблонаАнкеты.Ссылка,
	|	ВопросыШаблонаАнкеты.Формулировка
	|ИЗ
	|	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
	|ГДЕ
	|	ВопросыШаблонаАнкеты.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбязательныеВопросыБезОтветов.Ссылка
	|			ИЗ
	|				ОбязательныеВопросыБезОтветов КАК ОбязательныеВопросыБезОтветов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВопросыШаблонаАнкеты.Ссылка";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",Объект.Состав.Выгрузить());
	Запрос.УстановитьПараметр("ШаблонАнкеты",ШаблонАнкеты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан ответ на вопрос'") + "- "+ СтрЗаменить(Выборка.Ссылка.ПолныйКод(),"/",".") + " " + Выборка.Формулировка);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Находит ответ в массиве содержащем строки таблицы значений.
//
// Параметры:
//  Ответ         - Характеристика.ВопросыДляАнкетирования - ответ, который ищем.
//  МассивОтветов - Массив - массив строк таблицы значений.
//
// Возвращаемое значение:
//   Структура   - в структуре содержатся номер реквизита и признак необходимости открытого ответа.
//
&НаСервереБезКонтекста
Функция НайтиОтветВМассиве(Ответ,МассивОтветов)
	
	СтруктураВозврата = Новый Структура;
	
	Для инд = 1 По МассивОтветов.Количество() Цикл
		
		Если МассивОтветов[инд - 1].Ответ = Ответ Тогда
			
			СтруктураВозврата.Вставить("ПорядковыйНомерРеквизита",инд);
			СтруктураВозврата.Вставить("ТребуетОткрытогоОтвета",МассивОтветов[инд - 1].ТребуетОткрытогоОтвета);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияРеквизитовСогласноОпросу(РеквизитыОпрос)
	
	ВозможностьПредварительногоСохранения = РеквизитыОпрос.ВозможностьПредварительногоСохранения;
	ШаблонАнкеты                          = РеквизитыОпрос.ШаблонАнкеты;
	Вступление                            = ?(ПустаяСтрока(РеквизитыОпрос.Вступление),
	                                         НСтр("ru = 'Нажмите далее для заполнения анкеты.'"),
	                                         РеквизитыОпрос.Вступление);
	Заключение                            = ?(ПустаяСтрока(РеквизитыОпрос.Заключение),
	                                         НСтр("ru = 'Спасибо за то что заполнили анкету.'"),
	                                         РеквизитыОпрос.Заключение);
	
КонецПроцедуры 

// Получает необходимые значения реквизита согласно выбранному опросу.
&НаСервере
Функция ПолучитьЗначенияРеквизитовНазначениеОпроса(Опрос)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НазначениеОпросов.ШаблонАнкеты,
	|	НазначениеОпросов.ТипРеспондентов,
	|	НазначениеОпросов.ВозможностьПредварительногоСохранения,
	|	НазначениеОпросов.Респонденты.(
	|		Ссылка,
	|		НомерСтроки,
	|		Респондент
	|	),
	|	ШаблоныАнкет.Заголовок,
	|	ШаблоныАнкет.Вступление,
	|	ШаблоныАнкет.Заключение
	|ИЗ
	|	Документ.НазначениеОпросов КАК НазначениеОпросов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныАнкет КАК ШаблоныАнкет
	|		ПО НазначениеОпросов.ШаблонАнкеты = ШаблоныАнкет.Ссылка
	|ГДЕ
	|	НазначениеОпросов.Ссылка = &Опрос";
	
	Запрос.УстановитьПараметр("Опрос",Опрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка;
	
КонецФункции

// Устанавливает значения заголовков и надписей.
&НаСервере
Процедура УстановитьЗаголовкиНадписей(РеквизитыОпрос)
	
	Заголовок                            = РеквизитыОпрос.Заголовок;
	Элементы.НадписьВступление.Заголовок = РеквизитыОпрос.Вступление;
	Вступление                           = РеквизитыОпрос.Вступление;
	
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностьюПодчиненныеВопросы(УстанавливатьМодифицированность = Истина)
	
	Для каждого ЭлементКоллекции Из ПодчиненныеВопросы Цикл
		
		ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(ЭлементКоллекции.Вопрос);
		
		Для каждого ПодчиненныйВопрос Из ЭлементКоллекции.Подчиненные Цикл
			
			Элементы[ПодчиненныйВопрос.ИмяЭлементаПодчиненногоВопроса].ТолькоПросмотр           = (НЕ ЭтотОбъект[ИмяВопроса]);
			Если СтрЧислоВхождений(ПодчиненныйВопрос.ИмяЭлементаПодчиненногоВопроса,"Реквизит") = 0 Тогда
				
				Попытка
					Элементы[ПодчиненныйВопрос.ИмяЭлементаПодчиненногоВопроса].АвтоОтметкаНезаполненного = (ЭтотОбъект[ИмяВопроса] И ПодчиненныйВопрос.Обязательный);
				Исключение
					// У флажка и переключателя нет свойства АвтоОтметкаНезаполненного.
				КонецПопытки;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВозможностьПредварительногоСохранения И УстанавливатьМодифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

// Устанавливает доступность и видимость реквизитов в зависимости от вида формы.
&НаСервере
Процедура ДействияВЗависимостиОтВидаФормы()
	
	Если Параметры.Свойство("ТолькоФормаЗаполнения") Тогда
		
		Элементы.ГруппаОсновныеРеквизиты.Видимость              = Ложь;
		Элементы.Дата.Доступность                               = Ложь;
		Элементы.ФормаКоманднаяПанельПровестиИЗакрыть.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанельЗаписать.Видимость         = Ложь;
		Элементы.Комментарий.Видимость                          = Ложь;
		Элементы.ГруппаКнопкиДокументАнкета.Видимость           = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			Объект.Дата	= ТекущаяДатаСеанса();
		КонецЕсли;
			
		Если Параметры.ТолькоПросмотр = Истина Тогда
			
			Элементы.ГруппаТелоАнкеты.ТолькоПросмотр          = Истина;
			Элементы.ФормаЗаполненияПровестиЗакрыть.Видимость = Ложь;
			Элементы.ФормаЗаполненияЗаписать.Видимость        = Ложь;
			
		Иначе
			
			Элементы.ФормаЗаполненияЗаписать.Видимость = ВозможностьПредварительногоСохранения; 
			
		КонецЕсли;
			
		Модифицированность = Ложь;
		
	Иначе
		
		Элементы.ПредыдущийРаздел.Видимость               = Ложь;
		Элементы.СледующийРаздел.Видимость                = Ложь;
		Элементы.СкрытьПоказатьДеревоРазделов.Видимость   = Ложь;
		Элементы.ФормаЗаполненияПровестиЗакрыть.Видимость = Истина;
		//Элементы.ФормаЗаполненияЗаписать.Видимость        = Ложь;
		//<>, Басаргин (21.12.2016) {
		Элементы.ФормаЗаполненияЗаписать.Видимость        = ВозможностьПредварительногоСохранения;
		//<> }
		Элементы.ГруппаТелоАнкеты.ТолькоПросмотр          = Истина;
		Элементы.ГруппаОсновныеРеквизиты.ТолькоПросмотр   = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает обработчик события при изменении для простых и табличных вопросов.
&НаСервере
Процедура УстановитьОбработчикСобытияПриИзмененииДляВопросов()
	
	Если Не ВозможностьПредварительногоСохранения Тогда
		Возврат;
	КонецЕсли;
		
	//<ЗаполнениеИзКЛ>, Басаргин (17.11.2017) {
	//ТаблицаВопросовРаздела.НайтиСтроки(Новый Структура("ЭлементарныйВопрос", ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000327")))
	//Если ЭтаФорма.НомерТекущегоРаздела = 2 Тогда
		ТаблицаВопросовРаздела_Выгрузка = ТаблицаВопросовРаздела.Выгрузить();
	//КонецЕсли;
	//<ЗаполнениеИзКЛ> }
	
	Для каждого СтрокаТаблицы Из ТаблицаВопросовРаздела Цикл
		
		Если СтрокаТаблицы.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.ВопросСУсловием Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаТаблицы.КлючСтроки);
		
		Если СтрокаТаблицы.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.Табличный Тогда
			Элементы[ИмяВопроса + "_Таблица"].УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииВопроса");
		Иначе
			Если СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
				ВариантыОтветовНаВопрос = Анкетирование.ПолучитьВариантыОтветовНаВопрос(СтрокаТаблицы.ЭлементарныйВопрос,ЭтотОбъект);
				Для инд = 1  По ВариантыОтветовНаВопрос.Количество() Цикл
					Элементы[ИмяВопроса + "_Реквизит_" + инд].УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииВопроса");
					Если ВариантыОтветовНаВопрос[инд-1].ТребуетОткрытогоОтвета Тогда
						Элементы[ИмяВопроса + "_Комментарий_" + инд].УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииВопроса");
					КонецЕсли;
				КонецЦикла;
			Иначе
				Элементы[ИмяВопроса].УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииВопроса");
				Если СтрокаТаблицы.ТребуетсяКомментарий Тогда
					Элементы[ИмяВопроса + "_Комментарий"].УстановитьДействие("ПриИзменении","Подключаемый_ПриИзмененииВопроса");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//<ЗаполнениеИзКЛ>, Басаргин (17.11.2017) {
		//Если ЭтаФорма.НомерТекущегоРаздела = 2 Тогда
			ЗаполнитьОтветПоДаннымКлиента(ИмяВопроса, СтрокаТаблицы.КлючСтроки, ТаблицаВопросовРаздела_Выгрузка);
		//КонецЕсли;
		//<ЗаполнениеИзКЛ> }
		
	КонецЦикла;
	
КонецПроцедуры

// Начинает процесс построения формы заполнения согласно разделам.
&НаКлиенте
Процедура ВыполнитьПостроениеФормыЗаполнения()
	
	АнкетированиеКлиентСервер.ПереключитьВидимостьГруппТелаАнкеты(ЭтотОбъект, Ложь);
	ПодключитьОбработчикОжидания("ОкончаниеПостроенияФормыЗаполнения",0.1,Истина);
	
КонецПроцедуры

// Заканчивает формирование формы заполнения анкеты.
&НаКлиенте
Процедура ОкончаниеПостроенияФормыЗаполнения()
	
	ПостроениеФормыСогласноРаздела();
	УправлениеДоступностьюПодчиненныеВопросы(ПредыдущийРазделБезВопросов = Ложь И Не ЭтоСеансОбычногоПользователя);
	УправлениеДоступностьюКнопкиНавигацияРазделов();
	
	ЭлементДляПозиционирования = Элементы.Найти(ИмяЭлементаДляПозиционирования);
	Если ЭлементДляПозиционирования <> Неопределено Тогда
		ТекущийЭлемент = ЭлементДляПозиционирования;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет видимость дерева разделов.
&НаКлиенте
Процедура ИзменитьВидимостьДеревоРазделов()

	Элементы.ГруппаДеревоРазделов.Видимость         = НЕ Элементы.ГруппаДеревоРазделов.Видимость;
	Элементы.ДекорацияОжиданиеЭлементы.Ширина       = ?(Элементы.ГруппаДеревоРазделов.Видимость,20,45);
	
	ЗаголовокКомандаРазделы = ?(Элементы.ГруппаДеревоРазделов.Видимость,НСтр("ru = 'Скрыть разделы'"),НСтр("ru = 'Показать разделы'"));
	Элементы.СкрытьПоказатьДеревоРазделов.Заголовок         = ЗаголовокКомандаРазделы;
	Элементы.СкрытьПоказатьДеревоРазделовДокумент.Заголовок = ЗаголовокКомандаРазделы;

КонецПроцедуры

// Отвечает за доступность кнопок навигации по разделам.
&НаКлиенте
Процедура УправлениеДоступностьюКнопкиНавигацияРазделов()

	ДоступностьПредыдущийРаздел = (Элементы.ДеревоРазделов.ТекущаяСтрока > 0);
	ДоступностьСледующийРаздел  = (ДеревоРазделов.НайтиПоИдентификатору(Элементы.ДеревоРазделов.ТекущаяСтрока +  1) <> Неопределено);
	
	Элементы.ПредыдущийРаздел.Доступность         = ДоступностьПредыдущийРаздел;
	Элементы.ПредыдущийРазделПодвал.Доступность   = ДоступностьПредыдущийРаздел;
	Элементы.ПредыдущийРазделДокумент.Доступность = ДоступностьПредыдущийРаздел;
	Элементы.СледующийРаздел.Доступность          = ДоступностьСледующийРаздел;
	Элементы.СледующийРазделПодвал.Доступность    = ДоступностьСледующийРаздел;
	Элементы.СледующийРазделДокумент.Доступность  = ДоступностьСледующийРаздел;

КонецПроцедуры

// Изменяет текущий раздел
&НаКлиенте
Процедура ИзменитьРаздел(Направление)
	
	//++ Юкаев Роман 20180423 (//
	Если НомерТекущегоРаздела = 0 И Направление = "Назад" Тогда
		Возврат;
	КонецЕсли;
	//-- Юкаев Роман 20180423 )
	Элементы.ДеревоРазделов.ТекущаяСтрока = НомерТекущегоРаздела + ?(Направление = "Вперед",1,-1);
	НомерТекущегоРаздела = НомерТекущегоРаздела + ?(Направление = "Вперед",1,-1);
	ТекущиеДанныеДеревоРазделов = ДеревоРазделов.НайтиПоИдентификатору(Элементы.ДеревоРазделов.ТекущаяСтрока);
	Если ТекущиеДанныеДеревоРазделов.КоличествоВопросов = 0 И ТекущиеДанныеДеревоРазделов.ТипСтроки = "Раздел"  Тогда
		ИзменитьРаздел(Направление);
	КонецЕсли;
	ВыполнитьПостроениеФормыЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПринятииАнкетыПослеЗавершения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//Прочитать();      
	
	Отказ = ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписиДокумента.Запись);
	Отказ = ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписиДокумента.Проведение);
	
	Если НЕ Отказ Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение'"),
		,
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
		Оповестить("Проведение_Анкета",Новый Структура,Объект.Ссылка);
		//Модифицированность = Ложь;
		//Закрыть();
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеМногострочногоТекстаПриОкончании(ИзмененныйТекст, ДополнительныеПараметры) Экспорт

	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ГруппаФормы") Тогда
		Если ЭтотОбъект[Элемент.Имя] <> ИзмененныйТекст Тогда
			ЭтотОбъект[Элемент.Имя] = ИзмененныйТекст;
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		
		НайденнаяСтрока = ЭтотОбъект[Элемент.Родитель.Имя].НайтиПоИдентификатору(Элемент.Родитель.ТекущаяСтрока);
		ИндексСтроки    = ЭтотОбъект[Элемент.Родитель.Имя].Индекс(НайденнаяСтрока);
		
		Если ЭтотОбъект[Элемент.Родитель.Имя][ИндексСтроки][Элемент.Имя] <> ИзмененныйТекст Тогда
			ЭтотОбъект[Элемент.Родитель.Имя][ИндексСтроки][Элемент.Имя] = ИзмененныйТекст;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//<590625>, Басаргин (20.12.2016) {
&НаСервереБезКонтекста
Функция ПолучитьПараметрыПечати(ИпотечнаяАнкета, ИпотечныйБанк = Неопределено)
		
	МассивПараметров = Новый Массив;
	Если ИпотечнаяАнкета.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Сначала нужно провести анкету.";
		Сообщение.Сообщить();
		
		Возврат МассивПараметров;
	КонецЕслИ;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ОтветыНаВопросыАнкет.Анкета КАК Анкета,
	//|	ВЫРАЗИТЬ(ОтветыНаВопросыАнкет.ОткрытыйОтвет КАК СТРОКА(1000)) КАК ОткрытыйОтвет,
	//|	ОтветыНаВопросыАнкет.Вопрос КАК Вопрос,
	//|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	//|	ОтветыНаВопросыАнкет.НомерЯчейки КАК НомерЯчейки,
	//|	ОтветыНаВопросыАнкет.Ответ КАК Ответ,
	//|	ВЫБОР
	//|		КОГДА (ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз)
	//|				ИЛИ ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз))
	//|				И ЕСТЬNULL(ВопросыДляАнкетирования.Ссылка.ПараметрПечати, """") = """"
	//|				И ОтветыНаВопросыАнкет.Ответ ССЫЛКА Справочник.ВариантыОтветовАнкет
	//|			ТОГДА ЕСТЬNULL(ВариантыОтветовАнкет.ПараметрПечати, """")
	//|		ИНАЧЕ ЕСТЬNULL(ВопросыДляАнкетирования.ПараметрПечати, """")
	//|	КОНЕЦ КАК ПараметрПечати,
	//|	ВЫБОР
	//|		КОГДА (ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз)
	//|				ИЛИ ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз))
	//|				И ЕСТЬNULL(ВопросыДляАнкетирования.Ссылка.ПараметрПечати, """") = """"
	//|				И ОтветыНаВопросыАнкет.Ответ ССЫЛКА Справочник.ВариантыОтветовАнкет
	//|			ТОГДА ЕСТЬNULL(ВариантыОтветовАнкет.ПрефиксПараметраПечати, """")
	//|		ИНАЧЕ ЕСТЬNULL(ВопросыДляАнкетирования.ПрефиксПараметраПечати, """")
	//|	КОНЕЦ КАК Префикс,
	//|	ВЫБОР
	//|		КОГДА (ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз)
	//|				ИЛИ ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз))
	//|				И ЕСТЬNULL(ВопросыДляАнкетирования.Ссылка.ПараметрПечати, """") = """"
	//|				И ОтветыНаВопросыАнкет.Ответ ССЫЛКА Справочник.ВариантыОтветовАнкет
	//|			ТОГДА ЕСТЬNULL(ВариантыОтветовАнкет.СуффиксПараметраПечати, """""""")
	//|		ИНАЧЕ ЕСТЬNULL(ВопросыДляАнкетирования.СуффиксПараметраПечати, """")
	//|	КОНЕЦ КАК Суффикс,
	//|	ВЫБОР
	//|		КОГДА (ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.ОдинВариантИз)
	//|				ИЛИ ВопросыДляАнкетирования.Ссылка.ТипОтвета = ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.НесколькоВариантовИз))
	//|				И НЕ ВопросыДляАнкетирования.Ссылка.ИспользоватьСпецСимволДляЗамены
	//|				И ОтветыНаВопросыАнкет.Ответ ССЫЛКА Справочник.ВариантыОтветовАнкет
	//|			ТОГДА ЕСТЬNULL(ВариантыОтветовАнкет.ИспользоватьСпецСимволДляЗамены, ЛОЖЬ)
	//|		ИНАЧЕ ЕСТЬNULL(ВопросыДляАнкетирования.ИспользоватьСпецСимволДляЗамены, ЛОЖЬ)
	//|	КОНЕЦ КАК ИспользоватьСпецСимволДляЗамены
	//|ИЗ
	//|	РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВопросыДляАнкетирования КАК ВопросыДляАнкетирования
	//|		ПО ОтветыНаВопросыАнкет.ЭлементарныйВопрос = ВопросыДляАнкетирования.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветовАнкет КАК ВариантыОтветовАнкет
	//|		ПО ОтветыНаВопросыАнкет.ЭлементарныйВопрос = ВариантыОтветовАнкет.Владелец
	//|			И ОтветыНаВопросыАнкет.Ответ = ВариантыОтветовАнкет.Ссылка
	//|ГДЕ
	//|	ОтветыНаВопросыАнкет.Регистратор = &ИпотечнаяАнкета
	//|	И ОтветыНаВопросыАнкет.Активность";	
		
	////<возможность добавлять параметры в ПВХ и в  Справочник.ВариантыОтветовАнкет одновременно>, Басаргин (17.02.2017) {
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ОтветыНаВопросыАнкет.Анкета КАК Анкета,
	//|	ВЫРАЗИТЬ(ОтветыНаВопросыАнкет.ОткрытыйОтвет КАК СТРОКА(1000)) КАК ОткрытыйОтвет,
	//|	ОтветыНаВопросыАнкет.Вопрос КАК Вопрос,
	//|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	//|	ОтветыНаВопросыАнкет.НомерЯчейки КАК НомерЯчейки,
	//|	ОтветыНаВопросыАнкет.Ответ КАК Ответ,
	//|	ЕСТЬNULL(ВопросыДляАнкетирования.ПараметрПечати, """") КАК ПараметрПечатиВопрос,
	//|	ЕСТЬNULL(ВопросыДляАнкетирования.ПрефиксПараметраПечати, """") КАК ПрефиксВопрос,
	//|	ЕСТЬNULL(ВопросыДляАнкетирования.СуффиксПараметраПечати, """") КАК СуффиксВопрос,
	//|	ЕСТЬNULL(ВопросыДляАнкетирования.ИспользоватьСпецСимволДляЗамены, ЛОЖЬ) КАК ИспользоватьСпецСимволДляЗаменыВопрос,
	//|	ЕСТЬNULL(ВариантыОтветовАнкет.ПараметрПечати, """") КАК ПараметрПечатиОтвет,
	//|	ЕСТЬNULL(ВариантыОтветовАнкет.ПрефиксПараметраПечати, """") КАК ПрефиксОтвет,
	//|	ЕСТЬNULL(ВариантыОтветовАнкет.СуффиксПараметраПечати, """") КАК СуффиксОтвет,
	//|	ЕСТЬNULL(ВариантыОтветовАнкет.ИспользоватьСпецСимволДляЗамены, ЛОЖЬ) КАК ИспользоватьСпецСимволДляЗаменыОтвет
	//|ИЗ
	//|	РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВопросыДляАнкетирования КАК ВопросыДляАнкетирования
	//|		ПО ОтветыНаВопросыАнкет.ЭлементарныйВопрос = ВопросыДляАнкетирования.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветовАнкет КАК ВариантыОтветовАнкет
	//|		ПО ОтветыНаВопросыАнкет.ЭлементарныйВопрос = ВариантыОтветовАнкет.Владелец
	//|			И ОтветыНаВопросыАнкет.Ответ = ВариантыОтветовАнкет.Ссылка
	//|ГДЕ
	//|	ОтветыНаВопросыАнкет.Регистратор = &ИпотечнаяАнкета
	//|	И ОтветыНаВопросыАнкет.Активность";	
	
	//<возможность добавлять параметры в ПВХ и в  Справочник.ВариантыОтветовАнкет одновременно>, Басаргин (17.02.2017) {
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтветыНаВопросыАнкет.Анкета КАК Анкета,
	|	ВЫРАЗИТЬ(ОтветыНаВопросыАнкет.ОткрытыйОтвет КАК СТРОКА(1000)) КАК ОткрытыйОтвет,
	|	ОтветыНаВопросыАнкет.Вопрос КАК Вопрос,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос КАК ЭлементарныйВопрос,
	|	ОтветыНаВопросыАнкет.НомерЯчейки КАК НомерЯчейки,
	|	ОтветыНаВопросыАнкет.Ответ КАК Ответ,
	|	ОтветыНаВопросыАнкет.ПараметрПечатиВопрос,
	|	ОтветыНаВопросыАнкет.ПрефиксВопрос,
	|	ОтветыНаВопросыАнкет.СуффиксВопрос,
	|	ОтветыНаВопросыАнкет.ИспользоватьСпецСимволДляЗамены КАК ИспользоватьСпецСимволДляЗаменыВопрос,
	|	ОтветыНаВопросыАнкет.ПараметрПечатиОтвет,
	|	ОтветыНаВопросыАнкет.ПрефиксОтвет,
	|	ОтветыНаВопросыАнкет.СуффиксОтвет,
	|	ОтветыНаВопросыАнкет.ИспользоватьСпецСимволДляЗаменыОтвет
	|ИЗ
	|	РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
	|ГДЕ
	|	ОтветыНаВопросыАнкет.Регистратор = &ИпотечнаяАнкета
	|	И ОтветыНаВопросыАнкет.Активность";	
	//<возможность добавлять параметры в ПВХ и в  Справочник.ВариантыОтветовАнкет одновременно> }
	
	Запрос.УстановитьПараметр("ИпотечнаяАнкета", ИпотечнаяАнкета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			//СтруктураЗаполнения = Новый Структура("ПараметрПечати, Префикс, Суффикс, НомерЯчейки, ИспользоватьСпецСимволДляЗамены, Ответ");
			СтруктураЗаполнения = Новый Структура("ПараметрПечатиВопрос, ПрефиксВопрос, СуффиксВопрос, ИспользоватьСпецСимволДляЗаменыВопрос, НомерЯчейки, Ответ, ПараметрПечатиОтвет, ПрефиксОтвет, СуффиксОтвет, ИспользоватьСпецСимволДляЗаменыОтвет");
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
			//Если НЕ Выборка.НомерЯчейки = 0 И ЗначениеЗаполнено(СтруктураЗаполнения.ПараметрПечати) И НЕ СтруктураЗаполнения.ИспользоватьСпецСимволДляЗамены Тогда
			//	СтруктураЗаполнения.ПараметрПечати = Лев(СтруктураЗаполнения.ПараметрПечати, СтрДлина(СтруктураЗаполнения.ПараметрПечати) - 1) + Выборка.НомерЯчейки + "#";
			//Конецесли;
			//<возможность добавлять параметры в ПВХ и в  Справочник.ВариантыОтветовАнкет одновременно>, Басаргин (17.02.2017) {
			Если НЕ Выборка.НомерЯчейки = 0 И ЗначениеЗаполнено(СтруктураЗаполнения.ПараметрПечатиВопрос) Тогда //И НЕ СтруктураЗаполнения.ИспользоватьСпецСимволДляЗаменыВопрос 
				СтруктураЗаполнения.ПараметрПечатиВопрос = Лев(СтруктураЗаполнения.ПараметрПечатиВопрос, СтрДлина(СтруктураЗаполнения.ПараметрПечатиВопрос) - 1) + Выборка.НомерЯчейки + "#";
			Конецесли;			
			Если НЕ Выборка.НомерЯчейки = 0 И ЗначениеЗаполнено(СтруктураЗаполнения.ПараметрПечатиОтвет) Тогда //И НЕ СтруктураЗаполнения.ИспользоватьСпецСимволДляЗаменыОтвет 
				СтруктураЗаполнения.ПараметрПечатиОтвет = Лев(СтруктураЗаполнения.ПараметрПечатиОтвет, СтрДлина(СтруктураЗаполнения.ПараметрПечатиОтвет) - 1) + Выборка.НомерЯчейки + "#";
			Конецесли;			
			//<возможность добавлять параметры в ПВХ и в  Справочник.ВариантыОтветовАнкет одновременно> }			
			Если НЕ ПроверкаУсловияПрефиксСуффикс(ИпотечныйБанк, Выборка.ЭлементарныйВопрос, Выборка.Ответ, СтруктураЗаполнения.ПрефиксВопрос, СтруктураЗаполнения.СуффиксВопрос) Тогда
				СтруктураЗаполнения.ПрефиксВопрос = "";
				СтруктураЗаполнения.СуффиксВопрос = "";
			КонецЕсли;			
			Если НЕ ПроверкаУсловияПрефиксСуффикс(ИпотечныйБанк, Выборка.ЭлементарныйВопрос, Выборка.Ответ, СтруктураЗаполнения.ПрефиксОтвет, СтруктураЗаполнения.СуффиксОтвет) Тогда
				СтруктураЗаполнения.ПрефиксОтвет = "";
				СтруктураЗаполнения.СуффиксОтвет = "";
			КонецЕсли;
			МассивПараметров.Добавить(СтруктураЗаполнения);		
		КонецЦикла;
	КонецЕсли;
	
	//<669811>, Басаргин (14.07.2017) {
	ПараметрыПечатиОтветственного = ПолучитьПараметрыПечатиОтветственного(ИпотечнаяАнкета.Ответственный, ИпотечныйБанк);
	Для каждого ПараметрПечати Из ПараметрыПечатиОтветственного Цикл
		СтруктураЗаполнения = Новый Структура("ПараметрПечатиВопрос,
												|ПрефиксВопрос,
												|СуффиксВопрос, 
												|ИспользоватьСпецСимволДляЗаменыВопрос,
												|НомерЯчейки,
												|Ответ,
												|ПараметрПечатиОтвет,
												|ПрефиксОтвет,
												|СуффиксОтвет,
												|ИспользоватьСпецСимволДляЗаменыОтвет", "", "", "", Ложь, 0, "", "", "", "", Ложь);	
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ПараметрПечати);
		МассивПараметров.Добавить(СтруктураЗаполнения);
	КонецЦикла;
	//<669811> }
	
	Возврат МассивПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаУсловияПрефиксСуффикс(ИпотечныйБанк, ЭлементарныйВопрос, Ответ, Префикс, Суффикс)
	
	Если НЕ ЗначениеЗаполнено(ИпотечныйБанк) ИЛИ (НЕ ЗначениеЗаполнено(Префикс) И НЕ ЗначениеЗаполнено(Суффикс)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(Ответ) = Тип("СправочникСсылка.ВариантыОтветовАнкет") Тогда
		ОтветОбъект = Ответ.ПолучитьОбъект();
		НайденныеСтроки = ОтветОбъект.ИпотечныеБанки.НайтиСтроки(Новый Структура("ИпотечныйБанк", ИпотечныйБанк)); 	
		Если НайденныеСтроки.Количество() Тогда
			Возврат Истина;
		КонецЕсли;		
	КонецЕсли;
	
	ЭлементарныйВопросОбъект = ЭлементарныйВопрос.ПолучитьОбъект();
	НайденныеСтроки = ЭлементарныйВопросОбъект.ИпотечныеБанки.НайтиСтроки(Новый Структура("ИпотечныйБанк", ИпотечныйБанк)); 	
	Если НайденныеСтроки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаменитьПараметры_Word(Application, Ответ, ИспользоватьСпецСимволДляЗамены, ПараметрПечати, Префикс, Суффикс)
	
	СтрокаПоиска = ПараметрПечати;
	СтрокаЗамены = "";
	Если НЕ ИспользоватьСпецСимволДляЗамены Тогда
		СтрокаЗамены = Префикс + ?(ТипЗнч(Ответ) = Тип("Дата"), Строка(Формат(Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Ответ), Символы.НПП, "")) + Суффикс;	
	Иначе
		СтрокаЗамены = Символ(HexToDec("2611")); //2612 - ☒
	КонецЕсли;
	Application.Content.Find.Execute(СтрокаПоиска, Ложь, Истина, Ложь, , , Истина, , Ложь, СтрокаЗамены, 00000002);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьПараметры_Excel(ЛистЭксель, ОбластьПоиска, НачалоЛиста, Ответ, ИспользоватьСпецСимволДляЗамены, ПараметрПечати, Префикс, Суффикс)
	
	СтрокаПоиска = ПараметрПечати;
	СтрокаЗамены = "";
	Флаг = Ложь;
	Если НЕ ИспользоватьСпецСимволДляЗамены Тогда
		СтрокаЗамены = Префикс + ?(ТипЗнч(Ответ) = Тип("Дата"), Строка(Формат(Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Ответ), Символы.НПП, "")) + Суффикс;
	Иначе
		Флаг = Истина;
		//СтрокаЗамены = Символ(HexToDec("2611")); //☑
		СтрокаЗамены = Символ(HexToDec("2713")); //✓
	КонецЕсли;
	
	Результат = ОбластьПоиска.Find(СтрокаПоиска, НачалоЛиста);	
	Если НЕ Результат = Неопределено Тогда		
		Подчеркнутый = Результат.Font.Underline = NULL; //-4142
		Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);	
		Если Подчеркнутый Тогда
			Результат.Font.Underline = 2;
		КонецЕсли;
		Результат = ОбластьПоиска.FindNext(Результат);
		Пока НЕ Результат = Неопределено И НЕ Результат.Value = Неопределено Цикл			
			Подчеркнутый = Результат.Font.Underline = NULL; //-4142			
			Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
			Если Подчеркнутый Тогда
				Результат.Font.Underline = 2;
			КонецЕсли;
			Результат = ОбластьПоиска.FindNext(Результат);
		КонецЦикла;
	КонецЕсли;	
	
	//Результат = ОбластьПоиска.Find(СтрокаПоиска, НачалоЛиста);	
	//Если НЕ Результат = Неопределено Тогда
	//	Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
	//	Результат = ОбластьПоиска.FindNext(Результат);
	//	Пока НЕ Результат = Неопределено И НЕ Результат.Value = Неопределено Цикл
	//		Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
	//		Результат = ОбластьПоиска.FindNext(Результат);
	//	КонецЦикла;
	//КонецЕсли;
		
	//Результат = ОбластьПоиска.Find(СтрокаПоиска, НачалоЛиста);
	//Если НЕ Результат = Неопределено Тогда
	//	Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
	//	Если Флаг Тогда	
	//		Результат.Value = "";
	//		chsize = 15;
	//		x = Результат.Left + Результат.Width / 2 - chsize / 2;
	//		y = Результат.Top + Результат.Height / 2 - chsize / 2;
	//		CheckBox = ЛистЭксель.CheckBoxes.Add(x, y , chsize, chsize);
	//		CheckBox.Text = "";
	//		CheckBox.Value = 1;//-4146;
	//		CheckBox.LinkedCell = Результат.Address;							
	//	КонецЕсли;
	//КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМакет(ИмяФайла, Расширение, ПараметрыПечати, ИпотечныйБанк = Неопределено, ЭтоДопЛист = Ложь)
	
	Если ИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ВРег(Расширение), "DOC") Тогда
		Попытка		
			WordApplication = Новый COMОбъект("WORD.Application");
			WordApplication.Visible = Истина; 
			Doc = WordApplication.Documents.Open(ИмяФайла);
			WordApplication.WindowState = 2;									
			Для каждого ПараметрПечати Из ПараметрыПечати Цикл		
				ЗаменитьПараметры_Word(Doc, ПараметрПечати.Ответ, ПараметрПечати.ИспользоватьСпецСимволДляЗаменыВопрос, ПараметрПечати.ПараметрПечатиВопрос, ПараметрПечати.ПрефиксВопрос, ПараметрПечати.СуффиксВопрос);
				ЗаменитьПараметры_Word(Doc, ПараметрПечати.Ответ, ПараметрПечати.ИспользоватьСпецСимволДляЗаменыОтвет, ПараметрПечати.ПараметрПечатиОтвет, ПараметрПечати.ПрефиксОтвет, ПараметрПечати.СуффиксОтвет);			
			КонецЦикла;				
			ОчиститьНеУстановленныеПараметрыWORD(Doc);		
			WordApplication.WindowState = 1;
			WordApplication.Activate();
			//WordApplication = 0;
		Исключение
			WordApplication.Quit();    
			WordApplication = 0;    	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();	
		КонецПопытки;	
	ИначеЕсли Найти(ВРег(Расширение), "XLS") Тогда
		Попытка		
			ExcelApplication = Новый COMОбъект("Excel.Application");			
			ExcelApplication.Visible = Истина;
			ExcelApplication.WindowState = -4140;
			Book = ExcelApplication.WorkBooks.Open(ИмяФайла);  			
			Для й = 1 По Book.Sheets().Count Цикл
				ЛистЭксель = Book.Sheets(й);
				ОбластьПоиска = ЛистЭксель.Cells;
				НачалоЛиста = ЛистЭксель.Cells(1, 1);			
				Для каждого ПараметрПечати Из ПараметрыПечати Цикл
					ЗаменитьПараметры_Excel(ЛистЭксель, ОбластьПоиска, НачалоЛиста, ПараметрПечати.Ответ, ПараметрПечати.ИспользоватьСпецСимволДляЗаменыВопрос, ПараметрПечати.ПараметрПечатиВопрос, ПараметрПечати.ПрефиксВопрос, ПараметрПечати.СуффиксВопрос);
					ЗаменитьПараметры_Excel(ЛистЭксель, ОбластьПоиска, НачалоЛиста, ПараметрПечати.Ответ, ПараметрПечати.ИспользоватьСпецСимволДляЗаменыОтвет, ПараметрПечати.ПараметрПечатиОтвет, ПараметрПечати.ПрефиксОтвет, ПараметрПечати.СуффиксОтвет);					
				КонецЦикла;				
				ОчиститьНеУстановленныеПараметрыEXCEL(ЛистЭксель);
			КонецЦикла;
			ExcelApplication.WindowState = -4137;
			Book.Activate();
			Book.Application.DisplayAlerts = Ложь;
			//ExcelApplication = 0;
		Исключение
			ExcelApplication.Quit(); 
			ExcelApplication = 0;
			//ExcelApplication.ActiveWorkbook.Close();			          	
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();	
		КонецПопытки;
	ИначеЕсли Найти(ВРег(Расширение), "PDF") Тогда
		АдресФайла = "";
		АдресФайла = ЗаменитьПараметры_PDF_SetFielder(ПараметрыПечати, ИмяФайла, Расширение, ИпотечныйБанк, ЭтаФорма.УникальныйИдентификатор, ЭтоДопЛист);
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда			
			#Если ВебКлиент Тогда
				СохранитьФайлАнкеты(АдресФайла);
			#Иначе
				ПолучитьФайл(АдресФайла, ИмяФайла, Истина);				
			#КонецЕсли										
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

//<>, Басаргин (08.02.2018) {
&НаКлиенте
Процедура СохранитьФайлАнкеты(АдресФайла, ИмяФайла = "")
	
	ДополнительныеПараметры = Новый Структура("ИмяФайла, АдресФайла", ИмяФайла, АдресФайла);
	#Если Не ВебКлиент Тогда
		СохранитьФайлАнкетыЗавершение(Истина, ДополнительныеПараметры);
		Возврат;
	#КонецЕсли
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект,
		Новый ОписаниеОповещения("СохранитьФайлАнкетыЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлАнкетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	АдресФайла = ДополнительныеПараметры.АдресФайла;
	Если Результат Тогда		
		Получаемые = Новый Массив;
		Получаемые.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла));
		
		ОписаниеОповещенияПолученияФайлов = Новый ОписаниеОповещения("ПолучениеФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, Получаемые, ИмяФайла, Ложь);
		Иначе
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок = НСтр("ru = 'Выберите файл анкеты'");
			Диалог.ПредварительныйПросмотр = Ложь;
			Диалог.Фильтр = НСтр("ru = 'Файл файл (*.pdf)|*.pdf'");
			Диалог.Расширение = "pdf";
			Диалог.ПроверятьСуществованиеФайла = Истина;
			Диалог.МножественныйВыбор = Ложь;
			
			НачатьПолучениеФайлов(ОписаниеОповещенияПолученияФайлов, Получаемые, Диалог, Истина);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Без расширения работы с файлами невозможно работать с файлами.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт

	Если РасширениеПодключено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ЗаданВопросОбУстановкеРасширения Тогда
		ЗаданВопросОбУстановкеРасширения = Истина;
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросОбУстановкеРасширения", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещенияВопрос);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры, РасширениеПодключено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУстановкеРасширения(Оповещение) Экспорт
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
КонецПроцедуры
//<> }

&НаКлиенте
Процедура ОбработкаСохраненияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьSetFielder()
	
	//ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Анкета"));
	//SetFielder = ДокОбъект.ПолучитьМакет("SetFielder");
	
	SetFielder = Константы.SetFielder.Получить().Получить();
	Если НЕ ТипЗнч(SetFielder) = Тип("ДвоичныеДанные") Тогда
		SetFielder = Документы.Анкета.ПолучитьМакет("SetFielder");
	КонецЕсли;	
		
	Возврат SetFielder;
	
КонецФункции

//<>, Басаргин (28.03.2017) {
&НаСервере
Функция ЗаменитьПараметры_PDF_SetFielder(ПараметрыПечати, ИмяФайлаШаблона, Формат, ИпотечныйБанк, УникальныйИдентификатор, ЭтоДопЛист = Ложь)
	
	Если ИпотечныйБанк.Пустая() Тогда
		Сообщить("Отсутствует шаблоен печати.");
		Возврат Неопределено;
	КонецЕсли;
	
	//SetFielder = Документы.Анкета.ПолучитьМакет("SetFielder");	
	SetFielder = ПолучитьSetFielder();
	
	ИсполняемыйФайл = КаталогВременныхФайлов() + "SetFielder" + Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс") +  ".exe";  
	
	Файл_SetFielder = Новый Файл(ИсполняемыйФайл);
	Если Файл_SetFielder.Существует() Тогда
		Попытка			
			Если Файл_SetFielder.ПолучитьТолькоЧтение() Тогда
				Файл_SetFielder.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			УдалитьФайлы(ИсполняемыйФайл);
		Исключение
	    КонецПопытки;
	КонецЕсли;
	
	Попытка
		SetFielder.Записать(ИсполняемыйФайл);
	Исключение
		Сообщить("Проблема при печати, обратитесь к программисту!"+ ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
		
	input = "";
	Макет = ?(Не ЭтоДопЛист, ВернутьШаблонПечатнойФормы(ИпотечныйБанк), ВернутьШаблонДопЛистПечатнойФормы(ИпотечныйБанк));
	Если НЕ Макет = Неопределено Тогда 
		input = ПолучитьИмяВременногоФайла(Формат);
		Попытка
			Макет.Записать(input);
		Исключение		
		КонецПопытки;
	КонецЕсли; 

	Попытка
		Файл_input = Новый Файл(input);
		Если НЕ Файл_input.Существует() Тогда
			Сообщить("Файл шаблона " + Формат + " с полным именем " + input + " не обнаружен!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	output = "";
	Макет = ?(Не ЭтоДопЛист, ВернутьШаблонПечатнойФормы(ИпотечныйБанк), ВернутьШаблонДопЛистПечатнойФормы(ИпотечныйБанк));
	Если НЕ Макет = Неопределено Тогда 
		output = ПолучитьИмяВременногоФайла(Формат);
		Попытка
			Макет.Записать(output);
		Исключение		
		КонецПопытки;
	КонецЕсли; 

	Попытка
		Файл_output = Новый Файл(output);
		Если НЕ Файл_output.Существует() Тогда
			Сообщить("Файл шаблона " + Формат + " с полным именем " + output + " не обнаружен!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	ПараметрыДляЗапроса = Новый Массив;
	Для каждого Параметр Из ПараметрыПечати Цикл
		Если ЗначениеЗаполнено(Параметр.ПараметрПечатиВопрос) И ПараметрыДляЗапроса.Найти(Параметр.ПараметрПечатиВопрос) = Неопределено Тогда
			ПараметрыДляЗапроса.Добавить(Параметр.ПараметрПечатиВопрос);
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметр.ПараметрПечатиОтвет) И ПараметрыДляЗапроса.Найти(Параметр.ПараметрПечатиОтвет) = Неопределено Тогда
			ПараметрыДляЗапроса.Добавить(Параметр.ПараметрПечатиОтвет);
		КонецЕсли;		
	КонецЦикла;
	
	СтрокаПараметров = "";
	ПараметрыСтрокаСлияния = Новый Массив;
	МассивВозврат = ПолучитьМаппингПараметровСбербанк_PDF_EXCEL(ПараметрыДляЗапроса, ИпотечныйБанк);
	Для каждого Выборка Из МассивВозврат Цикл
		Если НЕ Выборка.ПозицияВСтрокеСлияния = 0 Тогда
			ПараметрыСтрокаСлияния.Добавить(Выборка);
			Продолжить;	
		КонецЕсли;	
		Если Выборка.ПараметрExcel = "#Ответ.ФИОзаемщика#" ИЛИ Выборка.ПараметрExcel = "#Ответ.Фамилия#"
			ИЛИ Выборка.ПараметрExcel = "#Ответ.Имя#" ИЛИ Выборка.ПараметрExcel = "#Ответ.Отчество#" Тогда
			Продолжить;		
		КонецЕсли;
		Если Выборка.ПозицияС = 0 Тогда
			Если Найти(Выборка.ПараметрExcel, "Флаг") Тогда  //Поля.Item(Выборка.ПараметрPDF).Type = "checkbox" И 
				Если ЗначениеЗаполнено(Выборка.ExportValue) Тогда
					СтрокаПараметров = СтрокаПараметров + " " + Выборка.ПараметрPDF + ":" + Выборка.ExportValue + " |";
				Иначе					
					СтрокаПараметров = СтрокаПараметров + " " + Выборка.ПараметрPDF + ":" + "Yes" + " |";
				КонецЕсли;				
			Иначе
				НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, Выборка.ПараметрExcel);
				Если НайденныеПараметры.Количество() Тогда
					Для каждого Структура Из НайденныеПараметры Цикл 
						Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
						Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
						Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
						Value = Префикс + Ответ + Суффикс;
						СтрокаПараметров = СтрокаПараметров + " " + Выборка.ПараметрPDF + ":" + СокрЛП(Value) + " |";
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;				
		Иначе 
			НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, Выборка.ПараметрExcel);
			Если НайденныеПараметры.Количество() Тогда
				Для каждого Структура Из НайденныеПараметры Цикл 
					Структура.Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
					Если НЕ Выборка.ПозицияПО = 0 И СтрДлина(Структура.Ответ) < Выборка.ПозицияПО Тогда
						Разница = Выборка.ПозицияПО - СтрДлина(Структура.Ответ);
						Пока Разница > 0 Цикл
							Структура.Ответ = Структура.Ответ + " ";
							Разница = Разница - 1;
						КонецЦикла;
					КонецЕсли;
					Если Выборка.ПараметрExcel = "#Ответ.МобильныйТелефон#" ИЛИ Выборка.ПараметрExcel = "#Ответ.ДомашнийТелефон#" Тогда
						Длина = СтрДлина(Структура.Ответ);
						Если Длина = 12 И Сред(Структура.Ответ, 1, 1) = "+" И Сред(Структура.Ответ, 2, 1) = "7" Тогда
							Структура.Ответ = Сред(Структура.Ответ, 3, Длина) // -2	
						ИначеЕсли Длина = 11 И Сред(Структура.Ответ, 1, 1) = "8" Тогда
			          		Структура.Ответ = Сред(Структура.Ответ, 2, Длина); //-1	
						ИначеЕсли Длина < 3 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
					Ответ = Структура.Ответ;
					Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
					Value = Префикс + Сред(Ответ, Выборка.ПозицияС, ?(Выборка.ПозицияПО = 0, СтрДлина(Ответ), Выборка.ПозицияПО - Выборка.ПозицияС + 1)) + Суффикс; 
					СтрокаПараметров = СтрокаПараметров + " " + Выборка.ПараметрPDF + ":" + СокрЛП(Value) + " |";
				КонецЦикла;	
			КонецЕсли;							
		КонецЕсли;	
	КонецЦикла;
	
	ДозаполнитьПараметрыСтрокСлияния(ПараметрыСтрокаСлияния, ПараметрыПечати, СтрокаПараметров);
	ДозаполнитьФИО_SetFielder(ПараметрыПечати, СтрокаПараметров);	
	
	СтрокаПараметров = СтрЗаменить(СтрокаПараметров, """", "\""");	
	СтрокаЗаупска = "";
	СтрокаЗаупска = ИсполняемыйФайл + " /input """ + input + """ " + "/output """ + output + """ " + "/parameters """ + СтрокаПараметров + """";
	
	WshShell = Новый COMОбъект("WScript.Shell");
	WshShell.Run(СтрокаЗаупска, 1, true);
		
	ДвоичныеДанные = Новый ДвоичныеДанные(output);		
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);

	Файл_SetFielder = Новый Файл(ИсполняемыйФайл);
	Если Файл_SetFielder.Существует() Тогда
		Попытка			
			Если Файл_SetFielder.ПолучитьТолькоЧтение() Тогда
				Файл_SetFielder.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			УдалитьФайлы(ИсполняемыйФайл);
		Исключение
	    КонецПопытки;
	КонецЕсли;

	Возврат АдресФайла;			
		
КонецФункции

//<Доп соглашение>, Басаргин (20.02.2018) {
&НаСервереБезКонтекста
Процедура ДозаполнитьПараметрыСтрокСлияния(ПараметрыСтрокСлияния, ПараметрыПечати, СтрокаПараметров)
	
	ТекущийПараметр = "";
	Для каждого Строка Из ПараметрыСтрокСлияния Цикл						
		Если НЕ Строка.ПараметрPDF = ТекущийПараметр Тогда
			ТекущийПараметр = Строка.ПараметрPDF;				
			СтрокаПараметров = СтрокаПараметров + " " + ТекущийПараметр + ":" + СокрЛП(ОбъединитьПараметрыСтрокиСлияния(НайтиСтрокиПоПараметруPDF(ПараметрыСтрокСлияния, ТекущийПараметр), ПараметрыПечати)) + " |";	
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокиПоПараметруPDF(ПараметрыПечати, ПараметрPDF)
	
	МассивПараметров = Новый Массив;	
	Для каждого Параметр Из ПараметрыПечати Цикл
		Если Параметр.ПараметрPDF = ПараметрPDF Тогда 
			МассивПараметров.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	QSort(МассивПараметров, 0, МассивПараметров.ВГраница(), "ПозицияВСтрокеСлияния");
	
	Возврат МассивПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура QSort(Массив, НижнийПредел, ВерхнийПредел, Поле = "")
    
    i = НижнийПредел;
    j = ВерхнийПредел;
    m = ?(Поле = "", Массив[Цел((i + j) / 2)], Массив[Цел((i + j) / 2)][Поле]);  
    
    Пока Истина Цикл        
        Пока ?(Поле = "", Массив[i], Массив[i][Поле]) < m Цикл            
            i = i + 1;                   
        КонецЦикла;        
        Пока ?(Поле = "", Массив[j], Массив[j][Поле]) > m Цикл            
            j = j - 1;                   
		КонецЦикла;   
		
		Если i <= j Тогда               
			Замена = Массив[i];
			Массив[i] = Массив[j];
			Массив[j] = Замена;
			i = i + 1;
			j = j - 1;            
		КонецЕсли;		
		
		Если i > j Тогда                       
            Прервать;                        
        КонецЕсли;        
    КонецЦикла;
    
    Если НижнийПредел < j Тогда         
        QSort(Массив, НижнийПредел, j, Поле);        
    КонецЕсли; 
    
    Если i < ВерхнийПредел Тогда                      
        QSort(Массив, i, ВерхнийПредел, Поле);        
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъединитьПараметрыСтрокиСлияния(НайденныеПараметры, ПараметрыПечати)
	
	СтрокаВозврат = "";
	
	Для каждого Параметр Из НайденныеПараметры Цикл		
		Для каждого Структура Из ПараметрыПечати Цикл					
			Если ЗначениеЗаполнено(Структура.ПараметрПечатиВопрос) Тогда
				Если НЕ Параметр.ПараметрExcel = Структура.ПараметрПечатиВопрос Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Структура.ПараметрПечатиОтвет) Тогда
				Если НЕ Параметр.ПараметрExcel = Структура.ПараметрПечатиОтвет Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;				
			
			Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
			Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
			Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
			Value = Префикс + Ответ + Суффикс;
			СтрокаВозврат = СтрокаВозврат + ?(СтрокаВозврат = "", Value, ?(НЕ ЗначениеЗаполнено(Параметр.РазделительСтрокиСлияния), Символы.НПП, Параметр.РазделительСтрокиСлияния) + Value);		
		КонецЦикла;	
	КонецЦикла;		
	
	Возврат СтрокаВозврат;
	
КонецФункции
//<Доп соглашение> }

//<669811>, Басаргин (14.07.2017) {
&НаСервереБезКонтекста
Функция ПолучитьПараметрыПечатиОтветственного(Ответственный, ИпотечныйБанк = Неопределено)

	МассивВозврат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыПечатиОтветственного.ПараметрФИО КАК ПараметрПечатиВопрос,
	|	ПараметрыПечатиОтветственного.ЧерезПробел,
	|	ПараметрыПечатиОтветственного.Индекс,
	|	ПРЕДСТАВЛЕНИЕ(&Ответственный) КАК Ответ
	|ИЗ
	|	РегистрСведений.ПараметрыПечатиОтветственного КАК ПараметрыПечатиОтветственного
	|ГДЕ
	|	ИСТИНА
	|	И ПараметрыПечатиОтветственного.Банк = &ИпотечныйБанк";

	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Если ЗначениеЗаполнено(ИпотечныйБанк) Тогда
		Запрос.УстановитьПараметр("ИпотечныйБанк", ИпотечныйБанк);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПараметрыПечатиОтветственного.Банк = &ИпотечныйБанк", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		МассивДозаполенияФИО = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Ответ) Тогда
				Структура = Новый Структура("ПараметрПечатиВопрос, Ответ");
				ЗаполнитьЗначенияСвойств(Структура, Выборка);
				Если Выборка.ЧерезПробел Тогда
					ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Ответ, " ");
					Если Выборка.Индекс <= ЧастиСтроки.ВГраница() Тогда
						Структура.Ответ = ЧастиСтроки[Выборка.Индекс];	
					КонецЕсли;
				КонецЕсли;
				МассивВозврат.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
	Иначе
		//Сообщить("ПараметрыПечатиОтветственного не заполнен.");
	КонецЕсли;
	
	Возврат МассивВозврат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДозаполнитьОтветственного(ПараметрыПечати, СтрокаПараметров = "")
	
	//НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.ФИОзаемщика#");
	//Если НайденныеПараметры.Количество() Тогда
	// 	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НайденныеПараметры[0].Ответ, " ");
	//	Если ЧастиСтроки.Количество() = 3 Тогда
	//		Value = ЧастиСтроки[0];
	//		СтрокаПараметров = СтрокаПараметров + " " + "name.0" + ":" + СокрЛП(Value) + " |";
	//		//<674539>, Басаргин (21.06.2017) {
	//		СтрокаПараметров = СтрокаПараметров + " " + "фамилия_заемщика" + ":" + СокрЛП(Value) + " |";			
	//		//<674539> }
	//		
	//		Value = ЧастиСтроки[1] + " " + ЧастиСтроки[2];
	//		СтрокаПараметров = СтрокаПараметров + " " + "name.1" + ":" + СокрЛП(Value) + " |";
	//		//<674539>, Басаргин (21.06.2017) {
	//		СтрокаПараметров = СтрокаПараметров + " " + "фио_заемщика" + ":" + СокрЛП(Value) + " |";
	//		//<674539> }
	//	КонецЕсли;
	//КонецЕсли;
	//
	//НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Фамилия#");
	//Если НайденныеПараметры.Количество() Тогда
	//	Value = НайденныеПараметры[0].Ответ;
	//	СтрокаПараметров = СтрокаПараметров + " " + "name.2" + ":" + СокрЛП(Value) + " |";
	//	//<674539>, Басаргин (21.06.2017) {
	//	СтрокаПараметров = СтрокаПараметров + " " + "фамилия" + ":" + СокрЛП(Value) + " |";
	//	//<674539> }
	//КонецЕсли;	
	//
	//НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Имя#");
	//Value = "";
	//Если НайденныеПараметры.Количество() Тогда
	//	Value = НайденныеПараметры[0].Ответ;
	//	//<674539>, Басаргин (21.06.2017) {
	//	СтрокаПараметров = СтрокаПараметров + " " + "имя" + ":" + Value + " |";			
	//	//<674539> }	
	//КонецЕсли;	
	//
	//НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Отчество#");
	//Если НайденныеПараметры.Количество() Тогда
	//	Value = Value + " " + НайденныеПараметры[0].Ответ; 
	//	СтрокаПараметров = СтрокаПараметров + " " + "name.3" + ":" + СокрЛП(Value) + " |";
	//	//<674539>, Басаргин (21.06.2017) {
	//	СтрокаПараметров = СтрокаПараметров + " " + "отчество" + ":" + НайденныеПараметры[0].Ответ + " |";
	//	//<674539> }
	//КонецЕсли;		
		
КонецПроцедуры
//<669811> }

&НаКлиентеНаСервереБезКонтекста
Процедура ДозаполнитьФИО_SetFielder(ПараметрыПечати, СтрокаПараметров = "")
	
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.ФИОзаемщика#");
	Если НайденныеПараметры.Количество() Тогда
	 	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НайденныеПараметры[0].Ответ, " ");
		Если ЧастиСтроки.Количество() = 3 Тогда
			Value = ЧастиСтроки[0];
			СтрокаПараметров = СтрокаПараметров + " " + "name.0" + ":" + СокрЛП(Value) + " |";
			СтрокаПараметров = СтрокаПараметров + " " + "фамилия_заемщика" + ":" + СокрЛП(Value) + " |";			
			
			Value = ЧастиСтроки[1] + " " + ЧастиСтроки[2];
			СтрокаПараметров = СтрокаПараметров + " " + "name.1" + ":" + СокрЛП(Value) + " |";
			СтрокаПараметров = СтрокаПараметров + " " + "фио_заемщика" + ":" + СокрЛП(Value) + " |";
			СтрокаПараметров = СтрокаПараметров + " " + "fill_1" + ":" + ЧастиСтроки[0] + " " + ЧастиСтроки[1] + " " + ЧастиСтроки[2] + " |";
			
			Заемщик = НайтиПараметрПоИмени(ПараметрыПечати, "#Флаг.Ответ.РольВПредполагаемойСделке=Заемщик#");
			Если Заемщик.Количество() Тогда
				СтрокаПараметров = СтрокаПараметров + " " + "Text Field 195" + ":" + ЧастиСтроки[0] + " " + ЧастиСтроки[1] + " " + ЧастиСтроки[2] + " |";
			КонецЕсли;
			
			Созаемщик = НайтиПараметрПоИмени(ПараметрыПечати, "#Флаг.Ответ.РольВПредполагаемойСделке=Созаемщик#");
			Если Созаемщик.Количество() Тогда
				СтрокаПараметров = СтрокаПараметров + " " + "Text Field 2010" + ":" + ЧастиСтроки[0] + " " + ЧастиСтроки[1] + " " + ЧастиСтроки[2] + " |";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ФИО = "";
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Фамилия#");
	Если НайденныеПараметры.Количество() Тогда
		Value = НайденныеПараметры[0].Ответ;
		ФИО = Value;
		//СтрокаПараметров = СтрокаПараметров + " " + "name.2" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "фамилия" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "fill_2" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text103" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 5427" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "comb_1" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 5569" + ":" + СокрЛП(Value) + " |";
	КонецЕсли;	
	
	Value = "";
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Имя#");
	Если НайденныеПараметры.Количество() Тогда
		Value = НайденныеПараметры[0].Ответ;
		ФИО = ФИО + " " +  Value;
		СтрокаПараметров = СтрокаПараметров + " " + "name.2" + ":" + СокрЛП(ФИО) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "имя" + ":" + Value + " |";			
		СтрокаПараметров = СтрокаПараметров + " " + "fill_4" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text104" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 5428" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "undefined_2" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 5570" + ":" + СокрЛП(Value) + " |";
	КонецЕсли;	
	
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Отчество#");
	Если НайденныеПараметры.Количество() Тогда
		Value = НайденныеПараметры[0].Ответ; 
		ФИО = ФИО + " " + НайденныеПараметры[0].Ответ;
		СтрокаПараметров = СтрокаПараметров + " " + "name.3" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "отчество" + ":" + НайденныеПараметры[0].Ответ + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "fill_5" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text105" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 5429" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "undefined_3" + ":" + СокрЛП(Value) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 5571" + ":" + СокрЛП(Value) + " |";
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ФИО) Тогда
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 230" + ":" + СокрЛП(ФИО) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 293" + ":" + СокрЛП(ФИО) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 223" + ":" + СокрЛП(ФИО) + " |";
		СтрокаПараметров = СтрокаПараметров + " " + "Text Field 187" + ":" + СокрЛП(ФИО) + " |";
	КонецЕсли;
	
	//<796816>, Басаргин (26.03.2018) { //для сбербанка
	СтрокаПараметров = СтрокаПараметров + " " + "Text35.0.0" + ":" + "Абсолют Недвижимость" + " |";
	СтрокаПараметров = СтрокаПараметров + " " + "Text35.0.2" + ":" + "Абсолют Недвижимость" + " |";
	СтрокаПараметров = СтрокаПараметров + " " + "Text35.0.1" + ":" + "Москва, Фрунзенская наб., 54" + " |";
	//<796816> }
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьПараметры_PDF_Клиент(ПараметрыПечати, ИмяФайлаШаблона, Формат)
	
	#Если Клиент Тогда
		Сообщить("Клиент");
	#КонецЕсли
	
	Попытка
		Аpp = Новый COMОбъект("AcroExch.App");		
		//Аpp.CloseAllDocs();
		//Аpp.Exit();
		//Return;		
		//NumAVDocs = Аpp.GetNumAVDocs();
		//ActiveDoc = Аpp.GetActiveDoc();
		//ActiveDoc.Open(ИмяФайлаШаблона, "test_1");
		//AFormAut = Новый COMОбъект("AFormAut.App");
	Исключение
		Сообщить("Не установлен Adobe Acrobat.");
		Возврат;
	КонецПопытки;	
	
	PDDoc = Новый COMОбъект("AcroExch.PDDoc");
	PDDoc.Open(ИмяФайлаШаблона);  //PDDoc.GetNumPages() PDDoc.GetFileName()
	
	Временный = СтрЗаменить(ПолучитьИмяВременногоФайла(), ".tmp", "_Anketa.pdf");//"pdf" //_" + Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd") + "
	AVDoc = PDDoc.OpenAVDoc(Временный);
	
	Если AVDoc = Неопределено Тогда
		AVDoc = Аpp.GetActiveDoc();
		AVDoc.Open(ИмяФайлаШаблона, "anketa"); //Временный
		//PDDoc = AVDoc.GetPDDoc();
		//AVDoc = Новый COMОбъект("AcroExch.AVDoc");
		//AVDoc.Open(ИмяФайлаШаблона, "test_1"); //Временный AVDoc.GetPDDoc()		
	КонецЕсли;
	
	AFormAut = Новый COMОбъект("AFormAut.App");
	Поля = AFormAut.Fields;
	Если Поля.Count < 1 Тогда
		Сообщить("Документ не содержит полей для ввода.");
		PDDoc.Close();
		AVDoc.Close();
		Возврат;
	КонецЕсли;
	
	ПараметрыДляЗапроса = Новый Массив;
	Для каждого Параметр Из ПараметрыПечати Цикл
		Если ЗначениеЗаполнено(Параметр.ПараметрПечатиВопрос) И ПараметрыДляЗапроса.Найти(Параметр.ПараметрПечатиВопрос) = Неопределено Тогда
			ПараметрыДляЗапроса.Добавить(Параметр.ПараметрПечатиВопрос);
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметр.ПараметрПечатиОтвет) И ПараметрыДляЗапроса.Найти(Параметр.ПараметрПечатиОтвет) = Неопределено Тогда
			ПараметрыДляЗапроса.Добавить(Параметр.ПараметрПечатиОтвет);
		КонецЕсли;		
	КонецЦикла;
	
	МассивВозврат = ПолучитьМаппингПараметровСбербанк_PDF_EXCEL(ПараметрыДляЗапроса);
	Для каждого Выборка Из МассивВозврат Цикл
	//Пока Выборка.Следующий() Цикл
		Если Выборка.ПараметрExcel = "#Ответ.ФИОзаемщика#" ИЛИ Выборка.ПараметрExcel = "#Ответ.Фамилия#"
			ИЛИ Выборка.ПараметрExcel = "#Ответ.Имя#" ИЛИ Выборка.ПараметрExcel = "#Ответ.Отчество#" Тогда
			//МассивДозаполенияФИО.Добавить(Выборка.ПараметрPDF);
			Продолжить;		
		КонецЕсли;
		Если Выборка.ПозицияС = 0 Тогда
			Если Поля.Item(Выборка.ПараметрPDF).Type = "checkbox" И Найти(Выборка.ПараметрExcel, "Флаг") Тогда
				Поля.Item(Выборка.ПараметрPDF).Value = "Yes";		
			Иначе
				НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, Выборка.ПараметрExcel);
				Если НайденныеПараметры.Количество() Тогда
					Для каждого Структура Из НайденныеПараметры Цикл 
						Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
						Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
						Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
						Поля.Item(Выборка.ПараметрPDF).Value = Префикс + Ответ + Суффикс;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;				
		Иначе 
			НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, Выборка.ПараметрExcel);
			Если НайденныеПараметры.Количество() Тогда
				Для каждого Структура Из НайденныеПараметры Цикл 
					Структура.Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
					Если НЕ Выборка.ПозицияПО = 0 И СтрДлина(Структура.Ответ) < Выборка.ПозицияПО Тогда
						Разница = Выборка.ПозицияПО - СтрДлина(Структура.Ответ);
						Пока Разница > 0 Цикл
							Структура.Ответ = Структура.Ответ + " ";
							Разница = Разница - 1;
						КонецЦикла;
					КонецЕсли;
					Если Выборка.ПараметрExcel = "#Ответ.МобильныйТелефон#" ИЛИ Выборка.ПараметрExcel = "#Ответ.ДомашнийТелефон#" Тогда
						Длина = СтрДлина(Структура.Ответ);
						Если Длина = 12 И Сред(Структура.Ответ, 1, 1) = "+" И Сред(Структура.Ответ, 2, 1) = "7" Тогда
							Структура.Ответ = Сред(Структура.Ответ, 3, Длина) // -2	
						ИначеЕсли Длина = 11 И Сред(Структура.Ответ, 1, 1) = "8" Тогда
			          		Структура.Ответ = Сред(Структура.Ответ, 2, Длина); //-1	
						ИначеЕсли Длина < 3 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					//СтруктураЗаполнения = Новый Структура("ПараметрПечатиВопрос, ПрефиксВопрос, СуффиксВопрос, ИспользоватьСпецСимволДляЗаменыВопрос,
					//НомерЯчейки, Ответ, ПараметрПечатиОтвет, ПрефиксОтвет, СуффиксОтвет, ИспользоватьСпецСимволДляЗаменыОтвет")
					
					Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
					Ответ = Структура.Ответ;
					Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
					Поля.Item(Выборка.ПараметрPDF).Value = Префикс + Сред(Ответ, Выборка.ПозицияС, ?(Выборка.ПозицияПО = 0, СтрДлина(Ответ), Выборка.ПозицияПО - Выборка.ПозицияС + 1)) + Суффикс; 
				КонецЦикла;	
			КонецЕсли;							
		КонецЕсли;	
	КонецЦикла;
	
	ДозаполнитьФИО(ПараметрыПечати, Поля);
		
	PDDoc.Save(1, Временный); 
	//PDDoc.Close();

	//Аpp.CloseAllDocs();
	//Аpp.Exit();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаппингПараметровСбербанк_PDF_EXCEL(ПараметрыДляЗапроса, ИпотечныйБанк = Неопределено)

	МассивВозврат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПараметрExcel КАК ПараметрExcel,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПараметрPDF КАК ПараметрPDF,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПозицияС КАК ПозицияС,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПозицияПО КАК ПозицияПО,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ExportValue КАК ExportValue,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПозицияВСтрокеСлияния КАК ПозицияВСтрокеСлияния,
	|	МаппингПараметровСбербанк_PDF_EXCEL.РазделительСтрокиСлияния КАК РазделительСтрокиСлияния
	|ИЗ
	|	РегистрСведений.МаппингПараметровСбербанк_PDF_EXCEL КАК МаппингПараметровСбербанк_PDF_EXCEL
	|ГДЕ
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПараметрExcel В(&ПараметрыДляЗапроса)
	|	И МаппингПараметровСбербанк_PDF_EXCEL.ИпотечныйБанк = &ИпотечныйБанк";
	
	Если ЗначениеЗаполнено(ИпотечныйБанк) Тогда
		Запрос.УстановитьПараметр("ИпотечныйБанк", ИпотечныйБанк);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И МаппингПараметровСбербанк_PDF_EXCEL.ИпотечныйБанк = &ИпотечныйБанк", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПараметрыДляЗапроса", ПараметрыДляЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		МассивДозаполенияФИО = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Структура = Новый Структура("ПараметрExcel, ПараметрPDF, ПозицияС, ПозицияПО, ExportValue, ПозицияВСтрокеСлияния, РазделительСтрокиСлияния");	
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			МассивВозврат.Добавить(Структура);
		КонецЦикла;
	Иначе
		Сообщить("Маппинг не заполнен.");
	КонецЕсли;
	
	Возврат МассивВозврат;
	
КонецФункции
		
&НаСервере
Процедура ЗаменитьПараметры_PDF_Сервер(АдресФайла, ПараметрыПечати, ИпотечныйБанк, Формат)   //тест
	
	#Если Сервер Тогда
		Сообщить("Сервер");
	#КонецЕсли
	
	ИмяФайлаШаблона = "";
	Если НЕ ЗначениеЗаполнено(ИпотечныйБанк) Тогда
		Возврат;	
	КонецЕсли;	
	
	Макет = ВернутьШаблонПечатнойФормы(ИпотечныйБанк);
	Если НЕ Макет = Неопределено Тогда 
		ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
		Попытка
			Макет.Записать(ИмяФайлаШаблона);
		Исключение
			Сообщить("Не удалось записать файл " + ИмяФайлаШаблона + ": " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
	КонецЕсли; 
		
	мФайл = Новый Файл(ИмяФайлаШаблона);
	Если НЕ мФайл.Существует() Тогда
		Сообщить("Файл шаблона PDF " + ИмяФайлаШаблона + " не обнаружен!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Попытка
		Аpp = Новый COMОбъект("AcroExch.App");
		
		Аpp.CloseAllDocs();
		Аpp.Exit();
		//Return;
		
		//NumAVDocs = Аpp.GetNumAVDocs();
		//ActiveDoc = Аpp.GetActiveDoc();
		//ActiveDoc.Open(ИмяФайлаШаблона, "test_1");
		//AFormAut = Новый COMОбъект("AFormAut.App");
	Исключение
		Сообщить("Не установлен Adobe Acrobat.");
		Возврат;
	КонецПопытки;	
	
	PDDoc = Новый COMОбъект("AcroExch.PDDoc");
	PDDoc.Open(ИмяФайлаШаблона);  //PDDoc.GetNumPages() PDDoc.GetFileName()
	
	Временный = СтрЗаменить(ПолучитьИмяВременногоФайла(), ".tmp", "_Anketa.pdf");//"pdf" //_" + Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd") + "
	AVDoc = PDDoc.OpenAVDoc(Временный);
	
	Если AVDoc = Неопределено Тогда
		AVDoc = Аpp.GetActiveDoc();
		AVDoc.Open(ИмяФайлаШаблона, "anketa"); //Временный
		//PDDoc = AVDoc.GetPDDoc();
		//AVDoc = Новый COMОбъект("AcroExch.AVDoc");
		//AVDoc.Open(ИмяФайлаШаблона, "test_1"); //Временный AVDoc.GetPDDoc()		
	КонецЕсли;
	
	AFormAut = Новый COMОбъект("AFormAut.App");
	Поля = AFormAut.Fields;
	Если Поля.Count < 1 Тогда
		Сообщить("Документ не содержит полей для ввода.");
		PDDoc.Close();
		AVDoc.Close();
		Возврат;
	КонецЕсли;
	
	ПараметрыДляЗапроса = Новый Массив;
	Для каждого Параметр Из ПараметрыПечати Цикл
		Если ЗначениеЗаполнено(Параметр.ПараметрПечатиВопрос) И ПараметрыДляЗапроса.Найти(Параметр.ПараметрПечатиВопрос) = Неопределено Тогда
			ПараметрыДляЗапроса.Добавить(Параметр.ПараметрПечатиВопрос);
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметр.ПараметрПечатиОтвет) И ПараметрыДляЗапроса.Найти(Параметр.ПараметрПечатиОтвет) = Неопределено Тогда
			ПараметрыДляЗапроса.Добавить(Параметр.ПараметрПечатиОтвет);
		КонецЕсли;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПараметрExcel,	
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПараметрPDF,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПозицияС,
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПозицияПО
	|ИЗ
	|	РегистрСведений.МаппингПараметровСбербанк_PDF_EXCEL КАК МаппингПараметровСбербанк_PDF_EXCEL
	|ГДЕ
	|	МаппингПараметровСбербанк_PDF_EXCEL.ПараметрExcel В(&ПараметрыДляЗапроса)";
	
	Запрос.УстановитьПараметр("ПараметрыДляЗапроса", ПараметрыДляЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Маппинг не заполнен.");
		Возврат;
	КонецЕсли;
	
	МассивДозаполенияФИО = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПараметрExcel = "#Ответ.ФИОзаемщика#" ИЛИ Выборка.ПараметрExcel = "#Ответ.Фамилия#"
			ИЛИ Выборка.ПараметрExcel = "#Ответ.Имя#" ИЛИ Выборка.ПараметрExcel = "#Ответ.Отчество#" Тогда
			//МассивДозаполенияФИО.Добавить(Выборка.ПараметрPDF);
			Продолжить;		
		КонецЕсли;
		Если Выборка.ПозицияС = 0 Тогда
			Если Поля.Item(Выборка.ПараметрPDF).Type = "checkbox" И Найти(Выборка.ПараметрExcel, "Флаг") Тогда
				Поля.Item(Выборка.ПараметрPDF).Value = "Yes";		
			Иначе
				НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, Выборка.ПараметрExcel);
				Если НайденныеПараметры.Количество() Тогда
					Для каждого Структура Из НайденныеПараметры Цикл 
						Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
						Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
						Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
						Поля.Item(Выборка.ПараметрPDF).Value = Префикс + Ответ + Суффикс;
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;				
		Иначе 
			НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, Выборка.ПараметрExcel);
			Если НайденныеПараметры.Количество() Тогда
				Для каждого Структура Из НайденныеПараметры Цикл 
					Структура.Ответ = ?(ТипЗнч(Структура.Ответ) = Тип("Дата"), Строка(Формат(Структура.Ответ, "ДФ=dd.MM.yyyy")), СтрЗаменить(Строка(Структура.Ответ), Символы.НПП, ""));
					Если НЕ Выборка.ПозицияПО = 0 И СтрДлина(Структура.Ответ) < Выборка.ПозицияПО Тогда
						Разница = Выборка.ПозицияПО - СтрДлина(Структура.Ответ);
						Пока Разница > 0 Цикл
							Структура.Ответ = Структура.Ответ + " ";
							Разница = Разница - 1;
						КонецЦикла;
					КонецЕсли;
					Если Выборка.ПараметрExcel = "#Ответ.МобильныйТелефон#" ИЛИ Выборка.ПараметрExcel = "#Ответ.ДомашнийТелефон#" Тогда
						Длина = СтрДлина(Структура.Ответ);
						Если Длина = 11 Тогда
			          		Структура.Ответ = Сред(Структура.Ответ, 3, Длина - 2);	
						ИначеЕсли Длина = 10 Тогда
							Структура.Ответ = Сред(Структура.Ответ, 2, Длина - 1);	
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					//СтруктураЗаполнения = Новый Структура("ПараметрПечатиВопрос, ПрефиксВопрос, СуффиксВопрос, ИспользоватьСпецСимволДляЗаменыВопрос,
					//НомерЯчейки, Ответ, ПараметрПечатиОтвет, ПрефиксОтвет, СуффиксОтвет, ИспользоватьСпецСимволДляЗаменыОтвет")
					
					Префикс = ?(ЗначениеЗаполнено(Структура.ПрефиксВопрос), Структура.ПрефиксВопрос, Структура.ПрефиксОтвет);
					Ответ = Структура.Ответ;
					Суффикс = ?(ЗначениеЗаполнено(Структура.СуффиксВопрос), Структура.СуффиксВопрос, Структура.СуффиксОтвет);
					Поля.Item(Выборка.ПараметрPDF).Value = Префикс + Сред(Ответ, Выборка.ПозицияС, ?(Выборка.ПозицияПО = 0, СтрДлина(Ответ), Выборка.ПозицияПО - Выборка.ПозицияС + 1)) + Суффикс; 
				КонецЦикла;	
			КонецЕсли;							
		КонецЕсли;	
	КонецЦикла;
	
	//Поля.Item("name.3").Value
	ДозаполнитьФИО(ПараметрыПечати, Поля);
		
	PDDoc.Save(1, Временный); //ИмяФайлаШаблона
	PDDoc.Close();

	Аpp.CloseAllDocs();
	Аpp.Exit();
	
	Файл = Новый ДвоичныеДанные(Временный); //ИмяФайлаШаблона
	АдресФайла = ПоместитьВоВременноеХранилище(Файл);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДозаполнитьФИО(ПараметрыПечати, Поля)
	
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.ФИОзаемщика#");
	Если НайденныеПараметры.Количество() Тогда
	 	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НайденныеПараметры[0].Ответ, " ");
		Если ЧастиСтроки.Количество() = 3 Тогда
			Поля.Item("name.0").Value = ЧастиСтроки[0];
			Поля.Item("name.1").Value = ЧастиСтроки[1] + " " + ЧастиСтроки[2];
		КонецЕсли;
	КонецЕсли;
	
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Фамилия#");
	Если НайденныеПараметры.Количество() Тогда
		Поля.Item("name.2").Value = НайденныеПараметры[0].Ответ;
	КонецЕсли;	
	
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Имя#");
	Если НайденныеПараметры.Количество() Тогда
		Поля.Item("name.3").Value = НайденныеПараметры[0].Ответ;
	КонецЕсли;	
	
	НайденныеПараметры = НайтиПараметрПоИмени(ПараметрыПечати, "#Ответ.Отчество#");
	Если НайденныеПараметры.Количество() Тогда
		Поля.Item("name.3").Value = Поля.Item("name.3").Value + " " + НайденныеПараметры[0].Ответ;
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПараметрПоИмени(ПараметрыПечати, ИмяПараметра)
	
	МассивПараметров = Новый Массив;	
	Для каждого Параметр Из ПараметрыПечати Цикл
		Если Параметр.ПараметрПечатиВопрос = ИмяПараметра 
			ИЛИ Параметр.ПараметрПечатиОтвет = ИмяПараметра Тогда 
			//Возврат Параметр;
			МассивПараметров.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции
//<> }

&НаКлиенте
Процедура ОчиститьНеУстановленныеПараметрыExcel(ActiveDocument)
	
	ОбластьПоиска = ActiveDocument.Cells;
	НачалоЛиста = ActiveDocument.Cells(1, 1);		
	ВсегоКолонок = ActiveDocument.Cells(1,1).SpecialCells(11).Column;
	ВсегоСтрок = ActiveDocument.Cells(1,1).SpecialCells(11).Row;
		
	//СтрокиТекста = Новый Массив;	
	//Для Строка = 1 По ВсегоСтрок Цикл
	//	Текст = "";
	//	Для Колонка = 1 По ВсегоКолонок Цикл  
	//		Текст = Текст + ActiveDocument.Cells(Строка, Колонка).Text;
	//	КонецЦикла;
	//	Если ЗначениеЗаполнено(Текст) Тогда
	//		СтрокиТекста.Добавить(Текст);
	//	КонецЕсли;
	//КонецЦикла;		
	
	СтрокиТекста = ПрочитатьСтрокиТекста(ActiveDocument, 1, 1, ВсегоСтрок, ВсегоКолонок); 
	НайденныеПараметры = ПолучитьНеУстановленныеПараметры(СтрокиТекста);
	
	Для каждого ПараметрПечати Из НайденныеПараметры Цикл
		СтрокаПоиска = ПараметрПечати;
		СтрокаЗамены = "";
		Флаг = Ложь;
		Если Найти(ПараметрПечати, "Флаг") Тогда
			//СтрокаЗамены = Символ(HexToDec("2610")); //☐
			Флаг = Истина;
		КонецЕсли;		
		
		Результат = ОбластьПоиска.Find(СтрокаПоиска, НачалоЛиста);	
		Если НЕ Результат = Неопределено Тогда
			Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
			Результат = ОбластьПоиска.FindNext(Результат);
			Пока НЕ Результат = Неопределено И НЕ Результат.Value = Неопределено Цикл
				Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
				Результат = ОбластьПоиска.FindNext(Результат);
			КонецЦикла;
		КонецЕсли;
				
		//Результат = ОбластьПоиска.Find(СтрокаПоиска, НачалоЛиста);		
		//Если НЕ Результат = Неопределено Тогда
		//	Результат.Value = СтрЗаменить(Результат.Value, СтрокаПоиска, СтрокаЗамены);
		//	Если Флаг Тогда
		//		Результат.Value = "";
		//		chsize = 15;
		//		x = Результат.Left + Результат.Width / 2 - chsize / 2;
		//		y = Результат.Top + Результат.Height / 2 - chsize / 2;
		//		CheckBox = ActiveDocument.CheckBoxes.Add(x, y , chsize, chsize);
		//		CheckBox.Text = "";
		//		CheckBox.Value = -4146;//1;
		//		CheckBox.LinkedCell = Результат.Address;				
		//	КонецЕсли;
		//КонецЕсли;		
		
		//Если НЕ Результат = Неопределено Тогда
			//Если СтрокаЗамены = Символ(HexToDec("2610")) Тогда
			//	chsize = 15;
			//	x = Результат.Left + Результат.Width / 2 - chsize / 2;
			//	y = Результат.Top + Результат.Height / 2 - chsize / 2;
			//	CheckBox = ActiveDocument.CheckBoxes.Add(x, y , chsize, chsize);
			//	CheckBox.Text = "";
			//	CheckBox.Value = 1;
			//	//CheckBox.Value = -4146;
			//    CheckBox.LinkedCell = Результат.address;
			//Иначе
				//Результат.Value = СтрокаЗамены;
			//КонецЕсли;
		//КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьСтрокиТекста(ЛистЭксель, НомерПервойСтроки = 1, НомерПервойКолонки = 1, ВсегоСтрок = 0, ВсегоКолонок = 0)
	
	Если ЛистЭксель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВсегоСтрок = 0 Тогда
		ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
	КонецЕсли;
	Если ВсегоКолонок = 0 Тогда
		ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	КонецЕсли;
	
	Область = ЛистЭксель.Range(ЛистЭксель.Cells(НомерПервойСтроки, НомерПервойКолонки), ЛистЭксель.Cells(ВсегоСтрок, ВсегоКолонок));
	Данные = Область.Value.Выгрузить();
	
	СтрокиТекста = Новый Массив;
	Для й = 0 По Данные.ВГраница() Цикл
		Для к = 0 По Данные[к].ВГраница() Цикл
			//Для м = 0 По Данные[й][к].ВГраница() Цикл
				Если ЗначениеЗаполнено(Данные[й][к]) Тогда
					СтрокиТекста.Добавить(Данные[й][к]);
				КонецЕсли;
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокиТекста;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьНеУстановленныеПараметрыWORD(ActiveDocument)
	
	Текст = "";
	СтрокиТекста = Новый Массив;
	Для й = 1 по ActiveDocument.Paragraphs.Count Цикл
   		Текст = ActiveDocument.Paragraphs(й).Range.Text;
		СтрокиТекста.Добавить(Текст);
	КонецЦикла;	
	
	НайденныеПараметры = ПолучитьНеУстановленныеПараметры(СтрокиТекста);
	
	Для каждого ПараметрПечати Из НайденныеПараметры Цикл
		ЗаменаКонтента = ActiveDocument.Content.Find;
		Если НЕ Найти(ПараметрПечати, "Флаг") Тогда
			ЗаменаКонтента.Execute(ПараметрПечати, Ложь, Истина, Ложь, , , Истина, , Ложь, "", 00000002);
		Иначе
			ЗаменаКонтента.Execute(ПараметрПечати, Ложь, Истина, Ложь, , , Истина, , Ложь, Символ(HexToDec("2610")), 00000002);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНеУстановленныеПараметры(СтрокиТекста)
	
	НайденныеПараметры = Новый Массив;
	Для каждого Строка Из СтрокиТекста Цикл
		ДлинаСтроки = СтрДлина(Строка);
		Для й = 1 По ДлинаСтроки Цикл
			Если Сред(Строка, й, 1) = "#" Тогда
				к = й + 1;
				ПараметрПечати = "#";  
				Пока НЕ Сред(Строка, к, 1) = "#" И к <= ДлинаСтроки Цикл
					ПараметрПечати = ПараметрПечати + Сред(Строка, к, 1);
					к = к + 1;	
				КонецЦикла;
				Если Сред(Строка, к, 1) = "#" Тогда
					Если НайденныеПараметры.Найти(ПараметрПечати + "#") = Неопределено И СтрДлина(СокрЛП(ПараметрПечати)) > 1 Тогда
						НайденныеПараметры.Добавить(ПараметрПечати + "#");
					КонецЕсли;
					й = к;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НайденныеПараметры;
		
КонецФункции

&НаКлиенте
Процедура ЗаменитьТекстWORD(ActiveDocument, СтрокаПоиска, СтрокаЗамены)
		
	Попытка	
		wdReplaceNone = 00000000;
		wdReplaceOne  = 00000001;
		wdReplaceAll  = 00000002; 
		
		Selection = ActiveDocument.Content;
	
		Selection.Find.ClearFormatting();
		Selection.Find.Replacement.ClearFormatting();
		
		Selection.Find.Forward = True;
		//Selection.Find.Wrap = wdFindContinue;
		
		Selection.Find.Format = False;
		Selection.Find.MatchCase = False;
		Selection.Find.MatchWholeWord = False;
		Selection.Find.MatchWildcards = False;
		Selection.Find.MatchSoundsLike = False;
		Selection.Find.MatchAllWordForms = False;
		
		Selection.Find.Text = СтрокаПоиска;
		Selection.Find.Replacement.Text = СтрокаЗамены;
		Selection.Find.Execute(, , , , , , , , , ,wdReplaceAll);
			
		Selection.Find.Text = "";
		Selection.Find.Replacement.Text = "";
		
		Selection.Find.ClearFormatting();
		Selection.Find.Replacement.ClearFormatting();		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьШаблонПечатнойФормы(ИпотечныйБанк)
		
	Возврат ИпотечныйБанк.ПолучитьОбъект().МакетАнкеты.Получить();

КонецФункции

&НаКлиенте
Функция ПолучитьИмяФайлаШаблона(ИпотечныйБанк, Формат = "docx")
			
	ИмяФайлаШаблона = "";
	#Если НЕ ВебКлиент Тогда
	Если НЕ ИпотечныйБанк.Пустая() Тогда
		Макет = ВернутьШаблонПечатнойФормы(ИпотечныйБанк);
		Если НЕ Макет = Неопределено Тогда 
			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
			Попытка
				Макет.Записать(ИмяФайлаШаблона);
			Исключение		
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
	#КонецЕсли
	Возврат ИмяФайлаШаблона;
	
КонецФункции

&НаКлиенте
Процедура ПечатьИпотечнойАнкеты(Команда)

	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда		
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОСохраненииАнкеты", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,
			НСтр("ru='Сначала нужно провести анкету. Ваша анкета будет проведена. 
			|Продолжить?'")
			,РежимДиалогаВопрос.ДаНет);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеОтметкиЭлементов", ЭтаФорма);
		СписокИпотечныхБанков.ПоказатьОтметкуЭлементов(Оповещение, "Выберите ипотечные банки для печати."); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасширениеИмениМакета(ИпотечныйБанк, ИмяМакета = "ИмяМакетаАнкеты")
	
	ЧастиСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИпотечныйБанк, ИмяМакета), ".");
	//СтрРазделить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИпотечныйБанк, "ИмяМакета"), ".", Ложь);
	Возврат ?(ЧастиСтроки.Количество(), ЧастиСтроки[ЧастиСтроки.ВГраница()], "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьШаблонДопЛистПечатнойФормы(ИпотечныйБанк)
		
	Возврат ИпотечныйБанк.ПолучитьОбъект().МакетДопЛист.Получить();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаШаблонаДопЛист(ИпотечныйБанк, Формат = "docx")
			
	ИмяФайлаШаблона = "";
	#Если НЕ ВебКлиент Тогда
	Если НЕ ИпотечныйБанк.Пустая() Тогда
		Макет = ВернутьШаблонДопЛистПечатнойФормы(ИпотечныйБанк);
		Если НЕ Макет = Неопределено Тогда 
			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
			Попытка
				Макет.Записать(ИмяФайлаШаблона);
			Исключение		
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
	#КонецЕсли
	Возврат ИмяФайлаШаблона;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтметкиЭлементов(Список, Параметры) Экспорт
	#Если НЕ ВебКлиент Тогда 
	Если Список = Неопределено Тогда
		Возврат;
	Иначе
        Для каждого Элемент из Список Цикл
			Если Элемент.Пометка Тогда
				Расширение = ПолучитьРасширениеИмениМакета(Элемент.Значение);
				Если ЗначениеЗаполнено(Расширение) Тогда
					ИмяФайлаШаблона = ПолучитьИмяФайлаШаблона(Элемент.Значение, Расширение);
					Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда
						ЗаполнитьМакет(ИмяФайлаШаблона, Расширение, ПолучитьПараметрыПечати(Объект.Ссылка, Элемент.Значение), Элемент.Значение); 
					КонецЕсли;
				КонецЕсли;
				Расширение = ПолучитьРасширениеИмениМакета(Элемент.Значение, "ИмяМакетаДопЛист");
				Если ЗначениеЗаполнено(Расширение) Тогда
					ИмяФайлаШаблона = ПолучитьИмяФайлаШаблонаДопЛист(Элемент.Значение, Расширение);
					Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда
						ЗаполнитьМакет(ИмяФайлаШаблона, Расширение, ПолучитьПараметрыПечати(Объект.Ссылка, Элемент.Значение), Элемент.Значение, Истина); 
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;			
        КонецЦикла;
	КонецЕсли;
	#КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОСохраненииАнкеты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	//Прочитать();
	
	Отказ = ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписиДокумента.Запись);
	
	Если НЕ Отказ Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение'"),
		,
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
		Оповестить("Запись_Анкета",Новый Структура,Объект.Ссылка);
		Модифицированность = Ложь;				
		Прочитать();
		
		Отказ = ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписиДокумента.Проведение);
		Если НЕ Отказ Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение'"),
			,
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
			Оповестить("Проведение_Анкета",Новый Структура,Объект.Ссылка);
	
			Оповещение = Новый ОписаниеОповещения("ПослеОтметкиЭлементов", ЭтаФорма);
			СписокИпотечныхБанков.ПоказатьОтметкуЭлементов(Оповещение, "Выберите ипотечные банки для печати."); 			
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать анкету.";
		Сообщение.Сообщить();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция HexToDec(Знач _Hex)
	
	База = 16;
	_Hex = СокрЛП(_Hex);
	СтаршаяСтепень = СтрДлина(_Hex) - 1;
	Результат = 0;
	счСимволов = 1;
	Пока СтаршаяСтепень >=0 Цикл
	   _HexСимвол = Сред(_Hex, счСимволов, 1);
	   Представление = Найти("0123456789ABCDEF", _HexСимвол) - 1;
	   Результат = Результат + Представление * Pow(База, СтаршаяСтепень);
	   СтаршаяСтепень = СтаршаяСтепень - 1;
	   СчСимволов = СчСимволов + 1;
   КонецЦикла; 
   
	Возврат Результат;
	
КонецФункции  

&НаКлиенте
Процедура ОпросПриИзменении(Элемент)
	ОпросПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОпросПриИзмененииНаСервере()
	
	// Для предотвращения открытия документа "Анкета" другими внешними пользователями.
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.Респондент <> ВнешниеПользователи.ПолучитьОбъектАвторизацииВнешнегоПользователя() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭтоСеансОбычногоПользователя = Истина;
	КонецЕсли;
	
	ПозиционированиеНаРазделе = Ложь;
	
	Если НЕ Объект.Опрос.Пустая() Тогда
		
		РеквизитыОпрос = ПолучитьЗначенияРеквизитовНазначениеОпроса(Объект.Опрос);
		УстановитьЗначенияРеквизитовСогласноОпросу(РеквизитыОпрос);
		
		Если Не ШаблонАнкеты.Пустая() Тогда
			
			Если Параметры.Свойство("ТолькоФормаЗаполнения") Тогда
				АвтоЗаголовок = Ложь;
				УстановитьЗаголовкиНадписей(РеквизитыОпрос);
			КонецЕсли;
			
			Анкетирование.УстановитьЭлементДереваРазделовАнкетыВступлениеЗаключение(ДеревоРазделов,"Вступление");
			Анкетирование.ЗаполнитьДеревоРазделов(ЭтотОбъект,ДеревоРазделов);
			Анкетирование.УстановитьЭлементДереваРазделовАнкетыВступлениеЗаключение(ДеревоРазделов,"Заключение");
			АнкетированиеКлиентСервер.СформироватьНумерациюДерева(ДеревоРазделов,Истина);
			
			Если (НЕ Объект.Проведен) И ЗначениеЗаполнено(Объект.РедактируемыйРаздел) Тогда
				
				Если ТипЗнч(Объект.РедактируемыйРаздел) = Тип("СправочникСсылка.ВопросыШаблонаАнкеты") Тогда
					
					НомерТекущегоРаздела = АнкетированиеКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоРазделов,Объект.РедактируемыйРаздел,"Ссылка",Истина);
					
				Иначе
					
					НомерТекущегоРаздела = АнкетированиеКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоРазделов,Объект.РедактируемыйРаздел,"ТипСтроки",Истина);
				
				КонецЕсли;
				
				Если НомерТекущегоРаздела >= 0 Тогда
				
					Элементы.ДеревоРазделов.ТекущаяСтрока = НомерТекущегоРаздела;
					ПостроениеФормыСогласноРаздела();
					ПозиционированиеНаРазделе = Истина;
					
				КонецЕсли;
			
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПредыдущийРазделПодвал.Видимость = Ложь;
	Элементы.СледующийРазделПодвал.Видимость  = Ложь;
	Если Не ПозиционированиеНаРазделе Тогда
		АнкетированиеКлиентСервер.ПереключитьВидимостьГруппТелаАнкеты(ЭтотОбъект, Истина);
	КонецЕсли;
	
	ДействияВЗависимостиОтВидаФормы();
	
	Элементы.ГруппаДеревоРазделов.Видимость         = Ложь;
	ЗаголовокКомандаРазделы = НСтр("ru = 'Показать разделы'");
	Элементы.СкрытьПоказатьДеревоРазделов.Заголовок         = ЗаголовокКомандаРазделы;
	Элементы.СкрытьПоказатьДеревоРазделовДокумент.Заголовок = ЗаголовокКомандаРазделы;
	Элементы.ДекорацияОжиданиеЭлементы.Ширина       = 45;
	
	//<590625>, Басаргин (20.12.2016) {
	Элементы.ГруппаТелоАнкеты.ТолькоПросмотр          = Ложь;
	Элементы.ГруппаОсновныеРеквизиты.ТолькоПросмотр   = Ложь;
	Выборка = Справочники.Банки.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СписокИпотечныхБанков.НайтиПоЗначению(Выборка.Ссылка) = Неопределено И ЗначениеЗаполнено(Выборка.Ссылка.ИмяМакетаАнкеты) Тогда
			СписокИпотечныхБанков.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	//<590625> }

КонецПроцедуры
//<590625> }


#КонецОбласти

//<590625>, Басаргин (26.12.2016) {
// Открывает форму редактирования произвольного многострочного текста.
//
// Параметры:
//  ОповещениеОЗакрытии     - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
//                            после закрытия формы ввода текста с теми же параметрами, что и для метода
//                            ПоказатьВводСтроки.
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
// Пример:
//
//   Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
//   ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
//
//   &НаКлиенте
//   Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
//      Если ВведенныйТекст = Неопределено Тогда
//		   Возврат;
//   	КонецЕсли;	
//	
//	   Объект.МногострочныйКомментарий = ВведенныйТекст;
//	   Модифицированность = Истина;
//   КонецПроцедуры
//
&НаКлиенте
Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
//  ФормаВладелец 			- УправляемаяФорма - форма, в поле которой выполняется ввод комментария.
//  ИмяРеквизита            - Строка - имя реквизита формы, в который будет помещен введенный пользователем
//                                     комментарий.
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//                                     По умолчанию: "Комментарий".
//
// Пример использования:
//
//	 ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
//  
&НаКлиенте
Процедура ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита, 
	Знач Заголовок = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ФормаВладелец, ИмяРеквизита);
	Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
	ЗаголовокФормы = ?(Заголовок <> Неопределено, Заголовок, НСтр("ru='Комментарий'"));
	ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, МногострочныйТекст, ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитФормы = ДополнительныеПараметры.ФормаВладелец;
	
	ПутьКРеквизитуФормы = //СтрРазделить(ДополнительныеПараметры.ИмяРеквизита, ".");
	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеПараметры.ИмяРеквизита, ".");
	
	// Если реквизит вида "Объект.Комментарий" и т.п.
	Если ПутьКРеквизитуФормы.Количество() > 1 Тогда
		Для Индекс = 0 По ПутьКРеквизитуФормы.Количество() - 2 Цикл 
			РеквизитФормы = РеквизитФормы[ПутьКРеквизитуФормы[Индекс]];
		КонецЦикла;
	КонецЕсли;	
	
	РеквизитФормы[ПутьКРеквизитуФормы[ПутьКРеквизитуФормы.Количество() - 1]] = ВведенныйТекст;
	ДополнительныеПараметры.ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Модифицированность И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = ОкончаниеРедактированиеФормыЗаполнения(РежимЗаписиДокумента.Запись);	
		Если НЕ Отказ Тогда				
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение'"),
				,
				Строка(Объект.Ссылка),
				БиблиотекаКартинок.Информация32);				
			Оповестить("Запись_Анкета",Новый Структура,Объект.Ссылка);			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры
//<590625> }

//<630901>, Басаргин (30.03.2017) {
&НаКлиенте
Процедура СоздатьИпотечнуюЗаявку(Команда)
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ИпотечнаяЗаявка.ФормаОбъекта", ПараметрыФормы);		
	
КонецПроцедуры
//<630901> }

&НаКлиенте
Процедура ПечатьСоглашенияНаОбработку(Команда)

	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда		
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОСохраненииАнкеты", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОповещенияОЗакрытии,
			НСтр("ru='Сначала нужно провести анкету. Ваша анкета будет проведена. 
			|Продолжить?'")
			,РежимДиалогаВопрос.ДаНет);
	Иначе
		Расширение = "doc";
		Если ЗначениеЗаполнено(Расширение) Тогда
			ИмяФайлаШаблона = ПолучитьИмяФайлаШаблона_Соглашение(Расширение);
			Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда
				ЗаполнитьМакет(ИмяФайлаШаблона, Расширение, ПолучитьПараметрыПечати(Объект.Ссылка, Неопределено), Неопределено); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФайлаШаблона_Соглашение(Формат = "docx")
	
	ИмяФайлаШаблона = "";
	#Если НЕ ВебКлиент Тогда
		Макет = ВернутьШаблон_Соглашение();
		Если НЕ Макет = Неопределено Тогда 
			ИмяФайлаШаблона = ПолучитьИмяВременногоФайла(Формат);
			Попытка
				Макет.Записать(ИмяФайлаШаблона);
			Исключение		
			КонецПопытки;
		КонецЕсли; 
	#КонецЕсли
	
	Возврат ИмяФайлаШаблона;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьШаблон_Соглашение()
		
	Возврат Константы.МакетСоглашенияНаОбработкуПерсональныхДанных.Получить().Получить();

КонецФункции

//======================================================================================================================

&НаСервере
Процедура КонтактноеЛицоПриИзмененииНаСервере()

	УстановитьОбработчикСобытияПриИзмененииДляВопросов();
	
	////<ЗаполнениеИзКЛ>, Басаргин (17.11.2017) {
	////ТаблицаВопросовРаздела.НайтиСтроки(Новый Структура("ЭлементарныйВопрос", ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000327")))
	//Если ЭтаФорма.НомерТекущегоРаздела = 2 Тогда
	//	ТаблицаВопросовРаздела_Выгрузка = ТаблицаВопросовРаздела.Выгрузить();
	//КонецЕсли;
	////<ЗаполнениеИзКЛ> }
	//
	//Для каждого СтрокаТаблицы Из ТаблицаВопросовРаздела Цикл
	//	
	//	Если СтрокаТаблицы.ТипВопроса = Перечисления.ТипыВопросовШаблонаАнкеты.ВопросСУсловием Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	//<ЗаполнениеИзКЛ>, Басаргин (17.11.2017) {
	//	Если ЭтаФорма.НомерТекущегоРаздела = 2 Тогда
	//		ЗаполнитьОтветПоДаннымКлиента(ИмяВопроса, СтрокаТаблицы.ЭлементарныйВопрос, ТаблицаВопросовРаздела_Выгрузка);
	//	КонецЕсли;
	//	//<ЗаполнениеИзКЛ> }
	//	
	//КонецЦикла;
	
	//++ Юкаев Роман 20180427 (//811656
	ЗаполнитьОтветыПоДаннымЗаполнения(Объект.КонтактноеЛицо);
	//-- Юкаев Роман 20180427 )
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветПоДаннымКлиента(ИмяВопроса, КлючСтроки, ТаблицаВопросовРаздела_Выгрузка)

	НайденныеСтроки = ТаблицаВопросовРаздела_Выгрузка.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
	
	Если НЕ НайденныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];	
	Если НайденнаяСтрока.ЭлементарныйВопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000249") Тогда
		//Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяВопроса]) Тогда
			ЭтаФорма[ИмяВопроса] = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(Объект.КонтактноеЛицо.ОсновнойТелефон);
		//КонецЕсли;
	КонецЕсли;
	
	//ВопросыАнкетирования = Новый Массив;

	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000327")); //Серия паспорта
	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000328")); //Номер паспорта
	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000251")); //Email:
	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000249")); //Мобильный телефон
	//
	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000218")); //Фамилия
	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000219")); //Имя
	//ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000220")); //Отчество	
	
КонецПроцедуры	

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	КонтактноеЛицоПриИзмененииНаСервере();
КонецПроцедуры

//++ Юкаев Роман 20180426 (//810686
&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокКлиентовИзДокументаОснования(Объект.РасчетИпотеки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКлиентовИзДокументаОснования(РасчетИпотеки)
	
	Список = Новый СписокЗначений;
	Для Каждого Клиент Из РасчетИпотеки.ДанныеОЗаемщиках Цикл
		Список.Добавить(Клиент.ФИО, Строка(Клиент.ФИО));
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

//++ Юкаев Роман 20180427 (//811656
&НаСервере
Процедура ЗаполнитьОтветыПоДаннымЗаполнения(КонтактноеЛицо)	
	МассивВопросов = Новый Массив;
	
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Семейное положение"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Стоимость ОН"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Первоначальный взнос (собственные средства), руб."));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Подтвержденный средний доход, руб."));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Фамилия"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Имя"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Отчество"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Дата рождения"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Пол"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Гражданство"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Мобильный телефон"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Серия"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Номер"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Дата выдачи"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Кем выдан"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Код подразделения"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Место рождения"));
	МассивВопросов.Добавить(Справочники.ВопросыШаблонаАнкеты.НайтиПоНаименованию("Сумма кредита, руб"));
	
	ФИОФизЛица = ПоулчитьПаспортныеДанныеКлиента(КонтактноеЛицо);
	
	Если Объект.Состав.Количество() > 0 Тогда
		Объект.Состав.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
       |	ВопросыШаблонаАнкеты.Ссылка КАК ВопросШаблона,
       |	ВопросыШаблонаАнкеты.ЭлементарныйВопрос КАК ЭлементарныйВопрос
       |ИЗ
       |	Справочник.ВопросыШаблонаАнкеты КАК ВопросыШаблонаАнкеты
       |ГДЕ
       |	НЕ ВопросыШаблонаАнкеты.ПометкаУдаления
       |	И ВопросыШаблонаАнкеты.Ссылка В(&МассивВопросов)
       |
       |УПОРЯДОЧИТЬ ПО
       |	ВопросыШаблонаАнкеты.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивВопросов", МассивВопросов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = Неопределено;
			Если Выборка.ВопросШаблона.Наименование = "Семейное положение" Тогда
				ДанныеЗаемщика = Объект.РасчетИпотеки.ДанныеОЗаемщиках.НайтиСтроки(Новый Структура("ФИО", Объект.КонтактноеЛицо));
				Если ДанныеЗаемщика.Количество() > 0 Тогда
					Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ДанныеЗаемщика[0].СемейноеПоложение, Выборка.ЭлементарныйВопрос);
				КонецЕсли;
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Стоимость ОН" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, Объект.РасчетИпотеки.СтоимостьКвартирыРуб, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Первоначальный взнос (собственные средства), руб." Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, Объект.РасчетИпотеки.ПервоначальныйВзносРуб, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Сумма кредита, руб" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, Объект.РасчетИпотеки.СуммаКредитаРуб, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Подтвержденный средний доход, руб." Тогда
				ДанныеЗаемщика = Объект.РасчетИпотеки.ДанныеОЗаемщиках.НайтиСтроки(Новый Структура("ФИО", Объект.КонтактноеЛицо));
				Если ДанныеЗаемщика.Количество() > 0 Тогда
					Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ДанныеЗаемщика[0].РазмерЕжемесячногоДохода, Выборка.ЭлементарныйВопрос);
				КонецЕсли;
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Фамилия" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.Фамилия, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Имя" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.Имя, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Отчество" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.Отчество, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Дата рождения" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, Объект.КонтактноеЛицо.ДатаРождения, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Пол" Тогда
				Если Объект.КонтактноеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
					Ответ = Справочники.ВариантыОтветовАнкет.НайтиПоНаименованию("Мужской", Истина);
				Иначе
					Ответ = Справочники.ВариантыОтветовАнкет.НайтиПоНаименованию("Женский", Истина);
				КонецЕсли;
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, Ответ, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Гражданство" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.Гражданство, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Мобильный телефон" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(Объект.КонтактноеЛицо.ОсновнойТелефон), Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Серия" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.Серия, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Номер" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.Номер, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Дата выдачи" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.ДатаВыдачи, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Кем выдан" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.КемВыдан, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Код подразделения" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, ФИОФизЛица.КодПодразделения, Выборка.ЭлементарныйВопрос);
			ИначеЕсли Выборка.ВопросШаблона.Наименование = "Место рождения" Тогда
				Стр = Новый Структура("Вопрос, Ответ, ЭлементарныйВопрос", Выборка.ВопросШаблона, Объект.КонтактноеЛицо.МестоРождения, Выборка.ЭлементарныйВопрос);
			Иначе
			КонецЕсли;
			
			Если Стр <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Объект.Состав.Добавить(), Стр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	УстановитьЗначенияРеквизитовФормыЗаполненияРаздела();
	
КонецПроцедуры
//-- Юкаев Роман 20180427 )

&НаСервереБезКонтекста
Функция ПоулчитьПаспортныеДанныеКлиента(Клиент)
	
	СтруктураПараметров = Новый Структура("АдресПоПропискеКлиента, ВидДокумента, ДатаАкта, ДатаВыдачи, ДатаРождения, Имя, 
										  |КемВыдан, КодПодразделения, МатьНациональность, МатьФИО, МестоРождения, Номер, НомерАкта,
										  |ОтецНациональность, ОтецФИО, Отчество, Пол, Серия, Фамилия, Гражданство");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыФизическихЛиц.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период
		|ПОМЕСТИТЬ вт_СписокКлиентовДляСреза
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|ГДЕ
		|	ДокументыФизическихЛиц.ФизЛицо = &ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыФизическихЛиц.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛиц.ФизЛицо КАК ФизЛицо,
		|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ВТ_АктуальныйВидДокумента
		|ИЗ
		|	вт_СписокКлиентовДляСреза КАК вт_СписокКлиентовДляСреза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО вт_СписокКлиентовДляСреза.ФизЛицо = ДокументыФизическихЛиц.ФизЛицо
		|			И вт_СписокКлиентовДляСреза.Период = ДокументыФизическихЛиц.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлиентыКонтактнаяИнформация.Представление КАК АдресПоПропискеКлиента,
		|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка) КАК ВидДокумента,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаАкта,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыдачи,
		|	КлиентыКонтактнаяИнформация.Ссылка.ДатаРождения КАК ДатаРождения,
		|	"""" КАК Имя,
		|	"""" КАК КемВыдан,
		|	"""" КАК КодПодразделения,
		|	"""" КАК МатьНациональность,
		|	"""" КАК МатьФИО,
		|	КлиентыКонтактнаяИнформация.Ссылка.МестоРождения КАК МестоРождения,
		|	"""" КАК Номер,
		|	"""" КАК НомерАкта,
		|	"""" КАК ОтецНациональность,
		|	"""" КАК ОтецФИО,
		|	"""" КАК Отчество,
		|	КлиентыКонтактнаяИнформация.Ссылка.Пол КАК Пол,
		|	"""" КАК Серия,
		|	"""" КАК Фамилия,
		|	1 КАК Сортировка,
		|	"""" КАК Гражданство
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПоПропискеКлиента)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
		|	"""",
		|	"""",
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка),
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	"""",
		|	2,
		|	""""
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Период,
		|			ФизЛицо = &ФизЛицо
		|				И ВидДокумента В
		|					(ВЫБРАТЬ
		|						ВТ_АктуальныйВидДокумента.ВидДокумента
		|					ИЗ
		|						ВТ_АктуальныйВидДокумента КАК ВТ_АктуальныйВидДокумента)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка),
		|	СвидетельстваОРожденииФизическихЛицСрезПоследних.ДатаАкта,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	"""",
		|	"""",
		|	"""",
		|	СвидетельстваОРожденииФизическихЛицСрезПоследних.МатьНациональность,
		|	СвидетельстваОРожденииФизическихЛицСрезПоследних.МатьФИО,
		|	"""",
		|	"""",
		|	СвидетельстваОРожденииФизическихЛицСрезПоследних.НомерАкта,
		|	СвидетельстваОРожденииФизическихЛицСрезПоследних.ОтецНациональность,
		|	СвидетельстваОРожденииФизическихЛицСрезПоследних.ОтецФИО,
		|	"""",
		|	ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка),
		|	"""",
		|	"""",
		|	3,
		|	""""
		|ИЗ
		|	РегистрСведений.СвидетельстваОРожденииФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизЛицо) КАК СвидетельстваОРожденииФизическихЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ФИОФизическихЛицСрезПоследних.Имя,
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	ФИОФизическихЛицСрезПоследних.Отчество,
		|	ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.ПустаяСсылка),
		|	"""",
		|	ФИОФизическихЛицСрезПоследних.Фамилия,
		|	4,
		|	ЕСТЬNULL(ГражданствоФизическихЛицСрезПоследних.Страна, """")
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизЛицо) КАК ФИОФизическихЛицСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизЛицо) КАК ГражданствоФизическихЛицСрезПоследних
		|		ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", Клиент);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл		
			Если Выборка.Сортировка = 1 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка, "АдресПоПропискеКлиента, Пол, ДатаРождения, МестоРождения");
			ИначеЕсли Выборка.Сортировка = 2 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка, "ВидДокумента, ДатаВыдачи, КемВыдан, КодПодразделения, Номер, Серия");
			ИначеЕсли Выборка.Сортировка = 3 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка, "ДатаАкта, МатьНациональность, МатьФИО, НомерАкта, ОтецНациональность, ОтецФИО");
			ИначеЕсли Выборка.Сортировка = 4 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка, "Имя, Отчество, Фамилия, Гражданство");
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции
//-- Юкаев Роман 20180426 )
