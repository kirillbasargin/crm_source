Перем ОбъектНедвижимостиЗабронирован, ОбъектНедвижимостиЗабронированЭтимЖеДокументом, ДокументБронированияТолькоИзОчереди;

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//<852115>, Басаргин (07.08.2018) {
	РольБронированиеДомКлик = УправлениеДоступом.ЕстьРоль("БронированиеДомКлик", , ПользователиКлиентСервер.АвторизованныйПользователь());
	Если НЕ РольБронированиеДомКлик И ДомКлик Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не достаточно прав для оперции с бронированием ДомКлик. Обратитесь к старшему смены ГПТ!", Ссылка, "ОбъектНедвижимости", "Объект", Отказ);
		Возврат;			
	КонецЕсли;
	//<852115> }
		
	Если ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования Тогда
				
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Возврат;		
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьБронирования.ОбъектНедвижимости КАК ОбъектНедвижимости
		|ИЗ
		|	РегистрНакопления.ОчередьБронирования КАК ОчередьБронирования
		|ГДЕ
		|	ОчередьБронирования.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ОчередьБронирования.ДокументБронирования = &ДокументБронирования
		|	И ОчередьБронирования.Регистратор <> &Регистратор";
		Запрос.УстановитьПараметр("ДокументБронирования", 	ОснованиеДляСнятияБронирования);
		Запрос.УстановитьПараметр("Регистратор", 			Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
			Сообщить("Уже существует документ снятия бронирования!", СтатусСообщения.ОченьВажное)
		КонецЕсли;		
				
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацииБронирования.Бронирование Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Возврат;		
		КонецЕсли;		
		
		//<821561>, Басаргин (21.05.2018) {
		ОграничениеКоличестваБроней = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ОграничениеКоличестваБроней");
		Если НЕ ОграничениеКоличестваБроней = Неопределено И ОграничениеКоличестваБроней Тогда
			ЕстьРольРедактированиеСрокаБронирования = УправлениеДоступом.ЕстьРоль("РедактированиеСрокаБронирования", , ПользователиКлиентСервер.АвторизованныйПользователь()); //И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ПользователиКлиентСервер.АвторизованныйПользователь())																	
			Если НЕ ЕстьРольРедактированиеСрокаБронирования Тогда											
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Бронирование.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.Бронирование КАК Бронирование
				|ГДЕ
				|	НЕ Бронирование.ПометкаУдаления
				|	И Бронирование.Проведен
				|	И Бронирование.ДокументЗапрос = &ДокументЗапрос
				|	И Бронирование.ОбъектНедвижимости = &ОбъектНедвижимости
				|	И Бронирование.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацииБронирования.Бронирование)
				|	И Бронирование.Ссылка <> &Ссылка";
				
				Запрос.УстановитьПараметр("ОбъектНедвижимости", ОбъектНедвижимости);
				Запрос.УстановитьПараметр("ДокументЗапрос", ДокументЗапрос);
				Запрос.УстановитьПараметр("Ссылка", Ссылка);

				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда                  
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объект недвижимости уже бронировался по данному запросу, для повторного бронирования обратитесь к старшему менеджеру!", Ссылка, "ОбъектНедвижимости", "Объект", Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//<821561> }	
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	//CRMУправлениеОбъектамиНедвижимостиСервер.УдалитьДвиженияПоРегиструСтатусовОбъектовНедвижимости(Ссылка);
	
	ОбъектНедвижимостиЗабронирован = Ложь;
	
	ДополнитьДвиженияПоЛистингу();
	СформироватьДвиженияПоРегиструСрокиБронирования();
	СформироватьДвиженияПоРегиструОчередьБронирования();
	СформироватьДвиженияПоРегиструСтатусовОбъектовНедвижимости();
	СформироватьДвиженияПоРегиструОбъектыНедвижимостиДляАктуализацииОчередиБронирования();
	
	//<852115>, Басаргин (08.08.2018) {
	Если НЕ Отказ 
		И ДомКлик
		И (ДополнительныеСвойства.Свойство("ОтправлятьSMS_ДомКлик") И ДополнительныеСвойства.ОтправлятьSMS_ДомКлик)
		И УправлениеДоступом.ЕстьРоль("БронированиеДомКлик", , ПользователиКлиентСервер.АвторизованныйПользователь())
		И ВидОперации = Перечисления.ВидыОперацииБронирования.Бронирование Тогда					
		Тема = "Рассылка по бронированию ДомКлик";
		ТекстРассылки = "Компания «Абсолют Недвижимость» приветствует Вас!" + Символы.ПС
						+ "По Вашему запросу забронирована квартира " + Строка(ОбъектНедвижимости) + " в ЖК " + Строка(ОбъектНедвижимости.Владелец) + Символы.ПС
						+ "Окончание срока бронирования: " + ПолучитьДатуКонцаСрокаБронирования() + Символы.ПС 
						+ "Будем рады видеть Вас в офисе продаж!";		
				
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ТекущаяДата());
		МассивПараметров.Добавить(Дата);
		МассивПараметров.Добавить(Неопределено);
		МассивПараметров.Добавить(Клиент);
		МассивПараметров.Добавить(ДокументЗапрос);
		МассивПараметров.Добавить(ТекстРассылки);
		МассивПараметров.Добавить(Истина);
		МассивПараметров.Добавить(Ложь);
		МассивПараметров.Добавить(Тема);
		
		СоздатьSMSВФоне(МассивПараметров);						
	КонецЕсли;		
	//<852115> }
	
КонецПроцедуры

//Процедура ОбработкаУдаленияПроведения(Отказ)
//	CRMУправлениеОбъектамиНедвижимостиСервер.УдалитьДвиженияПоРегиструСтатусовОбъектовНедвижимости(Ссылка);
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования Тогда
		ПроверяемыеРеквизиты.Добавить("ОснованиеДляСнятияБронирования");	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции        

Процедура ДополнитьДвиженияПоЛистингу();

	ВерсияДокумента = Документы.Запрос.ПолучитьНомерПоследнейВерсииЛистинга(ДокументЗапрос); 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ РегистрСведений.Листинг.СрезПоследних(,Запрос = &Запрос И ВерсияДокумента = &ВерсияДокумента И ОбъектНедвижимости = &ОбъектНедвижимости)";	
	Запрос.УстановитьПараметр("Запрос", 			ДокументЗапрос);
	Запрос.УстановитьПараметр("ВерсияДокумента",	ВерсияДокумента);
	Запрос.УстановитьПараметр("ОбъектНедвижимости",	ОбъектНедвижимости);
	
	Результат = Запрос.Выполнить();	
	
	Если Результат.Пустой() Тогда		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости,
		|	Квартирограмма.ОбъектНедвижимости.Тип КАК Вид,
		|	Квартирограмма.ОбъектНедвижимости.Правообладатель КАК Правообладатель,
		|	Квартирограмма.ОбъектСтроительства КАК ОбъектСтроительства,
		|	Квартирограмма.ОбъектСтроительства.Проект КАК Проект,
		|	Квартирограмма.ОбъектСтроительства.Фаза КАК Фаза,
		|	Квартирограмма.ОбъектСтроительства.ВидМатериала КАК ВидМатериала,
		|	Квартирограмма.ОбъектСтроительства.СрокСдачи КАК СрокСдачи,
		|	Квартирограмма.Корпус КАК Корпус,
		|	Квартирограмма.Этаж КАК Этаж,
		|	Квартирограмма.Подъезд КАК Подъезд_Секция,
		|	Квартирограмма.ГруппаПравообладателя КАК ГруппаПравообладателя,
		|	Квартирограмма.НомерНаПлощадке КАК НомерНаПлощадке,
		|	Квартирограмма.ОбъектСтроительства.Отделка КАК Отделка,
		|	Квартирограмма.ТипОтделки КАК ТипОтделки,
		|	Квартирограмма.Площадь КАК Площадь,
		|	Квартирограмма.КоличествоКомнат КАК КоличествоКомнат,
		|	Квартирограмма.ДатаСтартаПродаж КАК СтартПродаж
		|ИЗ
		|	РегистрСведений.Квартирограмма КАК Квартирограмма
		|ГДЕ
		|	Квартирограмма.ОбъектНедвижимости = &ОбъектНедвижимости";	
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			НаборЗаписей = РегистрыСведений.Листинг.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Запрос.Установить(ДокументЗапрос);
			НаборЗаписей.Отбор.ОбъектНедвижимости.Установить(ОбъектНедвижимости);
			НаборЗаписей.Отбор.ВерсияДокумента.Установить(ВерсияДокумента);
			НаборЗаписей.Отбор.Период.Установить(ЭтотОбъект.Дата);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.Период 			= ЭтотОбъект.Дата;
			НоваяЗапись.Запрос 			= ДокументЗапрос;
			НоваяЗапись.ВерсияДокумента = ВерсияДокумента;
			
			НаборЗаписей.Записать(Ложь);			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструСрокиБронирования()

	ОбъектНедвижимостиЗабронирован 					= CRMУправлениеОбъектамиНедвижимостиСервер.ОбъектНедвижимостиЗабронирован(ОбъектНедвижимости, Ссылка);
	ОбъектНедвижимостиЗабронированЭтимЖеДокументом 	= CRMУправлениеОбъектамиНедвижимостиСервер.ОбъектНедвижимостиЗабронирован(ОбъектНедвижимости, ОснованиеДляСнятияБронирования, Истина);
	ДокументБронированияТолькоИзОчереди				= ДокументБронированияТолькоИзОчереди();	
	
	Если ОбъектНедвижимостиЗабронирован
			И ВидОперации = Перечисления.ВидыОперацииБронирования.Бронирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования
			И ДокументБронированияТолькоИзОчереди Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоРегиструБронирования				= Движения.СрокиБронированияОбъектовНедвижимости;	
	НоваяЗапись									= ДвиженияПоРегиструБронирования.Добавить();
	НоваяЗапись.Период							= Дата;
	НоваяЗапись.ДатаКонцаСрокаБронирования 		= ?(ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования,
																	Дата,
																	Дата + 86400 * ДлительностьСрокаБронирования);
	ЗаполнитьЗначенияСвойств(НоваяЗапись, Ссылка);	
	ДвиженияПоРегиструБронирования.Записывать	= Истина;	
				
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструОчередьБронирования()
	
	СнятиеСРезерва = ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования;
	
	ДвиженияПоРегиструОчередьБронирования	= Движения.ОчередьБронирования;
	НоваяЗапись								= ?(СнятиеСРезерва,
													ДвиженияПоРегиструОчередьБронирования.ДобавитьРасход(),
													ДвиженияПоРегиструОчередьБронирования.ДобавитьПриход());
	НоваяЗапись.Период						= Дата;
	НоваяЗапись.ДокументБронирования		= ?(СнятиеСРезерва, ОснованиеДляСнятияБронирования, Ссылка);
	НоваяЗапись.ОбъектНедвижимости			= ОбъектНедвижимости;
	НоваяЗапись.Забронирован                = 1;
	
	ДвиженияПоРегиструОчередьБронирования.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструСтатусовОбъектовНедвижимости()

	Если ОбъектНедвижимостиЗабронирован 
			И ВидОперации = Перечисления.ВидыОперацииБронирования.Бронирование Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ОбъектНедвижимостиЗабронированЭтимЖеДокументом
			И ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования Тогда
		Возврат;
	КонецЕсли;	
	
	//НаборЗаписей = РегистрыСведений.СтатусыОбъектовНедвижимости.СоздатьНаборЗаписей();
	
	//НаборЗаписей.Отбор.ОбъектНедвижимости.Установить(ОбъектНедвижимости);
	//НаборЗаписей.Отбор.Период.Установить(Дата);
	//
	//НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись = Движения.СтатусыОбъектовНедвижимости.Добавить();
	
	НоваяЗапись.Период 				= Дата;
	НоваяЗапись.ОбъектНедвижимости 	= ОбъектНедвижимости;
	НоваяЗапись.ДокументРегистратор = Ссылка;
	НоваяЗапись.Статус				= ?(ВидОперации = Перечисления.ВидыОперацииБронирования.Бронирование,
											Перечисления.СтатусыОбъектовНедвижимости.Забронирован,
											Перечисления.СтатусыОбъектовНедвижимости.Свободен);
	
	//НаборЗаписей.Записать();
	
	Движения.СтатусыОбъектовНедвижимости.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструОбъектыНедвижимостиДляАктуализацииОчередиБронирования()

	Если ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования
			И ДокументБронированияТолькоИзОчереди Тогда
		Возврат;
	КонецЕсли;	
	
	//Удалять движения по данному регистру при отмене проведения не требуется, так как они будут удаляться регламентным заданием
	
	Если ВидОперации = Перечисления.ВидыОперацииБронирования.СнятиеБронирования Тогда	
		
		НаборЗаписей = РегистрыСведений.ОбъектыНедвижимостиДляАктуализацииОчередиБронирования.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ОбъектНедвижимости.Установить(ОбъектНедвижимости);	
		НаборЗаписей.Очистить();		
		НоваяЗапись 					= НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектНедвижимости 	= ОбъектНедвижимости;
		
		НаборЗаписей.Записать();			
		
	КонецЕсли;

КонецПроцедуры

Функция ДокументБронированияТолькоИзОчереди()

	Если НЕ ЗначениеЗаполнено(ОснованиеДляСнятияБронирования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	СрокиБронированияОбъектовНедвижимости.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СрокиБронированияОбъектовНедвижимости КАК СрокиБронированияОбъектовНедвижимости
	|ГДЕ
	|	СрокиБронированияОбъектовНедвижимости.Регистратор = &Регистратор";

	Запрос.УстановитьПараметр("Регистратор", ОснованиеДляСнятияБронирования);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;	

КонецФункции // ()

//<852115>, Басаргин (08.08.2018) {
Процедура СоздатьSMSВФоне(ПараметрыЗадания)

	ВидСообщения = НСтр("ru = 'Формирование фоновых заданий для создания документов СМС по рассылке.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());	
	ФоновыеЗадания.Выполнить("CRMРегаментныеЗадания.СформироватьДокумент", ПараметрыЗадания, "ФормированиеSMS_БронированиеДомКлик", "Формирование SMS: бронирование ДомКлик");	
	ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация, , , "ФормированиеSMS_БронированиеДомКлик");
	
КонецПроцедуры

Функция ПолучитьДатуКонцаСрокаБронирования()
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацииБронирования.Бронирование Тогда
		Возврат "";
	КонецЕсли;	
		
	ОбъектНедвижимостиЗабронирован = CRMУправлениеОбъектамиНедвижимостиСервер.ОбъектНедвижимостиЗабронирован(ОбъектНедвижимости, Ссылка);
	
	Если ОбъектНедвижимостиЗабронирован Тогда  
		ДатаКонцаСрокаБронирования = РегистрыСведений.СрокиБронированияОбъектовНедвижимости.ПолучитьПоследнее(Новый Граница(МоментВремени(), ВидГраницы.Включая), Новый Структура("ОбъектНедвижимости", ОбъектНедвижимости)).ДатаКонцаСрокаБронирования;	
	Иначе
		ДатаКонцаСрокаБронирования = Дата + ДлительностьСрокаБронирования * 86400;
	КонецЕсли;
	
	Возврат Формат(ДатаКонцаСрокаБронирования, "ДФ='dd.MM.yyyy HH:mm'");
	
КонецФункции
//<852115> }

#КонецОбласти


