#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		//EXTCODE Шумилин Сергей 12.10.2017 {{ --->
		Объект.Ответственный = Справочники.ГруппыПользователей.ПустаяСсылка();
		//EXTCODE Шумилин Сергей 12.10.2017 <--- }} 
	КонецЕсли;
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	
	// Определим типы контактов, которые можно создать.
	СписокИнтерактивноСоздаваемыхКонтактов = Взаимодействия.СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов();
	Элементы.СоздатьКонтакт.Видимость      = СписокИнтерактивноСоздаваемыхКонтактов.Количество() > 0;
	
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	ПриСозданииИПриЧтенииНаСервере();
	
	Взаимодействия.ЗаполнитьСписокВыбораВремени(Элементы.ВремяНачала, 1800);
	Взаимодействия.ЗаполнитьСписокВыбораВремени(Элементы.ВремяОкончания, 1800);

	Элементы.Рассмотрено.ТолькоПросмотр = УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Пользователи.ТекущийПользователь()) И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь());
	
	//<789123>, Басаргин (21.03.2018) {
	Если Параметры.Свойство("ОчиститьРассмотретьПосле") И Параметры.ОчиститьРассмотретьПосле Тогда
		РассмотретьПосле = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;	
	//<789123> }
	
	//<789123>, Басаргин (27.03.2018) {
	ЭтоМенеджерГПТ = УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , ПользователиКлиентСервер.АвторизованныйПользователь()) И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ПользователиКлиентСервер.АвторизованныйПользователь());
	//<789123> }
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииИПриЧтенииНаСервере();
	
	//EXTCODE Шумилин Сергей 08.06.2017 {{ --->
	ТолькоПросмотр 					= НЕ CRMСервер.ПроверитьВозможностьРедактированияДокументовВзаимодействия(ТекущийОбъект.Автор, ТекущийОбъект.Ответственный);				
	Элементы.Предмет.ТолькоПросмотр = ТолькоПросмотр;
	//EXTCODE Шумилин Сергей 08.06.2017 <--- }} 
	
	//<766923>, Басаргин (30.01.2018) {
	УстановитьТолькоПросмотрДляЗапланированныхВзаимодействий(ТекущийОбъект);
	//<766923> }

	Если УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()) Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьОтображениеДанных();
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "Встреча");
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи, РежимПроведения)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	//++ Юкаев Роман 20180206 ( //771565
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		РегистрыСведений.ИзмененияВзаимодействий.ОбработатьОбъект(ТекущийОбъект, Предмет, Рассмотрено, РассмотретьПосле);
	КонецЕсли;
	//-- Юкаев Роман 20180206 )
	
	////<789123>, Басаргин (14.03.2018) {
	//CRMСервер.ПередЗаписьюВзаимодействияНаСервере(ТекущийОбъект); 
	////<789123> }
			
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);	
	
	//<>, Басаргин (25.10.2017) {
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Отказ", Отказ);	
	//<> }

	//++ Юкаев Роман 20180213 (//774947
	ЭтоОптовый = ПроверитьПризнакОптовый(Предмет);
	
	Если (Объект.Ссылка.Пустая() Или ИзменилсяРеквизит(Объект, РассмотретьПосле)) И Не Рассмотрено И Не Объект.Отменено И ЭтоОптовый Тогда
		ОтправитьПисьмоГруппеПользователей(Объект, РассмотретьПосле, Предмет);
	КонецЕсли;
	//-- Юкаев Роман 20180213 )
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Встреча");
	ПроверитьДоступностьСозданияКонтакта();
	//EXTCODE Шумилин Сергей 01.12.2017 {{ ---> ,
	//CRMКлиент.ВывестиФормуСозданияЗапланированногоВзаимодействияДляМенеджераФилиала(ЭтотОбъект, ПараметрыЗаписи);
	Оповестить("ОбновитьРабочийСтолКлиента");
	//EXTCODE Шумилин Сергей 01.12.2017 <--- }} 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
		
	//EXTCODE Шумилин Сергей 07.12.2017 {{ --->
	CRMСервер.ПослеЗаписиВзаимодействияНаСервере(ТекущийОбъект, ЭтотОбъект, ПараметрыЗаписи);
	//EXTCODE Шумилин Сергей 07.12.2017 <--- }} 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыОписаниеУчастникиДополнительноПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(
		РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
	//++ Юкаев Роман 20171225 ( //Задача 755754
	Объект.Удалить_РассмотретьПосле = РассмотретьПосле;
	//-- Юкаев Роман 20171225 )
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)

	Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала) + ВыделитьВремя(ВремяНачала);
	Объект.ДатаОкончания = Объект.ДатаНачала + Продолжительность;
	ВремяОкончания = Объект.ДатаОкончания;

КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)

	Если НачалоДня(Объект.ДатаОкончания) + ВыделитьВремя(ВремяОкончания) < Объект.ДатаНачала Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Время окончания не может быть меньше времени начала.'"),,"ВремяОкончания");
		ВремяОкончания = ВремяНачала + 1800;
		Объект.ДатаОкончания = НачалоДня(Объект.ДатаОкончания) + ВыделитьВремя(ВремяОкончания);
		Возврат;
	КонецЕсли;

	Объект.ДатаОкончания = НачалоДня(Объект.ДатаОкончания) + ВыделитьВремя(ВремяОкончания);
	Продолжительность = Объект.ДатаОкончания - Объект.ДатаНачала;

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)

	Объект.ДатаНачала = НачалоДня(ДатаНачала) + ВыделитьВремя(ВремяНачала);
	Объект.ДатаОкончания = Объект.ДатаНачала + Продолжительность;
	ДатаОкончания = Объект.ДатаОкончания;

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)

	//EXTCODE Шумилин Сергей 30.03.2017 {{ --->
	//Если НачалоДня(ДатаОкончания) + ВыделитьВремя(ВремяОкончания) < Объект.ДатаНачала Тогда
	//	ОчиститьСообщения();
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата окончания не может быть меньше даты начала.'"),,"ДатаОкончания");
	//	ДатаОкончания = Объект.ДатаНачала;
	//	Объект.ДатаОкончания = НачалоДня(ДатаОкончания) + ВыделитьВремя(ВремяОкончания);
	//	Возврат;
	//КонецЕсли;

	//Объект.ДатаОкончания = НачалоДня(ДатаОкончания) + ВыделитьВремя(ВремяОкончания);
	//Продолжительность = Объект.ДатаОкончания - Объект.ДатаНачала;
	Объект.ДатаНачала = Объект.ДатаОкончания;
	//EXTCODE Шумилин Сергей 30.03.2017 <--- }} 

КонецПроцедуры

&НаКлиенте
Процедура РассмотреноПриИзменении(Элемент)
	
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	Элементы.ДатаОкончания.Доступность =  НЕ Рассмотрено;
	Элементы.ВремяОкончания.Доступность =  НЕ Рассмотрено;
	
	//EXTCODE Шумилин Сергей 25.10.2017 {{ --->
	Объект.ДатаОкончания 			= ТекущаяДата();
	АБ_ИзменилсяПризнакРассмотрено 	= Истина;
	//EXTCODE Шумилин Сергей 25.10.2017 <--- }} 
	
	//<>, Басаргин (27.10.2017) {
	Если Рассмотрено Тогда
		Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	Иначе
		Объект.Ответственный = 0;
	КонецЕсли ;
	
	Элементы.Ответственный.Доступность = НЕ Рассмотрено;
	Элементы.МестоПроведенияВстречи.Доступность = НЕ Рассмотрено;
	ОтветственныйПриИзменении(Неопределено);
	//<> }
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

//<>, Басаргин (31.01.2018) {
&НаКлиенте
Процедура МестоПроведенияВстречиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.МестоПроведенияВстречи) Тогда
		СписокВыбора = Новый СписокЗначений;
		МестоПроведенияВстречиПриИзмененииНаСервере(СписокВыбора);
		Если СписокВыбора.Количество() Тогда
			ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОдногоЭлементаИзСписка", ЭтотОбъект, Новый Структура("ТипВыбора", "Ответственный"));
			СписокВыбора.ПоказатьВыборЭлемента(ОбработчикОповещенияОЗакрытии, НСтр("ru = 'Выберите ответственного.'"), СписокВыбора[0]);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
//<> }

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "Встреча");
	ИзменилисьКонтакты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.Участники.ТекущиеДанные;
	
	//EXTCODE Шумилин Сергей 17.11.2017 {{ --->
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.Запрос") Тогда
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", Новый Структура("СозданиеКлиентаИзЗапроса", Истина), Элемент);	
	Иначе
	//EXTCODE Шумилин Сергей 17.11.2017 <--- }} 
	
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТолькоEmail",                       Ложь);
		ПараметрыОткрытия.Вставить("ТолькоТелефон",                     Ложь);
		ПараметрыОткрытия.Вставить("ЗаменятьПустыеАдресИПредставление", Истина);
		ПараметрыОткрытия.Вставить("ДляФормыУточненияКонтактов",        Ложь);
		ПараметрыОткрытия.Вставить("ИдентификаторФормы",                УникальныйИдентификатор);
		
		ВзаимодействияКлиент.ВыбратьКонтакт(Предмет, текДанные.КакСвязаться, текДанные.ПредставлениеКонтакта,
			                                текДанные.Контакт, ПараметрыОткрытия) 
	КонецЕсли;											
											
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаПриИзменении(Элемент)
	
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВзаимодействияВызовСервера.ПредставлениеИВсяКонтактнаяИнформациюКонтакта(ТекущиеДанные.Контакт,
		                                                                         ТекущиеДанные.ПредставлениеКонтакта,
		                                                                         ТекущиеДанные.КакСвязаться);
	КонецЕсли;

	ПроверитьДоступностьСозданияКонтакта();
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "Встреча");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКонтактВыполнить()
	
	текДанные = Элементы.Участники.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		ВзаимодействияКлиент.СоздатьКонтакт(
			текДанные.ПредставлениеКонтакта, текДанные.КакСвязаться, Объект.Ссылка, СписокИнтерактивноСоздаваемыхКонтактов);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверитьДоступностьСозданияКонтакта()
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Элементы.СоздатьКонтакт.Доступность = (Не Объект.Ссылка.Пустая()) 
	                                      И ((ТекДанные <> Неопределено) 
	                                      И (НЕ ЗначениеЗаполнено(ТекДанные.Контакт)));
	
КонецПроцедуры

&НаКлиенте
Функция ВыделитьВремя(Дата)

	Возврат Час(Дата) * 3600 + Минута(Дата) * 60;

КонецФункции

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ДатаНачала        = Объект.ДатаНачала;
	ВремяНачала       = Объект.ДатаНачала;
	ДатаОкончания     = Объект.ДатаОкончания;
	ВремяОкончания    = Объект.ДатаОкончания;
	Продолжительность = Объект.ДатаОкончания - Объект.ДатаНачала;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	Иначе
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "Встреча");
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	
	Элементы.ДатаОкончания.Доступность =  НЕ Рассмотрено;
	Элементы.ВремяОкончания.Доступность =  НЕ Рассмотрено;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	//<>, Басаргин (20.11.2017) {
	Если УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Пользователи.ТекущийПользователь())
		И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()) Тогда
		Элементы.ГруппаОкончание.Доступность = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			Объект.Тема = "Встреча";
			Объект.ДатаОкончания = Неопределено;
			ДатаОкончания = Объект.ДатаОкончания;
			ВремяОкончания = Объект.ДатаОкончания;
		КонецЕсли;		
	КонецЕсли;
	//<> }
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

//<766923>, Басаргин (30.01.2018) {
&НаСервере
Процедура УстановитьТолькоПросмотрДляЗапланированныхВзаимодействий(ТекущийОбъект)
	
	Если УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()) Тогда
		ТолькоПросмотр = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если ТолькоПросмотр И НЕ ТекущийОбъект.Отменено И НЕ Рассмотрено Тогда
		ТолькоПросмотр = ПолучитьТолькоПросмотрПоАвтору(ТекущийОбъект.Автор, ТекущийОбъект.Ответственный);
	КонецЕсли;
	
	//Если ТолькоПросмотр И НЕ Рассмотрено И НЕ ТекущийОбъект.Отменено Тогда
	//	Если УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Пользователи.АвторизованныйПользователь()) Тогда	
	//		ТолькоПросмотр = НЕ УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , ТекущийОбъект.Автор);                       
	//	КонецЕсли;
	//	Если УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , Пользователи.АвторизованныйПользователь()) Тогда
	//		Если ТипЗнч(ТекущийОбъект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
	//			ТолькоПросмотр = НЕ (УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ТекущийОбъект.Автор) ИЛИ УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ТекущийОбъект.Ответственный));
	//		ИначеЕсли ТипЗнч(ТекущийОбъект.Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	//			ТолькоПросмотр = НЕ (УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ТекущийОбъект.Автор) ИЛИ Справочники.ГруппыПользователей.НайтиПоНаименованию("Филиал", Истина) = РегистрыСведений.Взаимодействия.ПолучитьВерхнийУровеньГруппы(ТекущийОбъект.Ответственный));
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
			
КонецПроцедуры
//<766923> }

//<>, Басаргин (17.11.2017) {
Функция ПолучитьТолькоПросмотрПоАвтору(Автор, Ответственный)
	
	Если Автор = Пользователи.ТекущийПользователь() Тогда 
		Возврат Ложь;
	ИначеЕсли УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Пользователи.ТекущийПользователь()) Тогда	
		Возврат НЕ (ПолучитьГруппуПользователя(Автор) = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь()) ИЛИ ЕстьСоответствиеКоординаторов_ГПТ(Автор, Ответственный));	
	ИначеЕсли УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , Пользователи.ТекущийПользователь()) Тогда
		Возврат НЕ (ПолучитьГруппуПользователя(Автор) = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь())
					ИЛИ ПолучитьГруппуПользователя(Ответственный) = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь()));		
	Иначе
		Возврат Истина;				
	КонецЕсли;
	
КонецФункции

Функция ПолучитьГруппуПользователя(Ответственный)
	
	ГруппаОтветственного = Неопределено;
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ГруппаОтветственного = Ответственный;
	ИначеЕсли ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК Группа
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппыПользователейСостав.Ссылка.Наименование";			
		
		Запрос.УстановитьПараметр("Пользователь", Ответственный);
		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл						
			ГруппаОтветственного = ВыборкаДетальныеЗаписи.Группа;
			Если ЗначениеЗаполнено(ГруппаОтветственного) Тогда				
				Пока ЗначениеЗаполнено(ГруппаОтветственного.Родитель) Цикл
					ГруппаОтветственного = ГруппаОтветственного.Родитель;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;                                                             
	
	Если ЗначениеЗаполнено(ГруппаОтветственного) Тогда
		Пока ЗначениеЗаполнено(ГруппаОтветственного.Родитель) Цикл
			ГруппаОтветственного = ГруппаОтветственного.Родитель;
		КонецЦикла;	
	КонецЕсли; 
	
	Возврат ГруппаОтветственного;
	
КонецФункции	

&НаКлиенте
Процедура ВыборОдногоЭлементаИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено И ДополнительныеПараметры.Свойство("ТипВыбора") Тогда
		Объект[ДополнительныеПараметры.ТипВыбора] = ВыбранныйЭлемент.Значение;		
		//Если ДополнительныеПараметры.ТипВыбора = "Ответственный" Тогда
		//	Объект.Ответственный = ВыбранныйЭлемент.Значение;
		//ИначеЕсли ДополнительныеПараметры.ТипВыбора = "Место" Тогда
		//	Объект.МестоПроведенияВстречи = ВыбранныйЭлемент.Значение;
		//ИначеЕсли ДополнительныеПараметры.ТипВыбора = "ГруппаОтветственного" Тогда
		//	Объект.ГруппаОтветственного = ВыбранныйЭлемент.Значение;				
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ЕстьСоответствиеКоординаторов_ГПТ(Автор, Ответственный)

	ТекущаяГруппа = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь());
	ГруппаАвтора = ПолучитьГруппуПользователя(Автор);
	ГруппаОтветственного = ПолучитьГруппуПользователя(Ответственный);
	ГруппаГПТ = Справочники.ГруппыПользователей.НайтиПоНаименованию("ГПТ", Истина);
	ГруппаКоординаторы = Справочники.ГруппыПользователей.НайтиПоНаименованию("Координаторы", Истина);
	СтаршиеСменыГПТ = Справочники.ГруппыПользователей.НайтиПоНаименованию("Старшие смены ГПТ", Истина);

	Возврат (ТекущаяГруппа = ГруппаКоординаторы И (ГруппаАвтора = ГруппаГПТ ИЛИ ГруппаОтветственного = ГруппаГПТ ИЛИ ГруппаАвтора = СтаршиеСменыГПТ ИЛИ ГруппаОтветственного = СтаршиеСменыГПТ))
			ИЛИ (ТекущаяГруппа = ГруппаГПТ И (ГруппаАвтора = ГруппаКоординаторы ИЛИ ГруппаОтветственного = ГруппаКоординаторы ИЛИ ГруппаАвтора = СтаршиеСменыГПТ ИЛИ ГруппаОтветственного = СтаршиеСменыГПТ))
			ИЛИ (ТекущаяГруппа = СтаршиеСменыГПТ И (ГруппаАвтора = ГруппаГПТ ИЛИ ГруппаОтветственного = ГруппаГПТ ИЛИ ГруппаАвтора = ГруппаКоординаторы ИЛИ ГруппаОтветственного = ГруппаКоординаторы));
			
КонецФункции

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере(СписокВыбора = Неопределено, ГруппыПользователя = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Проект = ?(ТипЗнч(Предмет) = Тип("ДокументСсылка.Запрос"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Проект"), Неопределено);
		Объект.МестоПроведенияВстречи = РегистрыСведений.Взаимодействия.ПолучитьОфисГруппыПоПроекту(Объект.Ответственный, Проект, СписокВыбора, ГруппыПользователя);		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура МестоПроведенияВстречиПриИзмененииНаСервере(СписокВыбора = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.МестоПроведенияВстречи) Тогда	
		Проект = ?(ТипЗнч(Предмет) = Тип("ДокументСсылка.Запрос"), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Проект"), Неопределено);
		Объект.Ответственный = РегистрыСведений.Взаимодействия.ПолучитьГруппуОфисаПоПроекту(Объект.МестоПроведенияВстречи, Проект, СписокВыбора);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбораГруппы = Новый СписокЗначений;
	
	ОтветственныйПриИзмененииНаСервере(СписокВыбора, СписокВыбораГруппы); //?(НЕ ЗначениеЗаполнено(Объект.ГруппаОтветственного), СписокВыбораГруппы, Неопределено)
	
	Если СписокВыбораГруппы.Количество() Тогда
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОдногоЭлементаИзСписка", ЭтотОбъект, Новый Структура("ТипВыбора", "ГруппаОтветственного"));
		СписокВыбораГруппы.ПоказатьВыборЭлемента(ОбработчикОповещенияОЗакрытии, НСтр("ru = 'Выберите группу пользователя.'"), СписокВыбораГруппы[0]);
	КонецЕсли;	
		
	Если СписокВыбора.Количество() Тогда
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОдногоЭлементаИзСписка", ЭтотОбъект, Новый Структура("ТипВыбора", "МестоПроведенияВстречи"));
		СписокВыбора.ПоказатьВыборЭлемента(ОбработчикОповещенияОЗакрытии, НСтр("ru = 'Выберите место встречи.'"), СписокВыбора[0]);
	КонецЕсли;
	
КонецПроцедуры
//<> }

#КонецОбласти

//EXTCODE Шумилин Сергей 31.07.2017 {{ --->
&НаКлиенте
Процедура ОтмененоПриИзменении(Элемент)
	
	//Если Объект.Отменено Тогда
	//	Рассмотрено 							= Истина;
	//	Элементы.РассмотретьПосле.Доступность 	= Ложь;
	//КонецЕсли;
	
	//<>, Басаргин (27.10.2017) {
	//Если Объект.Отменено Тогда
	//	Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	//Иначе
	//	Объект.Ответственный = 0;
	//КонецЕсли ;
	//
	//Элементы.Ответственный.Доступность = НЕ Объект.Отменено;
	//ОтветственныйПриИзменении(Неопределено);
	//<> }
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработкуРаботаСКлиентами(Команда)
	
	Если Объект.Участники.Количество() > 0 
			И ЗначениеЗаполнено(Объект.Участники[0].Контакт) Тогда
		
		ПараметрыФормы = Новый Структура("ПозиционированиеНаКлиенте", Объект.Участники[0].Контакт);
		ОткрытьФорму("Обработка.РаботаСКлиентом.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		
		////<789123>, Басаргин (27.03.2018) {
		//Если ЭтоМенеджерГПТ Тогда
		//	ОткрытьФорму("ОбщаяФорма.РабочийСтолГПТ", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		//Иначе
		//	ОткрытьФорму("Обработка.РаботаСКлиентом.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		//КонецЕсли;	 
		////<789123> }
				
	КонецЕсли;

КонецПроцедуры
//EXTCODE Шумилин Сергей 31.07.2017 <--- }} 

//++ Юкаев Роман 20180213 (//774947
&НаСервереБезКонтекста
Функция ИзменилсяРеквизит(Документ, Реквизит)
	
	Отбор = Новый Структура("Взаимодействие, Реквизит", Документ.Ссылка, "РассмотретьПосле");
	
	Значения = РегистрыСведений.ИзмененияВзаимодействий.СрезПоследних(ТекущаяДата(), Отбор);
	
	Если Значения.Количество() > 0 Тогда
		Отбор = Новый Структура("Взаимодействие, Реквизит", Документ.Ссылка, "Письмо");
		Отправленные = РегистрыСведений.ИзмененияВзаимодействий.СрезПоследних(ТекущаяДата(), Отбор);
		
		Если Отправленные.Количество() = 0 Тогда
			Для Каждого СтрокаЗначений Из Значения Цикл
				Возврат СтрокаЗначений.СтароеЗначение <> Реквизит;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаЗначений Из Отправленные Цикл
				Возврат СтрокаЗначений.НовоеЗначение <> Реквизит;
			КонецЦикла;
		КонецЕсли;
		
		Возврат Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтправитьПисьмоГруппеПользователей(Документ, ДатаОтправки, Предмет)
	
	НовыйДокумент = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	НовыйДокумент.Дата = ТекущаяДата();
	НовыйДокумент.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая;
	НовыйДокумент.Автор = Справочники.Пользователи.Робот;
	НовыйДокумент.ВзаимодействиеОснование = Документ.Ссылка;
	НовыйДокумент.Кодировка = "UTF-8";
	НовыйДокумент.Комментарий = "Создано автоматически";
	НовыйДокумент.Ответственный = НовыйДокумент.Автор;
	
	СписокУчастников = "";
	Для Каждого Ст Из Документ.Участники Цикл
		СписокУчастников = СписокУчастников + СокрЛП(Ст.ПредставлениеКонтакта) + " <" + СокрЛП(Ст.КакСвязаться) + ">, ";
	КонецЦикла;
	СписокУчастников = Сред(СписокУчастников, 1, СтрДлина(СписокУчастников) - 2);
	
	НовыйДокумент.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	НовыйДокумент.Текст = "Оптовый: " + СписокУчастников + " назначена встреча в офисе " + Строка(Предмет.Проект) + " на " + Формат(ДатаОтправки, "ДФ=dd.MM.yyyy") + " в " + Формат(ДатаОтправки, "ДФ=HH:mm") + ".";
	НовыйДокумент.Текст = НовыйДокумент.Текст + Символы.ПС + Символы.ПС + СокрЛП(Документ.Описание);
	
	НовыйДокумент.Тема = "Оповещение при создании встречи оптовым клиентам";
	НовыйДокумент.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	
	УчетныеЗаписи = Новый ТаблицаЗначений;
	УчетныеЗаписи.Колонки.Добавить("УчетнаяЗапись");	
	
	НовыйДокумент.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	НовыйДокумент.ОтправительПредставление = СокрЛП(НовыйДокумент.УчетнаяЗапись.ИмяПользователя) + " <" + СокрЛП(НовыйДокумент.УчетнаяЗапись.АдресЭлектроннойПочты) + ">";
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.Запрос") Тогда
		Если ЗначениеЗаполнено(Предмет.Проект) Тогда
			Контакт = Предмет.Проект.Руководитель;
			Адрес = ПолучитьЭлектронныйАдресКонтакта(Контакт);
			Если Адрес <> "" Тогда
				Получатель = НовыйДокумент.ПолучателиПисьма.Добавить();
				Получатель.Адрес = ПолучитьЭлектронныйАдресКонтакта(Контакт);
				Получатель.Контакт = Контакт;
				Получатель.Представление = Строка(Контакт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Персональная отправка
	Контакт = Справочники.Пользователи.НайтиПоНаименованию("Зубкова Елена Алексеевна", Истина);
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		Адрес = ПолучитьЭлектронныйАдресКонтакта(Контакт);
		Если Адрес <> "" Тогда
			Получатель = НовыйДокумент.ПолучателиПисьма.Добавить();
			Получатель.Адрес = ПолучитьЭлектронныйАдресКонтакта(Контакт);
			Получатель.Контакт = Контакт;
			Получатель.Представление = Строка(Контакт);
		КонецЕсли;
	КонецЕсли;
	
	Текст = "";
	Для Каждого Ст Из НовыйДокумент.ПолучателиПисьма Цикл
		Текст = Текст + Ст.Представление + ";";
	КонецЦикла;
	НовыйДокумент.СписокПолучателейПисьма = Сред(Текст, 1, СтрДлина(Текст) - 1);
	
	Попытка
		НовыйДокумент.Записать();
	Исключение
		Сообщить("Не удалось сформировать информационное письмо!");
		Возврат;
	КонецПопытки;
	
	СформироватьЗаписьОПисьмеВРегистр(НовыйДокумент.Ссылка, "Письмо", Документ.Ссылка);
	
	СформироватьЗаписьПоПредмету(НовыйДокумент.Ссылка, Предмет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаписьОПисьмеВРегистр(ДатаОтправки, Реквизит, Взаимодействие)
	
	НаборЗаписей = РегистрыСведений.ИзмененияВзаимодействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = ТекущаяДата();
	Запись.Взаимодействие = Взаимодействие;
	Запись.Реквизит = Реквизит;
	Запись.НовоеЗначение = ДатаОтправки;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьЗаписьПоПредмету(Документ, Предмет)
	
	НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(Документ);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Взаимодействие = Документ;
	Запись.Предмет = Предмет;
	Запись.Рассмотрено = Истина;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлектронныйАдресКонтакта(Контакт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Ссылка
		|	И ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)";
	
	Запрос.УстановитьПараметр("Ссылка", Контакт);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
	
		Выборка.Следующий();
		Возврат Выборка.Представление;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьКонтактыПоГруппеПользователейПроектаЗапроса(Проект, Таблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеГруппПользователейОфисам.ГруппаПользователей КАК ГруппаПользователей
		|ПОМЕСТИТЬ ВТ_Группы
		|ИЗ
		|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
		|ГДЕ
		|	СоответствиеГруппПользователейОфисам.Проект = &Проект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГруппаПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыПользователейСостав.Пользователь КАК Контакт
		|ПОМЕСТИТЬ ВТ_Контакты
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Группы.ГруппаПользователей КАК ГруппаПользователей
		|			ИЗ
		|				ВТ_Группы КАК ВТ_Группы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыПользователейСостав.Пользователь
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контакт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПользователиКонтактнаяИнформация.Представление КАК Представление,
		|	ПользователиКонтактнаяИнформация.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Почта
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
		|	И ПользователиКонтактнаяИнформация.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Контакты.Контакт КАК Контакт
		|			ИЗ
		|				ВТ_Контакты КАК ВТ_Контакты)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Контакты.Контакт КАК Контакт,
		|	ЕСТЬNULL(ВТ_Почта.Представление, """") КАК Адрес
		|ИЗ
		|	ВТ_Контакты КАК ВТ_Контакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Почта КАК ВТ_Почта
		|		ПО ВТ_Контакты.Контакт = ВТ_Почта.Ссылка";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			Если Выборка.Адрес <> "" Тогда
				НС = Таблица.Добавить();
				НС.Адрес = Выборка.Адрес;
				НС.Представление = Строка(Выборка.Контакт);
				НС.Контакт = Выборка.Контакт;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПризнакОптовый(Документ)
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.Запрос") Тогда
			Возврат Документ.Оптовый;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "
						|ВЫБРАТЬ
						|	ПредметыПапкиВзаимодействий.Предмет
						|ИЗ
						|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
						|ГДЕ
						|	ПредметыПапкиВзаимодействий.Взаимодействие = &Взаимодействие";
			
			Запрос.УстановитьПараметр("Взаимодействие", Документ);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат Ложь;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				Если ТипЗнч(Выборка.Предмет) = Тип("ДокументСсылка.Запрос") Тогда
					Возврат Выборка.Предмет.Оптовый;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//-- Юкаев Роман 20180213 )

//++ Юкаев Роман 20180504 (//789055
&НаКлиенте
Процедура ОткрытьКалендарьВстреч(Команда)
	ОткрытьФорму("Отчет.ОтчетВзаимодействияВКалендаре.ФормаОбъекта", Новый Структура("Период, СформироватьПриОткрытии, Предмет", РассмотретьПосле, Истина, Предмет), ЭтаФорма, ЭтаФорма,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
//-- Юкаев Роман 20180504 )
