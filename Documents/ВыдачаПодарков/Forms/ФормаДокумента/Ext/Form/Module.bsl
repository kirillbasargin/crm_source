&НаКлиенте
Перем мНачалоРедактирования;  

&НаКлиенте
Перем мСтруктураТаблиц;
                                                                
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;		
		
	ОпределитьВозможностьВводаСертификатов();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
			
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда 
		Если Элемент.ТекущиеДанные.Количество = 0 Тогда	
			Элемент.ТекущиеДанные.Количество = 1;
		КонецЕсли;
		//EXTCODE Шумилин Сергей 18.04.2016 {{ --->
		УстановитьДоступностьПолей();
		Если ПустаяСтрока(Элемент.ТекущиеДанные.Комментарий) Тогда
			#Если ТонкийКлиент Тогда
			Элемент.ТекущиеДанные.Комментарий = ПолучитьКомментарийПоПричине(Элемент.ТекущиеДанные.Причина);
		#Иначе
			Элемент.ТекущиеДанные.Комментарий = Элемент.ТекущиеДанные.Причина.Комментарий;
			#КонецЕсли
		КонецЕсли;
		мНачалоРедактирования = Ложь;
		//EXTCODE Шумилин Сергей 18.04.2016 <--- }} 
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ВыданПодарок");
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПричинаПриИзменении(Элемент)
	
	ТД 						= Элементы.Подарки.ТекущиеДанные;
	ТД.Комментарий 			= ПолучитьКомментарийПоПричине(ТД.Причина);	
	ТД.ИспользуетсяШаблон 	= Истина;
		
	//EXTCODE Шумилин Сергей 18.04.2016 {{ ---> 494731
	УстановитьДоступностьПолей();	
	//EXTCODE Шумилин Сергей 18.04.2016 <--- }} 
	
	ТД.Подарок = Неопределено;
	ТД.НомерСертификата = Неопределено;
	ТД.Сделка = Неопределено;
	ТД.ТипДокумента = Неопределено;
	
	ОпределитьВозможностьВводаСертификатов(Истина, Элементы.Подарки.ТекущиеДанные.ПолучитьИдентификатор());
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		УстановитьДоступностьПолей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПодарокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Причина = Элементы.Подарки.ТекущиеДанные.Причина;
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", Новый Структура("Причина, Проект", Причина, Объект.Проект), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПодарокАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыПодбора 		= Новый Структура("Причина, Проект, ПараметрОтбора", Элементы.Подарки.ТекущиеДанные.Причина, Объект.Проект, Текст);
	ДополнительныеПараметры = Новый Структура("ДополнительныеПараметры", ПараметрыПодбора);
	ДанныеВыбора 			= ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ДополнительныеПараметры);
	СтандартнаяОбработка	= Ложь;
КонецПроцедуры
 
&НаКлиенте
Процедура ПодаркиПодарокОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыПодбора 		= Новый Структура("Причина, Проект, ПараметрОтбора", Элементы.Подарки.ТекущиеДанные.Причина, Объект.Проект, Текст);
	ДополнительныеПараметры = Новый Структура("ДополнительныеПараметры", ПараметрыПодбора);
	ДанныеВыбора 			= ПолучитьДанныеВыбора(Тип("СправочникСсылка.Номенклатура"), ДополнительныеПараметры);
	СтандартнаяОбработка	= Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолей()
	
	ТД = Элементы.Подарки.ТекущиеДанные;
	
	Условие = ЗначениеЗаполнено(ТД.Причина);
	
	Элементы.Подарки.ПодчиненныеЭлементы.ПодаркиПодарок.ТолькоПросмотр		= НЕ Условие;
	Элементы.Подарки.ПодчиненныеЭлементы.ПодаркиКоличество.ТолькоПросмотр	= НЕ Условие;
	Элементы.Подарки.ПодчиненныеЭлементы.ПодаркиКомментарий.ТолькоПросмотр	= НЕ Условие;
	
	//EXTCODE Шумилин Сергей 15.09.2016 {{ ---> 549863
	Если ЗначениеЗаполнено(ТД.Причина) Тогда
		#Если ТонкийКлиент Тогда
		УсловиеСделка															= ПолучитьСделкуПоПричине(ТД.Причина);	
		#Иначе
		УсловиеСделка															= ТД.Причина.Сделка;	
		#КонецЕсли
		Элементы.Подарки.ПодчиненныеЭлементы.ПодаркиСделка.ТолькоПросмотр		= НЕ УсловиеСделка;    //СКО
		Элементы.Подарки.ПодчиненныеЭлементы.ПодаркиТипДокумента.ТолькоПросмотр	= НЕ УсловиеСделка;		
	КонецЕсли;
	//EXTCODE Шумилин Сергей 15.09.2016 <--- }} 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиКомментарийПриИзменении(Элемент)
	
	ТД = Элементы.Подарки.ТекущиеДанные;
	
	Если НЕ ПустаяСтрока(ТД.Комментарий) 
		
		#Если ТонкийКлиент Тогда
			И ПолучитьЗначениеПодчиненногоРеквизита(ТД.Причина, "Комментарий") <> ТД.Комментарий Тогда		
		#Иначе
			И ТД.Причина.Комментарий <> ТД.Комментарий Тогда		
		#КонецЕсли

		ТД.ИспользуетсяШаблон 	= Ложь;
	Иначе
		#Если ТонкийКлиент Тогда
		ТД.Комментарий 			= ПолучитьКомментарийПоПричине(ТД.Причина);
		#Иначе
		ТД.Комментарий			= ТД.Причина.Комментарий;
		#КонецЕсли
		ТД.ИспользуетсяШаблон 	= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТД = Элементы.Подарки.ТекущиеДанные;
	
	#Если ТонкийКлиент Тогда
		Условие =   Элемент.ТекущийЭлемент <> Неопределено
			И Элемент.ТекущийЭлемент.Имя = "ПодаркиКомментарий" 
			И  ТД.Комментарий = ПолучитьКомментарийПоПричине(ТД.Причина);
	#Иначе
		Условие	= Элемент.ТекущийЭлемент <> Неопределено
			И Элемент.ТекущийЭлемент.Имя = "ПодаркиКомментарий" 
			И ТД.Причина.Комментарий = ТД.Комментарий;
	#КонецЕсли

	Если  Условие Тогда		
		ТД.Комментарий 			= "";
	КонецЕсли;
	
	мНачалоРедактирования = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодаркиПриАктивизацииЯчейки(Элемент)
	
	Если мНачалоРедактирования = Истина
			И Элемент.ТекущийЭлемент <> Неопределено
			И Элемент.ТекущийЭлемент.Имя = "ПодаркиКомментарий" Тогда
		//845324	
		//Элементы.Подарки.ТекущиеДанные.Комментарий = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОфисНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Склады.Форма.ФормаВыбора", Новый Структура("Проект", Объект.Проект), Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТД = Элементы.Подарки.ТекущиеДанные;
	
	Если ТипЗнч(Объект.Клиент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка 	= Ложь;
		ПараметрыОтбора = Новый Структура("Отбор", 	Новый Структура("АгентствоНедвижимости", Объект.Клиент));
	   	ОткрытьФорму("Документ.ЗаявкаНаСделку.ФормаВыбора", ПараметрыОтбора, Элемент);
	ИначеЕсли ТипЗнч(Объект.Клиент) = Тип("СправочникСсылка.Клиенты") Тогда
		СтандартнаяОбработка 	= Ложь;
		ПараметрыОтбора = Новый Структура("Отбор", 	Новый Структура("Клиент", Объект.Клиент));
	   	ОткрытьФорму("Документ.ЗаявкаНаСделку.ФормаВыбора", ПараметрыОтбора, Элемент);
  	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивСделок(Клиент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СделкаСРМКлиенты.Ссылка
	|ИЗ
	|	Документ.СделкаСРМ.Клиенты КАК СделкаСРМКлиенты
	|ГДЕ
	|	СделкаСРМКлиенты.КонтактноеЛицо = &Клиент";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 	
		
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКомментарий(Команда)
	
	ОбновитьКомментарииНаКлиенте();
	 	
КонецПроцедуры
 
&НаКлиенте
Функция ЗаполнитьМассивУИДНаКлиенте()
	
	ТаблицаПодарков = Объект.Подарки;
	
	МассивУИДов = Новый Массив;
	//
	Для Каждого СтрокаТЧ Из ТаблицаПодарков Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Сделка) 
			 И ЗначениеЗаполнено(СтрокаТЧ.ТипДокумента)
			 И ЗначениеЗаполнено(СтрокаТЧ.Причина)
			 И НЕ ВыдачаСертификата(СтрокаТЧ.Причина) Тогда
			МассивУИДов.Добавить(СтрокаТЧ.Сделка.УникальныйИдентификатор());	
		КонецЕсли;		
	КонецЦикла;
	
	Возврат МассивУИДов;
			
КонецФункции

&НаСервере
Процедура ЗаполнитьКомментарийНаСервере(ТаблицаУПН)
	
	//ТаблицаПодарков = РеквизитФормыВЗначение("Объект").Подарки;
	ТаблицаПодарков = Объект.Подарки;
	
	Если ТаблицаУПН.Количество() > 0 Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаПодарков Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Сделка) 
					И ЗначениеЗаполнено(СтрокаТЧ.ТипДокумента) Тогда
				
				СтрокаУПН = ТаблицаУПН.Найти(Строка(СтрокаТЧ.Сделка.УникальныйИдентификатор()));	
				
				Если СтрокаУПН <> Неопределено Тогда
					
					Если СтрокаТЧ.ТипДокумента = Перечисления.ТипДокумента.ДОУ Тогда
						Если Не ПустаяСтрока(СтрокаУПН.НомерСД) Тогда
							СтрокаТЧ.Комментарий 		= СокрЛП(СтрокаУПН.НомерСД) + " от " + Формат(СтрокаУПН.ДатаСД, "ДЛФ=Д");
							СтрокаТЧ.ИспользуетсяШаблон = Ложь;
						КонецЕсли;						
					Иначе
						Если Не ПустаяСтрока(СтрокаУПН.НомерОД) Тогда
							СтрокаТЧ.Комментарий 		= СокрЛП(СтрокаУПН.НомерОД) + " от " + Формат(СтрокаУПН.ДатаОД, "ДЛФ=Д");	
							СтрокаТЧ.ИспользуетсяШаблон = Ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли //Если СтрокаУПН <> Неопределено Тогда
				
			КонецЕсли; //Если ЗначениеЗаполнено(СтрокаТЧ.Сделка) Тогда
			
		КонецЦикла;
		
	КонецЕсли;	
	
	//ЗначениеВРеквизитФормы(ТаблицаПодарков, "Объект.Подарки");
	
КонецПроцедуры

 &НаСервере
Функция ПолучитьДанныеУПННаСервере(МассивУИДов)
	
	ТаблицаУпн = Новый ТаблицаЗначений;
	
	Если МассивУИДов.Количество() = 0 Тогда
		Возврат ТаблицаУпн;	
	КонецЕсли;
	
	ЗначениеПараметра = Ложь;
	
	ТекстЗапросаУПН = 
	"ВЫБРАТЬ
	|	ЗаявкаНаСделку.Ссылка КАК ЗаявкаНаСделку
	|ПОМЕСТИТЬ вт_ЗаявкиНаСделки
	|ИЗ
	|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
	|ГДЕ
	|	ЗаявкаНаСделку.GUIDСделкиCRM В (&GUIDСтрокой)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявкаНаСделку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сделки.Ссылка КАК Сделка,
	|	ВЫРАЗИТЬ(Сделки.ПредварительнаяЗаявка КАК Документ.ЗаявкаНаСделку) КАК ЗаявкаНаСделку
	|ПОМЕСТИТЬ вт_Сделки
	|ИЗ
	|	Справочник.Сделки КАК Сделки
	|ГДЕ
	|	Сделки.ПредварительнаяЗаявка В
	|			(ВЫБРАТЬ
	|				вт_ЗаявкиНаСделки.ЗаявкаНаСделку
	|			ИЗ
	|				вт_ЗаявкиНаСделки КАК вт_ЗаявкиНаСделки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЗаключениеАгентскогоДоговора.Ссылка) КАК СД,
	|	ЗаключениеАгентскогоДоговора.Сделка КАК Сделка
	|ПОМЕСТИТЬ вт_СД
	|ИЗ
	|	Документ.ЗаключениеАгентскогоДоговора КАК ЗаключениеАгентскогоДоговора
	|ГДЕ
	|	ЗаключениеАгентскогоДоговора.Сделка В
	|			(ВЫБРАТЬ
	|				вт_Сделки.Сделка
	|			ИЗ
	|				вт_Сделки КАК вт_Сделки)
	|	И ЗаключениеАгентскогоДоговора.Проведен
	|	И ЗаключениеАгентскогоДоговора.ТипДоговора.ТипДоговораУУДляЕИС В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровУУДляЕИС.ДОУБронирование), ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровУУДляЕИС.ДОУРегистрация), ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровУУДляЕИС.ДОУСобственность))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаключениеАгентскогоДоговора.Сделка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаключениеДоговора.Ссылка КАК ОД,
	|	ЗаключениеДоговора.Договор КАК Сделка
	|ПОМЕСТИТЬ вт_ОД
	|ИЗ
	|	Документ.ЗаключениеДоговора КАК ЗаключениеДоговора
	|ГДЕ
	|	ЗаключениеДоговора.Проведен
	|	И ЗаключениеДоговора.Договор В
	|			(ВЫБРАТЬ
	|				вт_Сделки.Сделка
	|			ИЗ
	|				вт_Сделки КАК вт_Сделки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Сделки.ЗаявкаНаСделку.GUIDСделкиCRM КАК GUIDСделкиCRM,
	|	ЕСТЬNULL(вт_СД.СД.Номер, """") КАК НомерСД,
	|	ЕСТЬNULL(вт_СД.СД.Дата, """") КАК ДатаСД,
	|	ЕСТЬNULL(вт_ОД.ОД.Номер, """") КАК НомерОД,
	|	ЕСТЬNULL(вт_ОД.ОД.Дата, """") КАК ДатаОД
	|ИЗ
	|	вт_Сделки КАК вт_Сделки
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СД КАК вт_СД
	|		ПО вт_Сделки.Сделка = вт_СД.Сделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОД КАК вт_ОД
	|		ПО вт_Сделки.Сделка = вт_ОД.Сделка";
	
	
	ПараметрыЗапроса = Новый Структура();
	
	//ПараметрыЗапроса.Вставить("GUIDСтрокой", Новый ВыражениеКомпоновкиДанных("Результат = Новый УникальныйИдентификатор("""+ Строка(ЗаявкаНаСделку.УникальныйИдентификатор()) +""")"));
	ПараметрыЗапроса.Вставить("GUIDСтрокой", МассивУИДов);
	
    УстановитьПривилегированныйРежим(Истина);
    СтруктураПароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("СтандартныеПодсистемы.УправлениеДоступом", "ИмяПользователяУПНДляWebСервисов, ПарольПользователяУПНДляWebСервисов");
    УстановитьПривилегированныйРежим(Ложь);
	
	ИмяПользователя		= СтруктураПароли.ИмяПользователяУПНДляWebСервисов;
	ПарольПользователя	= СтруктураПароли.ПарольПользователяУПНДляWebСервисов;	
	
	ИмяСервиса = "upn_exchange";
	АдресСервиса = Константы.АдресСервисаМК_УПН.Получить() + ИмяСервиса + ".1cws?wsdl"; //Тест	
	
	Попытка			
		ВСПодключение = Новый WSПрокси(Новый WSОпределения(АдресСервиса,		
		ИмяПользователя,
		ПарольПользователя, 200)
		, "http://upn_exchange" 
		, "Exchange"
		, "ExchangeSoap"
		, 200);	
		ВСПодключение.Пользователь 	= ИмяПользователя;
		ВСПодключение.Пароль	 	= ПарольПользователя;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка создания подключения к веб-сервису",
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		"Ошибка: "+ ОписаниеОшибки());
		ВСПодключение = Неопределено;
	КонецПопытки;
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ПутьКДанным"	, "GUIDСтрокой");	
	ПрограммныйКод = """Результат = Строка(Параметр);""";	
	СтруктураПолей.Вставить("Выражение"	, "ОбщегоНазначенияСлужебныйСервер.ВычислитьПрограммныйКод("+ПрограммныйКод+",GUIDСделкиCRM)");
	МассивВП = Новый Массив;
	МассивВП.Добавить(СтруктураПолей);
			
	Если ВСПодключение<>Неопределено Тогда
		РезультатЗапросаУПН = СериализаторXDTO.ПрочитатьXDTO(ВСПодключение.ExecuteQuery(ТекстЗапросаУПН, СериализаторXDTO.ЗаписатьXDTO(ПараметрыЗапроса), 100,СериализаторXDTO.ЗаписатьXDTO(МассивВП))); 
		Если РезультатЗапросаУПН.Ошибка Тогда 		
			ЗаписьЖурналаРегистрации("Ошибка выполения запроса в базе УПН",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			"Ошибка: "+ РезультатЗапросаУПН.ТекстОшибки);		
			Сообщить(РезультатЗапросаУПН.ТекстОшибки);
		Иначе
			РезультатЗапроса = CRMСервер.ДесериализоватьМутабельныеЗначения(РезультатЗапросаУПН.РезультатЗапроса);
			Если ТипЗнч(РезультатЗапроса)=Тип("ТаблицаЗначений") Тогда
				ТаблицаУПН = РезультатЗапроса;
			Иначе	
				ТаблицаУПН = РезультатЗапроса.Выгрузить();
			КонецЕсли;				
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТаблицаУПН;
	
КонецФункции

&НаКлиенте
Процедура ПодаркиСделкаПриИзменении(Элемент)
	
	ОбновитьКомментарииНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиТипДокументаПриИзменении(Элемент)
	
	 ОбновитьКомментарииНаКлиенте();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьКомментарииНаКлиенте()
	
	МассивУИДов = ЗаполнитьМассивУИДНаКлиенте();
	
	ДозаполнитьНаСервере(МассивУИДов);
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьНаСервере(МассивУИДов)
	
	ТаблицаУПН = ПолучитьДанныеУПННаСервере(МассивУИДов);
	
    ЗаполнитьКомментарийНаСервере(ТаблицаУПН);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Для Каждого Стр Из Объект.Подарки Цикл
		#Если ТонкийКлиент Тогда
			Комментарий = ПолучитьКомментарийПоПричине(Стр.Причина);
		#Иначе
			Комментарий = Стр.Причина.Комментарий;
		#КонецЕсли
		Если ЗначениеЗаполнено(Стр.Причина) И НРЕГ(СокрЛП(Комментарий)) = НРЕГ(СокрЛП(Стр.Комментарий)) Тогда
			Стр.Комментарий = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
           	
&НаСервереБезКонтекста
Функция ПолучитьКомментарийПоПричине(Причина)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Причина, "Комментарий");
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСделкуПоПричине(Причина)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Причина, "Сделка");
КонецФункции

&НаСервере
Процедура ОпределитьВозможностьВводаСертификатов(ТекСтрока=Ложь, ИД=Неопределено)
	
	Если ТекСтрока И ИД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока  Тогда
		СтрокаТаблицы = Объект.Подарки.НайтиПоИдентификатору(ИД);
		//++ Юкаев Роман 20180523 (//
		//СтрокаТаблицы.ВыдачаСертификата = СтрокаТаблицы.Причина.ВыдачаСертификата;
		Если НЕ ВыдачаСертификата(СтрокаТаблицы.Причина) Тогда
		//-- Юкаев
			СтрокаТаблицы.НомерСертификата = "";
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//++ Юкаев Роман 20180523 (//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	вр.НомерСтроки,
	//	|	ВЫРАЗИТЬ(вр.Причина КАК Справочник.Причины) КАК Причина,
	//	|	вр.Количество,
	//	|	вр.Подарок,
	//	|	вр.Комментарий,
	//	|	вр.ИспользуетсяШаблон,
	//	|	вр.Сделка,
	//	|	вр.ТипДокумента,
	//	|	вр.НомерСертификата
	//	|ПОМЕСТИТЬ п1
	//	|ИЗ
	//	|	&ТЗ КАК вр
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	п1.Количество,
	//	|	п1.Подарок,
	//	|	п1.Комментарий,
	//	|	п1.ИспользуетсяШаблон,
	//	|	п1.Сделка,
	//	|	п1.ТипДокумента,
	//	|	п1.НомерСертификата,
	//	|	п1.Причина.ВыдачаСертификата КАК ВыдачаСертификата,
	//	|	п1.Причина
	//	|ИЗ
	//	|	п1 КАК п1
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	п1.НомерСтроки";

	//Запрос.УстановитьПараметр("ТЗ", Объект.Подарки.Выгрузить());
	//Объект.Подарки.Загрузить(Запрос.Выполнить().Выгрузить());
	//-- Юкаев Роман 20180523 )
	
КонецПроцедуры

&НаСервере
Функция ОпределитьКомментарииПричин()
	
	Для Каждого Стр Из Объект.Подарки Цикл
		Если ЗначениеЗаполнено(Стр.Причина) И НРЕГ(СокрЛП(Стр.Причина.Комментарий)) = НРЕГ(СокрЛП(Стр.Комментарий)) Тогда
			Стр.Комментарий = "";
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ОпределитьВозможностьВводаСертификатов();
	//845324
	//Для Каждого Стр Из Объект.Подарки Цикл
		////++ Юкаев Роман 20180523 (//
		////Если Стр.ВыдачаСертификата И НЕ СтрДлина(СокрЛП(Стр.НомерСертификата))=11 Тогда
		//Если ВыдачаСертификата(Стр.Причина) И НЕ СтрДлина(СокрЛП(Стр.НомерСертификата))=11 Тогда
		////-- Юкаев Роман 20180523 )
		//	Отказ = Истина;
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В строке " + Стр.НомерСтроки + " не указан номер сертификата!", , "Объект.Подарки[" + Строка(Стр.НомерСтроки) + "]");
		//КонецЕсли;		
	//КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПодаркиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПодаркиНомерСертификата" Тогда
		ТекДанные = Элементы.Подарки.ТекущиеДанные;
		ОпределитьВозможностьВводаСертификатов(Истина, Элементы.Подарки.ТекущиеДанные.ПолучитьИдентификатор());	
		//++ Юкаев Роман 20180523 (//
		//Отказ = НЕ Элементы.Подарки.ТекущиеДанные.ВыдачаСертификата;
		Отказ = НЕ ВыдачаСертификата(ТекДанные.Причина);// ТекДанные.Причина.ВыдачаСертификата;
		//-- Юкаев Роман 20180523 )
	//ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПодаркиСделка" И НЕ Элементы.Подарки.ТекущиеДанные.ВыдачаСертификата Тогда
	//	Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		ОпределитьВозможностьВводаСертификатов();
КонецПроцедуры

&НаКлиенте
Процедура ПодаркиНомерСертификатаПриИзменении(Элемент)
	ОпределитьВозможностьВводаСертификатов(Истина, Элементы.Подарки.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры
            
&НаСервереБезКонтекста
Функция ПолучитьЗначениеПодчиненногоРеквизита(Реквизит1, Реквизит2)
	Возврат Реквизит1[Реквизит2];
КонецФункции

//++ Юкаев Роман 20180516 (//
&НаКлиенте
Процедура ПодаркиПричинаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = ПолучитьСписокПричин(Объект.Проект);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыдачаСертификата(Причина)
	
	Возврат Причина.ВыдачаСертификата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПричин(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПричиныОбъекты.Ссылка КАК Причина
		|ИЗ
		|	Справочник.Причины.Объекты КАК ПричиныОбъекты
		|ГДЕ
		|	ПричиныОбъекты.Проект = &Проект
		|	И ПричиныОбъекты.Ссылка.Актуальная";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый СписокЗначений;
	Иначе
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Причина"));
		
		Возврат Список;
	КонецЕсли;
	
КонецФункции
//-- Юкаев Роман 20180516 )