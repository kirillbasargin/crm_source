#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура УстановитьПометкуУдаленияУВложенийЗапросов(Ссылка, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = "ЗапросПрисоединенныеФайлы";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует	
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления <> &ПометкаУдаления
	|	И Файлы.ВладелецФайла = &ВладелецФайла
	|");
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				|т.к. содержит присоединенный файл ""%2"",
				|занятый для редактирования.'"),
				Строка(Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заблокировать объект " + Объект + "! " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Объект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//<792882>, Басаргин (16.03.2018) {
	Если Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("РасшифровкаСтатуса"));
	КонецЕсли;		
	//<792882> }
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//<853885>, Басаргин (06.08.2018) {
	КлиентыТЧ = Новый Массив;
	СтрокиНаУдаление = Новый Массив;
	Участники.Свернуть("Клиент, Основной", "ОсновнойТелефон");
	Для каждого СтрокаУчастник Из Участники Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаУчастник.ОсновнойТелефон) ИЛИ СтрокаУчастник.ОсновнойТелефон = "0" Тогда
			СтрокаУчастник.ОсновнойТелефон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаУчастник.Клиент, "ОсновнойТелефон");
		КонецЕсли;
		Если НЕ КлиентыТЧ.Найти(СтрокаУчастник.Клиент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки = Участники.НайтиСтроки(Новый Структура("Клиент", СтрокаУчастник.Клиент));
		Если НайденныеСтроки.Количество() > 1 Тогда
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НЕ НайденнаяСтрока.Основной И СтрокиНаУдаление.Количество() < НайденныеСтроки.Количество() Тогда
					СтрокиНаУдаление.Добавить(НайденнаяСтрока);	
					КлиентыТЧ.Добавить(Клиент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;			
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиНаУдаление Цикл
		Участники.Удалить(Строка);
	КонецЦикла;	
	//<853885> }
		
	//<792882>, Басаргин (16.03.2018) {
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Стадия") = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") И Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") Тогда
		Статус = Перечисления.СтатусыЗапроса.Завершено;
		РасшифровкаСтатуса = Справочники.ПричиныСтатусовЗапроса.ПустаяСсылка();
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СистемноеПроведение") И ДополнительныеСвойства.СистемноеПроведение Тогда
		Возврат;	
	КонецЕсли;
	//<792882> }
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Ролевая модель для менеджера филиала и менеджера ГПТ
	Если Пользователи.РолиДоступны("МенеджерФилиала") 
			И Стадия = Перечисления.СтадииЗапроса.Звонок Тогда
		Стадия = Перечисления.СтадииЗапроса.Переговоры;	
	КонецЕсли;	
	
	ОбработатьДублированиеЗначенийВТабличныхЧастях();
	
	УстановитьПометкуУдаленияУВложенийЗапросов(Ссылка, ПометкаУдаления);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный    = Пользователи.ТекущийПользователь();
	Автор            = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//<831583>, Басаргин (13.06.2018) {	
	ВыполнитьДвиженияПоРегиструУчастникиЗапроса(ПометкаУдаления);
	//<831583> }
	
	//<792882>, Басаргин (16.03.2018) {
	Если ДополнительныеСвойства.Свойство("СистемноеПроведение") Тогда
		ДополнительныеСвойства.Удалить("СистемноеПроведение");
		ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	//<792882> }	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("Телефония_ID_Звонка") Тогда
		
		НаборЗаписей = РегистрыСведений.СоответствиеЗапросовЗвонкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Запрос.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Отбор.ID_Звонка.Установить(ЭтотОбъект.ДополнительныеСвойства.Телефония_ID_Звонка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			ЗаписьНабора = НаборЗаписей[0];		
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();				
		КонецЕсли;
		
		ЗаписьНабора.ID_Звонка 	= ЭтотОбъект.ДополнительныеСвойства.Телефония_ID_Звонка;
		ЗаписьНабора.Запрос 	= ЭтотОбъект.Ссылка;
		ЗаписьНабора.ДатаСвязи 	= ТекущаяДата();
		
		НаборЗаписей.Записать();
		
		УправлениеТелефониейСервер.УстановитьСтатусЗвонка(ЭтотОбъект.ДополнительныеСвойства.Телефония_ID_Звонка, Справочники.СтатусыЗвонков.ПредпродажноеОбслуживание);
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	//Ролевая модель для менеджера филиала и менеджера ГПТ
	Если Пользователи.РолиДоступны("МенеджерФилиала") Тогда
		Стадия = Перечисления.СтадииЗапроса.Переговоры;
	Иначе
		Стадия = Перечисления.СтадииЗапроса.Звонок;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ВыполнитьДвиженияПоРегиструПараметрыЗапроса();
	ВыполнитьДвиженияПоРегиструПараметрыЗапросаЛинейно();
	ВыполнитьДвиженияПоИсторииСтадийСтатусов();
	//ВыполнитьДвиженияПоРегиструУчастникиЗапроса();
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//НаборЗаписей = РегистрыСведений.УчастникиЗапроса.СоздатьНаборЗаписей();			
	//НаборЗаписей.Отбор.Запрос.Установить(Ссылка);
	//НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьДвиженияПоРегиструУчастникиЗапроса(ПометкаУдаления = Ложь)
	
	НаборЗаписей = РегистрыСведений.УчастникиЗапроса.СоздатьНаборЗаписей();			
	НаборЗаписей.Отбор.Запрос.Установить(Ссылка);
	НаборЗаписей.Очистить();
	
	Если НЕ ПометкаУдаления Тогда
		
		ВыгрузкаУчастники = Участники.Выгрузить(); //РезультатЗапроса.Выгрузить();//
		ВыгрузкаУчастники.Свернуть("Клиент", "Брокер, Основной, ОсновнойТелефон");
		
		Для каждого СтрокаТЧ Из ВыгрузкаУчастники Цикл	
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Запрос = Ссылка;		
			НоваяЗапись.Клиент = СтрокаТЧ.Клиент;
			НоваяЗапись.Телефон = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(СтрокаТЧ.ОсновнойТелефон);
			НоваяЗапись.Основной = СтрокаТЧ.Основной;
		КонецЦикла;		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструПараметрыЗапросаЛинейно()
	
	Движение = Движения.ПараметрыЗапросаЛинейный.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, ЭтотОбъект);
	Движение.Запрос = Ссылка;
	Движения.ПараметрыЗапросаЛинейный.Записывать = Истина;
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоРегиструПараметрыЗапроса()
	
	ТаблицаПоПараметрамЗапроса = Движения.ПараметрыЗапроса.ВыгрузитьКолонки();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыЗапроса.ИмяПредопределенныхДанных КАК ИмяРеквизита,
	|	ПараметрыЗапроса.ИспользоватьВсегда КАК ИспользоватьВсегда,
	|	ПараметрыЗапроса.Ссылка КАК Параметр
	|ИЗ
	|	Справочник.ПараметрыЗапроса КАК ПараметрыЗапроса
	|ГДЕ
	|	НЕ ПараметрыЗапроса.ПометкаУдаления";
	РезультатЗапроса 	= Запрос.Выполнить();
	ВыборкаРеквизитов 	= РезультатЗапроса.Выгрузить();	
	
	РеквизитыДокумента 		= ЭтотОбъект.Метаданные().Реквизиты;
	ТабличныеЧастиДокумента = ЭтотОбъект.Метаданные().ТабличныеЧасти;
	
	Для Каждого РеквизитДокумента Из РеквизитыДокумента Цикл			
		СформироватьЗаписьПоПараметрам(РеквизитДокумента, ТаблицаПоПараметрамЗапроса, ВыборкаРеквизитов);
	КонецЦикла;	
	
	Для Каждого ТЧДокумента Из ТабличныеЧастиДокумента Цикл	
		СформироватьЗаписиПоТабличнымЧастям(ТЧДокумента, ТаблицаПоПараметрамЗапроса, ВыборкаРеквизитов);
	КонецЦикла;	
	
	Если ТаблицаПоПараметрамЗапроса.Количество() > 0 Тогда
		
		ТаблицаПоПараметрамЗапроса.ЗаполнитьЗначения(ЭтотОбъект.Дата, "Период");
		Движения.ПараметрыЗапроса.Загрузить(ТаблицаПоПараметрамЗапроса);
		Движения.ПараметрыЗапроса.Записывать = Истина;		
	
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьЗаписьПоПараметрам(РеквизитДокумента, ТаблицаПоПараметрамЗапроса, ВыборкаРеквизитов)

	ЗначениеРеквизитаДокумента 	= ЭтотОбъект[РеквизитДокумента.Имя];
	СтрокаТаблицыПараметров 	= ВыборкаРеквизитов.Найти(РеквизитДокумента.Имя);
	
	Если СтрокаТаблицыПараметров = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеРеквизитаДокумента) = Тип("Булево") Тогда
		ДобавитьНовуюСтрокуВТаблицуПараметров(ТаблицаПоПараметрамЗапроса, ЗначениеРеквизитаДокумента, СтрокаТаблицыПараметров, "ЗначениеБулево");	
	ИначеЕсли ТипЗнч(ЗначениеРеквизитаДокумента) = Тип("Число") Тогда
		ДобавитьНовуюСтрокуВТаблицуПараметров(ТаблицаПоПараметрамЗапроса, ЗначениеРеквизитаДокумента, СтрокаТаблицыПараметров, "ЗначениеЧисло");	
	Иначе
		ДобавитьНовуюСтрокуВТаблицуПараметров(ТаблицаПоПараметрамЗапроса, ЗначениеРеквизитаДокумента, СтрокаТаблицыПараметров, "ЗначениеСсылка");
	КонецЕсли;				

КонецПроцедуры

Процедура СформироватьЗаписиПоТабличнымЧастям(ТЧДокумента, ТаблицаПоПараметрамЗапроса, ВыборкаРеквизитов)

	ТабличнаяЧастьДокумента 	= ЭтотОбъект[ТЧДокумента.Имя];
	СтрокаТаблицыПараметров 	= ВыборкаРеквизитов.Найти(ТЧДокумента.Имя);
	
	Если СтрокаТаблицыПараметров = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого РеквизитТабличнойЧасти Из ТЧДокумента.Реквизиты Цикл
	
		СтрокаТаблицыПараметровДляТЧ 	= ВыборкаРеквизитов.Найти(РеквизитТабличнойЧасти.Имя);
		
		Если СтрокаТаблицыПараметровДляТЧ = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		НомерСтроки = 0;
		Для Каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
			ДобавитьНовуюСтрокуВТаблицуПараметров(ТаблицаПоПараметрамЗапроса, 
													СтрокаТЧ[РеквизитТабличнойЧасти.Имя], 
													СтрокаТаблицыПараметровДляТЧ, 
													"ЗначениеСсылка", 
													НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;		
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуВТаблицуПараметров(ТаблицаПоПараметрамЗапроса, 
													ЗначениеРеквизитаДокумента, 
													СтрокаТаблицыПараметров, 
													ИмяКолонки, 
													НомерСтроки = 0)

	Если СтрокаТаблицыПараметров.ИспользоватьВсегда 
			ИЛИ (?(ТипЗнч(ЗначениеРеквизитаДокумента) = Тип("Булево"), ЗначениеРеквизитаДокумента, Истина) 
					И ЗначениеЗаполнено(ЗначениеРеквизитаДокумента)) Тогда
		
		НоваяСтрокаТЗ 					= ТаблицаПоПараметрамЗапроса.Добавить();
		НоваяСтрокаТЗ.НомерПараметра	= НомерСтроки;
		НоваяСтрокаТЗ.Параметр			= СтрокаТаблицыПараметров.Параметр; 
		НоваяСтрокаТЗ[ИмяКолонки]		= ЗначениеРеквизитаДокумента;
			
	КонецЕсли;	

КонецПроцедуры

Процедура ОбработатьДублированиеЗначенийВТабличныхЧастях()

	ОбработатьДублированиеВТЧ(ФакторыВыбораОН, 	"ФакторВыбора");	
	ОбработатьДублированиеВТЧ(Конкуренты, 		"Конкурент");	
	ОбработатьДублированиеВТЧ(СтопФакторы, 		"СтопФактор");	
	ОбработатьДублированиеВТЧ(Фазы, 			"Фаза");	
	ОбработатьДублированиеВТЧ(ФормыОплаты, 		"ФормаОплаты");	
	ОбработатьДублированиеВТЧ(Расположения,		"Расположение");
	ОбработатьДублированиеВТЧ(Мотивации, 		"Мотивация");
	ОбработатьДублированиеВТЧ(ЦелиПокупки, 		"ЦельПокупки");
	ОбработатьДублированиеВТЧ(Услуги, 			"Услуга");

КонецПроцедуры

//Процедура актуальна только для ТЧ с одной колонкой.
Процедура ОбработатьДублированиеВТЧ(ТабличнаяЧасть, ИмяКолонкиДляПроверки)

	МассивЗначенийДляПроверки = ТабличнаяЧасть.ВыгрузитьКолонку(ИмяКолонкиДляПроверки);	
	ТабличнаяЧасть.Очистить();
	Взаимодействия.УдалитьПовторяющиесяЭлементыМассива(МассивЗначенийДляПроверки);
	Для каждого ЭлементМассива Из МассивЗначенийДляПроверки Цикл
		НоваяСтрока 						= ТабличнаяЧасть.Добавить();	
		НоваяСтрока[ИмяКолонкиДляПроверки] 	= ЭлементМассива;	
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьДвиженияПоИсторииСтадийСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Стадия КАК Стадия,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.Статус КАК Статус,
	|	ИзменениеСтатусаСтадииЗапросаСрезПоследних.РасшифровкаСтатуса КАК РасшифровкаСтатуса
	|ИЗ
	|	РегистрСведений.ИзменениеСтатусаСтадииЗапроса.СрезПоследних(, Запрос = &Запрос) КАК ИзменениеСтатусаСтадииЗапросаСрезПоследних
	|ГДЕ
	|	(ИзменениеСтатусаСтадииЗапросаСрезПоследних.Стадия <> &Стадия
	|			ИЛИ ИзменениеСтатусаСтадииЗапросаСрезПоследних.Статус <> &Статус
	|			ИЛИ ИзменениеСтатусаСтадииЗапросаСрезПоследних.РасшифровкаСтатуса <> &РасшифровкаСтатуса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменениеСтатусаСтадииЗапроса.Запрос КАК Запрос
	|ИЗ
	|	РегистрСведений.ИзменениеСтатусаСтадииЗапроса КАК ИзменениеСтатусаСтадииЗапроса
	|ГДЕ
	|	ИзменениеСтатусаСтадииЗапроса.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", 			Ссылка);
	Запрос.УстановитьПараметр("Стадия", 			Стадия);
	Запрос.УстановитьПараметр("Статус", 			Статус);
	Запрос.УстановитьПараметр("РасшифровкаСтатуса", РасшифровкаСтатуса);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ РезультатЗапроса[0].Пустой()
			ИЛИ РезультатЗапроса[1].Пустой() Тогда
		
		Период 	= ТекущаяДата();		
		НаборЗаписей = РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Запрос.Установить(Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Ссылка);
		НоваяЗапись.Период = Период;
		НоваяЗапись.Запрос = Ссылка;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли