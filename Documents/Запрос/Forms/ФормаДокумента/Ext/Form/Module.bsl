
#Область ОписаниеПеременных

//<828132>, Басаргин (26.06.2018) {
&НаКлиенте 
Перем ДопФормыВзаимодействийЗакрыты;
//<828132> }

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНадписи();
	ОбновитьКартинкиСтадий();
	Если ЗначениеЗаполнено(Объект.ТипОбъектаНедвижимости) Тогда
		ОбновитьВидимостьЭлементовПоВидуОбъектаНедвижимости();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Учесть возможность создания из взаимодействия.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры,Ложь);
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Листинг") Тогда 
		Листинг.Загрузить(Параметры.ЗначенияЗаполнения.Листинг.Выгрузить());
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Участники") И ТипЗнч(Параметры.ЗначенияЗаполнения.Участники) = Тип("ДанныеФормыКоллекция") Тогда 
		Объект.Участники.Загрузить(Параметры.ЗначенияЗаполнения.Участники.Выгрузить());
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
			И Параметры.ЗначенияЗаполнения.Свойство("Проект") Тогда 
		Объект.Проект = Параметры.ЗначенияЗаполнения.Проект;
	КонецЕсли;	
	
	МенеджерФилиала = Пользователи.РолиДоступны("МенеджерФилиала");
	
	//<805210>, Басаргин (12.04.2018) {
	Если Параметры.Свойство("Телефония_ЗаявкаИнициатор") И ЗначениеЗаполнено(Параметры.Телефония_ЗаявкаИнициатор) Тогда
		Телефония_ЗаявкаИнициатор = Параметры.Телефония_ЗаявкаИнициатор;
		ДанныеЗвонка = УправлениеТелефониейСервер.ПолучитьПоследнийЗвонокПоЗаявке(Телефония_ЗаявкаИнициатор);
		Если НЕ ДанныеЗвонка = Неопределено Тогда
			Телефония_ID_Звонка = ДанныеЗвонка.ID_Звонка;
			Телефония_НомерТелефона = ДанныеЗвонка.НомерТелефона;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Телефония_ID_Звонка") И Параметры.Свойство("Телефония_НомерТелефона") Тогда
		Телефония_ID_Звонка = Параметры.Телефония_ID_Звонка;
		Телефония_НомерТелефона = Параметры.Телефония_НомерТелефона;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Клиент) Тогда
		Объект.Клиент = Параметры.Клиент;
		Если НЕ Объект.Участники.НайтиСтроки(Новый Структура("Клиент", Параметры.Клиент)).Количество() Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Клиент = Параметры.Клиент;
			НоваяСтрока.Основной = Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПолучитьДанныеПоКлиентуДляСтрокиУчастников(НоваяСтрока.Клиент));
		КонецЕсли;
	КонецЕсли;	
	//<805210> }
	
	//<884845>, Басаргин (06.11.2018) {
	Если Параметры.Ключ.Пустая() Тогда						
		Если ЗначениеЗаполнено(Телефония_ID_Звонка) ИЛИ ЗначениеЗаполнено(Телефония_ЗаявкаИнициатор) Тогда				
			Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИсторияЗвонков.ЗаявкаИнициатор КАК ЗаявкаИнициатор,
				|	ИсторияЗвонков.ЗаявкаИнициатор.ТипВызова КАК ТипВызова
				|ИЗ
				|	РегистрСведений.ИсторияЗвонков КАК ИсторияЗвонков
				|ГДЕ
				|	ИсторияЗвонков.ID_Звонка = &ID_Звонка";
			
				Запрос.УстановитьПараметр("ID_Звонка", Телефония_ID_Звонка);
			ИначеЕсли ЗначениеЗаполнено(Телефония_ЗаявкаИнициатор) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаявкаНаЗвонок.Ссылка КАК ЗаявкаИнициатор,
				|	ЗаявкаНаЗвонок.ТипВызова КАК ТипВызова
				|ИЗ
				|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
				|ГДЕ
				|	ЗаявкаНаЗвонок.Ссылка = &Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", Телефония_ЗаявкаИнициатор);			
			КонецЕсли;	
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();				
				Если ВыборкаДетальныеЗаписи.Следующий() Тогда	
					Если ВыборкаДетальныеЗаписи.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтЛидгенФейсбук Тогда
						Объект.РасшифровкаИсточниковПриходаКлиента = Справочники.РасшифровкаИсточниковПриходаКлиента.НайтиПоНаименованию("Интернет", Истина);
						Объект.УточнениеРасшифровкиИсточникаПрихода = Справочники.УточнениеРасшифровкиИсточниковПриходаКлиента.НайтиПоНаименованию("Лидген Фейсбук", Истина);
					ИначеЕсли ВыборкаДетальныеЗаписи.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтИнстраграмм
						ИЛИ ВыборкаДетальныеЗаписи.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаНаИнстаграмСторис Тогда
						Объект.РасшифровкаИсточниковПриходаКлиента = Справочники.РасшифровкаИсточниковПриходаКлиента.НайтиПоНаименованию("Интернет", Истина);		
						Объект.УточнениеРасшифровкиИсточникаПрихода = Справочники.УточнениеРасшифровкиИсточниковПриходаКлиента.НайтиПоНаименованию("Лидген Инстаграм", Истина);
					ИначеЕсли ВыборкаДетальныеЗаписи.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтОдноклассники Тогда
						Объект.РасшифровкаИсточниковПриходаКлиента = Справочники.РасшифровкаИсточниковПриходаКлиента.НайтиПоНаименованию("Интернет", Истина);
						Объект.УточнениеРасшифровкиИсточникаПрихода = Справочники.УточнениеРасшифровкиИсточниковПриходаКлиента.НайтиПоНаименованию("Лидген Одноклассники", Истина);	
					ИначеЕсли ВыборкаДетальныеЗаписи.ТипВызова = Перечисления.ТипыВызовов.ЗаявкаСВКонтакте Тогда
						Объект.РасшифровкаИсточниковПриходаКлиента = Справочники.РасшифровкаИсточниковПриходаКлиента.НайтиПоНаименованию("Интернет", Истина);
						Объект.УточнениеРасшифровкиИсточникаПрихода = Справочники.УточнениеРасшифровкиИсточниковПриходаКлиента.НайтиПоНаименованию("Лидген Вконтакте", Истина);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			
	Иначе
		Если ЗначениеЗаполнено(Объект.РасшифровкаИсточниковПриходаКлиента) Тогда
			Элементы.РасшифровкаИсточниковПриходаКлиента.ТолькоПросмотр = Истина;	
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.УточнениеРасшифровкиИсточникаПрихода) Тогда
			Элементы.УточнениеРасшифровкиИсточниковПриходаКлиента.ТолькоПросмотр = Истина;
		КонецЕсли;		
	КонецЕсли;
	//<884845> }
	
	////<749787>, Басаргин (14.12.2017) {
	//Элементы.Проект.ТолькоПросмотр = НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.Проект) И (Объект.Проведен);  //ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()));
	//Элементы.ТипОбъектаНедвижимости.ТолькоПросмотр = НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.ТипОбъектаНедвижимости) И (Объект.Проведен); // ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()));
	////<749787> }
	
	//<810997>, Басаргин (03.05.2018) {
	ЭтоМенеджерГПТ = УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , ПользователиКлиентСервер.АвторизованныйПользователь()) И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ПользователиКлиентСервер.АвторизованныйПользователь());	
	//Элементы.ФормаСоздатьЗапланированноеВзаимодействие.Видимость = НЕ ЭтоМенеджерГПТ;
	//<810997> }
	
	Рекомендации = Справочники.РасшифровкаИсточниковПриходаКлиента.НайтиПоНаименованию("Рекомендации", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	//<828132>, Басаргин (09.06.2018) {
	ЗаполнитьСтатусРасшифровкуСтатуса(); 
	//<828132> }	
	
	ЗаполнитьЛистингСрезомПоследних();
	
	//<828132>, Басаргин (15.06.2018) {
	//ОбновитьДоступностьЭлементаСозданияЗаявки(Элементы.ЛистингСоздатьЗаявкуНаСделку, Объект.Стадия);
	ОбновитьДоступностьЭлементаСозданияЗаявки(Элементы.ЛистингСоздатьЗаявкуНаСделку, СтадияЗапроса);
	//<828132> }
		
	//<749787>, Басаргин (14.12.2017) {
	Элементы.Проект.ТолькоПросмотр = ЗначениеЗаполнено(ТекущийОбъект.Проект) И (ТекущийОбъект.Проведен);  //ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()));
	Элементы.ТипОбъектаНедвижимости.ТолькоПросмотр = ЗначениеЗаполнено(ТекущийОбъект.ТипОбъектаНедвижимости) И (ТекущийОбъект.Проведен); // ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()));
	//<749787> }
		
	//<767002>, Басаргин (01.02.2018) {	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокЗаявкаНаСделку.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сделки КАК Сделки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку КАК ДокЗаявкаНаСделку
	|		ПО Сделки.ЗаявкаНаСделку = ДокЗаявкаНаСделку.Ссылка
	|			И (Сделки.СтатусСделки <> ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута))
	|			И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокЗаявкаНаСделку.Дата, ДЕНЬ), НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ) >= 14)
	|ГДЕ
	|	НЕ ДокЗаявкаНаСделку.ПометкаУдаления
	|	И ДокЗаявкаНаСделку.Проведен
	|	И ДокЗаявкаНаСделку.ДокументОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ТолькоПросмотр = НЕ Запрос.Выполнить().Пустой();
	
	Элементы.ЛистингУдалить.Доступность = НЕ ТолькоПросмотр;
	Элементы.ЛистингПодобратьВЛистинг.Доступность = НЕ ТолькоПросмотр;
	Элементы.ЛистингОткрытьОтчетШахматка.Доступность = НЕ ТолькоПросмотр;
	Элементы.ПодобратьФазу.Доступность = НЕ ТолькоПросмотр;
	
	Элементы.ЛистингСоздатьДокументБронирования.Видимость = НЕ ТолькоПросмотр;
	Элементы.ЛистингСоздатьДокументСнятияСБронирования.Видимость = НЕ ТолькоПросмотр;
	Элементы.ЛистингСоздатьЗаявкуНаСделку.Видимость = НЕ ТолькоПросмотр;	
	//<767002> }
	
	//EXTCODE Шумилин Сергей 28.05.2018 {{ ---> 824941
	Элементы.ЛистингВыводВПул.Видимость = НЕ ТолькоПросмотр;
	//EXTCODE Шумилин Сергей 28.05.2018 <--- }} 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипОбъектаНедвижимости = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость") И НЕ ЗначениеЗаполнено(Объект.ВидСделки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Вид сделки не указан для проекта комменрческой недвижимости";
		Сообщение.Поле = "ВидСделки";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	//Проверка на наличие в листинге ОН по другим проектам
	Если Листинг.Количество() > 0 Тогда
		ЕстьНесоответствиеПроектов 	= Ложь;
		НомерСтроки 				= 0;
	    Для каждого СтрокаКоллекции Из Листинг Цикл
			Если СтрокаКоллекции.Проект <> Объект.Проект Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Объект недвижимости, подобранный в листинг, относится к другому проекту!";
				Сообщение.Поле 	= "Листинг[" + Строка(НомерСтроки) + "].Проект";  
				Сообщение.УстановитьДанные(Объект); //Ссылка на объект ИБ
				Сообщение.Сообщить();
				ЕстьНесоответствиеПроектов = Истина;
			КонецЕсли;
		КонецЦикла;	
		Если ЕстьНесоответствиеПроектов Тогда
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
	КонецЕсли;
		
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
	Если ЭтоМенеджерГПТ Тогда	
		Если НЕ ЗначениеЗаполнено(Телефония_ID_Звонка) И НЕ ЗначениеЗаполнено(Телефония_НомерТелефона) И НЕ Объект.Ссылка.Пустая() Тогда
			НомерТелефона = ПроверитьНомераУчастников(Отказ);
			Если Отказ Тогда
				ОписаниеОповещения 	= Новый ОписаниеОповещения("ПередЗаписьюПроверитьНомераУчастников", ЭтотОбъект, Новый Структура("ПараметрыЗаписи, НомерТелефона", ПараметрыЗаписи, НомерТелефона));
				ПоказатьВопрос(ОписаниеОповещения, "Номера телефона звонка из телефонии нет ни у одного участника. Добавить номер участнику?", РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(Телефония_ID_Звонка) И ЗначениеЗаполнено(Телефония_НомерТелефона) Тогда
			ПараметрыЗаписи.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
			Если ПроверитьУчастниковПоДаннымТелефонии() И НЕ ПараметрыЗаписи.Свойство("НеПроверятьУчастников") Тогда
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииФормыВыбораУчастника", ЭтотОбъект, ПараметрыЗаписи);
				ОткрытьФорму("Документ.Запрос.Форма.ФормаВыбораУчастника", Новый Структура("Участники, НомерТелефона", ПолучитьСписокУчастников(), Телефония_НомерТелефона),
					ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Отказ = Истина;	
			КонецЕсли;
		//Иначе
		//	Если МенеджерФилиала
		//			И НЕ ПараметрыЗаписи.ЭтоНовый 
		//			И НЕ ПараметрыЗаписи.Свойство("ЗадаватьВопрос") Тогда
		//		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПередЗаписьюНаСервереОкончание", ЭтотОбъект, ПараметрыЗаписи);
		//		ПоказатьВопрос(ОписаниеОповещения, "Документ запрос изменяется на основании телефонного звонка?", РежимДиалогаВопрос.ДаНетОтмена, 60);
		//		Отказ 				= Истина;
		//	КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	//<853881>, Басаргин (10.08.2018) {
	Если Пользователи.РолиДоступны("МенеджерФилиала") И НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		Если НЕ Объект.ФормыОплаты.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана ни одна форма оплаты", , "ФормыОплаты", , Отказ);
		КонецЕсли;
	КонецЕсли;
	//<853881> }
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Телефония_ID_Звонка) И ЗначениеЗаполнено(Телефония_НомерТелефона) Тогда  
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
	//Иначе
	//	Отказ = ПроверитьНомераУчастников();	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменялисьДанныеВЛистинге Тогда
		
		ТекущаяДата = ТекущаяДата();
		
		ВерсияДокумента = Документы.Запрос.ПолучитьНомерПоследнейВерсииЛистинга(ТекущийОбъект.Ссылка, Истина);		
		
		Для каждого ЭлементКоллекции Из Листинг Цикл
			
			НаборЗаписей = РегистрыСведений.Листинг.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Запрос.Установить(ТекущийОбъект.Ссылка);
			НаборЗаписей.Отбор.ОбъектНедвижимости.Установить(ЭлементКоллекции.ОбъектНедвижимости);
			НаборЗаписей.Отбор.ВерсияДокумента.Установить(ВерсияДокумента);
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭлементКоллекции);
			НоваяЗапись.Период 			= ТекущаяДата;
			НоваяЗапись.Запрос 			= ТекущийОбъект.Ссылка;
			НоваяЗапись.ВерсияДокумента = ВерсияДокумента;
			
			НаборЗаписей.Записать(Ложь);
		
		КонецЦикла;
				
		ИзменялисьДанныеВЛистинге = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ИкатьПланируемуюВстречу = Ложь;
	
	//Ролевая модель для менеджера филиала
	//Если МенеджерФилиала Тогда 
	Если НЕ ЭтоМенеджерГПТ Тогда
		
		//Проверка для создания документа взаимодействия с типом встреча, если взаимодействия нет, необходимо создать...
		СтрВстречи 	= CRMСервер.НаличиеДокументаВзаимодействияВстреча(Объект.Ссылка, Объект.Клиент);
		ПараметрыЗаписи.Вставить("ЕстьДокументВстреча", СтрВстречи.Результат);
		ПараметрыЗаписи.Вставить("ДокВстреча", 			СтрВстречи.ДокументВзаимодействие);		
		
		ИкатьПланируемуюВстречу = Истина;
		
	Иначе
		
		//<828132>, Басаргин (09.06.2018) {
		//Если Объект.Статус = Перечисления.СтатусыЗапроса.ВРаботе
		//	И Объект.РасшифровкаСтатуса = Справочники.ПричиныСтатусовЗапроса.НазначенаВстреча Тогда				
		Если СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе
			И РасшифровкаСтатусаЗапроса = Справочники.ПричиныСтатусовЗапроса.НазначенаВстреча Тогда				
		//<828132> }
			
			ИкатьПланируемуюВстречу = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИкатьПланируемуюВстречу Тогда
	
		//Проверка для корректировки взаимодействия с будущей датой.
		СтрЗапланированнойВстречи = CRMСервер.НаличиеЗапланированногоДокументаВстреча(Объект.Ссылка, Объект.Клиент);
		ПараметрыЗаписи.Вставить("ЕстьЗапланированнаяВстреча", 	СтрЗапланированнойВстречи.Результат);
		ПараметрыЗаписи.Вставить("ДокЗапланированнаяВстреча", 	СтрЗапланированнойВстречи.ДокументВзаимодействие);	
	
	КонецЕсли;
	
	СтрЗвонка	= CRMСервер.НаличиеДокументаВзаимодействияТелефонныйЗвонок(Объект.Ссылка, Объект.Клиент, Телефония_ID_Звонка);
	ПараметрыЗаписи.Вставить("ЕстьДокументТелЗвонок", 	СтрЗвонка.Результат);
	ПараметрыЗаписи.Вставить("ДокТелЗвонок", 			СтрЗвонка.ДокументВзаимодействие);		
	//Проверка для корректировки взаимодействия с будущей датой.
	СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Ссылка, Объект.Клиент);
	ПараметрыЗаписи.Вставить("ЕстьЗапланированныйЗвонок", 	СтрЗапланированногоЗвонка.Результат);
	ПараметрыЗаписи.Вставить("ДокЗапланированныйЗвонок", 	СтрЗапланированногоЗвонка.ДокументВзаимодействие);	
	
	//Для менеджера ГПТ корректируем или создаём документ взаимодействия, не показывая его
	//Если НЕ МенеджерФилиала И НЕ ПустаяСтрока(Телефония_ID_Звонка) Тогда 
	Если ЭтоМенеджерГПТ И НЕ ПустаяСтрока(Телефония_ID_Звонка) Тогда	
		СоздатьДокументыВзаимодействий(ПараметрыЗаписи);
		
		//Если был запланированный звонок, то он был скорректирован и искать нужно заново
		Если ПараметрыЗаписи.ЕстьЗапланированныйЗвонок Тогда
			СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Ссылка, Объект.Клиент);
			ПараметрыЗаписи.Вставить("ЕстьЗапланированныйЗвонок", 	СтрЗапланированногоЗвонка.Результат);
			ПараметрыЗаписи.Вставить("ДокЗапланированныйЗвонок", 	СтрЗапланированногоЗвонка.ДокументВзаимодействие);				
		КонецЕсли;
	//ИначеЕсли МенеджерФилиала Тогда		
	//	Создать_Скорректировать_ВзаимодействиеВстреча(ПараметрыЗаписи);	
	КонецЕсли;
	
	//<749787>, Басаргин (14.12.2017) {
	Элементы.Проект.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Проект) И (Объект.Проведен); // ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()));
	Элементы.ТипОбъектаНедвижимости.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ТипОбъектаНедвижимости) И (Объект.Проведен); // ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()));
	ЗаполнитьСтатусРасшифровкуСтатуса();
	//<749787> }
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Взаимодействия
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "Запрос");
	// Конец СтандартныеПодсистемы.Взаимодействия	
	
	//<805210>, Басаргин (20.04.2018) {
	Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
		ПараметрыЗвонка = УправлениеТелефониейКлиент.ПолучитьПараметрыЗвонка(, , Телефония_ID_Звонка);
		Если НЕ ПараметрыЗвонка = Неопределено Тогда
			ДанныеЗвонка = УправлениеТелефониейСервер.ПолучитьДанныеЗвонка(ПараметрыЗвонка.ID_Звонка);
			Если ДанныеЗвонка.ID_Звонка = ПараметрыЗвонка.ID_Звонка 
				И НЕ ДанныеЗвонка.СтатусЗвонка = ПараметрыЗвонка.СтатусЗвонка Тогда
				ПараметрыЗвонка.СтатусЗвонка = ДанныеЗвонка.СтатусЗвонка; //ПредопределенноеЗначение("Справочник.СтатусыЗвонков.ПредпродажноеОбслуживание");
			КонецЕсли;
			Если ПараметрыЗаписи.Свойство("УстановленныйКонтактЗвонка") Тогда
				ПараметрыЗвонка.Контакт = ПараметрыЗаписи.УстановленныйКонтактЗвонка;
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;
	//<805210> }
	
	СоздатьЗапланированныеДокументыВзаимодействий(ПараметрыЗаписи);
	
	//<828132>, Басаргин (09.06.2018) {
	//ОбновитьДоступностьЭлементаСозданияЗаявки(Элементы.ЛистингСоздатьЗаявкуНаСделку, Объект.Стадия);
	ОбновитьДоступностьЭлементаСозданияЗаявки(Элементы.ЛистингСоздатьЗаявкуНаСделку, СтадияЗапроса);	
	ОбновитьКартинкиСтадий();
	//<828132> }
	
	//<884845>, Басаргин (07.11.2018) {
	Элементы.УточнениеРасшифровкиИсточниковПриходаКлиента.ТолькоПросмотр = Истина;
	Элементы.РасшифровкаИсточниковПриходаКлиента.ТолькоПросмотр = Истина;	
	//<884845> }	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Клиенты") ИЛИ 
			ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") 
				И НЕ ВыбранноеЗначение.Свойство("ИмяФактораЗапроса") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.ИмяФактораЗапроса = "СтопФакторы" Тогда
	
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "СтопФакторы", 					"СтопФактор");	
	
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "ФакторыВыбора" Тогда
	
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "ФакторыВыбораОН", 				"ФакторВыбора");
	
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "ЦельПокупки" Тогда
	
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "ЦелиПокупки", 					"ЦельПокупки");	
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "ФормыОплаты" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "ФормыОплаты", 					"ФормаОплаты");
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "Мотивации" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "Мотивации", 					"Мотивация");	
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "Расположение" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "Расположения", 					"Расположение");	
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "Фазы" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "Фазы", 							"Фаза");				
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "Фазы" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "Фазы", 							"Фаза");
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "Услуги" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "Услуги", 						"Услуга");		
		
	ИначеЕсли ВыбранноеЗначение.ИмяФактораЗапроса = "Корпуса" Тогда
		
		ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение.МассивРезультатаВыбора, "СписокОбъектовСтроительства", 	"ОбъектСтроительства");
		СписокОбъектовСтроительстваОбработкаВыбора();		
		
	КонецЕсли;
	
	ОбновитьНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Клиенты" Тогда		
		Если ИмяСобытия = "СозданиеКлиентаИзТелефонии" Тогда
			ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
			ОписаниеОповещенияОЗакрытииСозданияУчастника(Параметр, ?(ТекущиеДанные = Неопределено, Неопределено, Новый Структура("Идентификатор", ТекущиеДанные.ПолучитьИдентификатор())));
		КонецЕсли;
	ИначеЕсли Источник = "Шахматка" Тогда		
		Если ИмяСобытия = "ПодборОбъектов" Тогда			
			Если Параметр <> Неопределено И Параметр.Количество() > 0 Тогда				
				ЗаполнитьЛистингНаСервере(Параметр.МассивОН);	
				ОткрытьДополнительныеФормыЗапросов(Параметр.МассивОН);
				Модифицированность = Истина;				
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СобытиеБронирования" Тогда
		ЗаполнитьЛистингСрезомПоследних();
		ЛистингПриАктивизацииСтроки(Элементы.Листинг);		
	//<805210>, Басаргин (12.04.2018) {	
	ИначеЕсли Источник = "Телефония" Тогда
		Если (ИмяСобытия = "НачалоРазговора" ИЛИ ИмяСобытия = "ОкончаниеЗвонка") 
			И ЗначениеЗаполнено(Телефония_ЗаявкаИнициатор)
			И Параметр.ЗаявкаИнициатор = Телефония_ЗаявкаИнициатор Тогда			
			Телефония_ID_Звонка = Параметр.ID_Звонка;
			Телефония_НомерТелефона = Параметр.НомерТелефона;
		КонецЕсли;
	//<805210> }		
	//<828132>, Басаргин (19.06.2018) {
	ИначеЕсли ИмяСобытия = "ОбновлениеСтадииСтатусаЗапроса" Тогда
		ЗаполнитьСтатусРасшифровкуСтатуса();
		ОбновитьКартинкиСтадий();
	//<828132> }   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	Объект.ТипОбъектаНедвижимости = ЗначениеРеквизитаОбъекта(Объект.Проект, "ВидНедвижимости");
	ОбновитьВидимостьЭлементовПоВидуОбъектаНедвижимости();
КонецПроцедуры

#КонецОбласти    

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьКорпуса(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьПредупреждение(,"Для осуществления подбора необходимо указать проект!", 60, "Не указан проект");
		ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок,ПараметрОтбора", 
													"Подбор корпусов ОН",
													"Корпуса",
													"ОбъектыСтроительства", 
													"Справочник", 
													"ГДЕ ОсновнаяТаблица.Проект = &ПараметрОтбора", 
													ЗадатьПараметрМассивСсылок("СписокОбъектовСтроительства", "ОбъектСтроительства"),
													Объект.Проект);
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьРасположение(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор расположения ОН",
													"Расположение", 
													"Расположение", 
													"Перечисление", 
													"", 
													ЗадатьПараметрМассивСсылок("Расположения", "Расположение"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМотивации(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор расшифровки цели покупки",
													"Мотивации", 
													"Мотивации", 
													"Справочник", 
													"", 
													ЗадатьПараметрМассивСсылок("Мотивации", "Мотивация"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФакторыВыбора(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор факторов выбора ОН",
													"ФакторыВыбора", 
													"ФакторыВыбораОН", 
													"Справочник", 
													"ГДЕ ОсновнаяТаблица.СтопФактор = ЛОЖЬ", 
													ЗадатьПараметрМассивСсылок("ФакторыВыбораОН", "ФакторВыбора"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСтопФакторы(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор стоп-факторов ОН",
													"СтопФакторы", 
													"ФакторыВыбораОН", 
													"Справочник", 
													"ГДЕ ОсновнаяТаблица.СтопФактор = ИСТИНА", 
													ЗадатьПараметрМассивСсылок("СтопФакторы", "СтопФактор"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьЦелиПокупки(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор целей покупки клиента",
													"ЦельПокупки", 
													"ЦельПокупки", 
													"Перечисление", 
													"", 
													ЗадатьПараметрМассивСсылок("ЦелиПокупки", "ЦельПокупки"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФормыОплаты(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор форм оплаты клиента",
													"ФормыОплаты", 
													"ФормыОплаты", 
													"Перечисление", 
													"", 
													ЗадатьПараметрМассивСсылок("ФормыОплаты", "ФормаОплаты"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФазу(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьПредупреждение(,"Для осуществления подбора необходимо указать проект!", 60, "Не указан проект");
		ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор фаз ОН",
													"Фазы", 
													"Фазы", 
													"Справочник", 
													"", 
													ЗадатьПараметрМассивСсылок("Фазы", "Фаза"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУслуги(Команда)
	
	ПараметрыОткрываемойФормы 	= Новый Структура("ЗаголовокФормы,ИмяФактораЗапроса,ИмяТаблицы,ТипПараметраПодбора,СекцияЗапросаГДЕ,МассивСсылок", 
	                                                "Подбор услуг по ЗУ",
													"Услуги", 
													"Услуги", 
													"Справочник", 
													"", 
													ЗадатьПараметрМассивСсылок("Услуги", "Услуга"));
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаПодбораЭлементовСправочника", ПараметрыОткрываемойФормы, ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапрос(Команда)

	ПараметрыФормы = Новый Структура("ЗначениеКопирования, Клиент, Телефония_ID_Звонка, Телефония_НомерТелефона", Объект.Ссылка, Объект.Клиент, Телефония_ID_Звонка, Телефония_НомерТелефона);
	ОткрытьФорму("Документ.Запрос.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявкиНаЭкскурсию(Команда)
		
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаМенеджеру", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Документ не записан. Записать?", РежимДиалогаВопрос.ДаНет, 0); 
	Иначе
		ОткрытьФорму("Документ.Запрос.Форма.ПараметрыПечатиЗаявкиНаЭкскурсию", ПолучитьПараметрыФормыПечатиЗаявкиНаЭкскурсию(), ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
	
КонецПроцедуры

//<810997>, Басаргин (03.05.2018) {
&НаКлиенте
Процедура СоздатьЗапланированноеВзаимодействие(Команда)

	ПараметрыОткрываемойФормы = Новый Структура("Основание", Объект.Ссылка);	
	
	Если НЕ ЭтоМенеджерГПТ Тогда
		
		СтрЗапланированнойВстречи = CRMСервер.НаличиеЗапланированногоДокументаВстреча(Объект.Ссылка, Объект.Клиент);
		СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Ссылка, Объект.Клиент);
				
		ПараметрыОткрываемойФормы.Вставить("ЗапланированнаяВстреча", 		СтрЗапланированнойВстречи.ДокументВзаимодействие);
		ПараметрыОткрываемойФормы.Вставить("ЗапланированныйЗвонок",			СтрЗапланированногоЗвонка.ДокументВзаимодействие);
		ПараметрыОткрываемойФормы.Вставить("ТекущаяВстреча", 				Неопределено); 
		ПараметрыОткрываемойФормы.Вставить("ТекущийЗвонок",					Неопределено); 		
		ПараметрыОткрываемойФормы.Вставить("ТекущееСобытие",				Ложь);
		ПараметрыОткрываемойФормы.Вставить("СтатусЗапроса",					ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ПустаяСсылка")); //Объект.Статус	
		//<828132>, Басаргин (15.06.2018) {
		ПараметрыОткрываемойФормы.Вставить("РасшифровкаСтатусаЗапроса", ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка"));
		ПараметрыОткрываемойФормы.Вставить("СтадияЗапроса", СтадияЗапроса); 
		//<828132> }
		
		МассивКлиентов = Новый СписокЗначений;
		Для каждого ЭлементКоллекции Из Объект.Участники Цикл
			МассивКлиентов.Добавить(ЭлементКоллекции.Клиент);		
		КонецЦикла;
		ПараметрыОткрываемойФормы.Вставить("МассивКлиентов",				МассивКлиентов);
		
		ОткрытьФорму("Документ.Запрос.Форма.ФормаСозданияВзаимодействия", 	ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
				
	Иначе
		
		//<828132>, Басаргин (09.06.2018) {
		//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
		//	И Объект.РасшифровкаСтатуса = ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда		
		Если СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
			И РасшифровкаСтатусаЗапроса = ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда				
		//<828132> }
			
			СтрЗапланированнойВстречи = CRMСервер.НаличиеЗапланированногоДокументаВстреча(Объект.Ссылка, Объект.Клиент);
			ЗапланированнаяВстреча = СтрЗапланированнойВстречи.ДокументВзаимодействие;			
			
			Если ЗначениеЗаполнено(ЗапланированнаяВстреча) Тогда
				ПараметрыОткрываемойФормы.Вставить("Ключ", ЗапланированнаяВстреча);
			КонецЕсли;
			ОткрытьФорму("Документ.Встреча.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			
		//<828132>, Басаргин (09.06.2018) {
		//ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
		//	И Объект.РасшифровкаСтатуса <> ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда
		ИначеЕсли СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
			И РасшифровкаСтатусаЗапроса <> ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда		
		//<828132> }
			
			СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Ссылка, Объект.Клиент);
			ЗапланированныйЗвонок = СтрЗапланированногоЗвонка.ДокументВзаимодействие;			
			
			Если ЗначениеЗаполнено(ЗапланированныйЗвонок) Тогда
				ПараметрыОткрываемойФормы.Вставить("Ключ", ЗапланированныйЗвонок);
			КонецЕсли;
			ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
		КонецЕсли;	
			
	КонецЕсли;
		
КонецПроцедуры
//<810997> }

//<852121>, Басаргин (31.10.2018) {
&НаКлиенте
Процедура СоздатьНаОсновании_ВыдачаДисконтныхКарт(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Участники.Количество() > 1 Тогда
		Клиенты = Новый Массив;
		Для каждого СтрокаУчастник Из Объект.Участники Цикл
			Клиенты.Добавить(СтрокаУчастник.Клиент);	
		КонецЦикла;		
		ОткрытьФорму("Документ.ВыдачаДисконтныхКарт.Форма.ФормаВыбораВыгодоприобретателя", Новый Структура("Запрос, Клиенты", Объект.Ссылка, Клиенты), ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Документ.ВыдачаДисконтныхКарт.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка), ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;
	
КонецПроцедуры
//<852121> }

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

&НаКлиенте
Процедура ПодобратьКонкурентов(Команда)

	ПараметрыОткрываемойФормы 	= Новый Структура("ЗакрыватьПриВыборе,МножественныйВыбор", Ложь, Истина);
	ОткрытьФорму("Справочник.Конкуренты.ФормаВыбора", ПараметрыОткрываемойФормы, Элементы.Конкуренты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистингПослеУдаления(Элемент)
	ИзменялисьДанныеВЛистинге = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КонкурентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение, "Конкуренты", "Конкурент");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовСтроительстваОбработкаВыбора()
	
	ЗаполнитьКорпусаПоОННаСервере()

КонецПроцедуры

&НаКлиенте
Процедура УчастникиКлиентПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		//Элементы.Участники.ТекущиеДанные.ОсновнойТелефон = УчастникиКлиентПриИзмененииНаСервере(Элементы.Участники.ТекущиеДанные.Клиент);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПолучитьДанныеПоКлиентуДляСтрокиУчастников(ТекущиеДанные.Клиент));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УчастникиКлиентПриИзмененииНаСервере(Клиент)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	КлиентыКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И КлиентыКонтактнаяИнформация.Тип = Значение(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КлиентыКонтактнаяИнформация.Вид = Значение(Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента)";
		
		Запрос.УстановитьПараметр("Ссылка", Клиент);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Представление;			
		Иначе
			Возврат Неопределено;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаявкуНаСделку(Команда)
	
	//Если Не Объект.Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") Тогда
	//	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьЗаявкуНаСделкуЗавершение", ЭтотОбъект), 
	//					"При создании документа ""Заявка на сделку"" запрос будет переведён в стадию ""Сделка""! Продолжить?", 
	//					РежимДиалогаВопрос.ДаНет);
	//Иначе
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("СоздатьЗаявкуНаСделкуЗавершение", ЭтотОбъект), КодВозвратаДиалога.Да);					
	//КонецЕсли;				
	
		
КонецПроцедуры
				
&НаКлиенте
Процедура СоздатьДокументБронирования(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДокументБронированияЗавершение", ЭтотОбъект), 
							"Для создания документа бронирования необходимо записать документ запрос! Продолжить?", 
							РежимДиалогаВопрос.ДаНет);
							
	Иначе
		
		ОткрытьФормуДокументаБронирования();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументСнятияСБронирования(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДокументСнятияБронированияЗавершение", ЭтотОбъект), 
						"Снять бронирование для выбранного в листинге объекта недвижимости?", 
						РежимДиалогаВопрос.ДаНет);
							
КонецПроцедуры

&НаКлиенте
Процедура ЛистингПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистингПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Листинг.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		Элементы.Листинг.КоманднаяПанель.ПодчиненныеЭлементы.ЛистингСоздатьДокументБронирования.Доступность 		= (ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовНедвижимости.Свободен")
																														ИЛИ  ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовНедвижимости.Забронирован"))
																														И НЕ ТекущиеДанные.ЗабронированЭтимЖеЗапросом;//НЕ ТекущиеДанные.Забронирован ИЛИ НЕ ТекущиеДанные.ЗабронированЭтимЖеЗапросом; 
		Элементы.Листинг.КоманднаяПанель.ПодчиненныеЭлементы.ЛистингСоздатьДокументСнятияСБронирования.Доступность 	= ТекущиеДанные.ЗабронированЭтимЖеЗапросом;																												
		Элементы.Листинг.КоманднаяПанель.ПодчиненныеЭлементы.ЛистингСоздатьЗаявкуНаСделку.Доступность 				= (НЕ ТекущиеДанные.Забронирован 
																														И ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовНедвижимости.Свободен"))
																														ИЛИ ТекущиеДанные.ЗабронированЭтимЖеЗапросом;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетШахматка(Команда)
	
	ТекДанные = Элементы.Листинг.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;	
	Если ТекДанные <> Неопределено Тогда		
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",		Истина);		
		ПараметрыФормы.Вставить("Отбор",						Новый Структура("ОбъектСтроительства", ТекДанные.ОбъектСтроительства));
		ПараметрыФормы.Вставить("ОбъектНедвижимостиВыделение",	ТекДанные.ОбъектНедвижимости);		
		ДополнитьПараметрыОтчета(ТекДанные.ОбъектНедвижимости, ТекДанные.ОбъектСтроительства, ПараметрыФормы); 
	Иначе
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Ложь);
	КонецЕсли;
		
	//ОткрытьФорму("Отчет.Шахматка.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор());			
	ОткрытьФорму("Отчет.Шахматка.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, ,  , Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытии", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаНедвижимостиПриИзменении(Элемент)
	ОбновитьВидимостьЭлементовПоВидуОбъектаНедвижимости();
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОсновнойПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные.Основной Тогда
		Объект.Клиент = ТекущиеДанные.Клиент;
	Иначе
		Если Объект.Клиент = ТекущиеДанные.Клиент Тогда
			Участники = Объект.Участники.НайтиСтроки(Новый Структура("Основной", Истина));
			Если Участники.Количество() Тогда
				Объект.Клиент = Участники[0].Клиент;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПослеУдаления(Элемент)
	
	Если Объект.Участники.Количество() = 0 Тогда
	
		Объект.Клиент = ПредопределенноеЗначение("Справочник.Клиенты.ПустаяСсылка");	
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКлиентСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияОЗакрытииСозданияУчастника = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииСозданияУчастника", ЭтотОбъект, Новый Структура("Идентификатор", Элементы.Участники.ТекущиеДанные.ПолучитьИдентификатор()));
	Если ЗначениеЗаполнено(Телефония_ID_Звонка) И ЗначениеЗаполнено(Телефония_НомерТелефона) Тогда
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаЭлемента", Новый Структура("ОсновнойТелефон, СозданиеКлиентаИзЗапроса", Телефония_НомерТелефона, Истина), ЭтаФорма, , , , ОписаниеОповещенияОЗакрытииСозданияУчастника);
	Иначе
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаЭлемента", Новый Структура("ОсновнойТелефон, СозданиеКлиентаИзЗапроса", ПолучитьНомерТелефонаИзСоответствия(Объект.Ссылка), Истина), ЭтаФорма, , , , ОписаниеОповещенияОЗакрытииСозданияУчастника);		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияОЗакрытииСозданияУчастника = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииСозданияУчастника", ЭтотОбъект, Новый Структура("Идентификатор", Элементы.Участники.ТекущиеДанные.ПолучитьИдентификатор()));
	Если ЗначениеЗаполнено(Телефония_ID_Звонка) И ЗначениеЗаполнено(Телефония_НомерТелефона) Тогда
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", Новый Структура("ОсновнойТелефон, СозданиеКлиентаИзЗапроса", Телефония_НомерТелефона, Истина), ЭтаФорма, , , , ОписаниеОповещенияОЗакрытииСозданияУчастника);
	Иначе
		ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", Новый Структура("ОсновнойТелефон, СозданиеКлиентаИзЗапроса", ПолучитьНомерТелефонаИзСоответствия(Объект.Ссылка), Истина), ЭтаФорма, , , , ОписаниеОповещенияОЗакрытииСозданияУчастника);		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЛистингВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЛистингВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//++ Юкаев Роман 20180313 ( //не использование модальности
	ТекущиеДанные = Элементы.Листинг.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.ОбъектНедвижимости);
	КонецЕсли;
	//-- Юкаев Роман )
КонецПроцедуры

//EXTCODE Шумилин Сергей 28.05.2018 {{ ---> 824941
&НаКлиенте
Процедура ВыводВПул(Команда)
	
	ТекущийДанныеЛистинга = Элементы.Листинг.ТекущиеДанные;
	
	Если ТекущийДанныеЛистинга <> Неопределено Тогда
		
		СтрЗначениеЗаполнение = Новый Структура("Клиент,ОбъектНедвижимости", 
													Объект.Клиент, 
													ТекущийДанныеЛистинга.ОбъектНедвижимости);
		
		ПараметрыОткрываемойФормы = Новый Структура("ЗначенияЗаполнения", СтрЗначениеЗаполнение);		
		
		ОткрытьФорму("Документ.ЗаявкаНаВыводОНВПродажу.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма);		
	
	КонецЕсли;	
	
КонецПроцедуры
//EXTCODE Шумилин Сергей 28.05.2018 <--- }} 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗаписьюПроверитьНомераУчастников(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииФормыВыбораУчастника", ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи);
	ОткрытьФорму("Документ.Запрос.Форма.ФормаВыбораУчастника", Новый Структура("Участники, НомерТелефона", ПолучитьСписокУчастников(), ДополнительныеПараметры.НомерТелефона),
		ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУчастников()
	Возврат Объект.Участники.Выгрузить().ВыгрузитьКолонку("Клиент");
КонецФункции

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииФормыВыбораУчастника(РезультатЗакрытия, ПараметрыЗаписи) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		РазблокироватьДанныеФормыДляРедактирования();
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗаписи.Вставить("НеПроверятьУчастников", Истина);
	ПараметрыЗаписи.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
	ПараметрыЗаписи.Вставить("РежимЗаписиДокумента", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	Прочитать();
	РазблокироватьДанныеФормыДляРедактирования();
		
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытииСозданияУчастника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		РазблокироватьДанныеФормыДляРедактирования();
		Возврат;
	КонецЕсли; 

	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("Идентификатор") Тогда	
		СтрокаТаблицы = Объект.Участники.НайтиПоИдентификатору(?(ДополнительныеПараметры.Идентификатор = Неопределено, Элементы.Участники.ТекущиеДанные.ПолучитьИдентификатор(), ДополнительныеПараметры.Идентификатор));
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = Объект.Участники.Добавить();
			СтрокаТаблицы.Клиент = РезультатЗакрытия;			
		Иначе
			СтрокаТаблицы.Клиент = РезультатЗакрытия;
		КонецЕсли;
	Иначе
		СтрокаТаблицы = Объект.Участники.Добавить();
		СтрокаТаблицы.Клиент = РезультатЗакрытия;	
	КонецЕсли;		
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПолучитьДанныеПоКлиентуДляСтрокиУчастников(СтрокаТаблицы.Клиент));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНомераУчастников(Отказ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеЗапросовЗвонкам.ID_Звонка КАК ID_Звонка
	|ИЗ
	|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	|ГДЕ
	|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос";
	
	Запрос.УстановитьПараметр("Запрос", Объект.Ссылка);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Отказ = Истина;
	НомерТелефона = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СоответствиеЗапросовЗвонкам.ДатаСвязи) КАК ДатаСвязи
	|ПОМЕСТИТЬ ВТ_МаксДатаСвязи
	|ИЗ
	|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	|ГДЕ
	|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторияЗвонков.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	ВТ_МаксДатаСвязи КАК ВТ_МаксДатаСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗвонков КАК ИсторияЗвонков
	|			ПО СоответствиеЗапросовЗвонкам.ID_Звонка = ИсторияЗвонков.ID_Звонка
	|		ПО ВТ_МаксДатаСвязи.ДатаСвязи = СоответствиеЗапросовЗвонкам.ДатаСвязи";
	
	Запрос.УстановитьПараметр("Запрос", Объект.Ссылка);
	Запрос.УстановитьПараметр("Участники", Объект.Участники.Выгрузить().ВыгрузитьКолонку("Клиент"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НомерТелефона = УправлениеТелефониейКлиентСервер.ФорматироватьТелефон(Выборка.НомерТелефона);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлиентыКонтактнаяИнформация.Клиент КАК Клиент
		|ИЗ
		|	РегистрСведений.КлиентыКонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Клиент В(&Участники)
		|	И КлиентыКонтактнаяИнформация.Телефоны ПОДОБНО &Телефония_НомерТелефона";
		
		Запрос.УстановитьПараметр("Телефония_НомерТелефона",  "%" + УправлениеТелефониейКлиентСервер.ОбрезатьНомер(НомерТелефона) + "%");
		Запрос.УстановитьПараметр("Участники", Объект.Участники.Выгрузить().ВыгрузитьКолонку("Клиент"));
		
		Отказ = Запрос.Выполнить().Пустой();		
	КонецЕсли;
	
	Возврат НомерТелефона;	
	
КонецФункции

&НаСервере
Функция ПроверитьУчастниковПоДаннымТелефонии()
	
	Если НЕ ЗначениеЗаполнено(Телефония_ID_Звонка) ИЛИ НЕ Объект.Участники.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлиентыКонтактнаяИнформация.Клиент КАК Клиент
	|ИЗ
	|	РегистрСведений.КлиентыКонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
	|ГДЕ
	|	КлиентыКонтактнаяИнформация.Клиент В(&Участники)
	|	И КлиентыКонтактнаяИнформация.Телефоны ПОДОБНО &Телефония_НомерТелефона";
	
	Запрос.УстановитьПараметр("Телефония_НомерТелефона", "%" + УправлениеТелефониейКлиентСервер.ОбрезатьНомер(Телефония_НомерТелефона) + "%");
	Запрос.УстановитьПараметр("Участники", Объект.Участники.Выгрузить().ВыгрузитьКолонку("Клиент"));
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

//&НаКлиенте
//Процедура ПередЗаписьюНаСервереОкончание(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
//		Возврат;
//	КонецЕсли; 
//	ДополнительныеПараметры.Вставить("СоздаватьВзаимодействиеТипаТелефонныйЗвонок", РезультатВопроса = КодВозвратаДиалога.Да);
//	ДополнительныеПараметры.Вставить("ЗадаватьВопрос", 								Истина);	
//	Записать(ДополнительныеПараметры);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВТаблицуФормы(ВыбранноеЗначение, ИмяТабличнойЧасти, ИмяРеквизитаТабличнойЧасти)

	Объект[ИмяТабличнойЧасти].Очистить();
	Если ВыбранноеЗначение.Количество() <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		Для каждого элМассива Из ВыбранноеЗначение Цикл
			НоваяСтрока 								= Объект[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока[ИмяРеквизитаТабличнойЧасти] 	= элМассива;
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементаСозданияЗаявки(Элемент, Стадия)

	Элемент.Доступность = НЕ Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка");	

КонецПроцедуры // ()

&НаКлиенте
Процедура СоздатьЗаявкуНаСделкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	//Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	//	
	//	Объект.Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка");
	//	
	//	Если Не Записать() Тогда
	//		Возврат;		
	//	КонецЕсли;
		
		ТекДанные = Элементы.Листинг.ТекущиеДанные;
		
		Если ТекДанные <> Неопределено
			И ЗначениеЗаполнено(ТекДанные.ОбъектНедвижимости) Тогда
			
			ПараметрыОткрываемойФормы = Новый Структура("Основание,ОбъектНедвижимости",
			Объект.Ссылка, ТекДанные.ОбъектНедвижимости);		
			
			ОткрытьФорму("Документ.ЗаявкаНаСделку.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма);	
			
			//<828132>, Басаргин (09.06.2018) {
			//ОбновитьДоступностьЭлементаСозданияЗаявки(Элементы.ЛистингСоздатьЗаявкуНаСделку, Объект.Стадия);
			ОбновитьДоступностьЭлементаСозданияЗаявки(Элементы.ЛистингСоздатьЗаявкуНаСделку, СтадияЗапроса);
			//<828132> }
		КонецЕсли;	
		
	//КонецЕсли; 
	//
	//ОбновитьКартинкиСтадий();

КонецПроцедуры 

&НаКлиенте
Процедура СоздатьДокументБронированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		//Если Не Записать() Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда		
			Возврат;		
		КонецЕсли;
		
		ОткрытьФормуДокументаБронирования();
		
	КонецЕсли; 
	
	ОбновитьКартинкиСтадий();

КонецПроцедуры 

&НаКлиенте
Процедура СоздатьДокументСнятияБронированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
				
		ОткрытьФормуДокументаСнятияБронирования();
		
	КонецЕсли; 
	
	ОбновитьКартинкиСтадий();

КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуДокументаБронирования()

	ТекущийДанныеЛистинга = Элементы.Листинг.ТекущиеДанные;
	
	Если ТекущийДанныеЛистинга <> Неопределено Тогда
		
		СтрЗначениеЗаполнение = Новый Структура("Клиент,ДокументЗапрос,ОбъектНедвижимости,Проект,ВидОперации", 
													Объект.Клиент, 
													Объект.Ссылка, 
													ТекущийДанныеЛистинга.ОбъектНедвижимости, 
													Объект.Проект, 
													ПредопределенноеЗначение("Перечисление.ВидыОперацииБронирования.Бронирование"));
		
		ПараметрыОткрываемойФормы = Новый Структура("ЗначенияЗаполнения", СтрЗначениеЗаполнение);		
		
		ОткрытьФорму("Документ.Бронирование.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуДокументаСнятияБронирования()

	ТекущийДанныеЛистинга = Элементы.Листинг.ТекущиеДанные;
	
	Если ТекущийДанныеЛистинга <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущийДанныеЛистинга.ДокументБронирования) Тогда
			ПоказатьПредупреждение(,"Для выбранного ОН в листинге не указан документ бронирования!", 60, "Не удалось создать документ");
			Возврат;
		КонецЕсли;
		
		СтрЗначениеЗаполнение = Новый Структура("Клиент,ДокументЗапрос,ОбъектНедвижимости,Проект,ВидОперации,ОснованиеДляСнятияБронирования", 
													Объект.Клиент, 
													Объект.Ссылка, 
													ТекущийДанныеЛистинга.ОбъектНедвижимости, 
													Объект.Проект, 
													ПредопределенноеЗначение("Перечисление.ВидыОперацииБронирования.СнятиеБронирования"),
													ТекущийДанныеЛистинга.ДокументБронирования);
		
		ПараметрыОткрываемойФормы = Новый Структура("ЗначенияЗаполнения", СтрЗначениеЗаполнение);		
		
		ОткрытьФорму("Документ.Бронирование.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьЗапланированныеДокументыВзаимодействий(ПараметрыЗаписи)
	
	//Если уже на стадии сделки - больше встречу планировать не нужно
	//Если Объект.Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") Тогда	
	//	Возврат;		
	//КонецЕсли;
	
	//Для автоматического заполнения документов взаимодействий
	ПараметрыОткрываемойФормы = Новый Структура("Основание", Объект.Ссылка);	
	
	//Если МенеджерФилиала Тогда
	Если НЕ ЭтоМенеджерГПТ Тогда
	
		ПараметрыОткрываемойФормы.Вставить("ЗапланированнаяВстреча", 		ПараметрыЗаписи.ДокЗапланированнаяВстреча);
		ПараметрыОткрываемойФормы.Вставить("ЗапланированныйЗвонок",			ПараметрыЗаписи.ДокЗапланированныйЗвонок);
		
		//<810997>, Басаргин (07.05.2018) {		
		ПараметрыОткрываемойФормы.Вставить("ТекущаяВстреча", Неопределено);
		ПараметрыОткрываемойФормы.Вставить("ТекущийЗвонок", Неопределено);		
		//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
		//	И НЕ ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированнаяВстреча)
		//	И НЕ ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированныйЗвонок) Тогда
		//	Возврат;	
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗаписи.ДокТелЗвонок)
			ИЛИ ЗначениеЗаполнено(ПараметрыЗаписи.ДокВстреча) Тогда
			Возврат;	
		КонецЕсли;				
	
		ПараметрыОткрываемойФормы.Вставить("ТекущееСобытие", ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированнаяВстреча) ИЛИ ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированныйЗвонок));		
		//<810997> }
		
		//<828132>, Басаргин (09.06.2018) {
		//ПараметрыОткрываемойФормы.Вставить("СтатусЗапроса", Объект.Статус);
		ПараметрыОткрываемойФормы.Вставить("СтатусЗапроса", СтатусЗапроса);
		ПараметрыОткрываемойФормы.Вставить("РасшифровкаСтатусаЗапроса", РасшифровкаСтатусаЗапроса);		
		ПараметрыОткрываемойФормы.Вставить("СтадияЗапроса", СтадияЗапроса);
		//<828132> }			

		МассивКлиентов = Новый СписокЗначений;
		Для каждого ЭлементКоллекции Из Объект.Участники Цикл
			МассивКлиентов.Добавить(ЭлементКоллекции.Клиент);		
		КонецЦикла;
		ПараметрыОткрываемойФормы.Вставить("МассивКлиентов",				МассивКлиентов);
		
		//ОткрытьФорму("Документ.Запрос.Форма.ФормаСозданияВзаимодействия", 	ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
		ОткрытьФорму("Документ.Запрос.Форма.ФормаСозданияВзаимодействия", 	ПараметрыОткрываемойФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		
		//<828132>, Басаргин (15.06.2018) {
		Если СтадияЗапроса = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Переговоры") Тогда			
			ВзаимодействияДляОткрытия = Новый Массив;
	
			ДанныеУчастника = Новый Массив;
			ДанныеУчастника.Добавить(Новый Структура("Контакт, КакСвязаться, Представление", Объект.Клиент, "", Строка(Объект.Клиент)));
			
			ПараметрыНовогоВзаимодействия = Новый Структура("Предмет, Проект, ДанныеУчастника", Объект.Ссылка, Объект.Проект, ДанныеУчастника);
			ПараметрыОткрытияВзаимодействий = Новый Структура("ФормаВзаимодействия, ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия", "РегистрСведений.Взаимодействия.Форма.ПланироварниеПереговоров", ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия);
			
			ОткрытьФорму(ПараметрыОткрытияВзаимодействий.ФормаВзаимодействия, ПараметрыОткрытияВзаимодействий.ПараметрыНовогоВзаимодействия, ЭтаФорма, Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
			//ОткрытьФорму(ПараметрыОткрытияВзаимодействий.ФормаВзаимодействия, ПараметрыОткрытияВзаимодействий.ПараметрыНовогоВзаимодействия, , Истина, , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);			
		ИначеЕсли (НЕ ЗначениеЗаполнено(СтадияЗапроса) ИЛИ СтадияЗапроса = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Звонок"))
						И ПараметрыЗаписи.Свойство("КлючСозданногоЗвонкаИзТелефонии") И ЗначениеЗаполнено(ПараметрыЗаписи.КлючСозданногоЗвонкаИзТелефонии) Тогда
			ПараметрыОткрываемойФормы.Вставить("Ключ", ПараметрыЗаписи.КлючСозданногоЗвонкаИзТелефонии);
			ПараметрыОткрываемойФормы.Вставить("СозданиеЗвонкаИзТелефонии", Истина);
			ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			//ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыОткрываемойФормы, , Истина, , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		Возврат;
		//<828132> }			
				
		//Если документ изменялся и запрос находится в статусе "В работе" необходимо проверить наличие запланированной встречи или звонка
		//<828132>, Басаргин (09.06.2018) {
		//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
		//И Объект.РасшифровкаСтатуса = ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда
		Если СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
			И РасшифровкаСтатусаЗапроса = ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда			
		//<828132> }		
			Если ПараметрыЗаписи.ЕстьЗапланированнаяВстреча Тогда
				ПараметрыОткрываемойФормы.Вставить("Ключ", ПараметрыЗаписи.ДокЗапланированнаяВстреча);
			КонецЕсли;
			ОткрытьФорму("Документ.Встреча.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		//<828132>, Басаргин (09.06.2018) {
		//ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")		
		//И Объект.РасшифровкаСтатуса <> ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда	
		ИначеЕсли СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")		
			И РасшифровкаСтатусаЗапроса <> ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.НазначенаВстреча") Тогда
		//<828132> }
			Если ПараметрыЗаписи.ЕстьЗапланированныйЗвонок Тогда
				ПараметрыОткрываемойФормы.Вставить("Ключ", ПараметрыЗаписи.ДокЗапланированныйЗвонок);
			КонецЕсли;
			ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры 

//Вынести в отдельную процедуру
//&НаКлиенте
//Процедура СоздатьЗапланированныеДокументыВзаимодействийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	
//	//Для автоматического заполнения документов взаимодействий
//	ПараметрыОткрываемойФормы = Новый Структура("Основание", Объект.Ссылка);	
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
//		ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);			
//	Иначе
//		ОткрытьФорму("Документ.Встреча.ФормаОбъекта", ПараметрыОткрываемойФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
//	КонецЕсли; 
//	
//КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыВзаимодействий(ПараметрыЗаписи)

	Если ПараметрыЗаписи.ЕстьДокументТелЗвонок Тогда
		Возврат;
	КонецЕсли;
	
	//Если документ изменялся и нет основания (телефонного звонка), то создаём принудительно	
	Создать_Скорректировать_ВзаимодействиеТелефонныйЗвонок(ПараметрыЗаписи);
	
КонецПроцедуры 

&НаСервере
Процедура Создать_Скорректировать_ВзаимодействиеТелефонныйЗвонок(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЕстьЗапланированныйЗвонок Тогда
		ДокументСобытия 				= ПараметрыЗаписи.ДокЗапланированныйЗвонок.ПолучитьОбъект();
		ДокументСобытия.Дата 			= ТекущаяДата();
		ДокументСобытия.ДатаОкончания	= ТекущаяДата();
		ДокументСобытия.Записать();
		ПроставитьПризнакРассмотреноДляВзаимодействия(ПараметрыЗаписи.ДокЗапланированныйЗвонок);
		//<828132>, Басаргин (20.06.2018) {
		ПараметрыЗаписи.Вставить("КлючСозданногоЗвонкаИзТелефонии", ДокументСобытия.Ссылка); //всегда ли открывать форму звонка для устатновки статуса/расшифровки или только для новых?
		//<828132> }		
	Иначе
		ДокументСобытия 				= Документы.ТелефонныйЗвонок.СоздатьДокумент();
		ДокументСобытия.Заполнить(Объект.Ссылка);
		ДокументСобытия.Дата 			= ТекущаяДата();
		ДокументСобытия.ДатаОкончания	= ТекущаяДата();
		ДокументСобытия.Тема			= "Телефонный звонок";
		ДокументСобытия.Записать();				
		ПроставитьПризнакРассмотреноДляВзаимодействия(ДокументСобытия.Ссылка);							
		//<828132>, Басаргин (20.06.2018) {
		ПараметрыЗаписи.Вставить("КлючСозданногоЗвонкаИзТелефонии", ДокументСобытия.Ссылка); //всегда ли открывать форму звонка для устатновки статуса/расшифровки или только для новых?
		//<828132> }
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СоответствиеЗапросовЗвонкам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ID_Звонка.Установить(Телефония_ID_Звонка);
	НаборЗаписей.Отбор.Запрос.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].Взаимодействие = ДокументСобытия.Ссылка;
		НаборЗаписей.Записать();
	КонецЕсли;
	
	//<773106>, Басаргин (06.02.2018) {
	Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
		УправлениеТелефониейСервер.УстановитьКонтактЗвонка(Телефония_ID_Звонка, ДокументСобытия.АбонентКонтакт);
		ПараметрыЗаписи.Вставить("УстановленныйКонтактЗвонка", ДокументСобытия.АбонентКонтакт);
	КонецЕсли;
	//<773106> }
	
	//<Взаимодействия>, Басаргин (03.11.2017) {
	РегистрыСведений.Взаимодействия.ЗаписатьВзаимодействие(ДокументСобытия);	
	//<Взаимодействия> }
	
КонецПроцедуры

&НаСервере
Процедура Создать_Скорректировать_ВзаимодействиеВстреча(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЕстьЗапланированнаяВстреча Тогда
		ДокументЗапланированногоСобытия 		= ПараметрыЗаписи.ДокЗапланированнаяВстреча.ПолучитьОбъект();
		ДокументЗапланированногоСобытия.Дата 	= ТекущаяДата();
		ДокументЗапланированногоСобытия.Записать();
		ПроставитьПризнакРассмотреноДляВзаимодействия(ПараметрыЗаписи.ДокЗапланированнаяВстреча)
	Иначе
		ДокументЗапланированногоСобытия 		= Документы.Встреча.СоздатьДокумент();
		ДокументЗапланированногоСобытия.Заполнить(Объект.Ссылка);
		ДокументЗапланированногоСобытия.Дата 	= ТекущаяДата();
		ДокументЗапланированногоСобытия.Тема	= "Встреча";
		ДокументЗапланированногоСобытия.Записать();				
		ПроставитьПризнакРассмотреноДляВзаимодействия(ДокументЗапланированногоСобытия.Ссылка);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроставитьПризнакРассмотреноДляВзаимодействия(ДокВзаимодействие)
	
	//Предмет взаимодействия
	Запись 					= РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
	Запись.Взаимодействие 	= ДокВзаимодействие;
	Запись.Предмет 			= Объект.Ссылка;
	Запись.Рассмотрено      = Истина;
	Запись.Записать();		

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКорпусаПоОННаСервере()
	
	Для каждого СтрокаТЧ Из Объект.СписокОбъектовСтроительства Цикл
		СтрокаТЧ.Корпус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ОбъектСтроительства, "Корпус");
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистингСрезомПоследних()

	ВерсияДокумента = Документы.Запрос.ПолучитьНомерПоследнейВерсииЛистинга(Объект.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛистингСрезПоследних.Период КАК Период,
	|	ЛистингСрезПоследних.Запрос КАК Запрос,
	|	ЛистингСрезПоследних.ВерсияДокумента КАК ВерсияДокумента,
	|	ЛистингСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	ЛистингСрезПоследних.ОбъектСтроительства КАК ОбъектСтроительства,
	|	ЛистингСрезПоследних.Вид КАК Вид,
	|	ЛистингСрезПоследних.Правообладатель КАК Правообладатель,
	|	ЛистингСрезПоследних.Проект КАК Проект,
	|	ЛистингСрезПоследних.Фаза КАК Фаза,
	|	ЛистингСрезПоследних.Корпус КАК Корпус,
	|	ЛистингСрезПоследних.ВидМатериала КАК ВидМатериала,
	|	ЛистингСрезПоследних.Этаж КАК Этаж,
	|	ЛистингСрезПоследних.Подъезд_Секция КАК Подъезд_Секция,
	|	ЛистингСрезПоследних.ГруппаПравообладателя КАК ГруппаПравообладателя,
	|	ЛистингСрезПоследних.НомерНаПлощадке КАК НомерНаПлощадке,
	|	ЛистингСрезПоследних.КоличествоКомнат КАК КоличествоКомнат,
	|	ЛистингСрезПоследних.Площадь КАК Площадь,
	|	ЛистингСрезПоследних.ТипОтделки КАК ТипОтделки,
	|	ЛистингСрезПоследних.Валюта КАК Валюта,
	|	ЛистингСрезПоследних.СтроительнаяОсь КАК СтроительнаяОсь,
	|	ЛистингСрезПоследних.СтартПродаж КАК СтартПродаж
	|ПОМЕСТИТЬ вт_Листинг
	|ИЗ
	|	РегистрСведений.Листинг.СрезПоследних(
	|			,
	|			Запрос = &Запрос
	|				И ВерсияДокумента = &ВерсияДокумента) КАК ЛистингСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК ДокументБронирования,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДокументЗапрос КАК ДокументЗапрос,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.Период КАК ДатаНачалаСрокаБронирования,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДатаКонцаСрокаБронирования КАК ДатаКонцаСрокаБронирования
	|ПОМЕСТИТЬ вт_СрокиБронирования
	|ИЗ
	|	РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_Листинг.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_Листинг КАК вт_Листинг)) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ вт_СтатусыОН
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_Листинг.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_Листинг КАК вт_Листинг)) КАК СтатусыОбъектовНедвижимостиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	Квартирограмма.Стоимость КАК Стоимость,
	|	Квартирограмма.МаксимальнаяСкидка КАК МаксимальнаяСкидка,
	|	Квартирограмма.Стоимость - Квартирограмма.МаксимальнаяСкидка КАК СтоимостьСоСкидкой,
	|	Квартирограмма.СтроительныйНомер КАК СтроительныйНомер,
	|	Квартирограмма.ПлощадьПроектная КАК ПлощадьПроектная,
	|	Квартирограмма.Блок КАК Блок,
	|	Квартирограмма.СтатусПула КАК СтатусПула
	|ПОМЕСТИТЬ вт_СтоимостьОН
	|ИЗ
	|	РегистрСведений.Квартирограмма КАК Квартирограмма
	|ГДЕ
	|	Квартирограмма.ОбъектНедвижимости В
	|			(ВЫБРАТЬ
	|				вт_Листинг.ОбъектНедвижимости КАК ОбъектНедвижимости
	|			ИЗ
	|				вт_Листинг КАК вт_Листинг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьБронированияОстатки.ДокументБронирования.ДокументЗапрос КАК ДокументЗапрос,
	|	ОчередьБронированияОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	МИНИМУМ(ОчередьБронированияОстатки.ДокументБронирования) КАК ДокументБронирования
	|ПОМЕСТИТЬ вт_ОчередьБронирования
	|ИЗ
	|	РегистрНакопления.ОчередьБронирования.Остатки(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_Листинг.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_Листинг КАК вт_Листинг)) КАК ОчередьБронированияОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьБронированияОстатки.ДокументБронирования.ДокументЗапрос,
	|	ОчередьБронированияОстатки.ОбъектНедвижимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Листинг.Период КАК Период,
	|	вт_Листинг.Запрос КАК Запрос,
	|	вт_Листинг.ВерсияДокумента КАК ВерсияДокумента,
	|	вт_Листинг.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	вт_Листинг.ОбъектСтроительства КАК ОбъектСтроительства,
	|	вт_Листинг.Вид КАК Вид,
	|	вт_Листинг.Правообладатель КАК Правообладатель,
	|	вт_Листинг.Проект КАК Проект,
	|	вт_Листинг.Фаза КАК Фаза,
	|	вт_Листинг.Корпус КАК Корпус,
	|	вт_Листинг.ВидМатериала КАК ВидМатериала,
	|	вт_Листинг.Этаж КАК Этаж,
	|	вт_Листинг.Подъезд_Секция КАК Подъезд_Секция,
	|	вт_Листинг.ГруппаПравообладателя КАК ГруппаПравообладателя,
	|	вт_Листинг.НомерНаПлощадке КАК НомерНаПлощадке,
	|	вт_Листинг.КоличествоКомнат КАК КоличествоКомнат,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(вт_СтоимостьОН.СтроительныйНомер, """") = """"
	|			ТОГДА 0
	|		ИНАЧЕ вт_Листинг.Площадь
	|	КОНЕЦ КАК Площадь,
	|	вт_Листинг.ТипОтделки КАК ТипОтделки,
	|	вт_Листинг.Валюта КАК Валюта,
	|	вт_Листинг.СтроительнаяОсь КАК СтроительнаяОсь,
	|	вт_Листинг.СтартПродаж КАК СтартПродаж,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(вт_СрокиБронированияЭтимЖеЗапросом.ДокументБронирования, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗабронированЭтимЖеЗапросом,
	|	ЕСТЬNULL(вт_СрокиБронированияЭтимЖеЗапросом.ДокументБронирования, вт_СрокиБронирования.ДокументБронирования) КАК ДокументБронирования,
	|	ВЫБОР
	|		КОГДА &Период МЕЖДУ вт_СрокиБронирования.ДатаНачалаСрокаБронирования И вт_СрокиБронирования.ДатаКонцаСрокаБронирования
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Забронирован,
	|	ЕСТЬNULL(вт_СтатусыОН.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Свободен)) КАК Статус,
	|	ЕСТЬNULL(вт_СтоимостьОН.Стоимость, 0) КАК Стоимость,
	|	ЕСТЬNULL(вт_СтоимостьОН.МаксимальнаяСкидка, 0) КАК МаксимальнаяСкидка,
	|	ЕСТЬNULL(вт_СтоимостьОН.СтоимостьСоСкидкой, 0) КАК СтоимостьСоСкидкой,
	|	ЕСТЬNULL(вт_СтоимостьОН.СтроительныйНомер, """") КАК СтроительныйНомер,
	|	ЕСТЬNULL(вт_СтоимостьОН.ПлощадьПроектная, 0) КАК ПлощадьПроектная,
	|	ЕСТЬNULL(вт_СтоимостьОН.Блок, 0) КАК Блок,
	|	ЕСТЬNULL(вт_СтоимостьОН.СтатусПула, 0) КАК СтатусПула
	|ИЗ
	|	вт_Листинг КАК вт_Листинг
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОчередьБронирования КАК вт_СрокиБронированияЭтимЖеЗапросом
	|		ПО вт_Листинг.ОбъектНедвижимости = вт_СрокиБронированияЭтимЖеЗапросом.ОбъектНедвижимости
	|			И вт_Листинг.Запрос = вт_СрокиБронированияЭтимЖеЗапросом.ДокументЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СрокиБронирования КАК вт_СрокиБронирования
	|		ПО вт_Листинг.ОбъектНедвижимости = вт_СрокиБронирования.ОбъектНедвижимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СтатусыОН КАК вт_СтатусыОН
	|		ПО вт_Листинг.ОбъектНедвижимости = вт_СтатусыОН.ОбъектНедвижимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СтоимостьОН КАК вт_СтоимостьОН
	|		ПО вт_Листинг.ОбъектНедвижимости = вт_СтоимостьОН.ОбъектНедвижимости";
		
	Запрос.УстановитьПараметр("Запрос", 		Объект.Ссылка);
	Запрос.УстановитьПараметр("ВерсияДокумента",ВерсияДокумента);
	Запрос.УстановитьПараметр("Период", 		ТекущаяДата());
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда		
		Листинг.Загрузить(Результат.Выгрузить());	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВЛистинг(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		ПоказатьПредупреждение(,"Для осуществления подбора необходимо указать проект!", 60, "Не указан проект");
		ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения 			= Новый ОписаниеОповещения("ПодобратьВЛистингЗаверешние", 				ЭтотОбъект); 
	ОписаниеОповещенияВопроса 	= Новый ОписаниеОповещения("ПодобратьВЛистингВопросЗаписьЗавершение", 	ЭтотОбъект, ОписаниеОповещения);
	
	Если Модифицированность Тогда
		
		//ПоказатьВопрос(ОписаниеОповещенияВопроса, 
		//				"Перед выполнением команды подбора необходимо записать документ. Продолжить?",
		//				РежимДиалогаВопрос.ДаНет, 
		//				60);
		
	Иначе
		
		//ВыполнитьОбработкуОповещения(ОписаниеОповещения);	
	
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВЛистингВопросЗаписьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		//Если НЕ Записать() Тогда
		Если Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда	
			Возврат;		
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры);
		
	КонецЕсли;
	
	ОбновитьКартинкиСтадий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВЛистингЗаверешние(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	ПараметрыФормыОтчета = Новый Структура("Отбор");
	ПараметрыФормыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	//Накладываем простые фильтры, для которых можно использовать стандартный отбор	
	СтруктураОтбора = Новый Структура();	
	
	Если ЗначениеЗаполнено(Объект.ГруппаПравообладателей) Тогда	
		СтруктураОтбора.Вставить("ГруппаПравообладателя", Объект.ГруппаПравообладателей);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда	
		СтруктураОтбора.Вставить("Проект", Объект.Проект);		
	КонецЕсли;
	
	МассивКомнат = Новый Массив;
	Для Счетчик = 1 По 4 Цикл	
		Если Объект["КоличествоКомнат_"+Строка(Счетчик)] Тогда
			МассивКомнат.Добавить(КоличетсвоКомнатПовтИсп(Счетчик));	
		КонецЕсли;
	КонецЦикла;
	Если МассивКомнат.Количество() > 0 Тогда
		СтруктураОтбора.Вставить("КоличествоКомнат", МассивКомнат);	
	КонецЕсли;
	
	Если Объект.Фазы.Количество() > 0 Тогда	
		МассивФаз = Новый Массив;
		Для каждого СтрокаДанныхФормы Из Объект.Фазы Цикл
			МассивФаз.Добавить(СтрокаДанныхФормы.Фаза);
		КонецЦикла;	
		СтруктураОтбора.Вставить("Фаза", МассивФаз);
	КонецЕсли;	
	
	Если Объект.Услуги.Количество() > 0 Тогда	
		МассивУслуг = Новый Массив;
		Для каждого СтрокаДанныхФормы Из Объект.Услуги Цикл
			МассивУслуг.Добавить(СтрокаДанныхФормы.Услуга);
		КонецЦикла;	
		СтруктураОтбора.Вставить("Услуга", МассивУслуг);
	КонецЕсли;		
	
	Если Объект.СписокОбъектовСтроительства.Количество() > 0 Тогда	
		МассивКорпусов = Новый Массив;
		Для каждого СтрокаДанныхФормы Из Объект.СписокОбъектовСтроительства Цикл
			МассивКорпусов.Добавить(СтрокаДанныхФормы.Корпус);
		КонецЦикла;	
		СтруктураОтбора.Вставить("Корпус", МассивКорпусов);
	КонецЕсли;
		
	//ПараметрыФормыОтчета.Отбор = СтруктураОтбора;
	
	//Предопределённые фильтры, для которых используются пользовательские настройки	
	
	ПараметрыФормыОтчета.Вставить("СвернутьПанельНастроек",		Истина);
		
	Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
		ПараметрыФормыОтчета.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
	КонецЕсли;
		
	ДополнитьПараметрыОтчетаНаСервере(ПараметрыФормыОтчета, СтруктураОтбора);
	
	ПараметрыФормыОтчета.Отбор = СтруктураОтбора;
	
	ФормаКвартирограммы = ОткрытьФорму("Отчет.Квартирограмма.Форма.ФормаПодбора", ПараметрыФормыОтчета, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытии", ЭтаФорма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПользовательскуюНастройкуПоПолю(ИмяПоля, ВидСравнения = Неопределено, ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета)
	
	Если ВидСравнения <> Неопределено Тогда
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоля);	
		Для каждого ЭлементОтбора Из ПредопределённыеОтборыОтчета.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора 
					И ЭлементОтбора.ВидСравнения = ВидСравнения Тогда			
				Возврат ПользовательскиеОтборыОтчета.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);			
			КонецЕсли;			
		КонецЦикла; 
		
	Иначе
		
		ПолеОтбора = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Для каждого ЭлементОтбора Из ПредопределённыеОтборыОтчета.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбора Тогда			
				Возврат ПользовательскиеОтборыОтчета.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);			
			КонецЕсли;			
		КонецЦикла; 		
		
	КонецЕсли;	

КонецФункции // ПолучитьСхемуКомпоновкиОтчетаКвартирограмма()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПользовательскуюНастройкуПоПредставлению(ИмяПоля, ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета)
	
	Для каждого ЭлементОтбора Из ПредопределённыеОтборыОтчета.Элементы Цикл
		Если ЭлементОтбора.Представление = ИмяПоля Тогда			
			Возврат ПользовательскиеОтборыОтчета.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);			
		КонецЕсли;			
	КонецЦикла; 

КонецФункции // ПолучитьСхемуКомпоновкиОтчетаКвартирограмма()

&НаСервереБезКонтекста
Процедура УстановитьПользовательскуюНастройкуПредел(ИмяПоля, УстанавливаемоеЗначение, ВидСравненияСКД, ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета)

	ПользовательскаяНастройка 					= ПолучитьПользовательскуюНастройкуПоПолю(ИмяПоля, 
																							ВидСравненияСКД, 
	 																						ПредопределённыеОтборыОтчета, 
																							ПользовательскиеОтборыОтчета);	
	ПользовательскаяНастройка.Использование 	= Истина;
	ПользовательскаяНастройка.ПравоеЗначение	= УстанавливаемоеЗначение;
	
КонецПроцедуры // УстановитьПользовательскуюНастройкуПредел()

&НаСервереБезКонтекста
Процедура УстановитьПользовательскуюНастройкуПоПредставлению(ИмяПоля, ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета)

	ПользовательскаяНастройка 					= ПолучитьПользовательскуюНастройкуПоПредставлению(ИмяПоля, 
																									ПредопределённыеОтборыОтчета, 
																									ПользовательскиеОтборыОтчета);	
	ПользовательскаяНастройка.Использование 	= Истина;
	ПользовательскаяНастройка.ПравоеЗначение	= Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомпоновщикНастроекНаСервере(ИмеющиесяНаличныеСредства, 
												Отделка,
												БезОтделки,
												ПлощадьОт,
												ПлощадьДо,
												ЭтажОт,
												ЭтажДо,
												КоличествоСекций_Одна,
												КоличествоСекций_Несколько,
												ТипДомаПанель,
												ТипДомаМонолит,
												СрокСдачи,
												НеПервыйЭтаж,
												НеПоследнийЭтаж);

	СхемаКомпоновкиДанных = Отчеты.Квартирограмма.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ПредопределённыеОтборыОтчета = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор;
	ПользовательскиеОтборыОтчета = КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;
	
	//Настраиваем поля отбора
	//Стоимость
	Если ИмеющиесяНаличныеСредства > 0 Тогда
		УстановитьПользовательскуюНастройкуПредел("СтоимостьСУчетомСкидки",
													ИмеющиесяНаличныеСредства, 
													ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
													ПредопределённыеОтборыОтчета,
													ПользовательскиеОтборыОтчета);
	КонецЕсли;	
	 
	//ПлощадьОт
	Если ПлощадьОт > 0 Тогда
		УстановитьПользовательскуюНастройкуПредел("Площадь",
													ПлощадьОт, 
													ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
													ПредопределённыеОтборыОтчета,
													ПользовательскиеОтборыОтчета);		 
	 КонецЕсли;
	 
	//ПлощадьДо
	Если ПлощадьДо > 0 Тогда
		УстановитьПользовательскуюНастройкуПредел("Площадь",
													ПлощадьДо, 
													ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
													ПредопределённыеОтборыОтчета,
													ПользовательскиеОтборыОтчета);		 
	 КонецЕсли; 
	 
	//ЭтажОт
	Если ЭтажОт > 0 Тогда
		УстановитьПользовательскуюНастройкуПредел("Этаж",
													ЭтажОт, 
													ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
													ПредопределённыеОтборыОтчета,
													ПользовательскиеОтборыОтчета);		 
	 КонецЕсли;
	 
	//ЭтажДо
	Если ЭтажДо > 0 Тогда
		УстановитьПользовательскуюНастройкуПредел("Этаж",
													ЭтажДо, 
													ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
													ПредопределённыеОтборыОтчета,
													ПользовательскиеОтборыОтчета);		 
	КонецЕсли;	 
	
	//Срок сдачи
	//Если ЗначениеЗаполнено(СрокСдачи) Тогда
	//	УстановитьПользовательскуюНастройкуПредел("СрокСдачи",
	//												ДобавитьМесяц(ТекущаяДата(), СрокСдачи.КоличествоМесяцев), 
	//												ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
	//												ПредопределённыеОтборыОтчета,
	//												ПользовательскиеОтборыОтчета);		
	//КонецЕсли;
	
	//С отделкой
	Если Отделка Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("С отделкой", 		ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);		 
	КонецЕсли;
	 
	//Без отделки
	Если БезОтделки Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("Без отделки", 		ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);
	КонецЕсли;
	 
	//Одна секция
	Если КоличествоСекций_Одна Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("Одна секция", 		ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);
	КонецЕсли;
	
	//Несколько секций
	Если КоличествоСекций_Несколько Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("Несколько секций", 	ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);
	КонецЕсли;
	
	//Монолит
	Если ТипДомаМонолит Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("Монолит", 			ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);
	КонецЕсли;
	
	//Панель
	Если ТипДомаПанель Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("Панель", 			ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);	
	КонецЕсли; 
	
	//Не первый этаж
	Если НеПервыйЭтаж Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("НЕ первый этаж", 	ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);	
	КонецЕсли; 
	
	//Не последний этаж
	Если НеПоследнийЭтаж Тогда
		УстановитьПользовательскуюНастройкуПоПредставлению("НЕ последний этаж", ПредопределённыеОтборыОтчета, ПользовательскиеОтборыОтчета);	
	КонецЕсли; 	
		
	Возврат КомпоновщикНастроекКомпоновкиДанных;	

КонецФункции 

&НаКлиенте
Функция КоличетсвоКомнатПовтИсп(КоличетсвоКомнат)
	Если КоличетсвоКомнат = 1 Тогда	Результат = ПредопределенноеЗначение("Перечисление.Комнатность.ОднаКомнатная");	
	ИначеЕсли КоличетсвоКомнат = 2 Тогда Результат = ПредопределенноеЗначение("Перечисление.Комнатность.ДвухКомнатная");
	ИначеЕсли КоличетсвоКомнат = 3 Тогда Результат = ПредопределенноеЗначение("Перечисление.Комнатность.ТрехКомнатная");	
	Иначе Результат = ПредопределенноеЗначение("Перечисление.Комнатность.ЧетырёхКомнатная")
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОписаниеОповещенияОЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено 
		И РезультатЗакрытия.Количество() > 0 Тогда
	
		ЗаполнитьЛистингНаСервере(РезультатЗакрытия.МассивОН);	
		//ОбновитьОтборыНаФорме(РезультатЗакрытия.НаложенныеОтборы);
		ОткрытьДополнительныеФормыЗапросов(РезультатЗакрытия.МассивОН);
		Модифицированность = Истина;
	
	КонецЕсли;	

КонецПроцедуры // ()

&НаКлиенте
Процедура ОбновитьОтборыНаФорме(Отборы)
	
	//Для простых отборов
	СоответствиеПолейПоПредставлению = ПолучитьСответствиеПолейПоПредставлениюКомпоновкиДанных();
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;		
		КонецЕсли;	
		Если Не ПустаяСтрока(ЭлементОтбора.Представление) Тогда
			ПроставитьОтборыПоПредставлению(ЭлементОтбора, СоответствиеПолейПоПредставлению);
			Продолжить;
		КонецЕсли;
		ПроставитьОтборыПоУсловию(ЭлементОтбора);
	КонецЦикла;	

КонецПроцедуры // ОбновитьОтборыНаФорме()

&НаКлиенте
Функция ПолучитьСответствиеПолейПоПредставлениюКомпоновкиДанных()

	Результат = Новый Соответствие;
	
	Результат.Вставить("Одна секция",		"КоличествоСекций_Одна");
	Результат.Вставить("Несколько секций",	"КоличествоСекций_Несколько");
	Результат.Вставить("С отделкой",		"Отделка");
	Результат.Вставить("Без отделки",		"БезОтделки");
	Результат.Вставить("Панель",			"ТипДомаПанель");
	Результат.Вставить("Монолит",			"ТипДомаМонолит");
	
	Возврат Результат;

КонецФункции 

&НаКлиенте
Процедура ПроставитьОтборыПоПредставлению(ЭлементОтбора, СоответствиеПолейПоПредставлению)
		
	Объект[СоответствиеПолейПоПредставлению[ЭлементОтбора.Представление]] = Истина;	

КонецПроцедуры 

&НаКлиенте
Процедура ПроставитьОтборыПоУсловию(ЭлементОтбора)

	//Проекты
	//ПолеОтбора = Новый ПолеКомпоновкиДанных("Проект");
	//Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
	//	СписокПроектовИзПодбора.Очистить();
	//	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
	//		Для Каждого ЭлементПроект Из ЭлементОтбора.ПравоеЗначение Цикл		
	//			СписокПроектовИзПодбора.Добавить(ЭлементПроект.Значение);
	//		КонецЦикла;
	//	Иначе	
	//		СписокПроектовИзПодбора.Добавить(ЭлементОтбора.ПравоеЗначение);
	//	КонецЕсли;	
	//	Возврат;
	//КонецЕсли;	
	
	//Объём собственных средств
	ПолеОтбора = Новый ПолеКомпоновкиДанных("СтоимостьСУчетомСкидки");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Объект.ИмеющиесяНаличныеСредства = ЭлементОтбора.ПравоеЗначение;
		Возврат;
	КонецЕсли;	
	
	//Этаж
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Этаж");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение 
			И ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Объект.ЭтажДо = ЭлементОтбора.ПравоеЗначение;
		Иначе
			Объект.ЭтажОт = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//Площадь
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Площадь");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Объект.ПлощадьДо = ЭлементОтбора.ПравоеЗначение;
		Иначе
			Объект.ПлощадьОт = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	//Срок сдачи
	ПолеОтбора = Новый ПолеКомпоновкиДанных("СрокСдачи");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
		Объект.СрокСдачи = ЭлементОтбора.ПравоеЗначение;
		Возврат;
	КонецЕсли;	
	
	//Фаза
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Фаза");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
		Объект.Фазы.Очистить();
		//Если проектов несколько фазы не заполняем, так как по разным проектам может
		Если СписокПроектовИзПодбора.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементФаза Из ЭлементОтбора.ПравоеЗначение Цикл		
				НоваяСтрокаФазы 		= Объект.Фазы.Добавить();
				НоваяСтрокаФазы.Фаза 	= ЭлементФаза.Значение;	
			КонецЦикла;
		Иначе	
			НоваяСтрокаФазы 		= Объект.Фазы.Добавить();
			НоваяСтрокаФазы.Фаза 	= ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;	
		Возврат;
	КонецЕсли;	
	
	//Группа правообладателей
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ГруппаПравообладателя");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
		Объект.ГруппаПравообладателей = ЭлементОтбора.ПравоеЗначение;
		Возврат;
	КонецЕсли;		
	
	//Корпус
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Корпус");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
		Объект.СписокОбъектовСтроительства.Очистить();		
		ЗаполнитьКорпусаНаСервере(ЭлементОтбора.ПравоеЗначение);						
		Возврат;
	КонецЕсли;
	
	//КоличествоКомнат
	ПолеОтбора = Новый ПолеКомпоновкиДанных("КоличествоКомнат");
	Если ПолеОтбора = ЭлементОтбора.ЛевоеЗначение Тогда
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Для каждого ЭлементСЗ Из ЭлементОтбора.ПравоеЗначение Цикл
				УстановитьФлагОтбораКомнатность(ЭлементСЗ.Значение);	
			КонецЦикла;				
		Иначе
			УстановитьФлагОтбораКомнатность(ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ПроставитьОтборыПоУсловию()

&НаКлиенте
Процедура УстановитьФлагОтбораКомнатность(ЗначениеПеречисления)

	Если ЗначениеПеречисления = ПредопределенноеЗначение("Перечисление.Комнатность.ОднаКомнатная") Тогда
		Объект.КоличествоКомнат_1 = Истина;
	ИначеЕсли ЗначениеПеречисления = ПредопределенноеЗначение("Перечисление.Комнатность.ДвухКомнатная") Тогда
		Объект.КоличествоКомнат_2 = Истина;
	ИначеЕсли ЗначениеПеречисления = ПредопределенноеЗначение("Перечисление.Комнатность.ТрехКомнатная") Тогда
		Объект.КоличествоКомнат_3 = Истина;
	Иначе	
		Объект.КоличествоКомнат_4 = Истина;	
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьКорпусаНаСервере(СписокКорпусов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыСтроительства.Ссылка КАК ОбъектСтроительства,
	|	ОбъектыСтроительства.Корпус КАК Корпус
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Проект = &Проект
	|	И ОбъектыСтроительства.Корпус В(&СписокКорпусов)
	|	И ОбъектыСтроительства.НазначениеОбъектаСтроительства = ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЖилаяНедвижимость)";
	Запрос.УстановитьПараметр("Проект", 		Объект.Проект);
	Запрос.УстановитьПараметр("СписокКорпусов", СписокКорпусов);
	Объект.СписокОбъектовСтроительства.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистингНаСервере(МассивОбъектовНедвижимости)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	Квартирограмма.ОбъектНедвижимости.Тип КАК Вид,
	|	Квартирограмма.ОбъектНедвижимости.Правообладатель КАК Правообладатель,
	|	Квартирограмма.ОбъектСтроительства КАК ОбъектСтроительства,
	|	Квартирограмма.ОбъектСтроительства.Проект КАК Проект,
	|	Квартирограмма.ОбъектСтроительства.Фаза КАК Фаза,
	|	Квартирограмма.ОбъектСтроительства.ВидМатериала КАК ВидМатериала,
	|	Квартирограмма.ОбъектСтроительства.СрокСдачи КАК СрокСдачи,
	|	Квартирограмма.Корпус КАК Корпус,
	|	Квартирограмма.Этаж КАК Этаж,
	|	Квартирограмма.Подъезд КАК Подъезд_Секция,
	|	Квартирограмма.ГруппаПравообладателя КАК ГруппаПравообладателя,
	|	Квартирограмма.НомерНаПлощадке КАК НомерНаПлощадке,
	|	Квартирограмма.ОбъектСтроительства.Отделка КАК Отделка,
	|	Квартирограмма.ТипОтделки КАК ТипОтделки,
	|	ВЫБОР
	|		КОГДА Квартирограмма.СтроительныйНомер = """"
	|			ТОГДА 0
	|		ИНАЧЕ Квартирограмма.Площадь
	|	КОНЕЦ КАК Площадь,
	|	Квартирограмма.КоличествоКомнат КАК КоличествоКомнат,
	|	Квартирограмма.ДатаСтартаПродаж КАК СтартПродаж,
	|	Квартирограмма.Стоимость КАК Стоимость,
	|	Квартирограмма.МаксимальнаяСкидка КАК МаксимальнаяСкидка,
	|	Квартирограмма.Стоимость - Квартирограмма.МаксимальнаяСкидка КАК СтоимостьСоСкидкой,
	|	Квартирограмма.ПлощадьПроектная КАК ПлощадьПроектная,
	|	Квартирограмма.СтроительныйНомер КАК СтроительныйНомер,
	|	Квартирограмма.СтатусПула	
	|ПОМЕСТИТЬ вт_Квартирограмма
	|ИЗ
	|	РегистрСведений.Квартирограмма КАК Квартирограмма
	|ГДЕ
	|	Квартирограмма.ОбъектНедвижимости В(&МассивОбъектовНедвижимости)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.Регистратор КАК ДокументБронирования,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДокументЗапрос КАК ДокументЗапрос,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.Период КАК ДатаНачалаСрокаБронирования,
	|	СрокиБронированияОбъектовНедвижимостиСрезПоследних.ДатаКонцаСрокаБронирования КАК ДатаКонцаСрокаБронирования
	|ПОМЕСТИТЬ вт_СрокиБронирования
	|ИЗ
	|	РегистрСведений.СрокиБронированияОбъектовНедвижимости.СрезПоследних(, ОбъектНедвижимости В (&МассивОбъектовНедвижимости)) КАК СрокиБронированияОбъектовНедвижимостиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ вт_СтатусыОН
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_Квартирограмма КАК вт_Квартирограмма)) КАК СтатусыОбъектовНедвижимостиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьБронированияОстатки.ДокументБронирования.ДокументЗапрос КАК ДокументЗапрос,
	|	ОчередьБронированияОстатки.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	МИНИМУМ(ОчередьБронированияОстатки.ДокументБронирования) КАК ДокументБронирования
	|ПОМЕСТИТЬ вт_ОчередьБронирования
	|ИЗ
	|	РегистрНакопления.ОчередьБронирования.Остатки(
	|			,
	|			ОбъектНедвижимости В
	|				(ВЫБРАТЬ
	|					вт_Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости
	|				ИЗ
	|					вт_Квартирограмма КАК вт_Квартирограмма)) КАК ОчередьБронированияОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьБронированияОстатки.ДокументБронирования.ДокументЗапрос,
	|	ОчередьБронированияОстатки.ОбъектНедвижимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	вт_Квартирограмма.Вид КАК Вид,
	|	вт_Квартирограмма.Правообладатель КАК Правообладатель,
	|	вт_Квартирограмма.ОбъектСтроительства КАК ОбъектСтроительства,
	|	вт_Квартирограмма.Проект КАК Проект,
	|	вт_Квартирограмма.Фаза КАК Фаза,
	|	вт_Квартирограмма.ВидМатериала КАК ВидМатериала,
	|	вт_Квартирограмма.СрокСдачи КАК СрокСдачи,
	|	вт_Квартирограмма.Корпус КАК Корпус,
	|	вт_Квартирограмма.Этаж КАК Этаж,
	|	вт_Квартирограмма.Подъезд_Секция КАК Подъезд_Секция,
	|	вт_Квартирограмма.ГруппаПравообладателя КАК ГруппаПравообладателя,
	|	вт_Квартирограмма.НомерНаПлощадке КАК НомерНаПлощадке,
	|	вт_Квартирограмма.Отделка КАК Отделка,
	|	вт_Квартирограмма.ТипОтделки КАК ТипОтделки,
	|	вт_Квартирограмма.Площадь КАК Площадь,
	|	вт_Квартирограмма.ПлощадьПроектная КАК ПлощадьПроектная,
	|	вт_Квартирограмма.СтроительныйНомер КАК СтроительныйНомер,
	|	вт_Квартирограмма.КоличествоКомнат КАК КоличествоКомнат,
	|	вт_Квартирограмма.СтартПродаж КАК СтартПродаж,
	|	вт_Квартирограмма.Стоимость КАК Стоимость,
	|	вт_Квартирограмма.МаксимальнаяСкидка КАК МаксимальнаяСкидка,
	|	вт_Квартирограмма.СтоимостьСоСкидкой КАК СтоимостьСоСкидкой,
	|	вт_Квартирограмма.СтатусПула КАК СтатусПула,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(вт_СрокиБронированияЭтимЖеЗапросом.ДокументБронирования, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗабронированЭтимЖеЗапросом,
	|	ЕСТЬNULL(вт_СрокиБронированияЭтимЖеЗапросом.ДокументБронирования, вт_СрокиБронирования.ДокументБронирования) КАК ДокументБронирования,
	|	ВЫБОР
	|		КОГДА &Период МЕЖДУ вт_СрокиБронирования.ДатаНачалаСрокаБронирования И вт_СрокиБронирования.ДатаКонцаСрокаБронирования
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Забронирован,
	|	ЕСТЬNULL(вт_СтатусыОН.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Свободен)) КАК Статус
	|ИЗ
	|	вт_Квартирограмма КАК вт_Квартирограмма
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОчередьБронирования КАК вт_СрокиБронированияЭтимЖеЗапросом
	|		ПО вт_Квартирограмма.ОбъектНедвижимости = вт_СрокиБронированияЭтимЖеЗапросом.ОбъектНедвижимости
	|			И (&Запрос = вт_СрокиБронированияЭтимЖеЗапросом.ДокументЗапрос)
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СрокиБронирования КАК вт_СрокиБронирования
	|		ПО вт_Квартирограмма.ОбъектНедвижимости = вт_СрокиБронирования.ОбъектНедвижимости
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СтатусыОН КАК вт_СтатусыОН
	|		ПО вт_Квартирограмма.ОбъектНедвижимости = вт_СтатусыОН.ОбъектНедвижимости";
	
	Запрос.УстановитьПараметр("МассивОбъектовНедвижимости", МассивОбъектовНедвижимости);
	Запрос.УстановитьПараметр("Запрос",						Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", 					ТекущаяДата());
	
	//Листинг.Загрузить(Запрос.Выполнить().Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ПроверитьДублированиеОНВЛистинге(Выборка) Тогда
				ИзменялисьДанныеВЛистинге 	= Истина;
				НоваяСтрока 				= Листинг.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		АктуализироватьСписокПроектов();		
		//ОчиститьПоляОтбора();
		
	//Пустой результат запроса	
	КонецЕсли;

КонецПроцедуры // ()

&НаСервере
Процедура АктуализироватьСписокПроектов()

	ТЗЛистинг 		= РеквизитФормыВЗначение("Листинг");
	МассивПроектов 	= ТЗЛистинг.ВыгрузитьКолонку("Проект");
	Взаимодействия.УдалитьПовторяющиесяЭлементыМассива(МассивПроектов);
	СписокПроектовИзПодбора.ЗагрузитьЗначения(МассивПроектов);

КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляОтбора()

	Объект.ИмеющиесяНаличныеСредства 	= 0;
	Объект.ЭтажДо						= 0;
	Объект.ЭтажОт						= 0;
	Объект.ГруппаПравообладателей		= Справочники.ГруппыПравообладателя.ПустаяСсылка();
	Объект.ПлощадьДо					= 0;
	Объект.ПлощадьОт					= 0;
	Объект.Фазы.Очистить();
	Объект.СрокСдачи					= Справочники.СрокиСдачиОбъектовСтроительства.ПустаяСсылка();
	Объект.ТипДомаПанель				= Ложь;
	Объект.ТипДомаМонолит               = Ложь;
	Объект.КоличествоКомнат_1			= Ложь;
	Объект.КоличествоКомнат_2			= Ложь;
	Объект.КоличествоКомнат_3			= Ложь;
	Объект.КоличествоКомнат_4			= Ложь;
	Объект.КоличествоСекций_Несколько	= Ложь;
	Объект.КоличествоСекций_Одна		= Ложь;
	Объект.Отделка						= Ложь;
	Объект.БезОтделки					= Ложь;

КонецПроцедуры

&НаСервере
Функция ПроверитьДублированиеОНВЛистинге(Выборка)
	
	СтруктураПоиска = Новый Структура("ОбъектНедвижимости", Выборка.ОбъектНедвижимости);
	НайденнаяСтрока = Листинг.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяСтрока.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе		
	    Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипыПодобранныхОНПоПроекту(Проект, ТипОбъектаНедвижимости, МассивОН)
	
	ТипыОН = Новый Массив;
	Для каждого ОН Из МассивОН Цикл
		ТипОН = ЗначениеРеквизитаОбъектаНаСервере(ОН, "Тип");
		ПроектОН = ЗначениеРеквизитаОбъектаНаСервере(ЗначениеРеквизитаОбъектаНаСервере(ОН, "Владелец"), "Проект");
		Если Проект = ПроектОН Тогда
			Если НЕ ТипОН = ТипОбъектаНедвижимости И ЗначениеЗаполнено(ТипОН) И ТипыОН.Найти(ТипОН) = Неопределено Тогда
				ТипыОН.Добавить(ТипОН);
			КонецЕсли;
			//Если ЗначениеЗаполнено(ТипОбъектаНедвижимости) Тогда
			//	Если ТипОН = ТипОбъектаНедвижимости Тогда
			//		Если ТипыОН.Найти(ТипОН) = Неопределено Тогда
			//			ТипыОН.Добавить(ТипОН);
			//		КонецЕсли;						
			//	КонецЕсли;
			//Иначе
			//	Если ТипыОН.Найти(ТипОН) = Неопределено Тогда
			//		ТипыОН.Добавить(ТипОН);
			//	КонецЕсли;				
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТипыОН;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДополнительныеФормыЗапросов(МассивОН)

	Если СписокПроектовИзПодбора.Количество() > 0 Тогда
	
		Если Объект.Участники.Количество() = 0 Тогда
		
			ПоказатьПредупреждение(, "Не указаны участники запроса! Дополнительные документы по проектам созданы не будут!", 60, "Ошибка создания запросов");
			Возврат;	
			
		КонецЕсли;
	
		Для каждого ЭлементСписка Из СписокПроектовИзПодбора Цикл
			
			Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
			
				Объект.Проект = ЭлементСписка.Значение;					
			
			КонецЕсли;
						
			Если Объект.Проект <> ЭлементСписка.Значение Тогда
				
				ТипОН = ЗначениеРеквизитаОбъектаНаСервере(ЭлементСписка.Значение, "ВидНедвижимости");
				
				ПараметрыОткрываемойФормы = Новый Структура("ЗначениеКопирования, ЗначенияЗаполнения", 
					Объект.Ссылка, 
					Новый Структура("Проект, ТипОбъектаНедвижимости, Листинг, Участники", ЭлементСписка.Значение, ТипОН, Листинг, Объект.Участники)); 
															
				//Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
				//	ПараметрыОткрываемойФормы.ЗначенияЗаполнения.Вставить("Клиент", ?(НЕ Элементы.Участники.ТекущиеДанные = Неопределено, Элементы.Участники.ТекущиеДанные.Клиент, Неопределено)); 																												
				//	ПараметрыОткрываемойФормы.ЗначенияЗаполнения.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
				//	ПараметрыОткрываемойФормы.ЗначенияЗаполнения.Вставить("Телефония_НомерТелефона", Телефония_НомерТелефона);
				//КонецЕсли;	
				
				Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
					ПараметрыОткрываемойФормы.Вставить("Клиент", ?(НЕ Элементы.Участники.ТекущиеДанные = Неопределено, Элементы.Участники.ТекущиеДанные.Клиент, Неопределено)); 																												
					ПараметрыОткрываемойФормы.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
					ПараметрыОткрываемойФормы.Вставить("Телефония_НомерТелефона", Телефония_НомерТелефона);
				КонецЕсли;
				
				ФормаНовогоДокументаЗапрос = ПолучитьФорму("Документ.Запрос.ФормаОбъекта", ПараметрыОткрываемойФормы,,Новый УникальныйИдентификатор);
				ФормаНовогоДокументаЗапрос.Объект.ТипОбъектаНедвижимости = ТипОН;
				АктуализироватьЛистингПоПроекту(ФормаНовогоДокументаЗапрос.Листинг, ЭлементСписка.Значение, ФормаНовогоДокументаЗапрос.Объект.ТипОбъектаНедвижимости, ТипОН);
				ФормаНовогоДокументаЗапрос.Открыть();
									
			Иначе
				
				ТипыОН = ПолучитьТипыПодобранныхОНПоПроекту(Объект.Проект, Объект.ТипОбъектаНедвижимости, МассивОН);
				Для каждого ТипОН Из ТипыОН Цикл
					ПараметрыОткрываемойФормы = Новый Структура("ЗначениеКопирования, ЗначенияЗаполнения", 
						Объект.Ссылка, 
						Новый Структура("Проект, ТипОбъектаНедвижимости, Листинг, Участники", ЭлементСписка.Значение, ТипОН, Листинг, Объект.Участники)); 
																
					//Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
					//	ПараметрыОткрываемойФормы.ЗначенияЗаполнения.Вставить("Клиент", ?(НЕ Элементы.Участники.ТекущиеДанные = Неопределено, Элементы.Участники.ТекущиеДанные.Клиент, Неопределено)); 																												
					//	ПараметрыОткрываемойФормы.ЗначенияЗаполнения.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
					//	ПараметрыОткрываемойФормы.ЗначенияЗаполнения.Вставить("Телефония_НомерТелефона", Телефония_НомерТелефона);
					//КонецЕсли;	
					
					Если ЗначениеЗаполнено(Телефония_ID_Звонка) Тогда
						ПараметрыОткрываемойФормы.Вставить("Клиент", ?(НЕ Элементы.Участники.ТекущиеДанные = Неопределено, Элементы.Участники.ТекущиеДанные.Клиент, Неопределено)); 																												
						ПараметрыОткрываемойФормы.Вставить("Телефония_ID_Звонка", Телефония_ID_Звонка);
						ПараметрыОткрываемойФормы.Вставить("Телефония_НомерТелефона", Телефония_НомерТелефона);
					КонецЕсли;
					
					ФормаНовогоДокументаЗапрос = ПолучитьФорму("Документ.Запрос.ФормаОбъекта", ПараметрыОткрываемойФормы,,Новый УникальныйИдентификатор);
					ФормаНовогоДокументаЗапрос.Объект.ТипОбъектаНедвижимости = ТипОН;
					АктуализироватьЛистингПоПроекту(ФормаНовогоДокументаЗапрос.Листинг, ЭлементСписка.Значение, ФормаНовогоДокументаЗапрос.Объект.ТипОбъектаНедвижимости, ТипОН);
					ФормаНовогоДокументаЗапрос.Открыть();					
				КонецЦикла;
				
			КонецЕсли;	
		
		КонецЦикла;	
		
		АктуализироватьЛистингПоПроекту(Листинг, Объект.Проект, Объект.ТипОбъектаНедвижимости, Объект.ТипОбъектаНедвижимости); 
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьВыгрузкуТЧ(ТЧ);
	Возврат ТЧ.Выгрузить(); 
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъектаНаСервере(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные); 
КонецФункции

&НаКлиенте
Процедура АктуализироватьЛистингПоПроекту(ТабличнаяЧасть, Проект, ТипОбъектаНедвижимости, ТипОН)

	Индекс = ТабличнаяЧасть.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		Если ТабличнаяЧасть[Индекс].Проект <> Проект 
			ИЛИ 
			(ТабличнаяЧасть[Индекс].Проект = Проект И ЗначениеЗаполнено(ТипОбъектаНедвижимости) И НЕ ТабличнаяЧасть[Индекс].Вид = ТипОН)  Тогда
			ТабличнаяЧасть.Удалить(Индекс);	
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Функция ЗадатьПараметрМассивСсылок(ИмяТабличнойЧасти, ИмяРеквизитаТабличнойЧасти)
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		МассивСсылок = Новый Массив;
		Для каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
			МассивСсылок.Добавить(СтрокаТЧ[ИмяРеквизитаТабличнойЧасти]);
		КонецЦикла;
		Возврат МассивСсылок;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОбновитьНадписи()
	
	ОбновитьНадпись(ЦельПокупки, 	"ЦелиПокупки", 					"ЦельПокупки");
	ОбновитьНадпись(ФормыОплаты, 	"ФормыОплаты", 					"ФормаОплаты");
	ОбновитьНадпись(Мотивация, 		"Мотивации", 					"Мотивация");
	ОбновитьНадпись(ФакторыВыбора, 	"ФакторыВыбораОН", 				"ФакторВыбора");
	ОбновитьНадпись(СтопФакторы, 	"СтопФакторы", 					"СтопФактор");
	ОбновитьНадпись(Расположение, 	"Расположения", 				"Расположение");
	ОбновитьНадпись(Фазы, 			"Фазы", 						"Фаза");
	ОбновитьНадпись(Корпуса, 		"СписокОбъектовСтроительства", 	"Корпус");
	ОбновитьНадпись(Услуги, 		"Услуги", 						"Услуга");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадпись(РеквизитФормы, ИмяТабличнойЧасти, ИмяРеквизитаТабличнойЧасти)

	РеквизитФормы = "";
	Для каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		РеквизитФормы = РеквизитФормы + СтрокаТЧ[ИмяРеквизитаТабличнойЧасти] + "; ";	
	КонецЦикла;	

КонецПроцедуры // ()

&НаКлиенте
Процедура ОбновитьКартинкиСтадий()

	//Если Объект.Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Звонок") Тогда
	//	Элементы.ДекорацияСтадияГПТ.Видимость 			= Истина;
	//ИначеЕсли Объект.Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Переговоры") Тогда
	//	Элементы.ДекорацияСтадияГПТ.Видимость 			= Истина;
	//	Элементы.ДекорацияСтадияПереговоры.Видимость 	= Истина;
	//ИначеЕсли Объект.Стадия = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") Тогда
	//	Элементы.ДекорацияСтадияГПТ.Видимость 			= Истина;
	//	Элементы.ДекорацияСтадияПереговоры.Видимость 	= Истина;
	//	Элементы.ДекорацияСтадияСделка.Видимость 		= Истина;
	//КонецЕсли;	

	//<828132>, Басаргин (09.06.2018) {
	Если СтадияЗапроса = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Звонок") Тогда
		Элементы.ДекорацияСтадияГПТ.Видимость 			= Истина;
	ИначеЕсли СтадияЗапроса = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Переговоры") Тогда
		Элементы.ДекорацияСтадияГПТ.Видимость 			= Истина;
		Элементы.ДекорацияСтадияПереговоры.Видимость 	= Истина;
	ИначеЕсли СтадияЗапроса = ПредопределенноеЗначение("Перечисление.СтадииЗапроса.Сделка") Тогда
		Элементы.ДекорацияСтадияГПТ.Видимость 			= Истина;
		Элементы.ДекорацияСтадияПереговоры.Видимость 	= Истина;
		Элементы.ДекорацияСтадияСделка.Видимость 		= Истина;
	КонецЕсли;	
	//<828132> }	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоКлиентуДляСтрокиУчастников(Клиент)

	Результат = Новый Структура("ОсновнойТелефон,Брокер,ВИП", "", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Клиенты.Брокер КАК Брокер,
	|	Клиенты.ОсновнойТелефон КАК ОсновнойТелефон,
	|	Клиенты.ВИП КАК ВИП
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Клиент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовПоВидуОбъектаНедвижимости()

	ЗУ = Объект.ТипОбъектаНедвижимости = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.ЗемельныйУчасток");
	КН = Объект.ТипОбъектаНедвижимости = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.КоммерческаяНедвижимость");
	НН = Объект.ТипОбъектаНедвижимости = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.НежилаяНедвижимость");
	ММ = Объект.ТипОбъектаНедвижимости = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.Машиноместо");
	ЖН = Объект.ТипОбъектаНедвижимости = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНедвижимости.ЖилаяНедвижимость");
	
	//Так как видимость табличных частей не меняем, обращения на сервер не будет, это актуально для нашей версии платформы
	Элементы.ГруппаКомнатность.Видимость 	= ЖН;
	Элементы.ГруппаОтделка.Видимость 		= ЖН;	
	Элементы.ГруппаБлок.Видимость 			= ЖН;	
	Элементы.СрокСдачи.Видимость 			= НЕ ЗУ И НЕ КН И НЕ ММ;
	Элементы.ПараметрыПодбора3.Видимость	= НЕ ЗУ; // ГруппаЭтаж, ГруппаТипЭтажа, ГруппаТипДома
	Элементы.ГруппаСекции.Видимость			= ЖН;
	Элементы.ПараметрыПодбора4.Видимость	= НЕ КН; // ГруппаСекции, ГруппаКорпуса, ГруппаФазы	
	Элементы.ГруппаТипДома.Видимость		= ЖН;
	Элементы.ГруппаТипЭтажа.Видимость       = ЖН;
	Элементы.ГруппаКорпуса.Видимость       	= НЕ ЗУ;
	Элементы.ГруппаДляЗУ.Видимость			= ЗУ;
	Элементы.ВидСделки.Видимость			= КН;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерТелефонаИзСоответствия(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИсторияЗвонков.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	РегистрСведений.СоответствиеЗапросовЗвонкам КАК СоответствиеЗапросовЗвонкам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияЗвонков КАК ИсторияЗвонков
	|		ПО СоответствиеЗапросовЗвонкам.ID_Звонка = ИсторияЗвонков.ID_Звонка
	|ГДЕ
	|	СоответствиеЗапросовЗвонкам.Запрос = &Запрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеЗапросовЗвонкам.ДатаСвязи УБЫВ";
	Запрос.УстановитьПараметр("Запрос", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.НомерТелефона; 
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВариантОтчета()
	
	КлючТекущегоВарианта = Неопределено;
	ВариантГПТ = Ложь;
	Если Объект.ТипОбъектаНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость Тогда
		КлючТекущегоВарианта = "ГПТ";
		ВариантГПТ = Истина;
	ИначеЕсли Объект.ТипОбъектаНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток Тогда
		КлючТекущегоВарианта = "ЗУ";
	ИначеЕсли Объект.ТипОбъектаНедвижимости = Перечисления.ВидыОбъектовНедвижимости.Машиноместо Тогда
		КлючТекущегоВарианта = "Машиноместа";
	ИначеЕсли Объект.ТипОбъектаНедвижимости = Перечисления.ВидыОбъектовНедвижимости.НежилаяНедвижимость Тогда
		КлючТекущегоВарианта = "Кладовые";
	Иначе
		КлючТекущегоВарианта = "ГПТ";
		ВариантГПТ = Истина;
	КонецЕсли;
	
	//<840014>, Басаргин (04.07.2018) {
	ЭтоМенеджерФилиала = УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ПользователиКлиентСервер.АвторизованныйПользователь()) 
							И НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , ПользователиКлиентСервер.АвторизованныйПользователь());
	Если КлючТекущегоВарианта = "ГПТ" И ЭтоМенеджерФилиала Тогда
		КлючТекущегоВарианта = "ПодборОН_БТИ";
		ВариантГПТ = Истина;
	КонецЕсли;      
	//<840014> }
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.Наименование КАК Наименование,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта	
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет.Имя = ""Квартирограмма""
	|	И ВариантыОтчетов.Автор = &Автор
	|	И ВариантыОтчетов.Пользовательский
	|	И ВариантыОтчетов.Наименование ПОДОБНО &КлючВарианта
	|	И НЕ ВариантыОтчетов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта + "%");
	Запрос.УстановитьПараметр("Автор", ПользователиКлиентСервер.АвторизованныйПользователь());

	НаименованиеВарианта = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КлючТекущегоВарианта = Выборка.КлючВарианта;
		НаименованиеВарианта = Выборка.Наименование;
	КонецЕсли;
	
	Возврат Новый Структура("КлючТекущегоВарианта, ВариантГПТ, НаименованиеВарианта", КлючТекущегоВарианта, ВариантГПТ, НаименованиеВарианта);	
		
КонецФункции

&НаСервереБезКонтекста 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыОтчета(Квартира, Корпус, ПараметрыФормы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Квартирограмма.Этаж КАК Этаж,
	|	Квартирограмма.Подъезд КАК Подъезд,
	|	Квартирограмма.ОбъектСтроительства.МаксимальнаяЭтажность КАК ОбъектСтроительстваМаксимальнаяЭтажность
	|ИЗ
	|	РегистрСведений.Квартирограмма КАК Квартирограмма
	|ГДЕ
	|	Квартирограмма.ОбъектНедвижимости = &ОбъектНедвижимости
	|	И Квартирограмма.ОбъектСтроительства = &ОбъектСтроительства";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", Квартира);
	Запрос.УстановитьПараметр("ОбъектСтроительства", Корпус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПараметрыФормы.Вставить("Подъезд",	ВыборкаДетальныеЗаписи.Подъезд);
		ПараметрыФормы.Вставить("ЭтажПерехода",	ВыборкаДетальныеЗаписи.Этаж);
		ПараметрыФормы.Вставить("ВсегоЭтажей",	ВыборкаДетальныеЗаписи.ОбъектСтроительстваМаксимальнаяЭтажность);
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Функция ОпределитьНазначенияОН(Проект, ТипОН)
	
	НазначенияОН = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеТипаИНазначенияОН.НазначениеОН КАК НазначениеОН
	|ИЗ
	|	РегистрСведений.СоответствиеТипаИНазначенияОН КАК СоответствиеТипаИНазначенияОН
	|ГДЕ
	|	СоответствиеТипаИНазначенияОН.Проект = &Проект
	|	И СоответствиеТипаИНазначенияОН.ТипОН = &ТипОН";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ТипОН", ТипОН);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НазначенияОН.Добавить(ВыборкаДетальныеЗаписи.НазначениеОН);
	КонецЦикла;
	
	Возврат НазначенияОН;
	
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыОтчетаНаСервере(ПараметрыФормыОтчета, СтруктураОтбора)
	
	КомпоновщикНастроек = ПолучитьКомпоновщикНастроекНаСервере(Объект.ИмеющиесяНаличныеСредства, 
																	Объект.Отделка,
																	Объект.БезОтделки,
																	Объект.ПлощадьОт,
																	Объект.ПлощадьДо,
																	Объект.ЭтажОт,
																	Объект.ЭтажДо,
																	Объект.КоличествоСекций_Одна,
																	Объект.КоличествоСекций_Несколько,
																	Объект.ТипДомаПанель,
																	Объект.ТипДомаМонолит,
																	Объект.СрокСдачи,
																	Объект.НеПервыйЭтаж,
																	Объект.НеПоследнийЭтаж);
		
	ПараметрыФормыОтчета.Вставить("ПользовательскиеНастройки", 	КомпоновщикНастроек.ПользовательскиеНастройки);
		
	ВариантОтчета = ОпределитьВариантОтчета();
	ПараметрыФормыОтчета.Вставить("ВариантГПТ", ВариантОтчета.ВариантГПТ);
	Если ЗначениеЗаполнено(ВариантОтчета.КлючТекущегоВарианта) Тогда
		ПараметрыФормыОтчета.Вставить("КлючТекущегоВарианта", ВариантОтчета.КлючТекущегоВарианта);	
		Если СтрНайти(ВариантОтчета.НаименованиеВарианта, "ЗУ") Тогда
			Если СтруктураОтбора.Свойство("Услуга") Тогда
				СтруктураОтбора.Удалить("Услуга");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаНедвижимости) Тогда
		НазначенияОН = ОпределитьНазначенияОН(Объект.Проект, Объект.ТипОбъектаНедвижимости);
		Если НазначенияОН.Количество() Тогда
			СтруктураОтбора.Вставить("НазначениеОН", НазначенияОН);
		Иначе
			СтруктураОтбора.Вставить("ПроектВидНедвижимости", Объект.ТипОбъектаНедвижимости);
		КонецЕсли;	
	КонецЕсли;
	
	//<872403>, Басаргин (26.09.2018) {
	ПараметрыФормыОтчета.Вставить("КлиентыЗапроса", Объект.Участники.Выгрузить().ВыгрузитьКолонку("Клиент"));
	//<872403> }
		
КонецПроцедуры	

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		
		//ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		//ОписаниеОповещенияОЗакрытииСозданияУчастника = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииСозданияУчастника", ЭтотОбъект, ?(ТекущиеДанные = Неопределено, Неопределено, Новый Структура("Идентификатор", ТекущиеДанные.ПолучитьИдентификатор())));
		
		ОписаниеОповещенияОЗакрытииСозданияУчастника = Новый ОписаниеОповещения("ОписаниеОповещенияОЗакрытииСозданияУчастника", ЭтотОбъект, Новый Структура("Идентификатор"));
		
		Если ЗначениеЗаполнено(Телефония_ID_Звонка) И ЗначениеЗаполнено(Телефония_НомерТелефона) Тогда
			ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", Новый Структура("ОсновнойТелефон, СозданиеКлиентаИзЗапроса", Телефония_НомерТелефона, Истина), ЭтаФорма, , , , ОписаниеОповещенияОЗакрытииСозданияУчастника);
		Иначе
			ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", Новый Структура("ОсновнойТелефон, СозданиеКлиентаИзЗапроса", ПолучитьНомерТелефонаИзСоответствия(Объект.Ссылка), Истина), ЭтаФорма, , , , ОписаниеОповещенияОЗакрытииСозданияУчастника);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ Юкаев Роман 20180313 ( //790124
&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТолькоПросмотр Тогда
		ПоказатьЗначение(, ТекущиеДанные.Клиент);	
	КонецЕсли;
	
КонецПроцедуры
//-- Юкаев Роман 20180313 )

&НаКлиенте
Процедура ПослеЗакрытияВопросаМенеджеру(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
	ОткрытьФорму("Документ.Запрос.Форма.ПараметрыПечатиЗаявкиНаЭкскурсию", ПолучитьПараметрыФормыПечатиЗаявкиНаЭкскурсию(), ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормыПечатиЗаявкиНаЭкскурсию()
	
	Возврат Новый Структура("ЗапросСсылка, ЛистингАдрес, Корпуса, СтопФакторы, Фазы, ФакторыВыбора, ЦельПокупки",
								Объект.Ссылка, ПоместитьВоВременноеХранилище(Листинг.Выгрузить()), Корпуса, СтопФакторы, Фазы, ФакторыВыбора, ЦельПокупки);
	
КонецФункции

//<828132>, Басаргин (09.06.2018) {
&НаСервере
Процедура ЗаполнитьСтатусРасшифровкуСтатуса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыЗапросаЛинейный.Статус КАК СтатусЗапроса,
	|	ПараметрыЗапросаЛинейный.РасшифровкаСтатуса КАК РасшифровкаСтатусаЗапроса,
	|	ПараметрыЗапросаЛинейный.Стадия КАК СтадияЗапроса
	|ИЗ
	|	РегистрСведений.ПараметрыЗапросаЛинейный КАК ПараметрыЗапросаЛинейный
	|ГДЕ
	|	ПараметрыЗапросаЛинейный.Запрос = &Предмет";
		
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);	
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыборкаДетальныеЗаписи, "СтатусЗапроса, РасшифровкаСтатусаЗапроса, СтадияЗапроса");	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
//<828132> }

#КонецОбласти
