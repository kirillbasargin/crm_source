 
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа(ЭтотОбъект, Таблица);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура УстановитьПометкуУдаленияУВложенийЗаявкиНаЗвонок(ЗаявкаНаЗвонок, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = "ЗаявкаНаЗвонокПрисоединенныеФайлы";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует	
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления <> &ПометкаУдаления
	|	И Файлы.ВладелецФайла = &ВладелецФайла
	|");
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				|т.к. содержит присоединенный файл ""%2"",
				|занятый для редактирования.'"),
				Строка(Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заблокировать объект " + Объект + "! " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Объект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УправлениеЗаявкамиНаЗвонок.УстановитьПолеДополнительнойГруппировки(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) И НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДополнительныеСвойства.Вставить("ВидыИзменения", ПолучитьВидИзмененияДокумента(РежимЗаписи));
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
		ДополнительныеСвойства.Вставить("ТекущийСтатус", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус"));	
	КонецЕсли;	

	УстановитьПометкуУдаленияУВложенийЗаявкиНаЗвонок(Ссылка, ПометкаУдаления);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	//Ответственный    = Пользователи.ТекущийПользователь();
	Автор            = Пользователи.ТекущийПользователь();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//<841632>, Басаргин (27.07.2018) {
	Если ЗначениеЗаполнено(reqID)
		И ТипВызова = Перечисления.ТипыВызовов.ЗаявкаОтCQ
		И ЗначениеЗаполнено(Контакт) Тогда
		НаборЗаписей = РегистрыСведений.КлиентыCQ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.User_id.Установить(reqID);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			Запись = НаборЗаписей[0];
			Если НЕ Запись.Клиент = Контакт Тогда
				Запись.Клиент = Контакт;
				НаборЗаписей.Записать();	
			КонецЕсли;
		КонецЕсли;					
	КонецЕсли;
	//<841632> }
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	НаборЗаписей = РегистрыСведений.ИзмененияЗаявокНаЗвонок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаЗвонок.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	ТаблицаНабор = НаборЗаписей.Выгрузить();
	
	Если ДополнительныеСвойства.Свойство("ВидыИзменения") И НЕ ДополнительныеСвойства.ВидыИзменения = Неопределено И ДополнительныеСвойства.ВидыИзменения.Количество() Тогда		
		ДобавитьИзмененияДокумента(ТаблицаНабор, Ссылка, ТекущаяДата(), ДополнительныеСвойства.ВидыИзменения);
		Если ТаблицаНабор.Количество() Тогда
			НаборЗаписей.Загрузить(ТаблицаНабор);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Взаимодействие) Тогда
		Возврат;
	КонецЕсли;
	
	ВзаимодействиеОбъект = Взаимодействие.ПолучитьОбъект();
	Если ВзаимодействиеОбъект = Неопределено Тогда														
		Возврат;	
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	Если ДополнительныеСвойства.Свойство("ТекущийСтатус") И НЕ ДополнительныеСвойства.ТекущийСтатус = Неопределено Тогда
		ТекущийСтатус = ДополнительныеСвойства.ТекущийСтатус;
	КонецЕсли;	
	
	АктуальныйСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	
	Изменение_ОбработаноВРаботе = (ТекущийСтатус = Перечисления.СтатусЗаявкиCallBack.Обработано ИЛИ ТекущийСтатус = Перечисления.СтатусЗаявкиCallBack.Отменено) И АктуальныйСтатус = Перечисления.СтатусЗаявкиCallBack.БылиПопыткиДозвониться;
	Изменение_Обработано = АктуальныйСтатус = Перечисления.СтатусЗаявкиCallBack.Обработано;
	
	МассивИзмененийВзаимодействия = Новый Массив;
	
	Если ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.Встреча") Тогда		
		Если Изменение_ОбработаноВРаботе Тогда			
			СтатусВзаимоедйствия = РегистрыСведений.Взаимодействия.ПолучитьТекущийСтатусВзаимодействия(Взаимодействие);			
			Если СтатусВзаимоедйствия = Перечисления.СтатусыВзаимодействий.Запланировано Тогда
 				//?
			ИначеЕсли СтатусВзаимоедйствия = Перечисления.СтатусыВзаимодействий.Завершено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно перевести в статус ""В работе"" по встрече " + Взаимодействие, ЭтотОбъект, "Статус",  , Отказ);
				Возврат;
			ИначеЕсли СтатусВзаимоедйствия = Перечисления.СтатусыВзаимодействий.Отменено Тогда
				РегистрыСведений.Взаимодействия.УстановитьСтатусВзаимодействияСФиксациейИзменений(Взаимодействие, Перечисления.СтатусыВзаимодействий.Запланировано, МассивИзмененийВзаимодействия);
			КонецЕсли;
		КонецЕсли;				
		Если Изменение_Обработано Тогда
			ДополнительныеСвойства.Вставить("ВстречаДляОткрытия", Взаимодействие);
		КонецЕсли;			
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда			
		Если Изменение_ОбработаноВРаботе Тогда			
			РегистрыСведений.Взаимодействия.УстановитьСтатусВзаимодействияСФиксациейИзменений(Взаимодействие, Перечисления.СтатусыВзаимодействий.Запланировано, МассивИзмененийВзаимодействия, 
				РегистрыСведений.Взаимодействия.ПолучитьОтветственногоИзИзмененияВзаимодействий(Взаимодействие));			
		КонецЕсли;		
		Если Изменение_Обработано Тогда			
			//<>, Басаргин (29.05.2018) {
			//РегистрыСведений.Взаимодействия.УстановитьСтатусВзаимодействияСФиксациейИзменений(Взаимодействие, Перечисления.СтатусыВзаимодействий.Завершено, МассивИзмененийВзаимодействия, Пользователи.ТекущийПользователь());
			СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Взаимодействие);
			АктуальныйСтатус = РегистрыСведений.Взаимодействия.ПолучитьТекущийСтатусВзаимодействия(Взаимодействие, СтруктураРеквизитов);
			Если АктуальныйСтатус = Перечисления.СтатусыВзаимодействий.Запланировано Тогда
				РегистрыСведений.Взаимодействия.УстановитьСтатусВзаимодействияСФиксациейИзменений(Взаимодействие, Перечисления.СтатусыВзаимодействий.Завершено, МассивИзмененийВзаимодействия, Пользователи.ТекущийПользователь());		
			КонецЕсли;
			//<> }						
		КонецЕсли;
	КонецЕсли;	
	
	Если МассивИзмененийВзаимодействия.Количество() Тогда
		РегистрыСведений.Взаимодействия.ЗафиксироватьИзмененияВзаимодействия(МассивИзмененийВзаимодействия);
	КонецЕсли;		
	
	ДополнительныеСвойства.Вставить("ЗаявкиПоТекущемуНомеру", УправлениеЗаявкамиНаЗвонок.ПолучитьЗаявкиНаЗвонокПоНомеру(Ссылка, reqContact));
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Не Отказ Тогда
		НаборЗаписей = РегистрыСведений.ИзмененияЗаявокНаЗвонок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаЗвонок.Установить(Ссылка);
		НаборЗаписей.Записать();
	КонецЕсли;		
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВидИзмененияДокумента(РежимЗаписи = Неопределено)
	
	ВидыИзменения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаЗвонок.Статус КАК Статус,
	|	ЗаявкаНаЗвонок.ЭтапРаботы КАК ЭтапРаботы,
	|	ЗаявкаНаЗвонок.Ответственный КАК Ответственный,
	|	ЗаявкаНаЗвонок.Контакт КАК Контакт,
	|	ЗаявкаНаЗвонок.ПлановоеВремя КАК ПлановоеВремя,
	|	ЗаявкаНаЗвонок.Приоритет КАК Приоритет,
	|	ЗаявкаНаЗвонок.ЭтоТестоваяЗаявка КАК ЭтоТестоваяЗаявка,
	|	ЗаявкаНаЗвонок.ТипРаспределения КАК ТипРаспределения,
	|	ЗаявкаНаЗвонок.СтатусПланированияВстречи КАК СтатусПланированияВстречи
	|ИЗ
	|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
	|ГДЕ
	|	НЕ ЗаявкаНаЗвонок.ПометкаУдаления
	|	И ЗаявкаНаЗвонок.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ВыборкаДетальныеЗаписи.Статус = Статус Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.Статус;
			Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.Статус, Статус));
			КонецЕсли;			
		КонецЕсли;
		Если НЕ ВыборкаДетальныеЗаписи.ЭтапРаботы = ЭтапРаботы Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.ЭтапРаботы;
			Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.ЭтапРаботы, ЭтапРаботы));
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыборкаДетальныеЗаписи.Ответственный = Ответственный Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.Ответственный;
			Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.Ответственный, Ответственный));
			КонецЕсли;
		КонецЕсли;
		//Если НЕ ВыборкаДетальныеЗаписи.Контакт = Контакт Тогда
		//	ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.Контакт;
		//	Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
		//		ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.Контакт, Контакт));
		//	КонецЕсли;
		//КонецЕсли;
		//Если НЕ ВыборкаДетальныеЗаписи.ПлановоеВремя = ПлановоеВремя Тогда
		//	ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.ПлановоеВремя;	
		//	Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
		//		ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.ПлановоеВремя, ПлановоеВремя));
		//	КонецЕсли;
		//КонецЕсли;
		Если НЕ ВыборкаДетальныеЗаписи.Приоритет = Приоритет Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.Приоритет;
			Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.Приоритет, Приоритет));
			КонецЕсли;
		КонецЕсли;
		//Если НЕ ВыборкаДетальныеЗаписи.ЭтоТестоваяЗаявка = ЭтоТестоваяЗаявка Тогда
		//	ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.ЭтоТестоваяЗаявка;			
		//	Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
		//		ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.ЭтоТестоваяЗаявка, ЭтоТестоваяЗаявка));
		//	КонецЕсли;
		//КонецЕсли;
		Если НЕ ВыборкаДетальныеЗаписи.ТипРаспределения = ТипРаспределения Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.ТипРаспределения;			
			Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.ТипРаспределения, ТипРаспределения));
			КонецЕсли;
		КонецЕсли;
		Если НЕ ВыборкаДетальныеЗаписи.СтатусПланированияВстречи = СтатусПланированияВстречи Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.СтатусПланированияВстречи;			
			Если ВидыИзменения.Найти(ВидИзменения) = Неопределено Тогда
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, ВыборкаДетальныеЗаписи.СтатусПланированияВстречи, СтатусПланированияВстречи));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ВидыИзменения.Количество() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		НаборЗаписей = РегистрыСведений.ИзмененияЗаявокНаЗвонок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаЗвонок.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		Если НЕ НаборЗаписей.Количество() Тогда
			ВидИзменения = Перечисления.ВидыИзмененияЗаявокНаЗвонок.Новая;
			Если НайтиПоВидуИзменения(ВидыИзменения, ВидИзменения) = Неопределено Тогда                                                                                                                                     
				ВидыИзменения.Добавить(Новый Структура("ВидИзменения, СтароеЗначение, НовоеЗначение", ВидИзменения, Документы.ЗаявкаНаЗвонок.ПустаяСсылка(), Ссылка));
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ВидыИзменения;
	
КонецФункции

Процедура ДобавитьИзмененияДокумента(Набор, Регистратор, ДатаИзменения, ВидыИзменения)
	
	Для каждого Элемент Из ВидыИзменения Цикл
		НоваяЗапись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Элемент);
		НоваяЗапись.ДатаИзменения = ДатаИзменения;
		НоваяЗапись.ЗаявкаНаЗвонок = Регистратор;
		НоваяЗапись.АвторИзменения = Пользователи.АвторизованныйПользователь();
		Если НЕ ЗначениеЗаполнено(НоваяЗапись.АвторИзменения) Тогда
			НоваяЗапись.АвторИзменения = Справочники.Пользователи.Робот;
		КонецЕсли;
	КонецЦикла;		
			
КонецПроцедуры

Функция НайтиПоВидуИзменения(ВидыИзменения, ВидИзменения)
	
	Для каждого Элемент Из ВидыИзменения Цикл
		Если Элемент.ВидИзменения = ВидИзменения Тогда
			Возврат ВидИзменения;	
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти
