#Если Сервер Тогда

#Область ПрограммныйИнтерфейс

Процедура ПолучитьДанныеПоУсловиямОплатыИВидамУсловий(ДокументОбъект, Форма) Экспорт 
    	
	Если ДокументОбъект.ОбъектыНедвижимости.Количество() <> 0 Тогда
		
		ЗаполнитьТаблицуСоответсвийПараметровУсловийОплат(Форма.ТаблицаСоответсвийПараметровУсловийОплат);
		
		ЭлементыФормы	= Форма.Элементы;
		
		ПроксиСервер 	= Неопределено;
		ИмяСервиса 		= "MKService";
		CRMСервер.ПодключитьсяКСервису(ПроксиСервер, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Проект, "ПроектБазыДомостроителя"), ИмяСервиса);
		
		Регресс = РассчитатьРегресс(ДокументОбъект.ДокументОснование);
			
		ОбъектНедвижимости 				= ДокументОбъект.ОбъектыНедвижимости[0].ОбъектНедвижимости;		
		ДанныеТаблицыЗначений			= ПроксиСервер.ReturnUO(СериализаторXDTO.XMLСтрока(ОбъектНедвижимости), ?(НЕ ЗначениеЗаполнено(ДокументОбъект.Дата), ТекущаяДата(), ДокументОбъект.Дата), Регресс, XMLСтрока(ДокументОбъект.АгентствоНедвижимости));		
		СтруктураТаблицыУсловийОплат 	= СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), ДанныеТаблицыЗначений).Получить();		
		лТаблицаЗначений 				= ПреобразоватьТаблицуЗначений(СтруктураТаблицыУсловийОплат.Таблица);
				      
		//Если Не ДокументОбъект.УсловиеОплаты.Пустая() Тогда 
		//    УсловиеДляДобавления =  ДокументОбъект.УсловиеОплаты;
		//КонецЕсли;    

		ЭлементыФормы.УсловиеОплаты.СписокВыбора.ЗагрузитьЗначения(Взаимодействия.УдалитьПовторяющиесяЭлементыМассива(лТаблицаЗначений.ВыгрузитьКолонку("УсловияОплаты")));
		ЭлементыФормы.ВидУсловияОплаты.СписокВыбора.ЗагрузитьЗначения(Взаимодействия.УдалитьПовторяющиесяЭлементыМассива(лТаблицаЗначений.ВыгрузитьКолонку("ВидыУсловийОплаты")));

		Форма.ТаблицаЗначенийУОиВУО.Загрузить(лТаблицаЗначений);
		
		//Если Не УсловиеДляДобавления = Неопределено и ЭлементыФормы.УсловиеОплаты.СписокВыбора.НайтиПоЗначению(УсловиеДляДобавления) = Неопределено Тогда 
		//    ЭлементыФормы.УсловиеОплаты.СписокВыбора.Добавить(УсловиеДляДобавления);
		//	ЭлементыФормы.УсловиеОплаты.СписокВыбора.СортироватьПоЗначению();
		//	ДокументОбъект.УсловиеОплаты = УсловиеДляДобавления;			
		//КонецЕсли;    

	Иначе
		ЭлементыФормы	= Форма.Элементы;
		ЭлементыФормы.УсловиеОплаты.СписокВыбора.Очистить();
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуМаркетинговыхКомпаний(Знач ОбъектНедвижимости, Объект) Экспорт
	
	ПроксиСервер 	= Неопределено;
	ИмяСервиса 		= "MKService";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Проект, "ПроектБазыДомостроителя"), ИмяСервиса);
	
	Регресс = РассчитатьРегресс(Объект.ДокументОснование);
				
	ДанныеТаблицыЗначений = ПроксиСервер.ReturnMK(СериализаторXDTO.XMLСтрока(ОбъектНедвижимости), 
											Объект.Дата, 
											СериализаторXDTO.XMLСтрока(Объект.УсловиеОплаты),
											СериализаторXDTO.XMLСтрока(Объект.ВидУсловияОплаты),
											Регресс,
											СериализаторXDTO.XMLСтрока(Объект.АгентствоНедвижимости));
								
	СтруктураМассиваМаркетинговыхКомпаний = СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), ДанныеТаблицыЗначений).Получить();
	
	Возврат ПреобразоватьТаблицуЗначений(СтруктураМассиваМаркетинговыхКомпаний.ТЗМК, Истина);
	
КонецФункции

Функция ПолучитьРассчитанныйГрафикПлатежа(Знач ОбъектНедвижимости, Знач Объект, ЭтоСрокБронирования = Ложь) Экспорт

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("РазмерСобственныхСредств", 	Объект.РазмерСобственныхСредств);
	СтруктураДанных.Вставить("РазмерМатеринскогоКапитала", 	Объект.РазмерМатеринскогоКапитала);
	СтруктураДанных.Вставить("РазмерДополнительныхСредств", Объект.РазмерДополнительныхСредств);
	Если ЭтоСрокБронирования Тогда
		СтруктураДанных.Вставить("СрокБронирования", 			XMLСтрока(Объект.СрокБронирования));
	КонецЕсли;
	
	ПроксиСервер 	= Неопределено;
	ИмяСервиса 		= "MKService";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Проект, "ПроектБазыДомостроителя"), ИмяСервиса);
	
	ДанныеТаблицыЗначений = ПроксиСервер.ReturnGraph(СериализаторXDTO.XMLСтрока(ОбъектНедвижимости), 
														Объект.Дата, 
														СериализаторXDTO.XMLСтрока(Объект.УсловиеОплаты),
														СериализаторXDTO.XMLСтрока(Объект.ВидУсловияОплаты),
														СериализаторXDTO.XMLСтрока(Объект.МаркетинговаяКомпания),
														СериализаторXDTO.XMLСтрока(Объект.Отбор),//Типовой отбор
														СериализаторXDTO.XMLСтрока(Объект.ОтборМК),//Отбор по МК
														Объект.СтоимостьСоСкидкой,
														СериализаторXDTO.XMLСтрока(Новый ХранилищеЗначения(СтруктураДанных)));
														
	СтруктураТаблицГрафикаПлатежейИПараметров = СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), ДанныеТаблицыЗначений).Получить();
	
	Если ЗначениеЗаполнено(СтруктураТаблицГрафикаПлатежейИПараметров.ТекстОшибки) Тогда
		Сообщить(СтруктураТаблицГрафикаПлатежейИПараметров.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	СтруктураТаблицГрафикаПлатежейИПараметров.ТЗПараметров = ПреобразоватьТЗПараметров(СтруктураТаблицГрафикаПлатежейИПараметров.ТЗПараметров);	
	//EXTCODE Шумилин Сергей 20.10.2017 {{ ---> Заплатка до вторника
	СтрокаТЗ = СтруктураТаблицГрафикаПлатежейИПараметров.ТЗПараметров.Найти(ПланыВидовХарактеристик.ПараметрыУсловийОплаты.ПолучитьСсылку(Новый УникальныйИдентификатор("61da1fd3-a731-11e2-8ebf-78e3b506986f"))); //Срок внесения первого взноса
	Если СтрокаТЗ <> Неопределено Тогда
		Если Объект.УсловиеОплаты <> Справочники.УсловияОплаты.НайтиПоКоду("000000003")
			И Объект.УсловиеОплаты <> Справочники.УсловияОплаты.НайтиПоКоду("000000005") 
			И Объект.УсловиеОплаты <> Справочники.УсловияОплаты.НайтиПоКоду("000000020")
			И Объект.УсловиеОплаты <> Справочники.УсловияОплаты.НайтиПоКоду("000000019") Тогда
			СтрокаТЗ.Параметр = ПланыВидовХарактеристик.ПараметрыУсловийОплаты.ПолучитьСсылку(Новый УникальныйИдентификатор("41337458-ad8c-11e2-8ebf-78e3b506986f"));//Срок внесения собственных средств		
		КонецЕсли;
	КонецЕсли;	
	//EXTCODE Шумилин Сергей 20.10.2017 <--- }}		
	Возврат СтруктураТаблицГрафикаПлатежейИПараметров;
	
КонецФункции // ()

Функция РассчитатьРегресс(Знач ДокументЗапрос) Экспорт
		
	Результат = 11;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(ИзменениеСтатусаСтадииЗапросаСрезПоследних.Период, &ТекущаяДата, ДЕНЬ) КАК Регресс
	|ИЗ
	|	РегистрСведений.ИзменениеСтатусаСтадииЗапроса.СрезПоследних(
	|			,
	|			Запрос = &Запрос
	|				И Стадия = ЗНАЧЕНИЕ(Перечисление.СтадииЗапроса.Переговоры)) КАК ИзменениеСтатусаСтадииЗапросаСрезПоследних";
	
	Запрос.УстановитьПараметр("Запрос", 		ДокументЗапрос);
	Запрос.УстановитьПараметр("ТекущаяДата", 	ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Регресс;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдресТабличногоДокументаНаСервере(ПараметрКоманды, ТипДокумента, ТекущийПользователь, БазаDS, Директор = "") Экспорт
	
	МассивНомеров = "";
	МассивАдресов = Новый Массив;
	
	Для Каждого ЭлементМассива Из ПараметрКоманды Цикл
		//++ Юкаев Роман 20180719 (// задача AN-119
		//МассивНомеров = МассивНомеров + ЭлементМассива.Номер + ";";
		МассивНомеров = МассивНомеров + Строка(ЭлементМассива.УникальныйИдентификатор()) + ";";
		//-- Юкаев Роман 20180719 )
	КонецЦикла;
	
	// Получение данных УПН...
	ПроксиСервер 		= Неопределено;
	ИмяСервиса 			= "PrintDoc";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, БазаDS, ИмяСервиса); 
	Результат 			= ПроксиСервер.GetData(ТипДокумента, МассивНомеров, ТекущийПользователь, Директор); //++ Юкаев Роман 20180718 //AN-81
	//Результат 			= ПроксиСервер.GetData(ТипДокумента, МассивНомеров, ТекущийПользователь);
	СтруктураДанных 	= СериализаторXDTO.ПрочитатьXDTO(Результат);	
	МассивПечатныхФорм	= СтруктураДанных.МассивПечатныхФорм;
	ТекстОшибки			= СтруктураДанных.ТекстОшибки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Сообщить("*** Ошибка по причине: " + ТекстОшибки);
		Возврат МассивАдресов;
	КонецЕсли;
	
	Если МассивПечатныхФорм.Количество() = 0 Тогда
		Сообщить("*** Нет данных для печати.");
		Возврат МассивАдресов;
	КонецЕсли;
	
	Счетчик 	  = 1;
	МассивАдресов = Новый Массив;
	
	Для каждого ЭлементМассива Из МассивПечатныхФорм Цикл
		
		ТабДок = ЭлементМассива;
		
		АдресФайла = КаталогВременныхФайлов();
		
		ТабДок.Записать(АдресФайла + "\temp_doc" + Строка(Счетчик) + ".mxl");
		
		ТабДок = Новый ТабличныйДокумент; 
		ТабДок.Прочитать(АдресФайла + "\temp_doc" + Строка(Счетчик) + ".mxl");
		
		АдресТД = ПоместитьВоВременноеХранилище(ТабДок);
		МассивАдресов.Добавить(АдресТД);
		
		Счетчик = Счетчик + 1;
			
	КонецЦикла;
		
	Возврат МассивАдресов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьТаблицуЗначений(мТаблицаЗначений, МаркетинговаяКомпания = Ложь)
	
	Если МаркетинговаяКомпания Тогда
		
		лТаблицаЗначений = Новый ТаблицаЗначений;
		лТаблицаЗначений.Колонки.Добавить("МаркетинговаяКомпания");
		лТаблицаЗначений.Колонки.Добавить("ОтборПоМаркетинговойКомпании");
		лТаблицаЗначений.Колонки.Добавить("Скидка");
		//EXTCODE Шумилин Сергей 24.04.2018 {{ --->
		лТаблицаЗначений.Колонки.Добавить("ОбъектСтроительства");
		//EXTCODE Шумилин Сергей 24.04.2018 <--- }} 
		
		Для Каждого СтрокаТЗ из мТаблицаЗначений Цикл
			
			НоваяСтрока			= лТаблицаЗначений.Добавить();
			
			НоваяСтрока.МаркетинговаяКомпания			= СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.МаркетинговыеКомпании"), 	СтрокаТЗ.МаркетинговаяКомпания);
			НоваяСтрока.ОтборПоМаркетинговойКомпании 	= СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.Отборы"), 					СтрокаТЗ.ЗначениеОтбора);
			НоваяСтрока.Скидка 							= ?(СтрДлина(СтрокаТЗ.Скидка) = 36, СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.ТипыСкидок"), СтрокаТЗ.Скидка), СтрокаТЗ.Скидка);
			//EXTCODE Шумилин Сергей 24.04.2018 {{ --->
			НоваяСтрока.ОбъектСтроительства				= СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.ГруппыОбъектовСтроительства"), СтрокаТЗ.ОбъектСтроительства);
			//EXTCODE Шумилин Сергей 24.04.2018 <--- }} 
			
		КонецЦикла;

	Иначе
		
		лТаблицаЗначений = Новый ТаблицаЗначений;
		лТаблицаЗначений.Колонки.Добавить("УсловияОплаты");
		лТаблицаЗначений.Колонки.Добавить("Ипотека"); //Одноименный реквизит элемента справочника "Условия оплаты"
		лТаблицаЗначений.Колонки.Добавить("СубсидированнаяСтавка");
		лТаблицаЗначений.Колонки.Добавить("ВидыУсловийОплаты");
		лТаблицаЗначений.Колонки.Добавить("СОдобрением");
		лТаблицаЗначений.Колонки.Добавить("ГруппаБанков");
		лТаблицаЗначений.Колонки.Добавить("Отбор");
		лТаблицаЗначений.Колонки.Добавить("ТиповыеПараметры");
		
		Для Каждого СтрокаТЗ из мТаблицаЗначений Цикл
			
			НоваяСтрока 					= лТаблицаЗначений.Добавить();
			
			НоваяСтрока.ВидыУсловийОплаты 		= СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.ВидыУсловийОплаты"), 	СтрокаТЗ.ВидУсловияОплаты);
			НоваяСтрока.Отбор 					= СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.Отборы"), 				СтрокаТЗ.Отбор);
			ГруппаБанков                        = СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.ГруппыБанков"),		СтрокаТЗ.ГруппаБанков);
			НоваяСтрока.ГруппаБанков            = ГруппаБанков;
			НоваяСтрока.СОдобрением				= ?(ЗначениеЗаполнено(ГруппаБанков), Истина, Ложь);
			НоваяСтрока.УсловияОплаты			= ?(ЗначениеЗаполнено(НоваяСтрока.ВидыУсловийОплаты), 	НоваяСтрока.ВидыУсловийОплаты.Владелец, 															Справочники.УсловияОплаты.ПустаяСсылка());
			НоваяСтрока.СубсидированнаяСтавка	= ?(ЗначениеЗаполнено(НоваяСтрока.ВидыУсловийОплаты), 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидыУсловийОплаты,"СубсидированнаяСтавка"), 	Ложь);
			НоваяСтрока.Ипотека					= ?(ЗначениеЗаполнено(НоваяСтрока.УсловияОплаты), 		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.УсловияОплаты,"Ипотека"), 					Ложь);
			Если СтрокаТЗ.ПараметрыУОВУО.Свойство("Скидка") Тогда
				СтрокаТЗ.ПараметрыУОВУО.Скидка = ?(СтрДлина(СтрокаТЗ.ПараметрыУОВУО.Скидка) = 36, XMLЗначение(Тип("СправочникСсылка.ТипыСкидок"), СтрокаТЗ.ПараметрыУОВУО.Скидка), Справочники.ТипыСкидок.ПустаяСсылка());
			КонецЕсли;	
			Если СтрокаТЗ.ПараметрыУОВУО.Свойство("МинимальныйОбъемСобственныхСредств") Тогда
				СтрокаТЗ.ПараметрыУОВУО.МинимальныйОбъемСобственныхСредств = ?(СтрДлина(СтрокаТЗ.ПараметрыУОВУО.МинимальныйОбъемСобственныхСредств) = 36, XMLЗначение(Тип("СправочникСсылка.МинимальныйОбъемСредств"), СтрокаТЗ.ПараметрыУОВУО.МинимальныйОбъемСобственныхСредств), Справочники.МинимальныйОбъемСредств.ПустаяСсылка());
			КонецЕсли;
			НоваяСтрока.ТиповыеПараметры 		= СтрокаТЗ.ПараметрыУОВУО;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат лТаблицаЗначений;
	
КонецФункции

Процедура ЗаполнитьТаблицуСоответсвийПараметровУсловийОплат(Таблица)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыУсловийОплаты.Ссылка КАК Характеристика,
	|	ПараметрыУсловийОплаты.ИмяПараметраВАлгоритме КАК ИмяПараметраВАлгоритме
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыУсловийОплаты КАК ПараметрыУсловийОплаты
	|ГДЕ
	|	НЕ ПараметрыУсловийОплаты.ПометкаУдаления";
	
	Таблица.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ПреобразоватьТЗПараметров(ТЗ)
	ТЗВозврата = Новый ТаблицаЗначений;
	ТЗВозврата.Колонки.Добавить("Параметр");
	ТЗВозврата.Колонки.Добавить("Значение");
	ТЗВозврата.Колонки.Добавить("МаркетинговаяКампания");
	Для Каждого Стр из ТЗ Цикл
		нСтр = ТЗВозврата.Добавить();
		//Если Стр.Параметр = "НормативныйСрокСделки" Тогда
		//	нСтр.Параметр = ПланыВидовХарактеристик.ПараметрыУсловийОплаты.НормативныйCрокCделки;
		//Иначе
			нСтр.Параметр = ПланыВидовХарактеристик.ПараметрыУсловийОплаты.НайтиПоРеквизиту("ИмяПараметраВАлгоритме", Стр.Параметр);//СериализаторXDTO.XMLЗначение(Тип("ПланВидовХарактеристикСсылка.ПараметрыУсловийОплаты"), Стр.Параметр);
		//КонецЕсли;				
		Если Стр.ТипЗнч = "Неопределено" Тогда
			нСтр.Значение = Неопределено;
		Иначе
			Если Стр.Параметр = "МинимальныйОбъемСобственныхСредств" Тогда
				нСтр.Значение = ?(СтрДлина(нСтр.Значение) = 36, XMLЗначение(Тип("СправочникСсылка.МинимальныйОбъемСредств"), нСтр.Значени), Справочники.МинимальныйОбъемСредств.ПустаяСсылка());
			КонецЕсли;
			нСтр.Значение = СериализаторXDTO.XMLЗначение(Тип(Стр.ТипЗнч), Стр.Значение);
		КонецЕсли;
		//нСтр.Значение = СериализаторXDTO.XMLЗначение(Тип(Стр.ТипЗнч), Стр.Значение);
		нСтр.МаркетинговаяКампания = СериализаторXDTO.XMLЗначение(Тип("СправочникСсылка.МаркетинговыеКомпании"), Стр.МаркетинговаяКампания);
	КонецЦикла;	
	Возврат ТЗВозврата;
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

#КонецОбласти

#КонецЕсли