
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		Ответственный    = Пользователи.ТекущийПользователь();
		Автор            = Пользователи.ТекущийПользователь();		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = ОбъектНедвижимостиНеСвободен();	
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В заявке указан объект недвижимости, у которого статус отличен от ""Свободен""!");		
		КонецЕсли;	
		//<804688>, Басаргин (19.04.2018) {
		ОбъектНедвижимостиНеРеализуем(Отказ);
		//<804688> }
		
		//++ Юкаев Роман 20180629 (//задача AN-61
		СписокФизЛицДляПроверки = Новый Массив;
		Для Каждого Клиент Из Дольщики Цикл
			Если Клиент.Клиент.ТипКлиента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СписокФизЛицДляПроверки.Добавить(Клиент.Клиент);			
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФизЛицДляПроверки.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДокументыФизическихЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
				|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
				|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
				|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан
				|ИЗ
				|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Период, ФизЛицо В (&СписокКлиентов)) КАК ДокументыФизическихЛицСрезПоследних";
			
			Запрос.УстановитьПараметр("Период", Дата);
			Запрос.УстановитьПараметр("СписокКлиентов", СписокФизЛицДляПроверки);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Сообщить("У клиентов (физ.лица) сделки не заполнены паспортные данные, проведение невозможно!");
				Отказ = Истина;
			Иначе
				ТекстСообщения = "По клиенту #Клиент# некорректно заполнены паспортные данные, проверьте правильность внесенных сведений.";
				Выгрузка = Результат.Выгрузить();
				Для Каждого Клиент Из СписокФизЛицДляПроверки Цикл
					НайденныеСтроки = Выгрузка.НайтиСтроки(Новый Структура("ФизЛицо", Клиент));
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						ТекстПоКлиенту = СтрЗаменить(ТекстСообщения, "#Клиент#", Строка(Клиент));
						Сообщить(ТекстПоКлиенту);
						Отказ = Истина;
					Иначе
						Для Каждого Стр Из НайденныеСтроки Цикл
							Если Стр.Номер = "" Или Стр.ДатаВыдачи = Дата(1,1,1) Или Стр.КемВыдан = "" Тогда
								ТекстПоКлиенту = СтрЗаменить(ТекстСообщения, "#Клиент#", Строка(Клиент));
								Сообщить(ТекстПоКлиенту);
								Отказ = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//-- Юкаев Роман 20180629 )
		
		//<843224>, Басаргин (09.07.2018) {
		Если НЕ Отказ Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Клиенты.Ссылка КАК Ссылка,
			|	Клиенты.Представление КАК Представление
			|ИЗ
			|	Справочник.Клиенты КАК Клиенты
			|ГДЕ
			|	Клиенты.Ссылка В(&СписокКлиентов)
			|	И Клиенты.ТипКлиента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
			|	И Клиенты.ИНН = """"";
			
			Запрос.УстановитьПараметр("СписокКлиентов", Дольщики.Выгрузить().ВыгрузитьКолонку("Клиент"));
			
			РезультатЗапроса = Запрос.Выполнить();		
			Если НЕ РезультатЗапроса.Пустой() Тогда		
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НайденнаяСтрока = Дольщики.Найти(ВыборкаДетальныеЗаписи.Ссылка, "Клиент");
					Если НЕ НайденнаяСтрока = Неопределено Тогда 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено ИНН у Юр. лица " + ВыборкаДетальныеЗаписи.Представление, Ссылка, "Дольщики[" + (НайденнаяСтрока.НомерСтроки - 1) + "].Клиент", "Объект", Отказ);			
					КонецЕсли;				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//<843224> }
		
	КонецЕсли;
	
	//EXTCODE Шумилин Сергей 24.04.2018 {{ ---> 807357
	Если Не ПометкаУдаления И Не РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ВыполнитьПроверкуОстаткаПоКоличествуОНПоМК(Отказ);
	КонецЕсли;
	//EXTCODE Шумилин Сергей 24.04.2018 <--- }} 
	
	//++ Юкаев Роман 20180718 (//AN-93
	Если ПометкаУдаления Тогда
		ОтменитьДвиженияПоДополнительнымРегистрам();
	Иначе
		СформироватьДвиженияПоДополнительнымРегистрам();
	КонецЕсли;
	//-- Юкаев Роман 20180718 )
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
		CRMРаботаСЗаданиямиСервер.СформироватьЗаписиПоСтатусуСделки(Ссылка, Дата, "Оформление");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	//++ Юкаев Роман 20180613 (//
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Запрос") Тогда
		ДокументОснование = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		РеквизитыИсточника	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Проект,Клиент,Участники");
		Проект 				= РеквизитыИсточника.Проект;
		Если ЗначениеЗаполнено(РеквизитыИсточника.Клиент) Тогда
			
			НоваяСтрока 			= Дольщики.Добавить();
			НоваяСтрока.Клиент 		= РеквизитыИсточника.Клиент;
			НоваяСтрока.Условный	= Истина;
			НоваяСтрока.Реальный	= Истина;
			
			НоваяСтрока.ВнесеныДанныеОДокументеУдостоверяющемЛичность = Справочники.Клиенты.ЕстьДокументУдостоверяющийЛичность(РеквизитыИсточника.Клиент);
		КонецЕсли;
		
		Участники = РеквизитыИсточника.Участники.Выгрузить();
		Для каждого СтрокаУчастники Из Участники Цикл
			
			Если СтрокаУчастники.Основной Тогда
				Продолжить;		
			КонецЕсли;
			
			НоваяСтрока 	   = Дольщики.Добавить();
			НоваяСтрока.Клиент = СтрокаУчастники.Клиент;
			
			НоваяСтрока.ВнесеныДанныеОДокументеУдостоверяющемЛичность = Справочники.Клиенты.ЕстьДокументУдостоверяющийЛичность(СтрокаУчастники.Клиент);
		КонецЦикла;
	КонецЕсли;
	//-- Юкаев Роман 20180613 )
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
		
    Реквизиты = ЭтотОбъект.Метаданные().Реквизиты;
	
    Для Каждого Реквизит Из Реквизиты Цикл
        Если Реквизит.Имя = "ДокументОснование" 
		 ИЛИ Реквизит.Имя = "ВидПрава"
		 ИЛИ Реквизит.Имя = "Проект" 
		 ИЛИ Реквизит.Имя = "Валюта" Тогда 
            Продолжить;
        КонецЕсли;    
        ЭтотОбъект[Реквизит.Имя] = "";
	КонецЦикла;
	
	ТабличныеЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти;

    Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		//++ Юкаев Роман 20180613 (//задача 832145
		//Если ТабличнаяЧасть.Имя = "ОбъектыНедвижимости" 
		// ИЛИ ТабличнаяЧасть.Имя = "Дольщики" Тогда
		Если ТабличнаяЧасть.Имя = "Дольщики" Тогда
		//-- Юкаев Роман 20180613 )
            Продолжить;
        КонецЕсли;    
        ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить();
	КонецЦикла;
	
	Ответственный    = Пользователи.ТекущийПользователь();
	Автор            = Пользователи.ТекущийПользователь();	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвиженияПоРегиструСтатусовОбъектовНедвижимости();
	
	//++ Юкаев Роман 20171214 ( //
	//СформироватьДвиженияПоДополнительнымРегистрам();
	//-- Юкаев Роман 20171214 )

	//++ Юкаев Роман 20180122 ( //
	ИпотекаСервер.ОбновитьСтатусВРегистреИпотечныйСтатусКлиента(Ссылка, ДокументОснование,,,, Истина);
	//-- Юкаев Роман 20180122 )
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//++ Юкаев Роман 20171218 ( //Задача 753508/2
	ПроверитьДольщиковВДокументеСЗапросом(Отказ);	
	//-- Юкаев Роман 20171218 )
	
	//++ Юкаев Роман 20171213 ( //Задача 749063/3
	Если Дольщики.Итог("СуммаДоли") <> ГрафикПлатежей.Итог("СуммаПлатежа") Тогда
		Отказ = Истина;
		Сообщить("Суммы долей и графика платежей не совпадают, необходимо заново построить график платежей!");
	КонецЕсли;
	
	ТаблицаДольщиковСОшибкой = ПроверкаТЧДольщиков();
	Если ТаблицаДольщиковСОшибкой <> Неопределено Тогда
		Отказ = Истина;
		Для Каждого СтрокаТ Из ТаблицаДольщиковСОшибкой Цикл
			Сообщить("У " + СокрЛП(СтрокаТ.Дольщик.Наименование) + " не установлены галочки ""У"" или ""Р"", необходимо установить хотя бы одну галку!");
		КонецЦикла;
	КонецЕсли;
	//-- Юкаев Роман 20171213 )	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.ОсновнойТелефон = """"
	|	И Клиенты.Ссылка В(&СписокКлиентов)";
	Запрос.УстановитьПараметр("СписокКлиентов", Дольщики.ВыгрузитьКолонку("Клиент"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Отказ = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НайденнаяСтрока = Дольщики.Найти(Выборка.Ссылка);
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "У клиента: """ + Строка(Выборка.Ссылка) + """ не указан основной телефон!";
			Сообщение.Поле 	= "Покупатель";			
			
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Сообщение.Поле = "Дольщики[" + Строка(НайденнаяСтрока.НомерСтроки - 1) + "].Клиент";
				Сообщение.УстановитьДанные(ЭтотОбъект);	
			
			КонецЕсли;
			
			Сообщение.Сообщить();			
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если Дольщики.Количество() = 0 Тогда
		//++ Юкаев Роман 20180201 (
		Сообщить("Не указаны дольщики в документе");
		Отказ = Истина;
		//-- Юкаев Роман 20180201 )
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = Дольщики.Найти(Истина, "Условный");
	Если НайденнаяСтрока = Неопределено Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "В дольщиках должен быть хотя бы один клиент с флагом ""Условный""!";
		Сообщение.Поле = "Дольщики[" + Строка(0) + "].Условный";
		Сообщение.УстановитьДанные(ЭтотОбъект);	
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	//++ Юкаев Роман 20180201 ( //766845
	ПроверкаСтатусаОН(Отказ);
	//-- Юкаев Роман 20180201 )
	
	//++ Юкаев Роман 20180710 (//AN-89
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Клиент КАК Клиент,
		|	КлиентыКонтактнаяИнформация.Email КАК Почта,
		|	Клиенты.ИНН КАК ИНН,
		|	Клиенты.ТипКлиента КАК ТипКлиента
		|ИЗ
		|	РегистрСведений.КлиентыКонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Клиенты КАК Клиенты
		|		ПО КлиентыКонтактнаяИнформация.Клиент = Клиенты.Ссылка
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Клиент В(&СписокКлиентов)";
	
	СписокКлиентов = Новый Массив;
	Для Каждого СтрокаДольщик Из Дольщики Цикл
		Если СтрокаДольщик.Клиент.ТипКлиента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			СписокКлиентов.Добавить(СтрокаДольщик.Клиент);
		Иначе
			Если СтрокаДольщик.Клиент.ИНН = "" Тогда
				Сообщить("У клиента " + Строка(СтрокаДольщик.Клиент) + " не указан ИНН");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокКлиентов.Количество() <> 0 Тогда
		Запрос.УстановитьПараметр("СписокКлиентов", СписокКлиентов);
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Отказ = Истина;
			Сообщить("У клиентов не заполнен e-mail проверьте правильность заполнения");
		Иначе
			Выгрузка = Результат.Выгрузить();
			Для Каждого Клиент Из СписокКлиентов Цикл
				
				НайденныеСтроки = Выгрузка.НайтиСтроки(Новый Структура("Клиент", Клиент));
				Если НайденныеСтроки.Количество() = 0 Тогда
					Отказ = Истина;
					Сообщить("У " + Строка(Клиент) + " не заполнен e-mail проверьте правильность заполнения");
				Иначе
					Для Каждого СтрокаАдрес Из НайденныеСтроки Цикл
						ЕстьСобакаВАдресе = СтрНайти(СтрокаАдрес.Почта, "@");
						Если ЕстьСобакаВАдресе = 0 Тогда
							Отказ = Истина;
							Сообщить("У " + Строка(Клиент) + " не заполнен e-mail проверьте правильность заполнения");
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	//-- Юкаев Роман 20180710 )
	
КонецПроцедуры

//Процедура ОбработкаУдаленияПроведения(Отказ)
//	
//	CRMУправлениеОбъектамиНедвижимостиСервер.УдалитьДвиженияПоРегиструСтатусовОбъектовНедвижимости(Ссылка);	
//	
//КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбъектНедвижимостиНеРеализуем(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыНедвижимости.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыНедвижимости КАК ОбъектыНедвижимости
	|ГДЕ
	|	ОбъектыНедвижимости.Ссылка В(&СписокОбъектовНедвижимости)
	|	И НЕ ОбъектыНедвижимости.Реализация
	|	И НЕ ОбъектыНедвижимости.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("СписокОбъектовНедвижимости", ОбъектыНедвижимости.ВыгрузитьКолонку("ОбъектНедвижимости"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденнаяСтрока = ОбъектыНедвижимости.Найти(Выборка.Ссылка, "ОбъектНедвижимости");
		Если НЕ НайденнаяСтрока = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объект не реализуем!", Ссылка, "ОбъектыНедвижимости[" + (НайденнаяСтрока.НомерСтроки - 1) + "].ОбъектНедвижимости", "Объект", Отказ);			
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

Функция ОбъектНедвижимостиНеСвободен()

	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус КАК Статус,
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних(
	|			,
	|			Регистратор <> &Регистратор
	|				И ОбъектНедвижимости В (&СписокОбъектовНедвижимости)) КАК СтатусыОбъектовНедвижимостиСрезПоследних
	|ГДЕ
	|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Свободен)";
	Запрос.УстановитьПараметр("Регистратор", 				Ссылка);
	Запрос.УстановитьПараметр("СписокОбъектовНедвижимости", ОбъектыНедвижимости.ВыгрузитьКолонку("ОбъектНедвижимости"));
	Запрос.УстановитьПараметр("Период",						Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		СтруктураПоиска 			= Новый Структура("ОбъектНедвижимости");
		Для Каждого СтрокаТЧ ИЗ ОбъектыНедвижимости Цикл
			СтруктураПоиска.ОбъектНедвижимости = СтрокаТЧ.ОбъектНедвижимости;
			Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
				//Если бронирование было по текущему запросу, то такая ситуация нормальна
				Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.Бронирование") Тогда
					ДокументЗапросБронирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Регистратор, "ДокументЗапрос");				
					Если ДокументЗапросБронирования = ДокументОснование Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Результат = Истина;	
				
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ()

Процедура СформироватьДвиженияПоРегиструСтатусовОбъектовНедвижимости()
	
	ТекущийСтатус = CRMУправлениеОбъектамиНедвижимостиСервер.ПолучитьТекущийСтатусЗаявкиНаСделку(Ссылка);
	
	Если ТекущийСтатус = Перечисления.СтатусыСделки.Оформление Тогда
		
		//НаборЗаписей = РегистрыСведений.СтатусыОбъектовНедвижимости.СоздатьНаборЗаписей();
		
		Для Каждого СтрокаТЧ Из ОбъектыНедвижимости Цикл
			
			//НаборЗаписей.Отбор.ОбъектНедвижимости.Установить(СтрокаТЧ.ОбъектНедвижимости);
			
			НоваяЗапись = Движения.СтатусыОбъектовНедвижимости.Добавить();
			
			НоваяЗапись.Период 				= Дата;
			НоваяЗапись.ОбъектНедвижимости 	= СтрокаТЧ.ОбъектНедвижимости;
			НоваяЗапись.ДокументРегистратор = Ссылка;
			НоваяЗапись.Статус				= Перечисления.СтатусыОбъектовНедвижимости.ВОформлении;		
		
		КонецЦикла;	
		
		Движения.СтатусыОбъектовНедвижимости.Записывать = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

//++ Юкаев Роман 20180716 ( //AN-93
Процедура СформироватьДвиженияПоДополнительнымРегистрам()
	
	//ДольщикиЗаявкиНаСделку
	СписокДольщиков = Дольщики.Выгрузить(,"Клиент");
	СписокДольщиков.Свернуть("Клиент");
	
	Для Каждого Дольщик Из СписокДольщиков Цикл
		
		СтрокиПоДольщику = Дольщики.НайтиСтроки(Новый Структура("Клиент", Дольщик.Клиент));
		
		НЛ = Ложь;
		Реальный = Ложь;
		Условный = Ложь;
		
		Для Каждого СтрДольщик Из СтрокиПоДольщику Цикл
			НЛ 		 = ?(СтрДольщик.Несовершеннолетний, Истина, НЛ);
			Реальный = ?(СтрДольщик.Реальный, Истина, Реальный);
			Условный   = ?(СтрДольщик.Условный, Истина, Условный);
		КонецЦикла;
				
		НЗ = РегистрыСведений.ДольщикиЗаявкиНаСделку.СоздатьНаборЗаписей();
		
		НЗ.Отбор.Заявка.Установить(Ссылка);
		НЗ.Отбор.Дольщик.Установить(Дольщик.Клиент);
		
		НЗ.Прочитать();
		НЗ.Очистить();
		
		Запись = НЗ.Добавить();
		Запись.Заявка   = Ссылка;
		Запись.Дольщик 	= Дольщик.Клиент;
		Запись.НЛ 		= НЛ;
		Запись.Реальный = Реальный;
		Запись.Условный = Условный;
		
		НЗ.Записать();
	КонецЦикла;
	
	//ЗаявкиНаСделку
	Для Каждого СтрокаОН Из ОбъектыНедвижимости Цикл
	
		НЗ = РегистрыСведений.ЗаявкиНаСделку.СоздатьНаборЗаписей();
		
		НЗ.Отбор.Заявка.Установить(Ссылка);
		НЗ.Отбор.ОбъектСтроительства.Установить(СтрокаОН.ОбъектНедвижимости.Владелец);
		НЗ.Отбор.ОбъектНедвижимости.Установить(СтрокаОН.ОбъектНедвижимости);
		
		НЗ.Прочитать();
		НЗ.Очистить();
		
		Запись = НЗ.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, ЭтотОбъект);
		
		Запись.Заявка = Ссылка;
		Запись.Запрос = ДокументОснование;
		Запись.ОбъектНедвижимости = СтрокаОН.ОбъектНедвижимости;
		Запись.ОбъектСтроительства = СтрокаОН.ОбъектНедвижимости.Владелец;
		
		НЗ.Записать();
	КонецЦикла;
	
	////ДольщикиЗаявкиНаСделку
	//Движения.ДольщикиЗаявкиНаСделку.Записывать = Истина;
	//
	//Для Каждого СтрокаДольщик Из Дольщики Цикл
	//	НоваяЗапись = Движения.ДольщикиЗаявкиНаСделку.Добавить();
	//	
	//	НоваяЗапись.Дольщик  = СтрокаДольщик.Клиент;
	//	НоваяЗапись.НЛ 		 = СтрокаДольщик.Несовершеннолетний;
	//	НоваяЗапись.Реальный = СтрокаДольщик.Реальный;
	//	НоваяЗапись.Условный = СтрокаДольщик.Условный;
	//	НоваяЗапись.Период 	 = Дата;
	//	НоваяЗапись.Заявка   = Ссылка;
	//КонецЦикла;
	//
	////ЗаявкиНаСделку
	//Движения.ЗаявкиНаСделку.Записывать = Истина;
	//
	//Для Каждого СтрокаОН Из ОбъектыНедвижимости Цикл
	//	НоваяЗапись = Движения.ЗаявкиНаСделку.Добавить();
	//	
	//	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЭтотОбъект);
	//	
	//	НоваяЗапись.Запрос = ДокументОснование;
	//	НоваяЗапись.Период = Дата;
	//	НоваяЗапись.ОбъектНедвижимости = СтрокаОН.ОбъектНедвижимости;
	//	НоваяЗапись.ОбъектСтроительства = СтрокаОН.ОбъектНедвижимости.Владелец;
	//	НоваяЗапись.Заявка = Ссылка;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьДвиженияПоДополнительнымРегистрам()
	
	НЗ = РегистрыСведений.ДольщикиЗаявкиНаСделку.СоздатьНаборЗаписей();
	НЗ.Отбор.Заявка.Установить(Ссылка);
	
	НЗ.Прочитать();
	НЗ.Очистить();
	НЗ.Записать();
	
	НЗ = РегистрыСведений.ЗаявкиНаСделку.СоздатьНаборЗаписей();
	НЗ.Отбор.Заявка.Установить(Ссылка);
	
	НЗ.Прочитать();
	НЗ.Очистить();
	НЗ.Записать();
	
КонецПроцедуры
//-- Юкаев Роман 20171214 )

//++ Юкаев Роман 20171213 ( //Задача 749063/3
Функция ПроверкаТЧДольщиков()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТД.Условный КАК Условный,
	               |	ТД.Реальный КАК Реальный,
	               |	ТД.Клиент КАК Дольщик
	               |ПОМЕСТИТЬ ВТ_Проверка
	               |ИЗ
	               |	&ТД КАК ТД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Проверка.Дольщик КАК Дольщик
	               |ИЗ
	               |	ВТ_Проверка КАК ВТ_Проверка
	               |ГДЕ
	               |	НЕ ВТ_Проверка.Условный
	               |			И НЕ ВТ_Проверка.Реальный";
	Запрос.Параметры.Вставить("ТД", Дольщики);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выгрузка = Результат.Выгрузить();
		Возврат Выгрузка;
	КонецЕсли;

КонецФункции // ПроверкаТЧДольщиков()
//-- Юкаев Роман 20171213 )

//++ Юкаев Роман 20171218 ( //Задача 753508/2
Процедура ПроверитьДольщиковВДокументеСЗапросом(Отказ)
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КД.Клиент КАК Клиент
		               |ПОМЕСТИТЬ КД
		               |ИЗ
		               |	&КлиентыДокумент КАК КД
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	КЗ.Клиент КАК Клиент,
		               |	КЗ.Брокер КАК Брокер
		               |ПОМЕСТИТЬ КЗ
		               |ИЗ
		               |	&КлиентыЗапрос КАК КЗ
		               |ГДЕ
		               |	НЕ КЗ.Брокер
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КД.Клиент КАК Клиент
		               |ИЗ
		               |	КД КАК КД
		               |		ЛЕВОЕ СОЕДИНЕНИЕ КЗ КАК КЗ
		               |		ПО КД.Клиент = КЗ.Клиент
		               |ГДЕ
		               |	КЗ.Клиент ЕСТЬ NULL";
		Запрос.Параметры.Вставить("КлиентыДокумент", Дольщики.Выгрузить(,"Клиент"));
		Запрос.Параметры.Вставить("КлиентыЗапрос", ДокументОснование.Участники.Выгрузить(,"Клиент,Брокер"));
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		Иначе
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ДокОб = ДокументОснование.ПолучитьОбъект();
				НоваяСтрока = ДокОб.Участники.Добавить();
				НоваяСтрока.Клиент = Выборка.Клиент;
				НоваяСтрока.ОсновнойТелефон = Выборка.Клиент.ОсновнойТелефон;
				НоваяСтрока.Брокер = Выборка.Клиент.Брокер;
				НоваяСтрока.ВИП = Выборка.Клиент.ВИП;
				Попытка
					ДокОб.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить("Не удалось добавить Клиентов в Запрос! " + ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- Юкаев Роман 20171218 )

//++ Юкаев Роман 20180201 ( //766845
Процедура ПроверкаСтатусаОН(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Квартирограмма.ОбъектНедвижимости КАК ОбъектНедвижимости
		|ИЗ
		|	РегистрСведений.Квартирограмма КАК Квартирограмма
		|ГДЕ
		|	Квартирограмма.ОбъектНедвижимости В(&ОбъектыНедвижимости)
		|	И (Квартирограмма.СтатусПула = ЗНАЧЕНИЕ(Перечисление.СтатусыПулов.Закрытие)
		|			ИЛИ Квартирограмма.Стоимость = 0)";
	
	Запрос.УстановитьПараметр("ОбъектыНедвижимости", ОбъектыНедвижимости.ВыгрузитьКолонку("ОбъектНедвижимости"));
	                              
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Сообщить("Объект недвижимости " + Строка(Выборка.ОбъектНедвижимости) + " из " + Строка(Выборка.ОбъектНедвижимости.Родитель) + " недоступен для продажи!");
			Отказ = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//-- Юкаев Роман 20180201)

//EXTCODE Шумилин Сергей 24.04.2018 {{ ---> 807357
Процедура ВыполнитьПроверкуОстаткаПоКоличествуОНПоМК(Отказ)

	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	//Проверим условия по МК - нужно ли вообще делать проверку
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркетинговыеКомпанииАналитикаУчетаУсловия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МаркетинговыеКомпанииАналитикаУчета.Условия КАК МаркетинговыеКомпанииАналитикаУчетаУсловия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаркетинговыеКомпанииАналитикаУчета КАК МаркетинговыеКомпанииАналитикаУчета
	|		ПО МаркетинговыеКомпанииАналитикаУчетаУсловия.Ссылка = МаркетинговыеКомпанииАналитикаУчета.Ссылка
	|ГДЕ
	|	НЕ МаркетинговыеКомпанииАналитикаУчета.ПометкаУдаления
	|	И МаркетинговыеКомпанииАналитикаУчетаУсловия.МаркетинговаяКомпания = &МаркетинговаяКомпания
	|	И МаркетинговыеКомпанииАналитикаУчетаУсловия.ГруппаОС = &ГруппаОС
	|	И МаркетинговыеКомпанииАналитикаУчетаУсловия.Отбор = &Отбор";
	Запрос.УстановитьПараметр("МаркетинговаяКомпания", 	МаркетинговаяКомпания);
	Запрос.УстановитьПараметр("ГруппаОС", 				ГруппаОС);
	Запрос.УстановитьПараметр("Отбор", 					ОтборМК);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		АналитикаУчётаМК = Выборка.Ссылка;
	КонецЕсли;
	
	//Получаем остаток из УПН
	ТекстЗапросаУНП = 
	"ВЫБРАТЬ
	|	ОстакиОНПоПродажамМКОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ОстаткиОНПоПродажамМК.Остатки(, АналитикаУчетаМК = &АналитикаУчетаМК) КАК ОстакиОНПоПродажамМКОстатки
	|ГДЕ
	|	ОстакиОНПоПродажамМКОстатки.КоличествоОстаток > 0";
	
	//МассивВходящихПараметров
	МассивВП = Новый Массив;
	
	ПроксиСервер 	= Неопределено;
	ИмяСервиса 		= "RandomQuery";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ПроектБазыДомостроителя"), ИмяСервиса);	
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("АналитикаУчетаМК", Новый ВыражениеКомпоновкиДанных("Результат = Справочники.МаркетинговыеКомпанииАналитикаУчета.ПолучитьСсылку(Новый УникальныйИдентификатор(""" + АналитикаУчётаМК.УникальныйИдентификатор() + """))"));	
	
	ФлагОшибки 	= Ложь;
	
	Попытка
		ДанныеXDTO = ПроксиСервер.ExecuteQuery(ТекстЗапросаУНП, СериализаторXDTO.ЗаписатьXDTO(ПараметрыЗапроса), 90, СериализаторXDTO.ЗаписатьXDTO(МассивВП));
		
		СтруктураВозврата = СериализаторXDTO.ПрочитатьXDTO(ДанныеXDTO);        
		Если НЕ СтруктураВозврата = Неопределено Тогда 
			ОписаниеОшибки     	= СтруктураВозврата.ТекстОшибки;
			ФлагОшибки        	= СтруктураВозврата.Ошибка;
		Иначе
			ФлагОшибки 	= Истина;
			Отказ 		= Истина;
		КонецЕсли;
		
	Исключение
		Результат 	= ОписаниеОшибки();
		ФлагОшибки 	= Истина;
	КонецПопытки;											
	
	Если ФлагОшибки Тогда
		
		ТекстСообщения = "Возникла ошибка при обработке выполнения произвольного запроса к базе УНП" + ?(ПустаяСтрока(ОписаниеОшибки), "", ": " + ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	Иначе
		
		Если Не ПустаяСтрока(СтруктураВозврата.РезультатЗапроса)Тогда
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXML.УстановитьСтроку(СтруктураВозврата.РезультатЗапроса);
			ХранилищеЗначенияТаблицаЗначений = ПрочитатьXML(ЧтениеXML,Тип("ХранилищеЗначения"));
			Если Не ХранилищеЗначенияТаблицаЗначений = Неопределено Тогда 
				РезультатЗапроса 	= ХранилищеЗначенияТаблицаЗначений.Получить();
				ВыборкаИзУПН 		= РезультатЗапроса.Выбрать();
				ВыборкаИзУПН.Следующий();
				КоличествоОстаток 	= ВыборкаИзУПН.КоличествоОстаток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Остатка по данной аналитике нет в УПН, всё уже продали
	Если КоличествоОстаток = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно провести документ: по """ + МаркетинговаяКомпания + """ - """ + ГруппаОС + """ - """ + ОтборМК + """ лимитированное количество квартир продано полностью!", ЭтотОбъект, "МаркетинговаяКомпания");
		Отказ = Истина;
		Возврат;
			
	КонецЕсли;
	
	//Если остаток есть, проверяем, есть ли согласовывающиеся документы в CRM
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ
	|	МаркетинговыеКомпанииАналитикаУчетаУсловия.МаркетинговаяКомпания КАК МаркетинговаяКомпания,
	|	МаркетинговыеКомпанииАналитикаУчетаУсловия.ГруппаОС КАК ГруппаОС,
	|	МаркетинговыеКомпанииАналитикаУчетаУсловия.Отбор КАК Отбор
	|ПОМЕСТИТЬ вт_СоставАналитикиМК
	|ИЗ
	|	Справочник.МаркетинговыеКомпанииАналитикаУчета.Условия КАК МаркетинговыеКомпанииАналитикаУчетаУсловия
	|ГДЕ
	|	МаркетинговыеКомпанииАналитикаУчетаУсловия.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаркетинговаяКомпания,
	|	ГруппаОС,
	|	Отбор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтатусыСделки.Период) КАК Период,
	|	СтатусыСделки.ЗаявкаНаСделку КАК ЗаявкаНаСделку
	|ПОМЕСТИТЬ вт_СрезСтатусовНаСегодня
	|ИЗ
	|	РегистрСведений.СтатусыСделки КАК СтатусыСделки
	|ГДЕ
	|	СтатусыСделки.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыСделки.ЗаявкаНаСделку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ЗаявкаНаСделку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ОстатокВУПН - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_СрезСтатусовНаСегодня.ЗаявкаНаСделку) КАК КоличествоОстаток
	|ИЗ
	|	вт_СрезСтатусовНаСегодня КАК вт_СрезСтатусовНаСегодня
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСделки КАК СтатусыСделки
	|		ПО вт_СрезСтатусовНаСегодня.Период = СтатусыСделки.Период
	|			И вт_СрезСтатусовНаСегодня.ЗаявкаНаСделку = СтатусыСделки.ЗаявкаНаСделку
	|ГДЕ
	|	СтатусыСделки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.СогласованиеЮриста), ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.СогласованиеИБ), ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.СогласованиеУПН), ЗНАЧЕНИЕ(Перечисление.СтатусыСделки.Оформление))
	|	И (СтатусыСделки.ЗаявкаНаСделку.МаркетинговаяКомпания, СтатусыСделки.ЗаявкаНаСделку.ГруппаОС, СтатусыСделки.ЗаявкаНаСделку.ОтборМК) В
	|			(ВЫБРАТЬ
	|				вт_СоставАналитикиМК.МаркетинговаяКомпания,
	|				вт_СоставАналитикиМК.ГруппаОС,
	|				вт_СоставАналитикиМК.Отбор
	|			ИЗ
	|				вт_СоставАналитикиМК КАК вт_СоставАналитикиМК)
	|	И вт_СрезСтатусовНаСегодня.ЗаявкаНаСделку <> &ЗаявкаНаСделку
	|
	|ИМЕЮЩИЕ
	|	&ОстатокВУПН - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вт_СрезСтатусовНаСегодня.ЗаявкаНаСделку) > 0";

	Запрос.УстановитьПараметр("Ссылка", 		АналитикаУчётаМК);
	Запрос.УстановитьПараметр("ЗаявкаНаСделку", Ссылка);
	Запрос.УстановитьПараметр("ПериодНачало", 	НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодКонец", 	КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ОстатокВУПН", 	КоличествоОстаток);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Невозможно провести документ: по """ + МаркетинговаяКомпания + """ - """ + ГруппаОС + """ - """ + ОтборМК + """ лимитированное количество квартир продано полностью!", ЭтотОбъект, "МаркетинговаяКомпания");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//EXTCODE Шумилин Сергей 24.04.2018 <--- }} 

#КонецОбласти


