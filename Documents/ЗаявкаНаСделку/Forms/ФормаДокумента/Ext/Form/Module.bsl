
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;	
	
	РедактированиеСрокаБронированиеВЗаявкеНаСделку = Пользователи.РолиДоступны("РедактированиеСрокаБронированиеВЗаявкеНаСделку");
	//++ Юкаев Роман 20180327 (//
	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.ДокументОснование.Пустая() Тогда
			НаличиеВзаимодействия = Ложь;
		Иначе
			НаличиеВзаимодействия = НаличиеВзаимодействияПоПереговорам(Объект.ДокументОснование);
		КонецЕсли;
		
		Если Не (РедактированиеСрокаБронированиеВЗаявкеНаСделку Или НаличиеВзаимодействия) Тогда
			Отказ = Истина;
			Сообщить("Не создана встреча за текущий день, заведение сделки невозможно!
					|Для создания встречи проведите запрос и заполните окно ""Результат переговоров""!");
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("ОбъектНедвижимости") И ЗначениеЗаполнено(Параметры.ОбъектНедвижимости) Тогда
			НоваяСтрока = Объект.ОбъектыНедвижимости.Добавить();
			НоваяСтрока.ОбъектНедвижимости = Параметры.ОбъектНедвижимости;	
			ЗаполнитьДанныеПоОбъектуНедвижимостиВСтроке(НоваяСтрока);	
			Объект.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ОбъектНедвижимости, "Валюта");
		КонецЕсли;
		
		//++ Юкаев Роман 20180613 (//
		Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
			Объект.ДокументОснование = Параметры.Основание;
		КонецЕсли;
		//-- Юкаев Роман 20180613 )
		
		СтатусСделки = Перечисления.СтатусыСделки.Оформление;
		
		Документы.ЗаявкаНаСделку.ПолучитьДанныеПоУсловиямОплатыИВидамУсловий(Объект, ЭтотОбъект);
		РазрешитьДоступностьНастройкиГрафикаПлатежей();
	Иначе
		Если Не Объект.МаркетинговаяКомпания.Пустая() Тогда
			Элементы.МаркетинговаяКомпания.СписокВыбора.Добавить(Объект.МаркетинговаяКомпания);
		КонецЕсли;
	КонецЕсли;
	
	ВидПраваДляНескольких.Добавить(Перечисления.ВидыПрав.ОбщаяДолеваяСобственность);
	ВидПраваДляНескольких.Добавить(Перечисления.ВидыПрав.ОбщаяСовместнаяСобственность);
	
	ВидПраваДляОдного = Перечисления.ВидыПрав.Собственность;
	
	//Если Объект.Ссылка.Пустая()
	//		И НЕ РедактированиеСрокаБронированиеВЗаявкеНаСделку
	//		И НЕ НаличиеВзаимодействияПоПереговорам(Объект.ДокументОснование) Тогда
	//	Отказ 			= Истина;
	//	Сообщение 		= Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не создана встреча за текущий день, заведение сделки невозможно! 
	//					  |Для создания встречи проведите запрос и заполните окно ""Результат переговоров""!";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Параметры.ОбъектНедвижимости) Тогда
	//	НоваяСтрока 					= Объект.ОбъектыНедвижимости.Добавить();
	//	НоваяСтрока.ОбъектНедвижимости 	= Параметры.ОбъектНедвижимости;	
	//	ЗаполнитьДанныеПоОбъектуНедвижимостиВСтроке(НоваяСтрока);	
	//	Объект.Валюта					= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ОбъектНедвижимости, "Валюта");
	//КонецЕсли;
	//
	//Если Объект.Ссылка.Пустая() Тогда
	//	СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.Оформление");
	//	Документы.ЗаявкаНаСделку.ПолучитьДанныеПоУсловиямОплатыИВидамУсловий(Объект, ЭтотОбъект);
	//	РазрешитьДоступностьНастройкиГрафикаПлатежей();
	//ИначеЕсли ЗначениеЗаполнено(Объект.МаркетинговаяКомпания) И Элементы.МаркетинговаяКомпания.СписокВыбора.НайтиПоЗначению(Объект.МаркетинговаяКомпания) = Неопределено Тогда
	//	Элементы.МаркетинговаяКомпания.СписокВыбора.Добавить(Объект.МаркетинговаяКомпания);
	//КонецЕсли;
	
	//ОбновитьВидимостьЭлементовФормыНаСервере();
	//-- Юкаев Роман 20180327 )
	
	Элементы.РазмерМатеринскогоКапитала.Видимость = Объект.ВидУсловияОплаты.МатКапитал;
	Элементы.РазмерСубсидий.Видимость 			  = Объект.ВидУсловияОплаты.Субсидии;	
	
	Элементы.СрокБронирования.Доступность = РедактированиеСрокаБронированиеВЗаявкеНаСделку;
	
	//<808472>, Басаргин (18.04.2018) {
	Элементы.Номер.Доступность = УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь());
	Элементы.Дата.Доступность = УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь());	
	//<808472> }
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов	
	
	////<852121>, Басаргин (30.10.2018) {
	//УправлениеВидимостьюДисконтнойКартыНаСервере(НЕ Параметры.Ключ.Пустая());
	////<852121> }
	
	//<890184>, Басаргин (21.11.2018) {
	УстановитьПризнакСделкиКН();
	ОбновитьВидимостьЭлементовФормыНаСервере();	
	//<890184> }	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПеречитатьСтатусыНаСервере();
	
	//<841731>, Басаргин (04.07.2018) {
	СтатусСделкиUPN = ПолучитьСтатусСделкиUPN(Объект.Ссылка);
	//<841731> }
	
	//<840014>, Басаргин (04.07.2018) {
	ЗаполнитьСтроительныйНомер();	
	//<840014> }
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаСделку) Тогда
	    Возврат;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПеречитатьСтатусыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьДоступностьКоманд();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МаркетинговаяКомпанияПриИзменении(Элемент) Экспорт
	
	МассивМаркетинговыхКомпаний = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийМК, "ОтборПоМаркетинговойКомпании", "МаркетинговаяКомпания", Объект.МаркетинговаяКомпания);
	Если МассивМаркетинговыхКомпаний.Количество() > 0 Тогда
		Объект.ОтборМК 	= МассивМаркетинговыхКомпаний[0];
	Иначе
		Объект.ОтборМК = ПредопределенноеЗначение("Справочник.Отборы.ПустаяСсылка");
	КонецЕсли;
	
	//EXTCODE Шумилин Сергей 24.04.2018 {{ ---> 807357
	МассивМаркетинговыхКомпаний = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийМК, "ОбъектСтроительства", "МаркетинговаяКомпания", Объект.МаркетинговаяКомпания);
	Если МассивМаркетинговыхКомпаний.Количество() > 0 Тогда
		Объект.ГруппаОС 	= МассивМаркетинговыхКомпаний[0];
	Иначе
		Объект.ГруппаОС = ПредопределенноеЗначение("Справочник.ГруппыОбъектовСтроительства.ПустаяСсылка");
	КонецЕсли;	
	//EXTCODE Шумилин Сергей 24.04.2018 <--- }} 	
	
	МассивМаркетинговыхКомпаний = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийМК, "Скидка", "МаркетинговаяКомпания", Объект.МаркетинговаяКомпания);	
	Если МассивМаркетинговыхКомпаний.Количество() > 0 Тогда
		Объект.Скидка = МассивМаркетинговыхКомпаний[0];
	Иначе
		Объект.Скидка = ПредопределенноеЗначение("Справочник.ТипыСкидок.ПустаяСсылка");
	КонецЕсли;
	ПересчитатьСкидкуНаКлиенте();
	РеквизитыМК = ВернутьЗначенияРеквизитовОбъект(Объект.МаркетинговаяКомпания, "ЗаполнятьАгентствоВДоговоре, ВыдачаСертификатов");
	Элементы.АгентствоНедвижимости.АвтоОтметкаНезаполненного = ?(РеквизитыМК.ЗаполнятьАгентствоВДоговоре= Неопределено, Ложь, РеквизитыМК.ЗаполнятьАгентствоВДоговоре);
	Элементы.АгентствоНедвижимости.ОтметкаНезаполненного = ?(РеквизитыМК.ЗаполнятьАгентствоВДоговоре= Неопределено, Ложь, РеквизитыМК.ЗаполнятьАгентствоВДоговоре);
	Элементы.ТипСертификата.Видимость = ?(РеквизитыМК.ВыдачаСертификатов = Неопределено, Ложь, РеквизитыМК.ВыдачаСертификатов);
	Элементы.ТипСертификата.АвтоОтметкаНезаполненного = ?(РеквизитыМК.ВыдачаСертификатов = Неопределено, Ложь, РеквизитыМК.ВыдачаСертификатов);
	Элементы.ТипСертификата.ОтметкаНезаполненного = ?(РеквизитыМК.ВыдачаСертификатов = Неопределено, Ложь, РеквизитыМК.ВыдачаСертификатов);
	РасчитатьРазмерСобственныхСредств(Элемент);
	
	////<852121>, Басаргин (30.10.2018) {
	//УправлениеВидимостьюДисконтнойКартыНаСервере();
	////<852121> }
	
	//<890184>, Басаргин (21.11.2018) {
	ОбновитьВидимостьЭлементовФормыНаСервере();		
	//<890184> }
		
КонецПроцедуры

&НаСервереБезКонтекста
ФУнкция ВернутьЗначенияРеквизитовОбъект(Ссылка, СписокРеквизитов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СписокРеквизитов);
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСкидкуНаКлиенте() Экспорт	
	
	СтоимостьСоСкидкой = 0;
	
	Для каждого СтрокаТЧ Из Объект.ОбъектыНедвижимости Цикл
	
		Скидка = РассчитатьСтоимостьОНСоСкидкойНаСервере(СтрокаТЧ.ОбъектНедвижимости, Объект.Скидка, СтрокаТЧ.Стоимость, СтрокаТЧ.Площадь);
		
		СтрокаТЧ.СтоимостьПоДоговору 	= СтрокаТЧ.Стоимость - Скидка;
		СтрокаТЧ.ЦенаЗаКвМетрПоДоговору = СтрокаТЧ.СтоимостьПоДоговору / ?(СтрокаТЧ.Площадь = 0, 1, СтрокаТЧ.Площадь);																		
		СтоимостьСоСкидкой 				= СтоимостьСоСкидкой + СтрокаТЧ.СтоимостьПоДоговору;
		
	КонецЦикла;																		
	Объект.СтоимостьСоСкидкой = СтоимостьСоСкидкой;
	РассчитатьДолиВсехДольщиков(Истина);//Не Объект.РучнойРежимКорректировкиДолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУсловияОплатыПриИзменении(Элемент) Экспорт
	
	МассивВидовУсловийОплат = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийУОиВУО, "Отбор", "ВидыУсловийОплаты", Объект.ВидУсловияОплаты);
	Если МассивВидовУсловийОплат.Количество() > 0 Тогда
		Объект.Отбор = МассивВидовУсловийОплат[0];
	Иначе
		Объект.Отбор = ПредопределенноеЗначение("Справочник.Отборы.ПустаяСсылка");
	КонецЕсли;
	
	ОчиститьДанныеПоМаркетинговойКомпании();
	ОбновитьДанныеТаблицыПараметров(Истина);
	ПересчитатьСкидкуНаКлиенте();
	РеквизитыВУО = ВернутьЗначенияРеквизитовОбъект(Объект.ВидУсловияОплаты, "МатКапитал, Субсидии");
	Элементы.РазмерМатеринскогоКапитала.Видимость 	= РеквизитыВУО.МатКапитал;		
	Элементы.РазмерСубсидий.Видимость 				= РеквизитыВУО.Субсидии;
	Если Не РеквизитыВУО.Субсидии И Объект.РазмерДополнительныхСредств > 0 Тогда 
		Объект.РазмерДополнительныхСредств = 0;
	КонецЕсли;
	Объект.РазмерМатеринскогоКапитала = ?(РеквизитыВУО.МатКапитал, ПолучитьРазмерМатКапитала(Объект.Дата), 0);;
	РасчитатьРазмерСобственныхСредств(Элемент);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРазмерМатКапитала(ДатаСреза)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РазмерМатеринскогоКапиталаСрезПоследних.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.РазмерМатеринскогоКапитала.СрезПоследних(&ДатаСреза, ) КАК РазмерМатеринскогоКапиталаСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	 	Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Значение;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура МаркетинговаяКомпанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	//В принципе, процедуру можно по аналогии просто перенести в событие "ПриИзменении" реквизита ВУО, но, пока оставляю этот вариант
	
	Если Объект.ОбъектыНедвижимости.Количество() > 0
			И ЗначениеЗаполнено(Объект.ОбъектыНедвижимости[0].ОбъектНедвижимости) Тогда
			
		СтандартнаяОбработка = Ложь;	
		
		//Обращаемся в УПН за актуальными МК
		СтруктураМаркетинговыхКомпаний = МаркетинговаяКомпанияНачалоВыбораНаСервере(Объект.ОбъектыНедвижимости[0].ОбъектНедвижимости, 
																					Объект);
																					
		МассивМаркетинговыхКомпаний = Новый Массив;
		ТаблицаЗначенийМК.Очистить();																			
		Для каждого ЭлементСтруктуры Из СтруктураМаркетинговыхКомпаний Цикл
		
			НоваяСтрока = ТаблицаЗначенийМК.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСтруктуры.Значение);
			МассивМаркетинговыхКомпаний.Добавить(ЭлементСтруктуры.Значение.МаркетинговаяКомпания)
		
		КонецЦикла;
																					
		ЭтаФорма.Элементы.МаркетинговаяКомпания.СписокВыбора.ЗагрузитьЗначения(МассивМаркетинговыхКомпаний);																			
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СОдобрениемПриИзменении(Элемент)
	
	//ГруппаБанков = ПолучитьГруппыБанков();
	ВидыУсловийОплаты = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийУОиВУО, "ВидыУсловийОплаты", "УсловияОплаты", Объект.УсловиеОплаты, Объект.СОдобрением, ПолучитьГруппыБанков());
	ЭтаФорма.Элементы.ВидУсловияОплаты.СписокВыбора.ЗагрузитьЗначения(ВидыУсловийОплаты);
	
	Если НЕ Объект.СОдобрением И ЗначениеЗаполнено(Объект.ИпотечныйБанк) Тогда
		Объект.ИпотечныйБанк = "";
	КонецЕсли;
	Если НЕ Объект.СОдобрением И ЗначениеЗаполнено(Объект.ВидУсловияОплаты) Тогда
		Объект.ВидУсловияОплаты = "";
	КонецЕсли;	
	Элементы.ИпотечныйБанк.Видимость = Объект.СОдобрением;
	
	//Элементы.ВидУсловияОплаты.Доступность = (Объект.СОдобрением И ЗначениеЗаполнено(Объект.ИпотечныйБанк)) ИЛИ не Объект.СОдобрением);
	ОчиститьДанныеПоМаркетинговойКомпании();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппыБанков()
	 Возврат Справочники.ГруппыБанков.ПолучитьГруппуБанковПоБанку(Объект.ИпотечныйБанк, Объект.Дата);
КонецФункции

&НаКлиенте
Процедура ВидУсловияОплатыСубсидированнаяСтавкаПриИзменении(Элемент)
	
	ВидыУсловийОплаты = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийУОиВУО, "ВидыУсловийОплаты", "СубсидированнаяСтавка", Объект.СубсидированнаяСтавка);
	ЭтаФорма.Элементы.ВидУсловияОплаты.СписокВыбора.ЗагрузитьЗначения(ВидыУсловийОплаты);
	ОчиститьДанныеПоМаркетинговойКомпании();

КонецПроцедуры

&НаКлиенте
Процедура УсловиеОплатыПриИзменении(Элемент) Экспорт
	
	ОбновитьВидимостьРеквизитовПоИпотеке();	
	ВидыУсловийОплаты = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийУОиВУО, "ВидыУсловийОплаты", "УсловияОплаты", Объект.УсловиеОплаты, Объект.СОдобрением, ПолучитьГруппыБанков());
	ЭтаФорма.Элементы.ВидУсловияОплаты.СписокВыбора.ЗагрузитьЗначения(ВидыУсловийОплаты);
	ОчиститьДанныеПоМаркетинговойКомпании();
		
КонецПроцедуры

&НаКлиенте
Процедура УсловиеОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрываемойФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ЭтаФорма.Элементы.УсловиеОплаты.СписокВыбора.ВыгрузитьЗначения()));
	ОткрытьФорму("Справочник.УсловияОплаты.ФормаВыбора", ПараметрыОткрываемойФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУсловияОплатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.СОдобрением И Не ЗначениеЗаполнено(Объект.ИпотечныйБанк) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите ипотечный банк!",,"ИпотечныйБанк", "Объект.ИпотечныйБанк");
	Иначе
		ПараметрыОткрываемойФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ЭтаФорма.Элементы.ВидУсловияОплаты.СписокВыбора.ВыгрузитьЗначения()));
		ОткрытьФорму("Справочник.ВидыУсловийОплаты.ФормаВыбора", ПараметрыОткрываемойФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыНедвижимостиОбъектНедвижимостиПриИзменении(Элемент)
		
	ОбъектыНедвижимостиОбъектНедвижимостиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьГрафик(Команда)
	
	ПересчитатьСкидкуНаКлиенте();	
	//РассчитатьДолиВсехДольщиков(Не Объект.РучнойРежимКорректировкиДолей);
	//ЭтоНеНовыйГрафик = Объект.ГрафикПлатежей.Количество() <> 0;
	//РасчитатьРазмерСобственныхСредств(?(ЭтоНеНовыйГрафик, "ЭтоНеНовыйГрафик", Неопределено));
	ПостроитьГрафикНаСервере();
	//ПересчитатьСкидкуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПраваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Счетчик = 0;
	Для каждого СтрокаТЧ Из Объект.Дольщики Цикл
		Если СтрокаТЧ.Реальный Тогда
			Счетчик = Счетчик + 1;
		КонецЕсли;		
	КонецЦикла;
	Если Счетчик >= 2 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрав.ОбщаяДолеваяСобственность"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрав.ОбщаяСовместнаяСобственность"));
	КонецЕсли;
	Если Счетчик = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрав.Собственность"));
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытияФормы = ПолучитьПараметрыОткрытияФормы();	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораДисконтнойКарты", ЭтотОбъект);
	ОткрытьФорму("Документ.ВыдачаДисконтныхКарт.Форма.ФормаВыбораДисконтнойКарты", ПараметрыОткрытияФормы, ЭтаФорма, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
//<852121> }

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ОткрытьШахматку(Команда)
	
	ТекущиеДанныеОН = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	Если ТекущиеДанныеОН <> Неопределено Тогда
		Корпус = ПолучитьОбъектСтроительстваНаСервере(ТекущиеДанныеОН.ОбъектНедвижимости);
	
		ПараметрыФормыОтчета = Новый Структура("Отбор");
		ПараметрыФормыОтчета.Вставить("СформироватьПриОткрытии", 		Истина);	
		ПараметрыФормыОтчета.Вставить("ОбъектНедвижимостиВыделение",	ТекущиеДанныеОН.ОбъектНедвижимости);
		ПараметрыФормыОтчета.Вставить("Отбор", 							Новый Структура("ОбъектСтроительства", 
																		Корпус));
																		
		ДополнитьПараметрыОтчета(ТекущиеДанныеОН.ОбъектНедвижимости, Корпус, ПараметрыФормыОтчета); 																
																		
		ОткрытьФорму("Отчет.Шахматка.Форма.ФормаОтчета", ПараметрыФормыОтчета, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры         

&НаКлиенте
Процедура ДольщикиКлиентОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущийКлиент = Элементы.Дольщики.ТекущиеДанные.Клиент;
	
	Если ЗначениеЗаполнено(ТекущийКлиент) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормыСправочника 		= Новый Структура("Ключ",ТекущийКлиент);
		ФормаСправочника 				= ПолучитьФорму("Справочник.Клиенты.ФормаОбъекта",ПараметрыФормыСправочника,Элемент);
		ФормаСправочника.ТекущийЭлемент = ФормаСправочника.Элементы.ГруппаПаспортныеДанные;
		ФормаСправочника.Открыть();
		
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДольщикиКлиентПриИзмененииНаСервере(Клиент)
	Возврат Справочники.Клиенты.ЕстьДокументУдостоверяющийЛичность(Клиент);
КонецФункции

&НаКлиенте
Процедура ДольщикиКлиентПриИзменении(Элемент)
	
	ТекущаяСтрокаКлиента = Элементы.Дольщики.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаКлиента.Клиент) Тогда		
		ТекущаяСтрокаКлиента.ВнесеныДанныеОДокументеУдостоверяющемЛичность = ДольщикиКлиентПриИзмененииНаСервере(ТекущаяСтрокаКлиента.Клиент);
	КонецЕсли;
	ТекущаяСтрокаКлиента.Условный = Объект.Дольщики.Количество() = 1;
	ТекущаяСтрокаКлиента.Реальный = Истина;	
	ТекущаяСтрокаКлиента.Несовершеннолетний =  ОпределитьЧислоПолныхЛет(ТекущаяСтрокаКлиента.Клиент, Объект.Дата) < 18;
	
	ДольщикиУсловныйРеальныйПриИзменении(Элементы.ДольщикиРеальный);
	//РассчитатьДолиВсехДольщиков(Не Объект.РучнойРежимКорректировкиДолей);
	
	//<892472>, Басаргин (02.11.2018) {
	Объект.ДисконтнаяКарта = Неопределено;	
	//<892472> }
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоли(Команда)
	
	ДольщикиУсловныйРеальныйПриИзменении(Элементы.ДольщикиРеальный);
	//РассчитатьДолиВсехДольщиков();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДольщикиУсловныйРеальныйПриИзменении(Элемент)
		
	//++ Юкаев Роман 20180119 (
	Если Объект.Дольщики.Количество() = 1 Тогда
		Объект.ВидПрава = ПредопределенноеЗначение("Перечисление.ВидыПрав.Собственность");
	Иначе
		Если НЕ (Объект.ВидПрава = ПредопределенноеЗначение("Перечисление.ВидыПрав.ОбщаяДолеваяСобственность")
			Или Объект.ВидПрава = ПредопределенноеЗначение("Перечисление.ВидыПрав.ОбщаяСовместнаяСобственность")) Тогда
			Объект.ВидПрава = Неопределено;
		КонецЕсли;
	КонецЕсли;
	//-- Юкаев Роман 20180119 )
	
	Если Элемент.Имя = "ДольщикиУсловный" Тогда
		ТекСтрока = Элементы.Дольщики.ТекущиеДанные;
		Если ТекСтрока <> Неопределено И ТекСтрока.Условный Тогда
			Для Каждого эл Из Объект.Дольщики Цикл
				Эл.Условный = Ложь;
			КонецЦикла;
			ТекСтрока.Условный = Истина;
		КонецЕсли;			
	ИначеЕсли Элемент.Имя = "ДольщикиРеальный" Тогда
		Если НЕ Объект.РучнойРежимКорректировкиДолей Тогда
			КоличествоРеальныйДольщиков = Объект.Дольщики.НайтиСтроки(Новый Структура("Реальный", Истина)).Количество();
			Для Каждого эл Из Объект.Дольщики Цикл
				Эл.ЧислительДоли = ?(Эл.Реальный, 1, 0);
				Эл.ЗнаменательДоли = ?(Эл.Реальный, КоличествоРеальныйДольщиков, 0);
				Эл.Доля = ?(Эл.Реальный, 100 * Эл.ЧислительДоли/Эл.ЗнаменательДоли, 0); 
			КонецЦикла;
		Иначе
			Для Каждого эл Из Объект.Дольщики Цикл
				Эл.Доля = ?(Эл.Реальный И Эл.ЗнаменательДоли <> 0, 100 * Эл.ЧислительДоли/Эл.ЗнаменательДоли, 0); 
			КонецЦикла;
			
			//++ Юкаев Роман 20180327 (//796968
			ИтоговаяДоля = Объект.Дольщики.Итог("Доля");
			Если ИтоговаяДоля <> 100 Тогда
				Объект.Дольщики[0].Доля = Объект.Дольщики[0].Доля + (100 - ИтоговаяДоля);
			КонецЕсли;
			//-- Юкаев Роман 20180327 )
		КонецЕсли;
	КонецЕсли;
	ПересчитатьСкидкуНаКлиенте();
	//РассчитатьДолиВсехДольщиков(Не Объект.РучнойРежимКорректировкиДолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ДольщикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Объект.ВидПрава = Неопределено;
	
	//<892472>, Басаргин (02.11.2018) {
	Объект.ДисконтнаяКарта = Неопределено;	
	//<892472> }
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуКлиента(Команда)
	
	ТекущаяСтрокаКлиента = Элементы.Дольщики.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрокаКлиента.Клиент) Тогда		
		ОткрытьФорму("Справочник.Клиенты.ФормаОбъекта", Новый Структура("Ключ", ТекущаяСтрокаКлиента.Клиент), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДольщикиПриИзменении(Элемент)
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Согласовать(Команда)
	//Если НЕ СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.Согласование") Тогда 
	Если НЕ СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.СогласованиеЮриста")
		И НЕ СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.СогласованиеИБ") Тогда	
		ПоказатьВопрос(Новый ОписаниеОповещения("СогласоватьЗавершение", ЭтотОбъект), 
						"Документ будет записан и переведён в статус ""Согласование"", а также станет недоступным для редактирования, продолжить?", 
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда	
		Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		Если Записать(Новый Структура("РежимЗаписи", ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение"))) Тогда		
			СогласоватьНаСервереЗавершение(Объект.Ссылка, Объект.Проект, Объект.ВидУсловияОплаты, СделкаКН);
			
			//СтатусСделки 							= ПредопределенноеЗначение("Перечисление.СтатусыСделки.Согласование");
			
			//<729503>, Басаргин (02.11.2017) {
			СтатусСделки = ?(ЗначениеРеквизитаОбъекта_ВызовСервера(Объект.ВидУсловияОплаты, "ТребоватьОдобренияИБ"), ПредопределенноеЗначение("Перечисление.СтатусыСделки.СогласованиеИБ"), ?(СделкаКН, ПредопределенноеЗначение("Перечисление.СтатусыСделки.СогласованиеУПН"), ПредопределенноеЗначение("Перечисление.СтатусыСделки.СогласованиеЮриста")));
			//<729503> }
			
			ОбновитьДоступностьКоманд();
		Иначе
			СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.Оформление");
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СогласоватьНаСервереЗавершение(ЗаявкаНаСделку, Проект, ВидУсловияОплаты, СделкаКН = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ВидУсловияОплаты) Тогда
		Ипотека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидУсловияОплаты, "ТребоватьОдобренияИБ");	
	Иначе	
		Ипотека = Ложь;
	КонецЕсли;
	
	//<890184>, Басаргин (21.11.2018) {
	Если НЕ СделкаКН Тогда	
		CRMРаботаСЗаданиямиСервер.СоздатьЗаданиеНаСогласованиеЗаявки(ЗаявкаНаСделку, Проект, Ипотека, 1);
		//CRMРаботаСЗаданиямиСервер.СформироватьЗаписиПоСтатусуСделки(ЗаявкаНаСделку, ТекущаяДата(), "Согласование"); 		
	КонецЕсли;	
	//<890184> }	
		
	//<729503>, Басаргин (02.11.2017) {
	CRMРаботаСЗаданиямиСервер.СформироватьЗаписиПоСтатусуСделки(ЗаявкаНаСделку, ТекущаяДата(), ?(СделкаКН, "СогласованиеУПН", ?(Ипотека, "СогласованиеИБ", "СогласованиеЮриста")));
	//<729503> }
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУсловияИВидыУсловийОплаты(Команда)
	
	ОбновитьУсловияИВидыУсловийОплатыНаСервере();
	Если ТаблицаЗначенийУОиВУО.Количество() = 0 Тогда
		Объект.УсловиеОплаты = ПредопределенноеЗначение("Справочник.УсловияОплаты.ПустаяСсылка");
		Объект.ВидУсловияОплаты = ПредопределенноеЗначение("Справочник.ВидыУсловийОплаты.ПустаяСсылка");
		Объект.СубсидированнаяСтавка = Ложь;
		Объект.ИпотечныйБанк = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка");
		Объект.СОдобрением = Ложь;
		ОчиститьДанныеПоМаркетинговойКомпании();
	КонецЕсли;	
	УсловиеОплатыПриИзменении(Элементы.УсловиеОплаты);
	//РассчитатьДолиВсехДольщиков(Не Объект.РучнойРежимКорректировкиДолей);
	ПересчитатьДоли(Неопределено);
	ПересчитатьСкидкуНаКлиенте();
	РасчитатьРазмерСобственныхСредств(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВОтказ(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПеревестиВОтказЗавершение", ЭтотОбъект), 
					"Документ будет записан и переведён в статус ""Отказ"", а также станет недоступным для редактирования, продолжить?", 
					РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
				
&НаКлиенте
Процедура ПеревестиВОтказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда	
		Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		Если Записать(Новый Структура("РежимЗаписи", ПредопределенноеЗначение("РежимЗаписиДокумента.ОтменаПроведения"))) Тогда		
			ПеревестиВОтказНаСервереЗавершение(Объект.Ссылка);
			СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.Отказ");
			ОбновитьДоступностьКоманд();
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПеревестиВОтказНаСервереЗавершение(ЗаявкаНаСделку) Экспорт
	
	CRMРаботаСЗаданиямиСервер.ОтменитьЗаданиеНаСогласованиеЗаявки(ЗаявкаНаСделку);
	CRMРаботаСЗаданиямиСервер.СформироватьЗаписиПоСтатусуСделки(ЗаявкаНаСделку, ТекущаяДата(), "Отказ", ПользователиКлиентСервер.АвторизованныйПользователь());
	
КонецПроцедуры

//<781716>, Басаргин (21.02.2018) {
&НаКлиенте
Процедура ПечатьИЛИзУПН(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан");
		Возврат;
	КонецЕсли;
		
	ПечатьДокументаИзУПН(Объект.Ссылка, ПечатьИзУПННаСервере(Объект.Ссылка, "ИЛ"));		
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКарточкиСделкиИзУПН(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ не записан");
		Возврат;
	КонецЕсли;
	
	ПечатьДокументаИзУПН(Объект.Ссылка, ПечатьИзУПННаСервере(Объект.Ссылка, "Сделка"));
	
КонецПроцедуры
//<781716> }

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НаличиеВзаимодействияПоПереговорам(ДокументЗапрос)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Запрос
	|	И ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Взаимодействие КАК Документ.Встреча).ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|	И ПредметыПапкиВзаимодействий.Рассмотрено
	|	И НЕ ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Взаимодействие КАК Документ.Встреча).Отменено";

	
	Запрос.УстановитьПараметр("Запрос", ДокументЗапрос);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
		
	Возврат НЕ РезультатЗапроса.Пустой();	
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта_ВызовСервера(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
	Возврат ?(НЕ ЗначениеЗаполнено(Ссылка), Ложь, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные));	
КонецФункции 

&НаСервере
Процедура ЗаполнитьДанныеПоОбъектуНедвижимостиВСтроке(СтрокаТЧ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Квартирограмма.Стоимость КАК Стоимость,
	|	Квартирограмма.Стоимость КАК СтоимостьПоДоговору,
	|	Квартирограмма.Площадь КАК Площадь,
	|	Квартирограмма.ЦенаЗаМетр КАК ЦенаЗаКвМетрПоДоговору,
	|	Квартирограмма.ТипОтделки КАК ТипОтделки,
	|	Квартирограмма.СтроительныйНомер КАК НомерБТИ
	|ИЗ
	|	РегистрСведений.Квартирограмма КАК Квартирограмма
	|ГДЕ
	|	Квартирограмма.ОбъектНедвижимости = &ОбъектНедвижимости";
	Запрос.УстановитьПараметр("ОбъектНедвижимости", СтрокаТЧ.ОбъектНедвижимости);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();			
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);		
		КонецЦикла;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТаблицыПараметров(ПолноеОбновление)

	Если ПолноеОбновление Тогда
	
		СтруктураПоиска			= Новый Структура("УсловияОплаты, ВидыУсловийОплаты", 
													Объект.УсловиеОплаты, Объект.ВидУсловияОплаты);
		МассивНайденныйСтрок 	= ТаблицаЗначенийУОиВУО.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНайденныйСтрок.Количество() > 0 Тогда
			СтруктураПараметров = МассивНайденныйСтрок[0].ТиповыеПараметры;
			Для каждого Параметр Из СтруктураПараметров Цикл
				//Если есть одноименённый реквизит для использования в отчетах, заполняем
				Если Объект.Свойство(Параметр.Ключ) И НЕ Параметр.Ключ = "РазмерМатеринскогоКапитала"Тогда
					Объект[Параметр.Ключ] = Параметр.Значение;				
					//Элементы.РазмерМатеринскогоКапитала.Видимость = Параметр.Ключ = "РазмерМатеринскогоКапитала" И  Параметр.Значение <> 0;
				КонецЕсли;
				//Добавляем параметр в таблицу параметров условий оплат
				СтруктураПоискаПараметра		= Новый Структура("ИмяПараметраВАлгоритме", Параметр.Ключ);
				МассивНайденныйСтрокПараметров 	= ТаблицаСоответсвийПараметровУсловийОплат.НайтиСтроки(СтруктураПоискаПараметра);
				Если МассивНайденныйСтрокПараметров.Количество() Тогда
					НоваяСтрока = Объект.ПараметрыУсловияОплаты.Добавить();
					НоваяСтрока.Параметр = МассивНайденныйСтрокПараметров[0].Характеристика; 
					НоваяСтрока.Значение = Параметр.Значение;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	   	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеПоМаркетинговойКомпании()

	Объект.МаркетинговаяКомпания 		= ПредопределенноеЗначение("Справочник.МаркетинговыеКомпании.ПустаяСсылка");
	Объект.ОтборМК 						= ПредопределенноеЗначение("Справочник.Отборы.ПустаяСсылка");	
	Объект.Скидка                   	= ПредопределенноеЗначение("Справочник.ТипыСкидок.ПустаяСсылка");
	Объект.РазмерСобственныхСредств 	= 0;
	Объект.РазмерДополнительныхСредств 	= 0;
	Объект.РазмерМатеринскогоКапитала 	= 0;
	Объект.ТипСертификата 				= ПредопределенноеЗначение("Справочник.ТипыСертификатов.ПустаяСсылка");
	Объект.АгентствоНедвижимости		= ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.Комиссия 					= ПредопределенноеЗначение("Справочник.ТипыКомиссии.ПустаяСсылка");
	Объект.РазмерКомиссии 				= 0;
	Объект.СрокБронирования             = "";
	Объект.ГрафикПлатежей.Очистить();
	Объект.ПараметрыУсловияОплаты.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаркетинговаяКомпанияНачалоВыбораНаСервере(Знач ОбъектНедвижимости, Знач ДокументОбъект)
	
	РезультатСтруктура	= Новый Структура;
	Счетчик				= 0;
	
	ТаблицаМаркетинговыхКомпаний = Документы.ЗаявкаНаСделку.ПолучитьТаблицуМаркетинговыхКомпаний(ОбъектНедвижимости, ДокументОбъект);	
	
	Для каждого СтрокаТЗ Из ТаблицаМаркетинговыхКомпаний Цикл
		
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("МаркетинговаяКомпания", 			СтрокаТЗ.МаркетинговаяКомпания);
		СтруктураСтроки.Вставить("ОтборПоМаркетинговойКомпании", 	СтрокаТЗ.ОтборПоМаркетинговойКомпании);
		СтруктураСтроки.Вставить("Скидка", 							СтрокаТЗ.Скидка);
		СтруктураСтроки.Вставить("ОбъектСтроительства",				СтрокаТЗ.ОбъектСтроительства);
		
		РезультатСтруктура.Вставить("Строка" + Строка(Счетчик), СтруктураСтроки);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьРеквизитовПоИпотеке()
	РеквизитыВУО = ВернутьЗначенияРеквизитовОбъект(Объект.УсловиеОплаты, "Ипотека");
	МассивЗначенийЭлементов = ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийУОиВУО, "Ипотека", "УсловияОплаты", Объект.УсловиеОплаты);
	Если МассивЗначенийЭлементов.Количество() > 0 Тогда
		Элементы.ГруппаУсловияОплаты_2_Флаги.Видимость = МассивЗначенийЭлементов[0];
	Иначе
		Элементы.ГруппаУсловияОплаты_2_Флаги.Видимость = ?(РеквизитыВУО.Ипотека = Неопределено, Ложь, РеквизитыВУО.Ипотека);;
	КонецЕсли;
	
	
	Если НЕ Элементы.ГруппаУсловияОплаты_2_Флаги.Видимость И (ЗначениеЗаполнено(Объект.ИпотечныйБанк) ИЛИ Объект.СОдобрением) Тогда
		Объект.ИпотечныйБанк = "";
		Объект.СОдобрением = Ложь;
	КонецЕсли;
	
	Элементы.ИпотечныйБанк.Видимость = Объект.СОдобрением;
	Элементы.ИпотечныйБанк.АвтоОтметкаНезаполненного = Элементы.ИпотечныйБанк.Видимость;
	Элементы.ИпотечныйБанк.ОтметкаНезаполненного = Элементы.ИпотечныйБанк.Видимость;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбъектСтроительстваНаСервере(Знач ОбъектНедвижимости)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектНедвижимости, "Владелец");	

КонецФункции // ПолучитьОбъектСтроительстваНаСервере()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеИзТаблицыУОиВУО(ТаблицаЗначенийУОиВУО, ИмяКолонкиЗначения, ИмяКолонкиОтбора, ЗначениеОтбора, СОдобрением = Ложь, ГруппыБанков = Неопределено)
	Если ГруппыБанков = Неопределено Тогда
		ГруппыБанков = Новый Массив;
	КонецЕсли;
	Результат 		= Новый Массив;	
	СтруктураПоиска = Новый Структура(ИмяКолонкиОтбора, ЗначениеОтбора);	
	МассивСтрок 	= ТаблицаЗначенийУОиВУО.НайтиСтроки(СтруктураПоиска);
	//ГруппаБанков = Справочники.ГруппыБанков.ПолучитьГруппуБанковПоБанку(ИпотечныйБанк, 
	Для каждого ЭлементМассива Из МассивСтрок Цикл	
		ВУО = ЭлементМассива[ИмяКолонкиЗначения];
		Если ЗначениеЗаполнено(ВУО) И ИмяКолонкиЗначения = "ВидыУсловийОплаты" Тогда	
			Если СОдобрением И НЕ ГруппыБанков.Найти(ЭлементМассива.ГруппаБанков) = Неопределено Тогда
				Результат.Добавить(ВУО);		
			ИначеЕсли НЕ СОдобрением и Не ЗначениеЗаполнено(ЭлементМассива.ГруппаБанков) Тогда  
				Результат.Добавить(ВУО);
			КонецЕсли;
		Иначе
			Результат.Добавить(ВУО);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПеречитатьСтатусыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыСделкиСрезПоследних.Статус КАК СтатусСделки
		|ИЗ
		|	РегистрСведений.СтатусыСделки.СрезПоследних(, ЗаявкаНаСделку = &ЗаявкаНаСделку) КАК СтатусыСделкиСрезПоследних";
	
	Запрос.УстановитьПараметр("ЗаявкаНаСделку", Объект.Ссылка);
	
	//++ Юкаев Роман 20180327 (//
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтатусСделки = Перечисления.СтатусыСделки.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		//СтатусОплаты = Выборка.СтатусОплаты;
		СтатусСделки = Выборка.СтатусСделки;
	КонецЕсли;
	//-- Юкаев Роман 20180327 )
		
КонецПроцедуры

//<841731>, Басаргин (04.07.2018) {
&НаСервереБезКонтекста
Функция ПолучитьСтатусСделкиUPN(ЗаявкаНаСделку)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сделки.СтатусСделки КАК СтатусСделки
	|ИЗ
	|	Справочник.Сделки КАК Сделки
	|ГДЕ
	|	Сделки.ЗаявкаНаСделку = &ЗаявкаНаСделку";
	
	Запрос.УстановитьПараметр("ЗаявкаНаСделку", ЗаявкаНаСделку);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтатусСделки = Перечисления.СтатусыСделокСправочник.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.СтатусСделки;
	КонецЕсли;
		
КонецФункции
//<841731> }

//<840014>, Басаргин (04.07.2018) {
&НаСервере
Процедура ЗаполнитьСтроительныйНомер()
	
	НомераБТИ = ПолучитьНомераБТИ(Объект.ОбъектыНедвижимости.Выгрузить().ВыгрузитьКолонку("ОбъектНедвижимости"));
	
	Если НомераБТИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из Объект.ОбъектыНедвижимости Цикл
		СтрокиНомерБТИ = НомераБТИ.НайтиСтроки(Новый Структура("ОН", Строка.ОбъектНедвижимости));
		Если НЕ СтрокиНомерБТИ.Количество() Тогда
			Продолжить;
		КонецЕсли;		
		Строка.НомерБТИ = СтрокиНомерБТИ[0].НомерБТИ;	
	КонецЦикла;
			
КонецПроцедуры

Функция ПолучитьНомераБТИ(СписокОН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Квартирограмма.ОбъектНедвижимости КАК ОН,
	|	Квартирограмма.СтроительныйНомер КАК НомерБТИ
	|ИЗ
	|	РегистрСведений.Квартирограмма КАК Квартирограмма
	|ГДЕ
	|	Квартирограмма.ОбъектНедвижимости В(&СписокОН)";
	
	Запрос.УстановитьПараметр("СписокОН", СписокОН);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
    	Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
		
КонецФункции
//<840014> }

&НаСервере
Процедура ОбъектыНедвижимостиОбъектНедвижимостиПриИзмененииНаСервере()
	
	Документы.ЗаявкаНаСделку.ПолучитьДанныеПоУсловиямОплатыИВидамУсловий(Объект, ЭтотОбъект);
	
	Для каждого СтрокаТЧ Из Объект.ОбъектыНедвижимости Цикл
		ЗаполнитьДанныеПоОбъектуНедвижимостиВСтроке(СтрокаТЧ);		
	КонецЦикла;
	
	//<890184>, Басаргин (21.11.2018) {
	УстановитьПризнакСделкиКН();
	ОбновитьВидимостьЭлементовФормыНаСервере();
	//<890184> }
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловияИВидыУсловийОплатыНаСервере()
	Документы.ЗаявкаНаСделку.ПолучитьДанныеПоУсловиямОплатыИВидамУсловий(Объект, ЭтотОбъект);	
	РазрешитьДоступностьНастройкиГрафикаПлатежей();
КонецПроцедуры

&НаСервере
Процедура РазрешитьДоступностьНастройкиГрафикаПлатежей()
	Элементы.ГруппаУсловияОплаты.ТолькоПросмотр 			= Ложь;
	Элементы.ГруппаДополнительнаяИнформация.ТолькоПросмотр 	= Ложь;
	Элементы.ГруппаГрафикПлатежей.ТолькоПросмотр 			= Ложь;
КонецПроцедуры

&НаСервере
Процедура ПостроитьГрафикНаСервере(ЭтоСрокБронирования = Ложь) Экспорт
	
	Если Объект.ОбъектыНедвижимости.Количество() > 0 Тогда
	
		СтруктураТаблицГрафикаПлатежейИПараметров = Документы.ЗаявкаНаСделку.ПолучитьРассчитанныйГрафикПлатежа(Объект.ОбъектыНедвижимости[0].ОбъектНедвижимости, Объект, ЭтоСрокБронирования);
		
		Если СтруктураТаблицГрафикаПлатежейИПараметров <> Неопределено Тогда
			Объект.ГрафикПлатежей.Загрузить(СтруктураТаблицГрафикаПлатежейИПараметров.ГрафикПлатежей);	
			ОбщийИтог = 0;
			Для Каждого Стрк из Объект.ГрафикПлатежей Цикл	
				Стрк.ИтоговаяСуммаПлатежа 	= ОбщийИтог + ?(ЗначениеЗаполнено(Стрк.СуммаПлатежа),Стрк.СуммаПлатежа,0);
				ОбщийИтог 					= Стрк.ИтоговаяСуммаПлатежа;
			КонецЦикла;
			Объект.ПараметрыУсловияОплаты.Загрузить(СтруктураТаблицГрафикаПлатежейИПараметров.ТЗПараметров);
		КонецЕсли;
		СрокБронирования = ПланыВидовХарактеристик.ПараметрыУсловийОплаты.НайтиПоРеквизиту("ИмяПараметраВАлгоритме", "СрокБронирования");
		Если ЗначениеЗаполнено(СрокБронирования) Тогда
			ОтборДляСрокаБронирования = Объект.ПараметрыУсловияОплаты.НайтиСтроки(Новый Структура("Параметр", СрокБронирования));
			Если ОтборДляСрокаБронирования.Количество()<> 0 Тогда
				Объект.СрокБронирования 			=  ОтборДляСрокаБронирования[0].Значение;
				Объект.ДатаКонцаСрокаБронирования 	= СтруктураТаблицГрафикаПлатежейИПараметров.ДатаНачалаГрафика;// - дата конца бронирования
			КонецЕсли;
		Иначе
			Объект.СрокБронирования 			= "";
			Объект.ДатаКонцаСрокаБронирования 	= '00010101';
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСтоимостьОНСоСкидкойНаСервере(ОН, Скидка, Стоимость, Площадь)
	 	
	Если Скидка = Неопределено Тогда  Возврат 0 КонецЕсли;
	СуммаСкидки = 0;
	Если ТипЗнч(Скидка) = Тип("Число") Тогда 
		Возврат (Стоимость*(Скидка/100));
	КонецЕсли;	
	//иначе все по взрослому
	
	Если Скидка.ВидСкидки = Перечисления.ВидыСкидок.Абсолютная Тогда 
		Цена = Стоимость / (Площадь);
		СкидкаРассчитана = Ложь; 
		Если НЕ Скидка.РазмерСкидки > Цена Тогда
			СуммаСкидки		= СуммаСкидки + Скидка.РазмерСкидки * (Площадь);
			СкидкаРассчитана = Истина;
		КонецЕсли; 
		//КонецЦикла;    
		
		Если Не СкидкаРассчитана Тогда 
			Возврат 0;	
		Иначе		
			Возврат СуммаСкидки;	
		КонецЕсли;
		
	ИначеЕсли Скидка.ВидСкидки = Перечисления.ВидыСкидок.АбсолютнаяОтСтоимостиВО Тогда
		Если Площадь = 0 или (Скидка.РазмерСкидки > Стоимость) Тогда
			//Базовая расчетная площадь равна 0, распределение скидки по объектам недвижимости невозможно!
			Возврат 0;
		КонецЕсли;
		Возврат Скидка.РазмерСкидки; 
	ИначеЕсли Скидка.ВидСкидки = Перечисления.ВидыСкидок.Относительная Тогда
		
		РазмерСкидки = 0;				
		
		Если Скидка.БезУчетаСтоимостиОтделки Тогда
			
			ЦенаОтделкиЗа1м2 = 0;
			Запрос = Новый Запрос;
			Запрос.Текст  = "ВЫБРАТЬ
			                |	Квартирограмма.ЦенаОтделкиЗаМетр КАК ЦенаОтделкиЗаМетр
			                |ИЗ
			                |	РегистрСведений.Квартирограмма КАК Квартирограмма
			                |ГДЕ
			                |	Квартирограмма.ОбъектНедвижимости = &ОбъектНедвижимости";
			Запрос.УстановитьПараметр("ОбъектНедвижимости", ОН.Ссылка);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ЦенаОтделкиЗа1м2 = Выборка.ЦенаОтделкиЗаМетр;			
			КонецЕсли;
			//ЦенаОтделкиЗа1м2 = ОН.ЦенаОтделкиЗа1м2;
			ПлощадьОбъекта = Площадь;
			
			РазмерСкидки = (Стоимость - ЦенаОтделкиЗа1м2*ПлощадьОбъекта)*(Скидка.РазмерСкидки/100);
			
		Иначе 
			
			РазмерСкидки = (Стоимость*(Скидка.РазмерСкидки/100));
			
		КонецЕсли; 
		
		Возврат РазмерСкидки;
		
	ИначеЕсли Скидка.ВидСкидки = Перечисления.ВидыСкидок.Комплексная Тогда	
		СтоимостьДоступнаяДляМодификации = Стоимость;
		СуммаСкидки = 0;
		Для Каждого СкидкаИзСостава Из Скидка.Состав Цикл 
			РасчитаннаяСкидка = РассчитатьСтоимостьОНСоСкидкойНаСервере(ОН, СкидкаИзСостава.Скидка, СтоимостьДоступнаяДляМодификации, Площадь);
			Если РасчитаннаяСкидка = 0 Тогда СуммаСкидки = 0; Прервать; КонецЕсли;
			СтоимостьДоступнаяДляМодификации = СтоимостьДоступнаяДляМодификации - РасчитаннаяСкидка; 
			СуммаСкидки = СуммаСкидки + РасчитаннаяСкидка;
		КонецЦикла;
		Возврат СуммаСкидки;
	Иначе
		Возврат 0;
	КонецЕсли;

	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	isnull(СкидкиНаОбъектыНедвижимости.ЗначениеСкидки, 0) КАК ЗначениеСкидки
	//|ИЗ
	//|	РегистрСведений.СкидкиНаОбъектыНедвижимости КАК СкидкиНаОбъектыНедвижимости
	//|ГДЕ
	//|	СкидкиНаОбъектыНедвижимости.ОбъектНедвижимости = &ОбъектНедвижимости
	//|	И СкидкиНаОбъектыНедвижимости.МаркетинговаяКомпания = &МаркетинговаяКомпания
	//|	И СкидкиНаОбъектыНедвижимости.СубсидированнаяСтавка = &СубсидированнаяСтавка
	//|	И СкидкиНаОбъектыНедвижимости.Скидка = &Скидка";
	//Запрос.УстановитьПараметр("ОбъектНедвижимости", 	ОбъектНедвижимости);
	//Запрос.УстановитьПараметр("МаркетинговаяКомпания", 	МаркетинговаяКомпания);
	//Запрос.УстановитьПараметр("СубсидированнаяСтавка", 	СубсидированнаяСтавка);
	//Запрос.УстановитьПараметр("Скидка", 				Скидка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//
	//	Возврат СтоимостьОбъектаНедвижимости;	
	//
	//Иначе
	//
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Выборка.Следующий();
	//	Возврат СтоимостьОбъектаНедвижимости - Выборка.ЗначениеСкидки;
	//
	//КонецЕсли;	

КонецФункции // ()

&НаСервере
Процедура РассчитатьДолиВсехДольщиков(УравнятьДолиМеняяСуммуДокумента = Ложь)
	
	//++ Юкаев Роман 20180119 ( //Задача 765516
	УравнятьДолиМеняяСуммуДокумента = Объект.ВидПрава = Перечисления.ВидыПрав.ОбщаяДолеваяСобственность;
	//-- Юкаев Роман 20180119 )
	
	//++ Юкаев Роман 20180327 (//796968
	СписокНеРеальныхДольщиков = Объект.Дольщики.НайтиСтроки(Новый Структура("Реальный", Ложь));
	
	Если СписокНеРеальныхДольщиков.Количество() > 0 Тогда
		Для Каждого Дольщик Из СписокНеРеальныхДольщиков Цикл
			Дольщик.ЧислительДоли = 0;
			Дольщик.ЗнаменательДоли = 0;
			Дольщик.СуммаДоли = 0;
			Дольщик.Доля = 0;
		КонецЦикла;
	КонецЕсли;
	
	СписокРеальныхДольщиков = Объект.Дольщики.НайтиСтроки(Новый Структура("Реальный", Истина));
	
	КоличествоДольщиков = СписокРеальныхДольщиков.Количество();
	
	Если КоличествоДольщиков > 0 Тогда
		СтоимостьПоДоговору = Объект.ОбъектыНедвижимости.Итог("СтоимостьПоДоговору");
		
		Если Объект.РучнойРежимКорректировкиДолей Тогда
			
			ИтоговаяДоля = Объект.Дольщики.Итог("Доля");
			Если ИтоговаяДоля <> 100 Тогда
				СписокРеальныхДольщиков[0].Доля = СписокРеальныхДольщиков[0].Доля + (100 - ИтоговаяДоля);
			КонецЕсли;
			
			ИтоговаяСтоимостьДолей = 0;
			КоличествоДолей = 0;
			
			Для Каждого Дольщик Из СписокРеальныхДольщиков Цикл
				Дольщик.СуммаДоли = Окр(СтоимостьПоДоговору * Дольщик.Доля / 100, 2);
				ИтоговаяСтоимостьДолей = ИтоговаяСтоимостьДолей + Дольщик.СуммаДоли;
				КоличествоДолей = КоличествоДолей + Дольщик.ЧислительДоли;
			КонецЦикла;
			
			Разность = СтоимостьПоДоговору - ИтоговаяСтоимостьДолей;
			Если Разность <> 0 Тогда
				Если УравнятьДолиМеняяСуммуДокумента Тогда
					
					КоличествоОбъектовПоДоговору = Объект.ОбъектыНедвижимости.Количество();
					
					Если Разность > 0 Тогда
						СуммаДобавки = Окр(Разность / КоличествоОбъектовПоДоговору, 2);
						
						Для Каждого ОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
							ОбъектНедвижимости.СтоимостьПоДоговору = ОбъектНедвижимости.СтоимостьПоДоговору + СуммаДобавки;
						КонецЦикла;
						
						ИтоговаяСтоимостьОН = Объект.ОбъектыНедвижимости.Итог("СтоимостьПоДоговору");
						
						Если ИтоговаяСтоимостьДолей <> ИтоговаяСтоимостьОН Тогда
							Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору = Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору + (ИтоговаяСтоимостьДолей - ИтоговаяСтоимостьОН);
						КонецЕсли;
						
						Объект.СтоимостьСоСкидкой = ИтоговаяСтоимостьДолей;
					Иначе
						
						ДоляРазности = Окр(Разность / КоличествоДолей, 2);
						ИтоговаяСтоимостьДолей = 0;
						
						Для Каждого Дольщик Из СписокРеальныхДольщиков Цикл
							Дольщик.СуммаДоли = Дольщик.СуммаДоли + ДоляРазности;
							ИтоговаяСтоимостьДолей = ИтоговаяСтоимостьДолей + Дольщик.СуммаДоли;
						КонецЦикла;
						
						Разность = СтоимостьПоДоговору - ИтоговаяСтоимостьДолей;
						
						Если Разность <> 0 Тогда
							
							СуммаДобавки = Окр(Разность / КоличествоОбъектовПоДоговору, 2);
							
							Для Каждого ОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
								ОбъектНедвижимости.СтоимостьПоДоговору = ОбъектНедвижимости.СтоимостьПоДоговору + СуммаДобавки;
							КонецЦикла;
							
							ИтоговаяСтоимостьОН = Объект.ОбъектыНедвижимости.Итог("СтоимостьПоДоговору");
							
							Если ИтоговаяСтоимостьДолей <> ИтоговаяСтоимостьОН Тогда
								Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору = Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору + (ИтоговаяСтоимостьДолей - ИтоговаяСтоимостьОН);
							КонецЕсли;
							
							Объект.СтоимостьСоСкидкой = ИтоговаяСтоимостьДолей;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокРеальныхДольщиков[0].СуммаДоли = СписокРеальныхДольщиков[0].СуммаДоли + Разность;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИтоговаяСтоимостьДолей = 0;
			ИтоговаяСуммаДолей = 0;
			КоличествоДолей = 0;
			
			Для Каждого Дольщик Из СписокРеальныхДольщиков Цикл
				Дольщик.ЧислительДоли = 1;
				Дольщик.ЗнаменательДоли = КоличествоДольщиков;
				Дольщик.Доля = Окр(Дольщик.ЧислительДоли * 100 / Дольщик.ЗнаменательДоли, 8);
				ИтоговаяСуммаДолей = ИтоговаяСуммаДолей + Дольщик.Доля;
				
				Дольщик.СуммаДоли = Окр(СтоимостьПоДоговору * Дольщик.Доля / 100, 2);
				ИтоговаяСтоимостьДолей = ИтоговаяСтоимостьДолей + Дольщик.СуммаДоли;
			КонецЦикла;
			
			Если ИтоговаяСуммаДолей <> 100 Тогда
				СписокРеальныхДольщиков[0].Доля = СписокРеальныхДольщиков[0].Доля + (100 - ИтоговаяСуммаДолей);
			КонецЕсли;
			
			Разность = СтоимостьПоДоговору - ИтоговаяСтоимостьДолей;
			Если Разность <> 0 Тогда
				Если УравнятьДолиМеняяСуммуДокумента Тогда
					
					КоличествоОбъектовПоДоговору = Объект.ОбъектыНедвижимости.Количество();
					
					Если Разность > 0 Тогда
						СуммаДобавки = Окр(Разность / КоличествоОбъектовПоДоговору, 2);
						
						Для Каждого ОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
							ОбъектНедвижимости.СтоимостьПоДоговору = ОбъектНедвижимости.СтоимостьПоДоговору + СуммаДобавки;
						КонецЦикла;
						
						ИтоговаяСтоимостьОН = Объект.ОбъектыНедвижимости.Итог("СтоимостьПоДоговору");
						
						Если ИтоговаяСтоимостьДолей <> ИтоговаяСтоимостьОН Тогда
							Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору = Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору + (ИтоговаяСтоимостьДолей - ИтоговаяСтоимостьОН);
						КонецЕсли;
						
						Объект.СтоимостьСоСкидкой = ИтоговаяСтоимостьДолей;
					Иначе
						ДоляРазности = Окр(Разность / КоличествоДольщиков, 2);
						ИтоговаяСтоимостьДолей = 0;
						
						Для Каждого Дольщик Из СписокРеальныхДольщиков Цикл
							Дольщик.СуммаДоли = Дольщик.СуммаДоли + ДоляРазности;
							ИтоговаяСтоимостьДолей = ИтоговаяСтоимостьДолей + Дольщик.СуммаДоли;
						КонецЦикла;
						
						Разность = СтоимостьПоДоговору - ИтоговаяСтоимостьДолей;
						
						Если Разность <> 0 Тогда
							
							СуммаДобавки = Окр(Разность / КоличествоОбъектовПоДоговору, 2);
							
							Для Каждого ОбъектНедвижимости Из Объект.ОбъектыНедвижимости Цикл
								ОбъектНедвижимости.СтоимостьПоДоговору = ОбъектНедвижимости.СтоимостьПоДоговору + СуммаДобавки;
							КонецЦикла;
							
							ИтоговаяСтоимостьОН = Объект.ОбъектыНедвижимости.Итог("СтоимостьПоДоговору");
							
							Если ИтоговаяСтоимостьДолей <> ИтоговаяСтоимостьОН Тогда
								Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору = Объект.ОбъектыНедвижимости[0].СтоимостьПоДоговору + (ИтоговаяСтоимостьДолей - ИтоговаяСтоимостьОН);
							КонецЕсли;
							
							Объект.СтоимостьСоСкидкой = ИтоговаяСтоимостьДолей;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СписокРеальныхДольщиков[0].СуммаДоли = СписокРеальныхДольщиков[0].СуммаДоли + Разность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("В табличной части должен быть выбран хотябы один реальный клиент для расчета долей.");
	КонецЕсли;
	
	
	
	
	//Запрос = Новый Запрос;
	////Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Дольщики.Клиент КАК Дольщик,
	//               |	Дольщики.Доля КАК Доля,
	//               |	Дольщики.ЗнаменательДоли КАК ЗнаменательДоли,
	//               |	Дольщики.Несовершеннолетний КАК Несовершеннолетний,
	//               |	Дольщики.Условный КАК УсловныйКонтрагент,
	//               |	Дольщики.Реальный КАК РеальныйКонтрагент,
	//               |	Дольщики.ЧислительДоли КАК ЧислительДоли,
	//               |	Дольщики.СуммаДоли КАК СуммаДоли,
	//               |	Дольщики.НомерСтроки - 1 КАК Индекс
	//               |ПОМЕСТИТЬ внДольщики
	//               |ИЗ
	//               |	&Дольщики КАК Дольщики
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	внДольщики.Дольщик КАК Дольщик,
	//               |	внДольщики.Доля КАК Доля,
	//               |	внДольщики.ЗнаменательДоли КАК ЗнаменательДоли,
	//               |	внДольщики.Несовершеннолетний КАК Несовершеннолетний,
	//               |	внДольщики.УсловныйКонтрагент КАК УсловныйКонтрагент,
	//               |	внДольщики.РеальныйКонтрагент КАК РеальныйКонтрагент,
	//               |	внДольщики.ЧислительДоли КАК ЧислительДоли,
	//               |	внДольщики.СуммаДоли КАК СуммаДоли,
	//               |	внДольщики.Индекс КАК Индекс
	//               |ИЗ
	//               |	внДольщики КАК внДольщики
	//               |ГДЕ
	//               |	внДольщики.РеальныйКонтрагент";
	//Запрос.УстановитьПараметр("Дольщики", Объект.Дольщики.Выгрузить());
	//ТабДольщиковДляРасчета = Запрос.Выполнить().Выгрузить();
	//
	//Если ТабДольщиковДляРасчета.Количество() > 0 Тогда
	//	КолвоДольщиков	=  ТабДольщиковДляРасчета.Количество();
	//	ВторичныеОбъекты 		= "ОбъектыНедвижимости";
	//	СтоимостьПоДоговору 	= "СтоимостьПоДоговору";
	//	ОбщаяСумма = Объект[ВторичныеОбъекты].Итог(СтоимостьПоДоговору);
	//	ИтогДоля = ТабДольщиковДляРасчета.Итог("Доля");
	//	
	//	п_СуммаДолей 			= ТабДольщиковДляРасчета.Итог("Доля");
	//	Если 100 > п_СуммаДолей Тогда 
	//		п_ПераяСтрока = ТабДольщиковДляРасчета.Получить(0);
	//		п_ПераяСтрока.Доля = п_ПераяСтрока.Доля + (100 - п_СуммаДолей);
	//		ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(п_ПераяСтрока.Индекс), п_ПераяСтрока);
	//	КонецЕсли;
	//	
	//	//++ Юкаев Роман 20180214 (//778825
	//	СуммаДолейРасчетная = 0;
	//	//-- Юкаев Роман 20180214 )
	//	
	//	Для каждого СтрДольщики Из ТабДольщиковДляРасчета Цикл		
	//		Если УравнятьДолиМеняяСуммуДокумента Тогда 
	//		    пДоля = СтрДольщики.ЧислительДоли / СтрДольщики.ЗнаменательДоли;
	//		ИначеЕсли СтрДольщики.Доля = 100 Тогда
	//		//Если СтрДольщики.Доля = 100 Тогда
	//			пДоля = 1;
	//			СтрДольщики.ЧислительДоли 		= 1;
	//			СтрДольщики.ЗнаменательДоли 	= 1;
	//		ИначеЕсли СтрДольщики.Доля < 100  Тогда 
	//			пДоля = СтрДольщики.Доля / 100;
	//		КонецЕсли;
	//		//++ Юкаев Роман 20180214 (//778825
	//		СтрДольщики.Доля = пДоля * 100;
	//		//-- Юкаев Роман 20180214 )
	//        СтрДольщики.СуммаДоли = Окр(ОбщаяСумма * пДоля, 2);
	//		ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(СтрДольщики.Индекс), СтрДольщики);
	//		//++ Юкаев Роман 20180214 (//778825
	//		СуммаДолейРасчетная = СуммаДолейРасчетная + пДоля;
	//		//-- Юкаев Роман 20180214 )
	//	КонецЦикла;
	//	
	//	//++ Юкаев Роман 20180214 (//778825
	//	Если СуммаДолейРасчетная <> 1 Тогда
	//		СтрДольщики.СуммаДоли = Окр(ОбщаяСумма * (пДоля - (СуммаДолейРасчетная - 1)), 2);
	//		СтрДольщики.Доля = (пДоля - (СуммаДолейРасчетная - 1)) * 100;
	//		ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(СтрДольщики.Индекс), СтрДольщики);
	//	КонецЕсли;
	//	//-- Юкаев Роман 20180214 )
	//	
	//	// дробь 
	//	// проверим есть ли доли меньше 0,1%
	//	СтоПроцентов = Ложь;
	//	
	//	Если ИтогДоля = 100 и КолвоДольщиков = 1 Тогда
	//		СтоПроцентов = 	Истина; 
	//	КонецЕсли;
	//	
	//	п_СуммаВычисленийДолей 	= ТабДольщиковДляРасчета.Итог("СуммаДоли");
	//    
	//    
	//    //Шафорост ( 21.10.13 ID 249934 (теперь сумма документа будет считаться только если ее попросят, иначе будет всего лишь как раньше работать
	//	Если НЕ Окр(ОбщаяСумма, 2) = Окр(п_СуммаВычисленийДолей, 2) и УравнятьДолиМеняяСуммуДокумента Тогда
	//	    Если Окр(ОбщаяСумма, 2) > Окр(п_СуммаВычисленийДолей, 2) Тогда //вычислим необходимую разницу
	//	        Для каждого СтрДольщики Из ТабДольщиковДляРасчета Цикл
	//	            СтрДольщики.СуммаДоли = СтрДольщики.СуммаДоли + Окр(ОбщаяСумма - п_СуммаВычисленийДолей, 2);
	//				ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(СтрДольщики.Индекс), СтрДольщики);
	//	        КонецЦикла;
	//	        п_СуммаВычисленийДолей 	= ТабДольщиковДляРасчета.Итог("СуммаДоли");
	//	    КонецЕсли;
	//		Объект.СтоимостьСоСкидкой = п_СуммаВычисленийДолей;
	//		Если Объект.ОбъектыНедвижимости.Количество() = 1 Тогда
	//			Стр = Объект.ОбъектыНедвижимости[0];
	//			Стр.СтоимостьПоДоговору  = п_СуммаВычисленийДолей;
	//		КонецЕсли;
	//		//ИзменитьСуммуДокументаДляУравниванияДолей(ДокОбъект, ОбщаяСумма - п_СуммаВычисленийДолей);
	//	//ИначеЕсли Окр(ОбщаяСумма, 2) > Окр(п_СуммаВычисленийДолей, 2) Тогда
	//	ИначеЕсли Окр(ОбщаяСумма, 2) > Окр(п_СуммаВычисленийДолей, 2) Тогда
	//        п_ПераяСтрока = ТабДольщиковДляРасчета.Получить(0);
	//       // ТекстСообщения = "По док. " + Объект + ", После расчетов долей, сумма дольщика в строке " + (ДокОбъект.Дольщики.Индекс(п_ПераяСтрока) + 1) + " увеличена с " + п_ПераяСтрока.СуммаДолиВДеньгах + " на " + Окр(п_ПераяСтрока.СуммаДолиВДеньгах + (Окр(ОбщаяСумма - п_СуммаВычисленийДолей, 2)), 2) + "( разница: " + Окр(ОбщаяСумма - п_СуммаВычисленийДолей, 2) + ")";
	//        //ОбщегоНазначенияБюджет.СообщитьПользователю(ТекстСообщения, , "Дольщики[" + (ДокОбъект.Дольщики.Индекс(п_ПераяСтрока) + 1) + "]", "Объект");
	//        п_ПераяСтрока.СуммаДоли = Окр(п_ПераяСтрока.СуммаДоли + (Окр(ОбщаяСумма - п_СуммаВычисленийДолей, 2)), 2);
	//        п_ПераяСтрока.Доля = Окр(п_ПераяСтрока.Доля + (Окр(100 - п_СуммаДолей, 2)), 2);
	//        ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(п_ПераяСтрока.Индекс),п_ПераяСтрока);
	//    ИначеЕсли Окр(ОбщаяСумма, 2) < Окр(п_СуммаВычисленийДолей, 2) Тогда    
	//        п_ПераяСтрока = ТабДольщиковДляРасчета.Получить(0);
	//        //ТекстСообщения = "По док. " + ДокОбъект + ", После расчетов долей, сумма дольщика в строке " + (ДокОбъект.Дольщики.Индекс(п_ПераяСтрока) + 1) + " уменьшена с " + п_ПераяСтрока.СуммаДолиВДеньгах + " на " + Окр(п_ПераяСтрока.СуммаДолиВДеньгах - (Окр(п_СуммаВычисленийДолей - ОбщаяСумма, 2)), 2) + "( разница: " + Окр(п_СуммаВычисленийДолей - ОбщаяСумма, 2) + ")";
	//       // ОбщегоНазначенияБюджет.СообщитьПользователю(ТекстСообщения, , "Дольщики[" + (ДокОбъект.Дольщики.Индекс(п_ПераяСтрока) + 1) + "]", "Объект");
	//        п_ПераяСтрока.СуммаДоли = Окр(п_ПераяСтрока.СуммаДоли - (Окр(п_СуммаВычисленийДолей - ОбщаяСумма, 2)), 2);
	//        ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(п_ПераяСтрока.Индекс),п_ПераяСтрока);
	//    КонецЕсли;
	//    //Шафорост ) 21.10.13
	//Иначе
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Должен быть хотя бы один реальный клиент для распределения долей.", , "Дольщики", "Объект");
	//КонецЕсли;  
	//Для каждого СтрДольщики Из Объект.Дольщики Цикл		
	//	Если (Не СтрДольщики.Реальный и СтрДольщики.Условный  
	//		и СтрДольщики.Доля + СтрДольщики.ЧислительДоли + СтрДольщики.ЗнаменательДоли + СтрДольщики.СуммаДоли >0) 
	//		или (Не СтрДольщики.Реальный и Не СтрДольщики.Условный) Тогда 
	//		СтрДольщики.ЧислительДоли		= 0; 	
	//		СтрДольщики.ЗнаменательДоли 	= 0;
	//		СтрДольщики.Доля 				= 0;
	//		СтрДольщики.СуммаДоли 	= 0;
	//	КонецЕсли; 
	//КонецЦикла; 
	//-- Юкаев Роман 20180327 )
	
КонецПроцедуры // РасччитатьСуммыИДолиОтПроцентов() 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьВидимостьРеквизитовПоИпотеке();
	ОбновитьРучнойВВодДолей();
	ОбновитьДоступностьФлаговСогласования();
	ОбновитьДоступностьКоманд();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПересчитатьДоли(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРучнойВводДолей()
	
	Элементы.ДольщикиЧислительДоли.ТолькоПросмотр = Не Объект.РучнойРежимКорректировкиДолей;
	Элементы.ДольщикиЗнаменательДоли.ТолькоПросмотр = Не Объект.РучнойРежимКорректировкиДолей;
	Если Элементы.Найти("ДольщикиРежимРедактированияДолей") <> Неопределено Тогда
		Элементы.ДольщикиРежимРедактированияДолей.Заголовок  =  ?(Объект.РучнойРежимКорректировкиДолей, "Режим редактирования долей: Ручной", "Режим редактирования долей: Автомат");
		Элементы.ДольщикиРежимРедактированияДолей.Пометка = Объект.РучнойРежимКорректировкиДолей;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидУсловияОплатыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Объект.СОдобрением И Не ЗначениеЗаполнено(Объект.ИпотечныйБанк) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выберите ипотечный банк!",,"ИпотечныйБанк", "Объект.ИпотечныйБанк");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДольщикиПослеУдаления(Элемент)
	
//	ПересчитатьСкидкуНаКлиенте();
	ДольщикиУсловныйРеальныйПриИзменении(Элементы.ДольщикиРеальный);
	
	//<892472>, Басаргин (02.11.2018) {
	Объект.ДисконтнаяКарта = Неопределено;	
	//<892472> }
	
КонецПроцедуры

&НаКлиенте
Процедура СрокБронированияПриИзменении(Элемент)
		
	ПостроитьГрафикНаСервере(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СрокБронированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//<885876>, Басаргин (22.10.2018) {
	Элемент.ПараметрыВыбора = ПолучитьПараметыВыбораСрокаБронирования();
	//<885876> }
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//<866115>, Басаргин (12.09.2018) {
		Если НЕ ЗначениеЗаполнено(Объект.МаркетинговаяКомпания) И НЕ СделкаКН Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана маркетинговая кампания",  Объект.Ссылка, "МаркетинговаяКомпания", "Объект", Отказ);
		КонецЕсли;		
		//<866115> }
		
		Ошибки = Неопределено;
		Если Элементы.АгентствоНедвижимости.АвтоОтметкаНезаполненного <> Неопределено и Элементы.АгентствоНедвижимости.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(Объект.АгентствоНедвижимости) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.АгентствоНедвижимости",	НСтр("ru = 'Не заполнено агенство недвижимости.'"), "");
		
		КонецЕсли;
		
		Если Элементы.ТипСертификата.АвтоОтметкаНезаполненного <> Неопределено и Элементы.ТипСертификата.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(Объект.ТипСертификата) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ТипСертификата",	 НСтр("ru = 'Не заполнен тип сертификата.'"), "");
		КонецЕсли;
		
		Если НЕ Объект.Дольщики.Итог("Доля") = 100 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.Дольщики",	 НСтр("ru = 'Сумма долей не равна 100%.'"), "");
		КонецЕсли;	
		
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КомиссияПриИзмененииНаСервере()
	
	Если Объект.Комиссия.ВидКомиссии = Перечисления.ВидыСкидок.Относительная Тогда 
		Объект.РазмерКомиссии    = Объект.СтоимостьСоСкидкой * (Объект.Комиссия.РазмерКомиссии / 100);
	ИначеЕсли Объект.Комиссия.ВидКомиссии = Перечисления.ВидыСкидок.Абсолютная Тогда 
		Объект.РазмерКомиссии    =  Объект.Комиссия.РазмерКомиссии;
	ИначеЕсли Объект.Комиссия.ВидКомиссии = Перечисления.ВидыСкидок.ЗадаетсяВДокументе Тогда 
		Объект.РазмерКомиссии   =  0;
		Элементы.РазмерКомиссии.ТолькоПросмотр = Ложь;
	Иначе
		Объект.РазмерКомиссии   =  0;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура КомиссияПриИзменении(Элемент)
	КомиссияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияДолей(Команда)
	
	Объект.РучнойРежимКорректировкиДолей = Не Объект.РучнойРежимКорректировкиДолей;
	ОбновитьРучнойВводДолей();
	Если Не Объект.РучнойРежимКорректировкиДолей Тогда
		ПересчитатьДоли(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДольщикиЧислительДолиПриИзменении(Элемент)
	
	Если Не Объект.РучнойРежимКорректировкиДолей Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаКлиента = Элементы.Дольщики.ТекущиеДанные;
	ТекущаяСтрокаКлиента.Доля = 100 * ?(ТекущаяСтрокаКлиента.ЗнаменательДоли = 0, 0, ТекущаяСтрокаКлиента.ЧислительДоли/ТекущаяСтрокаКлиента.ЗнаменательДоли);
	ПересчитатьСкидкуНаКлиенте();
	РассчитатьДолиВсехДольщиков(Истина);//Не Объект.РучнойРежимКорректировкиДолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанДокументУдостоверяющийЛичность" и ТипЗнч(Параметр) = Тип("Структура") Тогда
		Отбор = Объект.Дольщики.НайтиСтроки(Новый Структура("Клиент", Параметр.ФизЛицо));
		Если Отбор.Количество() <> 0 Тогда
			Стр = Отбор[0];
			Если Параметр.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении")  
				ИЛИ Параметр.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ") Тогда
				Стр.ВнесеныДанныеОДокументеУдостоверяющемЛичность = Истина;
				Стр.Несовершеннолетний =  ОпределитьЧислоПолныхЛет(Параметр.ФизЛицо, Объект.Дата)<18;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьЧислоПолныхЛет(Клиент, ДатаДок)
	
	Если не ЗначениеЗаполнено(Клиент.ДатаРождения) Тогда
		Возврат 19;
	КонецЕсли;
	
	Дата1 = Клиент.ДатаРождения; 
	Дата2 = ДатаДок; 

	ЧислоЛет = Год(Дата2) - Год(Дата1); 
	Если Месяц(Дата2) < Месяц(Дата1) Тогда 
	    ЧислоЛет = ЧислоЛет-1; 
	ИначеЕсли Месяц(Дата2) = Месяц(Дата1) И День(Дата2) < День(Дата1) Тогда 
	    ЧислоЛет = ЧислоЛет-1; 
	КонецЕсли; 
	
	Возврат ЧислоЛет;

КонецФункции

&НаСервереБезКонтекста
Функция МинимальныйОбъемСС()
	
	Возврат ПланыВидовХарактеристик.ПараметрыУсловийОплаты.НайтиПоРеквизиту("ИмяПараметраВАлгоритме", "МинимальныйОбъемСобственныхСредств");
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидИпотеки(ВУО)
	
	Возврат ВУО.ВидИпотеки;//ПланыВидовХарактеристик.ПараметрыУсловийОплаты.НайтиПоРеквизиту("ИмяПараметраВАлгоритме", "МинимальныйОбъемСобственныхСредств");
	
КонецФункции

&НаКлиенте
Процедура РасчитатьРазмерСобственныхСредств(Элемент)
	Элементы.РазмерСобственныхСредств.ТолькоПросмотр = Ложь;
	Если ВидИпотеки(Объект.ВидУсловияОплаты) = ПредопределенноеЗначение("Перечисление.ВидыИпотеки.ИпотекаБезПВ") Тогда
		Объект.РазмерСобственныхСредств = 0;
		Элементы.РазмерСобственныхСредств.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	РазмерСС = Неопределено;
	МассивСтрок = Объект.ПараметрыУсловияОплаты.НайтиСтроки(Новый Структура("Параметр", МинимальныйОбъемСС()));
	Если МассивСтрок.Количество() <> 0 Тогда
		РазмерСС = МассивСтрок[0].Значение; 		
	КонецЕсли;
	РазмерСобственныхСредств = Объект.СтоимостьСоСкидкой - Объект.РазмерМатеринскогоКапитала - Объект.РазмерДополнительныхСредств;
	Если РазмерСС = Неопределено Тогда
		Объект.РазмерСобственныхСредств = РазмерСобственныхСредств;
	Иначе
		Если НЕ Элемент = "ЭтоНеНовыйГрафик" Тогда
			МинимальныйРазмерСС = РасчитатьМинимальныйРазмерСС(РазмерСС, Объект.СтоимостьСоСкидкой);		
			Объект.РазмерСобственныхСредств = ?(НЕ ЗначениеЗаполнено(МинимальныйРазмерСС) ,РазмерСобственныхСредств, МинимальныйРазмерСС);		
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчитатьМинимальныйРазмерСС(МинимальныйРазмер, Стоимость)
	 	
	Если МинимальныйРазмер = Неопределено Тогда  Возврат 0 КонецЕсли;
	
	Если ТипЗнч(МинимальныйРазмер) = Тип("Число") Тогда 
		Возврат (Стоимость*(МинимальныйРазмер/100));
	КонецЕсли;	
	
	Если МинимальныйРазмер.ВидРасчетногоЗначения = Перечисления.ВидыСкидок.Абсолютная Тогда 
		Возврат МинимальныйРазмер.Размер;		
	ИначеЕсли МинимальныйРазмер.ВидРасчетногоЗначения = Перечисления.ВидыСкидок.Относительная Тогда		
		Возврат (Стоимость*(МинимальныйРазмер.Размер/100));
	КонецЕсли;	

КонецФункции

&НаКлиенте
Процедура РасчитатьДолиМатКапитала(Команда)
	РеквизитыВУО = ВернутьЗначенияРеквизитовОбъект(Объект.ВидУсловияОплаты, "МатКапитал");	
	Если РеквизитыВУО.МатКапитал <> Неопределено И РеквизитыВУО.МатКапитал И НЕ Объект.РазмерМатеринскогоКапитала = 0 Тогда
		ПересчитатьСкидкуНаКлиенте();
		РассчитатьДолиВсехДольщиков_МатКапитал_Коля();	
	Иначе
		Сообщить("Укажите условие оплаты с мат. капиталом и размер мат. капитала");
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыОтчета(Квартира, Корпус, ПараметрыФормы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Квартирограмма.Этаж КАК Этаж,
	|	Квартирограмма.Подъезд КАК Подъезд,
	|	Квартирограмма.ОбъектСтроительства.МаксимальнаяЭтажность КАК ОбъектСтроительстваМаксимальнаяЭтажность
	|ИЗ
	|	РегистрСведений.Квартирограмма КАК Квартирограмма
	|ГДЕ
	|	Квартирограмма.ОбъектНедвижимости = &ОбъектНедвижимости
	|	И Квартирограмма.ОбъектСтроительства = &ОбъектСтроительства";
	
	Запрос.УстановитьПараметр("ОбъектНедвижимости", Квартира);
	Запрос.УстановитьПараметр("ОбъектСтроительства", Корпус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПараметрыФормы.Вставить("Подъезд",	ВыборкаДетальныеЗаписи.Подъезд);
		ПараметрыФормы.Вставить("ЭтажПерехода",	ВыборкаДетальныеЗаписи.Этаж);
		ПараметрыФормы.Вставить("ВсегоЭтажей",	ВыборкаДетальныеЗаписи.ОбъектСтроительстваМаксимальнаяЭтажность);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПриИзменении(Элемент)
	
	ТекущаяСтрокаКомментария 		= Элементы.Комментарии.ТекущиеДанные;	
	ТекущаяСтрокаКомментария.Дата 	= ТекущаяДата();
	ТекущаяСтрокаКомментария.Автор	= ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Объект.Комментарии.Сортировать("Дата Убыв");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДолиВсехДольщиков_МатКапитал_Коля()
	
	РучнойРежимКорректировкиДолей = Истина;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Дольщики.Клиент КАК Клиент,
	|	Дольщики.Доля КАК Доля,
	|	Дольщики.ЗнаменательДоли КАК ЗнаменательДоли,
	|	Дольщики.Условный КАК Условный,
	|	Дольщики.Реальный КАК Реальный,
	|	Дольщики.ЧислительДоли КАК ЧислительДоли,
	|	Дольщики.СуммаДоли КАК СуммаДоли,
	|	Дольщики.НомерСтроки - 1 КАК Индекс,
	|	Дольщики.Несовершеннолетний КАК Несовершеннолетний
	|ПОМЕСТИТЬ внДольщики
	|ИЗ
	|	&Дольщики КАК Дольщики
	|ГДЕ
	|	Дольщики.Реальный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	внДольщики.Клиент КАК Клиент,
	|	внДольщики.Доля КАК Доля,
	|	внДольщики.ЗнаменательДоли КАК ЗнаменательДоли,
	|	внДольщики.Условный КАК Условный,
	|	внДольщики.Реальный КАК Реальный,
	|	внДольщики.ЧислительДоли КАК ЧислительДоли,
	|	внДольщики.СуммаДоли КАК СуммаДоли,
	|	внДольщики.Индекс КАК Индекс,
	|	внДольщики.Несовершеннолетний КАК Несовершеннолетний
	|ИЗ
	|	внДольщики КАК внДольщики";
			   				   
	Запрос.УстановитьПараметр("Дольщики", Объект.Дольщики.Выгрузить());
	
	ТабДольщиковДляРасчета = Запрос.Выполнить().Выгрузить();	
	Если НЕ ТабДольщиковДляРасчета.Количество() > 0 Тогда    
        Сообщить("Должен быть хотя бы один реальный клиент для распределения долей.", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;			
	ТабДольщиковДляРасчета.Колонки.Добавить("СуммаДолиВДеньгахРасчетная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(28, 8, ДопустимыйЗнак.Любой)));
	ОбщееКоличествоДольщиков = ТабДольщиковДляРасчета.Количество();
			
	//дети
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внДольщики.Клиент КАК Клиент,
	|	внДольщики.Доля КАК Доля,
	|	внДольщики.ЗнаменательДоли КАК ЗнаменательДоли,
	|	внДольщики.Условный КАК Условный,
	|	внДольщики.Реальный КАК Реальный,
	|	внДольщики.ЧислительДоли КАК ЧислительДоли,
	|	внДольщики.СуммаДоли КАК СуммаДоли,
	|	внДольщики.Индекс КАК Индекс,
	|	внДольщики.Несовершеннолетний КАК Несовершеннолетний
	|ИЗ
	|	внДольщики КАК внДольщики
	|ГДЕ
	|	внДольщики.Реальный
	|	И внДольщики.Несовершеннолетний";
	
	ТабДольщиковДляРасчета_Дети = Запрос.Выполнить().Выгрузить();
	Если ТабДольщиковДляРасчета_Дети.Количество() < 2 Тогда    
        Сообщить("Количество несовершеннолетних детей должно быть как минимум двое", СтатусСообщения.ОченьВажное);		
		Возврат;
	КонецЕсли;		
	ТабДольщиковДляРасчета_Дети.Колонки.Добавить("СуммаДолиВДеньгахРасчетная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(28, 8, ДопустимыйЗнак.Любой)));
	КолвоДольщиков_Дети = ТабДольщиковДляРасчета_Дети.Количество();
	
	//не дети
	Запрос.Текст =
	"ВЫБРАТЬ
	|	внДольщики.Клиент,
	|	внДольщики.Доля,
	|	внДольщики.ЗнаменательДоли,
	|	внДольщики.Условный,
	|	внДольщики.Реальный,
	|	внДольщики.ЧислительДоли,
	|	внДольщики.СуммаДоли,
	|	внДольщики.Индекс,
	|	внДольщики.Несовершеннолетний
	|ИЗ
	|	внДольщики КАК внДольщики
	|ГДЕ
	|	внДольщики.Реальный
	|	И НЕ внДольщики.Несовершеннолетний";
	
	ТабДольщиковДляРасчета_НеДети = Запрос.Выполнить().Выгрузить();
	Если ТабДольщиковДляРасчета_НеДети.Количество() = 0 Тогда    
        Сообщить("Количество взрослых = 0, расчет невозможен", СтатусСообщения.ОченьВажное);		
		Возврат;
	КонецЕсли;			
	ТабДольщиковДляРасчета_НеДети.Колонки.Добавить("СуммаДолиВДеньгахРасчетная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(28, 8, ДопустимыйЗнак.Любой)));
	КолвоДольщиков_НеДети = ТабДольщиковДляРасчета_НеДети.Количество();		
	

	ОбщаяСумма = Объект.СтоимостьСоСкидкой;; 
	Если ОбщаяСумма = 0 Тогда 
		ОбщаяСумма = Объект.ОбъектыНедвижимости.Итог("Стоимость"); 
	КонецЕсли;
	
	//1. Расчет суммы доли ребенка P/m
	СуммаДолиРебенка = Объект.РазмерМатеринскогоКапитала / КолвоДольщиков_Дети;
	//3. Расчет доли ребенка
	ДоляРебенка = СуммаДолиРебенка / ОбщаяСумма;
	//4. Округляем вверх до 2 знаков
	ДоляРебенка = ?(ДоляРебенка - Окр(ДоляРебенка, 2)  > 0, Окр(ДоляРебенка, 2) + 0.01, Окр(ДоляРебенка, 2));
	
	//4.1. Итоговая сумма доли ребенка C * z = B
	СуммаДолиРебенка = ОбщаяСумма * ДоляРебенка;	
	СуммаДолиРебенка = Окр(СуммаДолиРебенка, 2);
	
	ИтогСуммаДолиРебенка = 0;
	ИтогДоляРебенка = 0;
	Для каждого СтрокаДети Из ТабДольщиковДляРасчета_Дети Цикл
		СтрокаДети.СуммаДоли = СуммаДолиРебенка;
		СтрокаДети.СуммаДолиВДеньгахРасчетная = СуммаДолиРебенка; 
		СтрокаДети.Доля = ДоляРебенка * 100;
		//ЗаполнитьЧислительИЗнаменательДроби(СтрокаДети, 10000);
		СтрокаДети.ЧислительДоли = ДоляРебенка * 100;
		СтрокаДети.ЗнаменательДоли = 100;
		ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(СтрокаДети.Индекс), СтрокаДети);
		
		ИтогСуммаДолиРебенка = ИтогСуммаДолиРебенка + СуммаДолиРебенка;
		ИтогДоляРебенка = ИтогДоляРебенка + СтрокаДети.Доля;//ДоляРебенка; 
	КонецЦикла; 	
	
	
	//5. 100 - СУММ(z) / (n - m) = y
	ДоляВзрослого = (100 - ИтогДоляРебенка) / КолвоДольщиков_НеДети;	
	
	Если ДоляВзрослого - Окр(ДоляВзрослого, 2)  > 0 Тогда
		Сообщить("Оствшуюся долю ""не детей"" нельзя разделить поровну между " + КолвоДольщиков_НеДети + " взрослыми, обратите внимание на расчет долей."); 
	КонецЕсли; 
	
	ДоляВзрослого = Окр(ДоляВзрослого, 0);	
	МассивРаспределенияДолейВзрослых = Новый Массив;
	
	Если КолвоДольщиков_НеДети > 1 Тогда
		ДоляПоследнегоВзрослого = 100 - (ИтогДоляРебенка + ДоляВзрослого * (КолвоДольщиков_НеДети - 1));
		Для й = 0 По КолвоДольщиков_НеДети - 2 Цикл
			МассивРаспределенияДолейВзрослых.Добавить(ДоляВзрослого);		
		КонецЦикла; 
		МассивРаспределенияДолейВзрослых.Добавить(ДоляПоследнегоВзрослого);	
	Иначе
		МассивРаспределенияДолейВзрослых.Добавить(ДоляВзрослого);			
	КонецЕсли;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОбщаяСумма - ИтогСуммаДолиРебенка, МассивРаспределенияДолейВзрослых); //ТЧ_Клиенты.ВыгрузитьКолонку("Доля")
	Если МассивСумм.Количество() = ТабДольщиковДляРасчета_НеДети.Количество() Тогда
		Для к = 0 По ТабДольщиковДляРасчета_НеДети.Количество() - 1 Цикл
			СтрокаНеДети = ТабДольщиковДляРасчета_НеДети[к];
			СтрокаНеДети.СуммаДоли = МассивСумм[к];
			СтрокаДети.СуммаДолиВДеньгахРасчетная = МассивСумм[к];
			СтрокаНеДети.Доля = МассивРаспределенияДолейВзрослых[к];
			СтрокаНеДети.ЧислительДоли = МассивРаспределенияДолейВзрослых[к] ;
			СтрокаНеДети.ЗнаменательДоли = 100;			
			ЗаполнитьЗначенияСвойств(Объект.Дольщики.Получить(СтрокаНеДети.Индекс), СтрокаНеДети);
		КонецЦикла; 
	Иначе
		Сообщить("Проблема с вычислением сумм долей взрослых. Массив коэфициентов не получен");
	КонецЕсли;
	
КонецПроцедуры // РасччитатьСуммыИДолиОтПроцентов()

&НаКлиенте
Процедура ДоговорГотовКПодписаниюПриИзменении(Элемент)
	ДатаУстановкиФлага("ДоговорГотовКПодписанию");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОплаченПриИзменении(Элемент)
	ДатаУстановкиФлага("ДоговорОплачен");
КонецПроцедуры

&НаКлиенте
Процедура УДДУСогласованПриИзменении(Элемент)
	ДатаУстановкиФлага("УДДУСогласован");
КонецПроцедуры

&НаКлиенте
Процедура СделкаЗакрытаПриИзменении(Элемент)
	ДатаУстановкиФлага("СделкаЗакрыта");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПодписанПриИзменении(Элемент)
	ДатаУстановкиФлага("ДоговорПодписан");
КонецПроцедуры

&НаКлиенте
Процедура ПодготовкаКРегистрацииПриИзменении(Элемент)
	ДатаУстановкиФлага("ПодготовкаКРегистрации");
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияУДДУПриИзменении(Элемент)
	ДатаУстановкиФлага("РегистрацияУДДУ");
КонецПроцедуры

&НаКлиенте
Процедура ДатаУстановкиФлага(ИмяЭлемента)

	Объект["Дата" + ИмяЭлемента] = ТекущаяДата();
	ОбновитьДоступностьФлаговСогласования();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьФлаговСогласования()
	
	Элементы.ДоговорГотовКПодписанию.Доступность 	= НЕ Объект.ДоговорГотовКПодписанию;
	Элементы.ДоговорПодписан.Доступность 			= НЕ Объект.ДоговорПодписан;
	Элементы.ДоговорОплачен.Доступность				= НЕ Объект.ДоговорОплачен;
	Элементы.ПодготовкаКРегистрации.Доступность 	= НЕ Объект.ПодготовкаКРегистрации;
	Элементы.УДДУСогласован.Доступность 			= НЕ Объект.УДДУСогласован;
	Элементы.РегистрацияУДДУ.Доступность 			= НЕ Объект.РегистрацияУДДУ;
	Элементы.СделкаЗакрыта.Доступность 				= НЕ Объект.СделкаЗакрыта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКоманд()

	ДоступностьЭлементов = СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.Оформление");	
	
	Если Элементы.Найти("ФормаСогласовать") <> Неопределено Тогда
		Элементы.ФормаСогласовать.Доступность 					= ДоступностьЭлементов И Объект.Проведен;
	КонецЕсли;
	Если Элементы.Найти("ФормаОтказ") <> Неопределено Тогда
		Элементы.ФормаОтказ.Доступность 						= СтатусСделки <> ПредопределенноеЗначение("Перечисление.СтатусыСделки.СогласованиеУПН")
																	И СтатусСделки <> ПредопределенноеЗначение("Перечисление.СтатусыСделки.Согласована")
																	И СтатусСделки <> ПредопределенноеЗначение("Перечисление.СтатусыСделки.Отказ");
	КонецЕсли;	
	Если Элементы.Найти("ОбновитьУсловияИВидыУсловийОплаты") <> Неопределено Тогда
		Элементы.ОбновитьУсловияИВидыУсловийОплаты.Доступность 	= ДоступностьЭлементов;
	КонецЕсли;
	Если Элементы.Найти("ПостроитьГрафик") <> Неопределено Тогда
		//<890184>, Басаргин (21.11.2018) {
		Элементы.ПостроитьГрафик.Доступность 					= ДоступностьЭлементов И НЕ СделкаКН;		
		//<890184> }
	КонецЕсли;
	Если Элементы.Найти("ДольщикиПересчитатьДоли") <> Неопределено Тогда
		Элементы.ДольщикиПересчитатьДоли.Доступность 			= ДоступностьЭлементов;
	КонецЕсли;
	Если Элементы.Найти("ДольщикиРежимРедактированияДолей") <> Неопределено Тогда
		Элементы.ДольщикиРежимРедактированияДолей.Доступность 	= ДоступностьЭлементов;
	КонецЕсли;		
	Если Элементы.Найти("ДольщикиРасчитатьДолиМатКапитала") <> Неопределено Тогда
		Элементы.ДольщикиРасчитатьДолиМатКапитала.Доступность 	= ДоступностьЭлементов;		
	КонецЕсли;
		
	Если СтатусСделки = ПредопределенноеЗначение("Перечисление.СтатусыСделки.Согласована") Тогда 
		Если Элементы.Найти("ФормаЗаписатьИЗакрыть") <> Неопределено Тогда
			Элементы.ФормаЗаписатьИЗакрыть.Доступность 	= Ложь;
		КонецЕсли;
		Если Элементы.Найти("ФормаПровести") <> Неопределено Тогда
			Элементы.ФормаПровести.Доступность 	= Ложь;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // ОбновитьДоступностьКоманд()

&НаКлиенте
Процедура ОткрытьОН(Команда)
	
	ТекущаяСтрокаОбъектНедвижимости = Элементы.ОбъектыНедвижимости.ТекущиеДанные;
	
	Если ТекущаяСтрокаОбъектНедвижимости <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаОбъектНедвижимости.ОбъектНедвижимости) Тогда //Юкаев Роман 20180516 ()
		ОткрытьФорму("Справочник.ОбъектыНедвижимости.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекущаяСтрокаОбъектНедвижимости.ОбъектНедвижимости), ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;	

КонецПроцедуры

//++ Юкаев Роман 20180122 (
&НаКлиенте
Процедура ВидПраваПриИзменении(Элемент)
	
	ПересчитатьСкидкуНаКлиенте();
	
КонецПроцедуры
//-- Юкаев Роман 20180122 )

//<781716>, Басаргин (21.02.2018) {
&НаКлиенте
Процедура ПечатьДокументаИзУПН(ТекСтрока, МассивАдресов)
	
	Для каждого АдресТД Из МассивАдресов Цикл
		
		ТабДок 								= ПолучитьИзВременногоХранилища(АдресТД);
		ТабДок.РазмерСтраницы				= "A4";
		
		ИдентификаторПечатнойФормы 			= "Макет";
		МодульУправлениеПечатьюКлиент 		= ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");     
		КоллекцияПечатныхФорм 				= МодульУправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
		ПечатнаяФорма 						= МодульУправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
		ПечатнаяФорма.СинонимМакета			= Строка(ТекСтрока);
		ПечатнаяФорма.ТабличныйДокумент 	= ТабДок;
		ПечатнаяФорма.ИмяФайлаПечатнойФормы = Строка(ТекСтрока);			
		
	КонецЦикла;		
	
	ОбластиОбъектов = Новый СписокЗначений;
	МодульУправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПечатьИзУПННаСервере(Знач ЗаявкаНаСделку, ТипФормы)
	
	МасСтрок = Новый Массив;
	МасСтрок.Добавить(ЗаявкаНаСделку);
	
	//++ Юкаев Роман 20180718 (//AN-81
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаСделку, "Проект");
	БазаDS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ПроектБазыДомостроителя");
	Директор = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Руководитель")));
	
	МассивАдресов = Документы.ЗаявкаНаСделку.ПолучитьАдресТабличногоДокументаНаСервере(МасСтрок, ТипФормы, Строка(ПараметрыСеанса.ТекущийПользователь), БазаDS, Директор);
	//МассивАдресов = Документы.ЗаявкаНаСделку.ПолучитьАдресТабличногоДокументаНаСервере(МасСтрок, ТипФормы, Строка(ПараметрыСеанса.ТекущийПользователь), БазаDS);
	//-- Юкаев Роман 20180718 )
	
	Возврат МассивАдресов; 

КонецФункции
//<781716> }

//<796491>, Басаргин (23.03.2018) {
&НаКлиенте
Процедура ОткрытьПаспортныеДанныеКлиента(Команда)
	
	ТекущиеДанные = Элементы.Дольщики.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Клиент) Тогда		
		ОткрытьФорму("Справочник.Клиенты.Форма.ПаспортныеДанныеКлиента", Новый Структура("ФизическоеЛицо", ТекущиеДанные.Клиент), ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	КонецЕсли;		
	
КонецПроцедуры
//<796491> }

//++ Юкаев Роман 20180327 (//
&НаСервере
Процедура ОбновитьВидимостьЭлементовФормыНаСервере()
	
	//<852121>, Басаргин (30.10.2018) {
	УправлениеВидимостьюДисконтнойКартыНаСервере(НЕ Параметры.Ключ.Пустая());
	//<852121> }
	
	//<890184>, Басаргин (21.11.2018) {
	Если СделкаКН Тогда
		Элементы.МаркетинговаяКомпания.ТолькоПросмотр = Истина;
		Элементы.ТипСертификата.ТолькоПросмотр = Истина;			
		Элементы.СрокБронирования.ТолькоПросмотр = Истина;			
		Элементы.Скидка.ТолькоПросмотр = Истина;			
		Элементы.СтоимостьСоСкидкой.ТолькоПросмотр = Истина;			
		Элементы.РазмерСобственныхСредств.ТолькоПросмотр = Истина;
		Элементы.ПостроитьГрафик.Доступность = Ложь;
		Элементы.ГруппаГрафикПлатежей.ТолькоПросмотр = Ложь;
	КонецЕсли;
	//<890184> }	
	
КонецПроцедуры
//-- Юкаев Роман 20180327 )

//<885876>, Басаргин (22.10.2018) {
&НаСервереБезКонтекста
Функция ПолучитьПараметыВыбораСрокаБронирования()
	
	Если УправлениеДоступом.ЕстьРоль("РедактированиеСрокаБронированиеВЗаявкеНаСделку", , ПользователиКлиентСервер.ТекущийПользователь())
		 И НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.РучнойВвод", Истина);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Возврат НовыеПараметры;
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(Новый Массив());
	
КонецФункции
//<885876> }

//<852121>, Басаргин (18.10.2018) {
&НаСервере
Процедура УправлениеВидимостьюДисконтнойКартыНаСервере(ТолькоВидимость = Ложь)
	
	Элементы.ДисконтнаяКарта.Видимость = Ложь;
	Объект.ДисконтнаяКарта = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Объект.МаркетинговаяКомпания) Тогда
		Возврат;	
	КонецЕсли;
	
	ДисконтнаяКартаВидимость = Ложь;
	
	ВыгрузкаКомплекснойМК = ПрочитатьСоставКомплекснойКампании(Объект.МаркетинговаяКомпания);
	Если ВыгрузкаКомплекснойМК.Количество() Тогда
		ДисконтнаяКартаВидимость = ВыгрузкаКомплекснойМК.НайтиСтроки(Новый Структура("ВыдачаДисконтныхКарт", Истина)).Количество() > 0;			
	Иначе
		ДисконтнаяКартаВидимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаркетинговаяКомпания, "ВыдачаДисконтныхКарт");	
	КонецЕсли;
	
	Элементы.ДисконтнаяКарта.Видимость = ДисконтнаяКартаВидимость ИЛИ ЗначениеЗаполнено(Объект.ДисконтнаяКарта);
	
	//Если ДисконтнаяКартаВидимость И НЕ ТолькоВидимость Тогда		
	//	СписокВыгодоприобретатели = Новый СписокЗначений();
	//	Выгодоприобретатели = Объект.Дольщики.Выгрузить(); 
	//	Для каждого Строка Из Выгодоприобретатели Цикл
	//		Если Строка.Реальный Тогда
	//			СписокВыгодоприобретатели.Добавить(Строка.Клиент);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ВыдачаДисконтныйКарт.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.ВыдачаДисконтныхКарт КАК ВыдачаДисконтныйКарт
	//	|ГДЕ
	//	|	НЕ ВыдачаДисконтныйКарт.ПометкаУдаления
	//	|	И НЕ ВыдачаДисконтныйКарт.Использована
	//	|	И ВыдачаДисконтныйКарт.Выгодоприобретатель В(&Выгодоприобретатели)
	//	|	И ВыдачаДисконтныйКарт.МаркетинговаяКампания В(&СписокМК)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВыдачаДисконтныйКарт.ДатаВыдачи";
	//	
	//	ТретьеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаркетинговаяКомпания, "ТретьеЛицо");	
	//	
	//	Если ТретьеЛицо Тогда
	//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВыдачаДисконтныйКарт.Выгодоприобретатель В(&Выгодоприобретатели)", "");	
	//	Иначе
	//		Запрос.УстановитьПараметр("Выгодоприобретатели", СписокВыгодоприобретатели);		
	//    КонецЕсли;
	//	
	//	СписокМК = Новый СписокЗначений();
	//	Если ВыгрузкаКомплекснойМК.Количество() Тогда			
	//		Строки = ВыгрузкаКомплекснойМК.НайтиСтроки(Новый Структура("ВыдачаДисконтныхКарт", Истина));
	//		Для каждого Строка Из Строки Цикл
	//			СписокМК.Добавить(Строка.МаркетинговаяКампания);	
	//		КонецЦикла;
	//	Иначе
	//		СписокМК.Добавить(Объект.МаркетинговаяКомпания);	
	//	КонецЕсли;
	//	
	//	Запрос.УстановитьПараметр("СписокМК", СписокМК);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если РезультатЗапроса.Пустой() Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//		Объект.ДисконтнаяКарта = ВыборкаДетальныеЗаписи.Ссылка;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияФормы()
	
	ПараметрыФормы = Новый Структура();
		
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		ПараметрыФормы.Вставить("КлючЗаписи", Объект.ДисконтнаяКарта);
	КонецЕсли;	
		
	СписокВыгодоприобретатели = Новый СписокЗначений();
	Выгодоприобретатели = Объект.Дольщики.Выгрузить(); 
	Для каждого Строка Из Выгодоприобретатели Цикл
		Если Строка.Реальный Тогда
			СписокВыгодоприобретатели.Добавить(Строка.Клиент);
		КонецЕсли;
	КонецЦикла;
	
	СписокМК = Новый СписокЗначений();
	ВыгрузкаКомплекснойМК = ПрочитатьСоставКомплекснойКампании(Объект.МаркетинговаяКомпания);
	Если ВыгрузкаКомплекснойМК.Количество() Тогда
		Для каждого СтрокаМК Из ВыгрузкаКомплекснойМК Цикл
			Если СтрокаМК.ВыдачаДисконтныхКарт Тогда
				СписокМК.Добавить(СтрокаМК.МаркетинговаяКампания);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СписокМК.Добавить(Объект.МаркетинговаяКомпания);	
	КонецЕсли;
	
	ПараметрыФормы.Вставить("МаркетинговаяКомпания", СписокМК);
	ПараметрыФормы.Вставить("Использована", Ложь);
	
	ТретьеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаркетинговаяКомпания, "ТретьеЛицо");	
	Если НЕ ТретьеЛицо Тогда
		ПараметрыФормы.Вставить("Выгодоприобретатели", СписокВыгодоприобретатели);	
	КонецЕсли;	
		
	Возврат ПараметрыФормы;
	
КонецФункции 

Функция ПрочитатьСоставКомплекснойКампании(КомплекснаяКампания) Экспорт 
    
    Запрос = Новый Запрос;
    Запрос.Текст = "ВЫБРАТЬ
                   |	СоставКомплекснойКампании.МаркетинговаяКампания КАК МаркетинговаяКампания,
                   |	СоставКомплекснойКампании.МаркетинговаяКампания.ВыдачаДисконтныхКарт КАК ВыдачаДисконтныхКарт
                   |ИЗ
                   |	РегистрСведений.СоставКомплекснойКампании КАК СоставКомплекснойКампании
                   |ГДЕ
                   |	СоставКомплекснойКампании.КомплекснаяКампания = &КомплекснаяКампания";
    Запрос.УстановитьПараметр("КомплекснаяКампания", КомплекснаяКампания);               
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораДисконтнойКарты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтаняКарта;
	
КонецПроцедуры
//<852121> }

//<890184>, Басаргин (21.11.2018) {
Процедура УстановитьПризнакСделкиКН()
	
	СделкаКН = Ложь;	
	Для каждого Строка Из Объект.ОбъектыНедвижимости Цикл
		ОС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ОбъектНедвижимости, "Владелец");
		НазначениеОбъектаСтроительства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОС, "НазначениеОбъектаСтроительства");		
		Если НазначениеОбъектаСтроительства = Перечисления.НазначениеОбъектовСтроительства.БизнесЦентр Тогда
			СделкаКН = Истина;	
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
//<890184> }

#КонецОбласти




