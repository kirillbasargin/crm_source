 
#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа(ЭтотОбъект, Таблица);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура УстановитьПометкуУдаленияУВложений(Ссылка, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОбъектаМетаданных = "ИпотечнаяЗаявкаПрисоединенныеФайлы";

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует	
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК Файлы
	|ГДЕ
	|	Файлы.ПометкаУдаления <> &ПометкаУдаления
	|	И Файлы.ВладелецФайла = &ВладелецФайла
	|");
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				|т.к. содержит присоединенный файл ""%2"",
				|занятый для редактирования.'"),
				Строка(Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось заблокировать объект " + Объект + "! " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		Объект.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Клиенты") Тогда
		КонтактноеЛицо = ДанныеЗаполнения;
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//СтатусЗаявки = Справочники.СтатусыЗаявок.ОтказКлиента;
		ПредварительноеРешение = Справочники.ПредварительныеРешенияБанков.Одобрение;
		НомерТелефонаКлиента = ДанныеЗаполнения.ОсновнойТелефон;
		ФИОКлиента = ДанныеЗаполнения.Наименование;
		ВидКредита = Справочники.ВидыКредитов.ИпотечныйКредит;
		Черновик = Истина;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Анкета") Тогда
		ЗаполнитьПоДаннымАнкеты(ДанныеЗаполнения);
	//++ Юкаев Роман 20180123 (	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасчетИпотеки") Тогда
		ЗаполнитьПоДаннымДокументаРасчетИпотеки(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РасчетИпотеки") Тогда
		ЗаполнитьПоДаннымДокументаРасчетИпотеки(ДанныеЗаполнения.РасчетИпотеки);
	//-- Юкаев Роман 20180123 )
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана Дата", ЭтотОбъект.Ссылка, "Дата", "", Отказ);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Ответственный", ЭтотОбъект.Ссылка, "Ответственный", "", Отказ);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ВидКредита) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Вид кредита", ЭтотОбъект.Ссылка, "ВидКредита", "", Отказ);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(РекомендуемыйБанк) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан Рекомендуемый банк", ЭтотОбъект.Ссылка, "РекомендуемыйБанк", "", Отказ);
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ОтделениеБанка) И ВРег(РекомендуемыйБанк.Наименование) = "СБЕРБАНК" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано Отделение банка", ЭтотОбъект.Ссылка, "ОтделениеБанка", "", Отказ);
	Иначе
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ОтделениеБанка"));
	КонецЕсли;		
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Ссылка) И НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	//++ Юкаев Роман 20180423 (//810704
	Если Ссылка.РешениеБанка <> Справочники.РешенияБанков.ОдобрениеБанка И РешениеБанка = Справочники.РешенияБанков.ОдобрениеБанка Тогда
		
		ЗаявкаНаСделку = ПолучитьЗаявкуНаСделку(РасчетИпотеки);
		Если ЗаявкаНаСделку <> Неопределено Тогда
			ДокументОбъект = ЗаявкаНаСделку.ПолучитьОбъект();
			
			НС = ДокументОбъект.Комментарии.Добавить();
			НС.Дата = Дата;
			НС.Комментарий = "Получено одобрение по клиенту " + СокрЛП(ФИОКлиента) + " от отделения " + Строка(ОтделениеБанка) + " " + Строка(РекомендуемыйБанк);
			НС.Автор = Ответственный;
			
			ДокументОбъект.Комментарии.Сортировать("Дата Убыв");
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Ошибка записи комментария в документ" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	//-- Юкаев Роман 20180423 )
	
	УстановитьПометкуУдаленияУВложений(Ссылка, ПометкаУдаления);	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Движения.ИпотечныеЗаявкиВБанк.Записывать = Истина;
	Движения.ИпотечныеЗаявкиВБанк.Очистить();
	
	Движение = Движения.ИпотечныеЗаявкиВБанк.Добавить();
	Движение.Период = Дата;
	Движение.ВидКредита = ВидКредита;
	Движение.РекомендуемыйБанк = РекомендуемыйБанк;
	Движение.ОтделениеБанка = ОтделениеБанка;
	Движение.КонтактноеЛицо = КонтактноеЛицо;
	Движение.ПредварительноеРешение = ПредварительноеРешение;
	Движение.РешениеБанка = РешениеБанка;
	Движение.Ответственный = Ответственный;
	Движение.ДатаПодачиЗаявки = ДатаПодачиЗаявки;
	Движение.ДатаРешенияБанка = ДатаРешенияБанка;
	Движение.нПериод = ТекущаяДата();
	Движение.Комментарий = Комментарий;
	
	//++ Юкаев Роман 20180124 (
	Движение.Запрос = РасчетИпотеки.Запрос;
	//-- Юкаев Роман 20180124 )
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПрикрепленныеФайлы.Очистить();
	КомментарииЗаявки.Очистить();
	СтатусЗаявки = 0;
	УспешнаяОтправка = Ложь;
	Черновик = Истина;
	СостояниеЗаявки = 0;
	ДатаПодачиЗаявки = 0;
	ID_Заявки = 0;
	ДатаУстановкиСтатуса = 0;
	КомментарийСтатуса = "";
	sum_approved = 0;	
	transactID = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДаннымАнкеты(ДанныеЗаполнения)
	
	КонтактноеЛицо = ДанныеЗаполнения.КонтактноеЛицо;
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//СтатусЗаявки = Справочники.СтатусыЗаявок.ОтказКлиента;
	ПредварительноеРешение = Справочники.ПредварительныеРешенияБанков.Одобрение;
	ВидКредита = Справочники.ВидыКредитов.ИпотечныйКредит;
	//Черновик = Истина;
	
	ВопросыАнкетирования = Новый Массив;
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000327")); //Серия паспорта
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000328")); //Номер паспорта
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000251")); //Email:
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000249")); //Мобильный телефон
	
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000218")); //Фамилия
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000219")); //Имя
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000220")); //Отчество	
	
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000221")); //Программа кредитования
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000224")); //Сумма кредита
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000225")); //Первоначальный взнос
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000315")); //Дата рождения
	
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000239")); //Индекс ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000238")); //Страна ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000240")); //Регион ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000241")); //Район ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000242")); //Населенный пункт ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000243")); //Улица ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000244")); //Номер дома ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000245")); //Корпус ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000246")); //Строение ФП
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000247")); //Номер квартиры/офиса ФП
	
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000277")); //Индекс ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000276")); //Страна ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000278")); //Регион ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000279")); //Район ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000280")); //Населенный пункт ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000281")); //Улица ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000284")); //Номер дома ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000283")); //Корпус ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000285")); //Строение ФО
	ВопросыАнкетирования.Добавить(ПланыВидовХарактеристик.ВопросыДляАнкетирования.НайтиПоКоду("000000282")); //Номер квартиры/офиса ФО
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтветыНаВопросыАнкет.Ответ,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос,
	|	ОтветыНаВопросыАнкет.ЭлементарныйВопрос.Код КАК Код
	|ИЗ
	|	РегистрСведений.ОтветыНаВопросыАнкет КАК ОтветыНаВопросыАнкет
	|ГДЕ
	|	ОтветыНаВопросыАнкет.Регистратор = &Регистратор
	|	И ОтветыНаВопросыАнкет.ЭлементарныйВопрос В(&ЭлементарныйВопрос)";
	
	Запрос.УстановитьПараметр("Регистратор", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("ЭлементарныйВопрос", ВопросыАнкетирования);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РезТЗ = РезультатЗапроса.Выгрузить();
		//Выборка = РезультатЗапроса.Выбрать();
		СерияНомерПаспорта = "" + НайтиВТаблицеПоКоду(РезТЗ, "000000327") + " " + НайтиВТаблицеПоКоду(РезТЗ, "000000328");
		ВидОбъектаНедвижимостиСтр = "" + НайтиВТаблицеПоКоду(РезТЗ, "000000221");
		НомерТелефонаКлиента = "" + НайтиВТаблицеПоКоду(РезТЗ, "000000249");
		EmailКлиента = "" + НайтиВТаблицеПоКоду(РезТЗ, "000000251");
		ФИОКлиента = "" + НайтиВТаблицеПоКоду(РезТЗ, "000000218") + " " + НайтиВТаблицеПоКоду(РезТЗ, "000000219") + " " + НайтиВТаблицеПоКоду(РезТЗ, "000000220");
		
		Если ВидОбъектаНедвижимостиСтр = "Строящееся жилье" Тогда
			ВидОбъектаНедвижимости = Справочники.ВидыОбъектовНедвижимости.Первичка;
		ИначеЕсли ВидОбъектаНедвижимостиСтр = "Готовое жилье" Тогда
			ВидОбъектаНедвижимости = Справочники.ВидыОбъектовНедвижимости.Вторичка;
		ИначеЕсли ВидОбъектаНедвижимостиСтр = "Загородная недвижимость" Тогда
			ВидОбъектаНедвижимости = Справочники.ВидыОбъектовНедвижимости.ЗагороднаяНедвижимость;
		Иначе
			ВидОбъектаНедвижимости = 0;				
		КонецЕсли;
		
		Попытка
			СуммаКредитаВРублях = НайтиВТаблицеПоКоду(РезТЗ, "000000224");
		Исключение
			СуммаКредитаВРублях = 0;	
		КонецПопытки;
		ПервоначальныйВзнос = НайтиВТаблицеПоКоду(РезТЗ, "000000225");
		Попытка
			ПредполагаемаяСтоимостьОН  = ?(СуммаКредитаВРублях = Неопределено, 0, СуммаКредитаВРублях) + ?(ПервоначальныйВзнос = Неопределено, 0, ПервоначальныйВзнос);
		Исключение
			ПредполагаемаяСтоимостьОН = 0;
		КонецПопытки;
		ДатаРожденияКлиента = НайтиВТаблицеПоКоду(РезТЗ, "000000315");
		АдресФактическогоПроживания = СобратьАдресФактическогоПроживания(РезТЗ);
		АдресМестаРаботы = СобратьАдресМестаРаботы(РезТЗ);
	КонецЕсли;
	
КонецПроцедуры

Функция СобратьАдресФактическогоПроживания(РезТЗ)
	
	Индекс = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000239"));
	Страна = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000238"));
	Регион = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000240"));
	Район = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000241"));
	НаселенныйПункт = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000242"));
	Улица = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000243"));
	НомерДома = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000244"));
	Корпус = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000245"));
	Строение = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000246"));
	Номер = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000247"));
	
	АдресФактическогоПроживания = ?(ЗначениеЗаполнено(Индекс), Индекс + ", ", "")
		+ ?(ЗначениеЗаполнено(Страна), Страна + ", ", "")
		+ ?(ЗначениеЗаполнено(Район), Район + ", ", "")
		+ ?(ЗначениеЗаполнено(НаселенныйПункт), НаселенныйПункт + ", ", "")
		+ ?(ЗначениеЗаполнено(Улица), Улица + ", ", "")
		+ ?(ЗначениеЗаполнено(НомерДома), НомерДома + ", ", "")
		+ ?(ЗначениеЗаполнено(Корпус), Корпус + ", ", "")
		+ ?(ЗначениеЗаполнено(Строение), Строение + ", ", "")
		+ ?(ЗначениеЗаполнено(Номер), Номер + ", ", "");
	
	Возврат ?(ЗначениеЗаполнено(АдресФактическогоПроживания), Сред(АдресФактическогоПроживания, 1, СтрДлина(АдресФактическогоПроживания) - 2), "");	
	
КонецФункции

Функция СобратьАдресМестаРаботы(РезТЗ)
	
	Индекс = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000277"));
	Страна = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000276"));
	Регион = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000278"));
	Район = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000279"));
	НаселенныйПункт = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000280"));
	Улица = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000281"));
	НомерДома = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000284"));
	Корпус = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000283"));
	Строение = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000285"));
	Номер = СокрЛП(НайтиВТаблицеПоКоду(РезТЗ, "000000282"));
	
	АдресМестаРаботы = ?(ЗначениеЗаполнено(Индекс), Индекс + ", ", "")
		+ ?(ЗначениеЗаполнено(Страна), Страна + ", ", "")
		+ ?(ЗначениеЗаполнено(Район), Район + ", ", "")
		+ ?(ЗначениеЗаполнено(НаселенныйПункт), НаселенныйПункт + ", ", "")
		+ ?(ЗначениеЗаполнено(Улица), Улица + ", ", "")
		+ ?(ЗначениеЗаполнено(НомерДома), НомерДома + ", ", "")
		+ ?(ЗначениеЗаполнено(Корпус), Корпус + ", ", "")
		+ ?(ЗначениеЗаполнено(Строение), Строение + ", ", "")
		+ ?(ЗначениеЗаполнено(Номер), Номер + ", ", "");
	
	Возврат ?(ЗначениеЗаполнено(АдресМестаРаботы), Сред(АдресМестаРаботы, 1, СтрДлина(АдресМестаРаботы) - 2), "");	
	
КонецФункции

Функция НайтиВТаблицеПоКоду(ТЗ, Код)
	
	Ответ = Неопределено;
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Код", Код));
	Если НайденныеСтроки.Количество() Тогда	
		Ответ = НайденныеСтроки[0].Ответ;
		Если ТипЗнч(Ответ) = Тип("СправочникСсылка.ВариантыОтветовАнкет") Тогда
			Ответ = СокрЛП(Ответ);
		//ИначеЕсли ТипЗнч(Ответ) = Тип("Дата") Тогда
		//	Ответ = Формат(Ответ, "ДФ=yyyy-MM-dd");
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции

//++ Юкаев Роман 20180122 (
Процедура ПриЗаписи(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ДатаПодачиЗаявки) И НЕ ЗначениеЗаполнено(РешениеБанка) Тогда
		ИпотекаСервер.ОбновитьСтатусВРегистреИпотечныйСтатусКлиента(Ссылка, РасчетИпотеки.Запрос, Ложь);
	ИначеЕсли ЗначениеЗаполнено(ДатаПодачиЗаявки) И НЕ ЗначениеЗаполнено(РешениеБанка) Тогда
		ИпотекаСервер.ОбновитьСтатусВРегистреИпотечныйСтатусКлиента(Ссылка, РасчетИпотеки.Запрос, Ложь, ДатаПодачиЗаявки);
	Иначе
		ИпотекаСервер.ОбновитьСтатусВРегистреИпотечныйСтатусКлиента(Ссылка, РасчетИпотеки.Запрос, Ложь, ДатаПодачиЗаявки, РешениеБанка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗаявкуНаСделку(Док)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаСделку.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
		|ГДЕ
		|	ЗаявкаНаСделку.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Док.Запрос);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПоДаннымДокументаРасчетИпотеки(ИсходныеДанные)
	
	Если ИсходныеДанные.ДанныеОЗаемщиках.Количество() > 0 Тогда
		КонтактноеЛицо = ИсходныеДанные.ДанныеОЗаемщиках[0].ФИО;
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			
			СтруктураПараметров = ПолучитьКонтактныеДанныеКлиента(КонтактноеЛицо);
			
			ФИОКлиента = КонтактноеЛицо.ФИО;
			ДатаРожденияКлиента = КонтактноеЛицо.ДатаРождения;
			АдресФактическогоПроживания = СтруктураПараметров.АдресФактическогоПроживания;
			EmailКлиента = СтруктураПараметров.EmailКлиента;
			НомерТелефонаКлиента = СтруктураПараметров.НомерТелефона;
			СерияНомерПаспорта = СтруктураПараметров.СерияНомерПаспорта;
		КонецЕсли;
	КонецЕсли;
		
	ВидКредита = Справочники.ВидыКредитов.ИпотечныйКредит;
	ПредварительноеРешение = Справочники.ПредварительныеРешенияБанков.Одобрение;
	
	//СтатусЗаявки = ;
	//КомментарийСтатуса = ;
	//ДатаУстановкиСтатуса = ;
	
	Ответственный = Пользователи.ТекущийПользователь();
	Автор = Ответственный;
	
	
	СуммаКредитаВРублях = ИсходныеДанные.СуммаКредитаРуб;
	ПредполагаемаяСтоимостьОН = ИсходныеДанные.СтоимостьКвартирыРуб;
	
	Черновик = Истина;
	РасчетИпотеки = ИсходныеДанные;

	Если ТипЗнч(ИсходныеДанные.ЖК) = Тип("СправочникСсылка.Проекты") Тогда
		Проект = ИсходныеДанные.ЖК;
		ВидОбъектаНедвижимости = Проект.ВидНедвижимости;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонтактныеДанныеКлиента(Клиент)
	
	СтруктураПараметров = Новый Структура("АдресФактическогоПроживания, СерияНомерПаспорта, НомерТелефона, EmailКлиента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление КАК Представление,
		|	"""" КАК Серия,
		|	"""" КАК Номер,
		|	1 КАК Ключ
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	2
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Период,
		|			ФизЛицо = &ФизЛицо
		|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	3
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	4
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКлиента)";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", Клиент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураПараметров.АдресФактическогоПроживания = "";
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ключ = 1 Тогда
				СтруктураПараметров.АдресФактическогоПроживания = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 2 Тогда
				СтруктураПараметров.СерияНомерПаспорта = Выборка.Серия + " " + Выборка.Номер;
			ИначеЕсли Выборка.Ключ = 3 Тогда
				СтруктураПараметров.НомерТелефона = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 4 Тогда
				СтруктураПараметров.EmailКлиента = Выборка.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции
//-- Юкаев Роман 20180122 )

#КонецОбласти
