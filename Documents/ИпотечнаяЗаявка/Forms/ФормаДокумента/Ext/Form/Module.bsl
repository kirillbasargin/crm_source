
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Черновик = Истина;
		Объект.Ответственный = Пользователи.ТекущийПользователь();
		//++ Юкаев Роман 20180125 (
		Объект.ВидКредита = Справочники.ВидыКредитов.ИпотечныйКредит;
		//-- Юкаев Роман 20180125 )
	КонецЕсли;		
		
	УправлениеВидимостьюДоступностью();
	
	//++ Юкаев Роман 20180123 (
	Элементы.КонтактноеЛицо.СписокВыбора.Добавить(Объект.КонтактноеЛицо);
	//-- Юкаев Роман 20180123 )
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтделениеБанкаПриИзменении(Элемент)	
	
	Если НЕ ТолькоОтправкаПисем Тогда
		ОтделениеБанкаПриИзмененииНаСервере();	
		Если ПроверкаОтделения() Тогда
			ПоказатьПредупреждение(, "У выбранного отделения банка не заполнен ID из системы банка. Для корректной работы заполните ID отделения и перевыберите его в документе", 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаОтделения()
	
	Возврат НЕ ЗначениеЗаполнено(Объект.ЦИК) И ВРег(Объект.РекомендуемыйБанк.Наименование) = "СБЕРБАНК";
	
КонецФункции

&НаКлиенте
Процедура РекомендуемыйБанкПриИзменении(Элемент)
	РекомендуемыйБанкПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РекомендуемыйБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеБанки);
	//НовыйМассив = Новый Массив();
	//НовыйМассив.Добавить(НовыйПараметр);
	//НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	//Элементы.РекомендуемыйБанк.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаявкиПриИзменении(Элемент)
	УправлениеВидимостьюДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиПриИзменении(Элемент)
	
	Если //Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ВозвратНаДоработку") ИЛИ 
		Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ПустаяСсылка") Тогда
		Объект.УспешнаяОтправка = Ложь;
	Иначе
		Объект.УспешнаяОтправка = Истина;
	КонецЕсли;
	
	Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитОдобрен")
		ИЛИ Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитВыдан") Тогда
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Одобрение");
		Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОдобрениеБанка");
		Объект.ДатаРешенияБанка = ТекущаяДата();
	ИначеЕсли Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.Отказ")
		ИЛИ Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.НеКредитуем") Тогда
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");			
		Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказБанка");
		Объект.ДатаРешенияБанка = ТекущаяДата();
	ИначеЕсли Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ОтказКлиента") Тогда
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");			
		Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказКлиентаОтРассмотрения");
		Объект.ДатаРешенияБанка = ТекущаяДата();
	Иначе
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.ПустаяСсылка");
		Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка");
		Объект.ДатаРешенияБанка = Неопределено;
	КонецЕсли;		
	
	УправлениеВидимостьюДоступностью();
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаМенеджеру", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Отправить оповещение менеджеру?", РежимДиалогаВопрос.ДаНет, 0); 
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеБанкаПриИзменении(Элемент)
	
	Если ТолькоОтправкаПисем Тогда
		РешениеБанкаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомментарииЗаявкиПрикрепленныеФайлы

&НаКлиенте
Процедура КомментарииЗаявкиКомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Комментарий = "";
	ТекущиеДанные = Элементы.КомментарииЗаявки.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда	
		Подсказка = "Введите текст комментария";
		Комментарий = ТекущиеДанные.Комментарий;
		Если НЕ ВвестиСтроку(Комментарий, Подсказка, 0, Истина) Тогда
			Возврат;	
		КонецЕсли;
		ТекущиеДанные.Комментарий = Комментарий;
		ТекущиеДанные.ДатаДобавления = ТекущаяДата();
		ТекущиеДанные.Отправлять = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомментарииЗаявкиКомментарийПриИзменении(Элемент)

	ТекущиеДанные = Элементы.КомментарииЗаявки.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда	
		Комментарий = ТекущиеДанные.Комментарий;
		ТекущиеДанные.ДатаДобавления = ТекущаяДата();
		ТекущиеДанные.Отправлять = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыПередУдалением(Элемент, Отказ)
	//Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепленныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарииЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьЗаявкуOnLine(Команда)
	
	Если Модифицированность Тогда	
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписи", ЭтаФорма, Новый Структура("CallBack", Новый ОписаниеОповещения("ВыполнитьОтправку_Асинхр", ЭтаФорма)));
		ПоказатьВопрос(Оповещение, "Для продолжения необходимо записать заявку. Продолжить?", РежимДиалогаВопрос.ДаНет, 0); 
	Иначе
		Если ТолькоОтправкаПисем Тогда
			ОтправитьПоПочте();
		Иначе
			ОтправитьИпотечнуюЗаявку();
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлы(Команда)
	ОбновитьТаблицуФайлов();
КонецПроцедуры

&НаКлиенте
Процедура кнДобавитьФайл(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписи", ЭтаФорма, Новый Структура("CallBack", Новый ОписаниеОповещения("ДобавитьФайлы_Асинхр", ЭтаФорма)));
		ПоказатьВопрос(Оповещение, "Для продолжения необходимо записать заявку. Продолжить?", РежимДиалогаВопрос.ДаНет, 0); 
	Иначе
		ДобавитьФайлы_Асинхр(Истина, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнОткрытьКарточкуФайла(Команда)
	
	ТекДанные = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ОткрытьЗначение(Элементы.ПрикрепленныеФайлы.ТекущиеДанные.Файл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнУдалитьФайл(Команда)
	
	ТекДанные = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Попытка
			УдалитьФайлНаСервере(ТекДанные.Файл);
			Объект.ПрикрепленныеФайлы.Удалить(ТекДанные);
			ЭтаФорма.Модифицированность = Истина;	
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить файл: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура кнПросмотрФайла(Команда)
	
	ТекДанные = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Элементы.ПрикрепленныеФайлы.ТекущиеДанные.Файл, ЭтаФорма.УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Авторизация(Команда)
	
	Ошибки = "";	
	Авторизация = ЗаявкиНаКредитRestAPI.ВыполнитьАвторизацию(Объект.ПараметрыПодключения, TGT, ST, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
	Если Ошибки = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("X_Auth_Token = " + Token);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("X_Auth_User = " + X_Auth_User);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при авторизации: " + Ошибки);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Разлогиниться(Команда)
	
	Ошибки = "";	
	Авторизация = ЗаявкиНаКредитRestAPI.Разлогиниться(Объект.ПараметрыПодключения, Объект.ТестоваяЗаявка, Ошибки);
	Если НЕ Ошибки = "" Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при авторизации: " + Ошибки);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧерновик(Команда)
	
	Ошибки = "";	
	ID_Заявки = ЗаявкиНаКредитRestAPI.ОтправитьЗаявку(Объект.ПараметрыПодключения, Объект.Ссылка, ПочтовыйАдресОтправителя, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
	Если Ошибки = "" Тогда
		Объект.ID_Заявки = ID_Заявки;
		Объект.ДатаПодачиЗаявки = ТекущаяДата();
		Модифицированность = Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при отправке заявки: " + Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокуметнты(Команда)
	
	Если ЗначениеЗаполнено(Объект.ID_Заявки) Тогда		
		Для каждого СтрокаФайл Из Объект.ПрикрепленныеФайлы Цикл
			Если НЕ СтрокаФайл.Отправлять Тогда
				Продолжить;
			КонецЕсли;			
			Ошибки = "";	
			Данные = ЗаявкиНаКредитRestAPI.ДобавитьФайлКЗаявке(Объект.ПараметрыПодключения, Объект.ID_Заявки, СтрокаФайл.Файл, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
			Если Ошибки = "" Тогда
				Если ТипЗнч(Данные) = Тип("Структура") Тогда
					ЗаполнитьЗначенияСвойств(СтрокаФайл, Данные);
					Если НЕ ЗначениеЗаполнено(СтрокаФайл.create_date) Тогда
						СтрокаФайл.create_date = ТекущаяДата();	
					КонецЕсли;	
					СтрокаФайл.Отправлять = Ложь;
					Модифицированность = Истина;
				КонецЕсли;	
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при отправке вложения: " + Ошибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка не отправлена");		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарии(Команда)
	
	Если ЗначениеЗаполнено(Объект.ID_Заявки) Тогда		
		Для каждого СтрокаКомментарий Из Объект.КомментарииЗаявки Цикл
			Если НЕ СтрокаКомментарий.Отправлять Тогда
				Продолжить;
			КонецЕсли;							
			Ошибки = "";
			ID_Комментария = ЗаявкиНаКредитRestAPI.ДобавитьКомментарийКЗаявке(Объект.ПараметрыПодключения, Объект.ID_Заявки, СтрокаКомментарий.Комментарий, ПочтовыйАдресОтправителя, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
			Если Ошибки = "" Тогда
				СтрокаКомментарий.ID = ID_Комментария;
				СтрокаКомментарий.ДатаОтправки = ТекущаяДата();
				СтрокаКомментарий.Отправлять = Ложь;
				Модифицированность = Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка отправке комментария: " + Ошибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка не отправлена");		
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	
	Ошибки = "";	
	ИдентификаторЗаявкиНаКредит = ЗаявкиНаКредитRestAPI.ИзменитьСтатусЗаявки(Объект.ПараметрыПодключения, Объект.СтатусЗаявки, Объект.ID_Заявки, Объект.КомментарийСтатуса, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
	Если Ошибки = "" Тогда
		Если Объект.ID_Заявки = ИдентификаторЗаявкиНаКредит И ЗначениеЗаполнено(ИдентификаторЗаявкиНаКредит) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус обновлен на " + Объект.СтатусЗаявки);				
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка обновления статуса заявки: " + Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаявку(Команда)

	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗаписи", ЭтаФорма, Новый Структура("CallBack", Новый ОписаниеОповещения("ИзменитьЗаявку_Асинхр", ЭтаФорма)));
		ПоказатьВопрос(Оповещение, "Для продолжения необходимо записать заявку. Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ИзменитьЗаявку_Асинхр(Истина, Неопределено);	
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеОЗаявке(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВопросВыводитьХодОбновления", ЭтаФорма, Новый Структура("CallBack", Новый ОписаниеОповещения("ПолучитьДанныеЗаявки_Асинхр", ЭтаФорма)));
	ПоказатьВопрос(Оповещение, "Выводить сообщения о результатах обновления?", РежимДиалогаВопрос.ДаНет, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеАгенты(Команда)

	Ошибки = "";	
	ДанныеОбАгентах = ЗаявкиНаКредитRestAPI.ПолучитьДоступныхАгентов(Объект.ПараметрыПодключения, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
	Если Ошибки = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные об агентах: ");
		Для каждого Данные Из ДанныеОбАгентах Цикл
			Для каждого Элемент Из Данные Цикл
				Если ТипЗнч(Элемент.Значение) = Тип("Строка")
					ИЛИ ТипЗнч(Элемент.Значение) = Тип("Число")
					ИЛИ ТипЗнч(Элемент.Значение) = Тип("Булево")
					ИЛИ Элемент.Значение = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Ключ + " : " + ?(ТипЗнч(Элемент.Значение) = Тип("Число"), СтрЗаменить(Элемент.Значение, Символы.НПП, ""), Элемент.Значение));		
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("");
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении данных об агентах: " + Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьФайл(Команда)
	
	Ошибки = "";	
	ТекущиеДанные = Элементы.ПрикрепленныеФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Path = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ТекущиеДанные.Path;
	
	ДанныеФайла = ЗаявкиНаКредитRestAPI.ПолучитьДанныеФайла(Объект.ПараметрыПодключения, ПутьКФайлу, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки, ЭтаФорма.УникальныйИдентификатор);
	Если Ошибки = "" Тогда
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.Адрес) Тогда
			#Если ВебКлиент Тогда
				ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.Адрес); //ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение)
				ПолучаемыеФайлы = Новый Массив;
				ПолучаемыеФайлы.Добавить(ОписаниеПередаваемогоФайла);

				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
				ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
				ДиалогОткрытияФайла.Расширение = ДанныеФайла.Расширение;
				ДиалогОткрытияФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
				ДиалогОткрытияФайла.ПредварительныйПросмотр = Истина;
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСохраненияФайлов", ЭтаФорма);
				НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы,  ДиалогОткрытияФайла,  Истина);
			#Иначе
				ПолучитьФайл(ДанныеФайла.Адрес, ДанныеФайла.ИмяФайла, Истина);				
			#КонецЕсли
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении файла: " + Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтделенияБанков(Команда)

	Данные = ЗаявкиНаКредитRestAPI.ПолучитьОтделенияБанков();
	Для каждого Элемент Из Данные Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ID = " + Элемент.ID + ";" + "full_address = " + Элемент.full_address + ";" + "name = " + Элемент.name);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отказ(Команда)
		
	Ошибки = "";		
	ИдентификаторЗаявкиНаКредит = ЗаявкиНаКредитRestAPI.ИзменитьСтатусЗаявки(Объект.ПараметрыПодключения, ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ОтказКлиента"), Объект.ID_Заявки, Объект.КомментарийСтатуса, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
	Если Ошибки = "" Тогда
		Если Объект.ID_Заявки = ИдентификаторЗаявкиНаКредит И ЗначениеЗаполнено(ИдентификаторЗаявкиНаКредит) Тогда			
			Модифицированность = Истина;
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ");
			Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ОтказКлиента");
			Записать();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус обновлен на " + Объект.СтатусЗаявки);
			УправлениеВидимостьюДоступностью();
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка обновления статуса заявки: " + Ошибки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкуПользователя(Команда)
	
	Попытка
		ЗаявкиНаКредитRestAPI.ПолучитьПараметрыПодключения(Объект.ПараметрыПодключения, Объект.Ответственный, Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура кнДобавитьСтрокиКомментария(Команда)
	
	ТекущиеДанные = Объект.КомментарииЗаявки.Добавить();
	Если НЕ ТекущиеДанные = Неопределено Тогда	
		Комментарий = "Добрый день! Направляю заявку на согласование.";
		ТекущиеДанные.Комментарий = Комментарий;
		ТекущиеДанные.ДатаДобавления = ТекущаяДата();
		ТекущиеДанные.Отправлять = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УдалитьФайлНаСервере(Файл)
	
	ФайлОбъект = Файл.ПолучитьОбъект();
	Если НЕ ФайлОбъект = Неопределено Тогда
		ФайлОбъект.УстановитьПометкуУдаления(НЕ ФайлОбъект.ПометкаУдаления);//.Удалить();
	КонецЕсли;                                      
	//ОбновитьТаблицуФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьИпотечнуюЗаявку()

	Отказ = Ложь;
	ПроверитьПередОтправкой(Отказ);
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТолькоОтправкаПисем Тогда
		//Тест
		//Ошибки = "";
		//Если НЕ ЗначениеЗаполнено(Объект.ID_Заявки) Тогда
		//	ID_Заявки = ЗаявкиНаКредитRestAPI.ОтправитьЗаявкуПоПочте(Объект.ПараметрыПодключения, Объект.Ссылка,  ПочтовыйАдресОтправителя, Объект.ТестоваяЗаявка, Ошибки);
		//	Если Ошибки = "" Тогда
		//		Объект.ID_Заявки = ID_Заявки;
		//		Объект.ДатаПодачиЗаявки = ТекущаяДата();
		//		Модифицированность = Истина;
		//	Иначе
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при отправке заявки " + ID_Заявки + ": " + Ошибки);
		//		Возврат;
		//	КонецЕсли;
		//Иначе
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка уже создана");
		//	ПовторнаяОтправка = Истина;
		//КонецЕсли;
	Иначе
		ПовторнаяОтправка = Ложь;
		Ошибки = "";
		Если НЕ ЗначениеЗаполнено(Объект.ID_Заявки) Тогда
			ID_Заявки = ЗаявкиНаКредитRestAPI.ОтправитьЗаявку(Объект.ПараметрыПодключения, Объект.Ссылка, ПочтовыйАдресОтправителя, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
			Если Ошибки = "" Тогда
				Объект.ID_Заявки = ID_Заявки;
				Объект.ДатаПодачиЗаявки = ТекущаяДата();
				Модифицированность = Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при отправке заявки " + ID_Заявки + ": " + Ошибки);
				Возврат;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка уже создана");
			ПовторнаяОтправка = Истина;
		КонецЕсли;
		
		Ошибки = "";	
		Если ЗначениеЗаполнено(Объект.ID_Заявки) Тогда		
			Для каждого СтрокаФайл Из Объект.ПрикрепленныеФайлы Цикл
				Если НЕ СтрокаФайл.Отправлять Тогда
					Продолжить;
				КонецЕсли;	
				Данные = ЗаявкиНаКредитRestAPI.ДобавитьФайлКЗаявке(Объект.ПараметрыПодключения, Объект.ID_Заявки, СтрокаФайл.Файл, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
				Если Ошибки = "" Тогда
					Если ТипЗнч(Данные) = Тип("Структура") Тогда
						ЗаполнитьЗначенияСвойств(СтрокаФайл, Данные);
						Если НЕ ЗначениеЗаполнено(СтрокаФайл.create_date) Тогда
							СтрокаФайл.create_date = ТекущаяДата();	
						КонецЕсли;
						СтрокаФайл.Отправлять = Ложь;
						Модифицированность = Истина;
					КонецЕсли;	
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при отправке прикрепленных файлов: " + Ошибки);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка не отправлена");
			Возврат;
		КонецЕсли;		
		
		Ошибки = "";	
		Если ЗначениеЗаполнено(Объект.ID_Заявки) Тогда		
			Для каждого СтрокаКомментарий Из Объект.КомментарииЗаявки Цикл
				Если НЕ СтрокаКомментарий.Отправлять Тогда
					Продолжить;
				КонецЕсли;			
				ID_Комментария = ЗаявкиНаКредитRestAPI.ДобавитьКомментарийКЗаявке(Объект.ПараметрыПодключения, Объект.ID_Заявки, СтрокаКомментарий.Комментарий, ПочтовыйАдресОтправителя, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
				Если Ошибки = "" Тогда
					СтрокаКомментарий.ID = ID_Комментария;
					СтрокаКомментарий.ДатаОтправки = ТекущаяДата();
					СтрокаКомментарий.Отправлять = Ложь;
					Модифицированность = Истина;
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка отправке комментариев заявки: " + Ошибки);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка не отправлена");	
			Возврат;
		КонецЕсли;		
		
		Если Объект.Черновик ИЛИ ПовторнаяОтправка Тогда
			Ошибки = "";	
			ИдентификаторЗаявкиНаКредит = ЗаявкиНаКредитRestAPI.ИзменитьСтатусЗаявки(Объект.ПараметрыПодключения, ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ЗаявкаНаправленаВБанк"), Объект.ID_Заявки, Объект.КомментарийСтатуса, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
			Если Ошибки = "" Тогда
				Если ЗначениеЗаполнено(ИдентификаторЗаявкиНаКредит) И Объект.ID_Заявки = ИдентификаторЗаявкиНаКредит Тогда
					Объект.Черновик = Ложь;
					Объект.ДатаУстановкиСтатуса = ТекущаяДата();
					Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ЗаявкаНаправленаВБанк");
					Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка");					
					//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.ВРаботе");
					Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка");					
					Объект.УспешнаяОтправка = Истина;
					Модифицированность = Истина;
				КонецЕсли;
			Иначе
				Объект.СтатусЗаявки = 0;
				Объект.УспешнаяОтправка = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка обновления статуса заявки: " + Ошибки);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Ошибки = "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка успешно отправлена.");
			Если Модифицированность Тогда
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
		
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСохраненияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбновляемыеЗначения(Данные)
	
	Если Данные.Свойство("status") И НЕ Объект.СтатусЗаявки.Код = Данные.status Тогда
		Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.НайтиПоКоду(Данные.status);
		Если //Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ВозвратНаДоработку") ИЛИ 
			НЕ ЗначениеЗаполнено(Объект.СтатусЗаявки) Тогда
			Объект.УспешнаяОтправка = Ложь;
		Иначе
			Объект.УспешнаяОтправка = Истина;	
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Статус заявки обновлен на " + Объект.СтатусЗаявки);
		Объект.ДатаУстановкиСтатуса = ТекущаяДата();		
		Если Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.Отказ 
			ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.ОтказКлиента
			ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.НеКредитуем Тогда 
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		ИначеЕсли Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитОдобрен ИЛИ Объект.СтатусЗаявки = Справочники.СтатусыИпотечныхЗаявок.КредитВыдан Тогда
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение");
			Объект.ДатаРешенияБанка = ТекущаяДата();
		ИначеЕсли ТолькоОтправкаПисем Тогда
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ОтправленаПоПочте");
		Иначе
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка");			
		КонецЕсли;
		Если Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитОдобрен")
			ИЛИ Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитВыдан") Тогда
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Одобрение");
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОдобрениеБанка");		
		ИначеЕсли Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.Отказ")
			ИЛИ Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.НеКредитуем") Тогда
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказБанка");			
		ИначеЕсли Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ОтказКлиента") Тогда
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказКлиентаОтРассмотрения");
		Иначе
			//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.ПустаяСсылка");
			Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка");
			Объект.ДатаРешенияБанка = Неопределено;
		КонецЕсли;	
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Данные.Свойство("sum_approved") И ЗначениеЗаполнено(Данные.sum_approved) И НЕ СтрЗаменить(Объект.sum_approved, Символы.НПП, "") = СтрЗаменить(Данные.sum_approved, Символы.НПП, "") Тогда
		Попытка
			Объект.sum_approved = Число(Данные.sum_approved);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Одобренная сумма кредита в рублях обновлена на " + Объект.sum_approved);
			Модифицированность = Истина;
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
	Если Данные.Свойство("transactID") И ЗначениеЗаполнено(Данные.transactID) И НЕ СокрЛП(Объект.transactID) = СокрЛП(Данные.transactID) Тогда
		Попытка
			Объект.transactID = Данные.transactID;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("transactID = " + Объект.transactID);
			Модифицированность = Истина;
		Исключение	
		КонецПопытки;
	КонецЕсли;	
	
	ОтправлятьОповещение = Ложь;
	Если Данные.Свойство("status_history") И НЕ Данные.status_history = Неопределено Тогда
		КомментарийСтатуса = "";
		ЗаявкиНаКредитRestAPI.ЗаполнитьИсториюСтатусов(Данные.status_history, Объект.Ссылка, КомментарийСтатуса, ОтправлятьОповещение);
		Если НЕ Объект.КомментарийСтатуса = КомментарийСтатуса Тогда  
			Объект.КомментарийСтатуса = КомментарийСтатуса;
			Модифицированность = Истина;
			ОтправлятьОповещение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если ОтправлятьОповещение Тогда
		Попытка
			ОтправитьОповещение();	
		Исключение
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОтделениеБанкаПриИзмененииНаСервере()	
	Объект.ЦИК = Объект.ОтделениеБанка.ID;  //326
КонецПроцедуры

&НаСервере
Процедура ПроверитьПередОтправкой(Отказ)
	
	Отказ = НЕ ПроверитьЗаполнение();	
	Если НЕ Отказ Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПараметрыПодключения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены параметры подключения к сервису подачи заявок.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ЦИК) И НЕ ТолькоОтправкаПисем Тогда          
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен ID отделения.", Объект.Ссылка, "ОтделениеБанка", "Объект", Отказ);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОбъектаНедвижимости) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Вид Объекта Недвижимости", Объект.Ссылка, "ВидОбъектаНедвижимости", "Объект", Отказ);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ФИОКлиента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено ФИО Клиента", Объект.Ссылка, "ФИОКлиента", "Объект", Отказ);
			Возврат;
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаРожденияКлиента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена Дата Рождения Клиента", Объект.Ссылка, "ДатаРожденияКлиента", "Объект", Отказ);
			Возврат;
		КонецЕсли;			
		
		Если НЕ ЗначениеЗаполнено(Объект.СерияНомерПаспорта) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена Серия/Номер Паспорта", Объект.Ссылка, "СерияНомерПаспорта", "Объект", Отказ);
			Возврат;
		ИначеЕсли НЕ СоответствуетШаблону(Объект.СерияНомерПаспорта, "[0-9]{4}\s{1}[0-9]{6}") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не верный формат Серия/Номер Паспорта", Объект.Ссылка, "СерияНомерПаспорта", "Объект", Отказ);
			Возврат;			
		КонецЕсли;			
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерТелефонаКлиента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Номер Телефона Клиента", Объект.Ссылка, "НомерТелефонаКлиента", "Объект", Отказ);
			Возврат;
		КонецЕсли;			
		
		Если НЕ ЗначениеЗаполнено(Объект.EmailКлиента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Email Клиента", Объект.Ссылка, "EmailКлиента", "Объект", Отказ);
			Возврат;
		ИначеЕсли НЕ СоответствуетШаблону(Объект.EmailКлиента, ".+@.+\..+") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не верный формат Email Клиента", Объект.Ссылка, "EmailКлиента", "Объект", Отказ);
			Возврат;			
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(Объект.ПредполагаемаяСтоимостьОН) И НЕ ТолькоОтправкаПисем Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена Предполагаемая Стоимость ОН", Объект.Ссылка, "ПредполагаемаяСтоимостьОН", "Объект", Отказ);
			Возврат;
		КонецЕсли;				
		
		Если НЕ ЗначениеЗаполнено(Объект.СуммаКредитаВРублях) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена Сумма Кредита", Объект.Ссылка, "СуммаКредитаВРублях", "Объект", Отказ);
			Возврат;
		КонецЕсли;
		
		Если НЕ Объект.ПрикрепленныеФайлы.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет прикрепленных файлов к заявке", Объект.Ссылка, "ПрикрепленныеФайлы", "Объект", Отказ);
			Возврат;			
		КонецЕсли;
		
		Если НЕ Объект.КомментарииЗаявки.Количество() И НЕ ТолькоОтправкаПисем Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет комментариев к заявке", Объект.Ссылка, "КомментарииЗаявки", "Объект", Отказ);
			Возврат;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Проект) И ТолькоОтправкаПисем Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен проект", Объект.Ссылка, "Проект", "Объект", Отказ);
	        Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствуетШаблону(Знач Строка, Шаблон)
	
	RegExp = Новый COMОбъект("VBScript.RegExp");// создаем объект для работы с регулярными выражениями
	RegExp.MultiLine = Истина;  // истина — текст многострочный, ложь — одна строка
	RegExp.Global = Истина;     // истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске
	RegExp.Pattern = Шаблон;//"<[^>]*>";

    Matches = RegExp.Execute(Строка);
	
    Возврат Matches.Count();
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	АдминистрированиеЗаявок = УправлениеДоступом.ЕстьРоль("РаботаСИпотечнымиЗаявками_Администратор", , Пользователи.ТекущийПользователь()) ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь());
	
	Элементы.СтатусЗаявки.ТолькоПросмотр = НЕ АдминистрированиеЗаявок; 
	
	//++ Юкаев Роман 20180125 (
	Проверка = ВРег(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РекомендуемыйБанк, "Наименование")) = "СБЕРБАНК";
	Если Проверка Тогда
		Видимость = ЗначениеЗаполнено(Объект.ПараметрыПодключения);
	Иначе
		Видимость = Не Проверка;
	КонецЕсли;
	//-- Юкаев Роман 20180125 )
	Элементы.Дополнительная.Видимость = Видимость;
	Элементы.ЗаявкаНаКредит.Видимость = Видимость;
	//++ Юкаев Роман 20180125 (
	//Элементы.ГруппаСтатус.Видимость = Видимость;
	Элементы.ГруппаСтатус.Видимость = Проверка;
	//-- Юкаев Роман 20180125 )
	Элементы.ФормаГруппаТестироваине.Видимость = Видимость И АдминистрированиеЗаявок;
	
	ТолькоОтправкаПисем = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПараметрыПодключения, "ТолькоОтправкаПисем");
	
	Элементы.Проект.Видимость = ТолькоОтправкаПисем;
	
	Элементы.ГруппаРешение.Доступность = НЕ Проверка;
	
	Если ЗначениеЗаполнено(Объект.ПараметрыПодключения) Тогда
		ВидимостьКоманд = НЕ ТолькоОтправкаПисем;
	Иначе
		ВидимостьКоманд = Ложь;
	КонецЕсли;
	
	Элементы.ФормаОтказ.Видимость = ВидимостьКоманд;
	Элементы.ФормаОбновитьЗаявку.Видимость = ВидимостьКоманд;
	Элементы.ФормаДобавитьДокуметнты.Видимость = ВидимостьКоманд;
	Элементы.ФормаДобавитьКомментарии.Видимость = ВидимостьКоманд;
	Элементы.ФормаПолучиьДанныеОЗаявке.Видимость = ВидимостьКоманд;
	//-- Юкаев Роман 20180125 )
	Элементы.ФормаГруппаТестироваине.Видимость = НЕ ТолькоОтправкаПисем И Видимость И АдминистрированиеЗаявок;		
	Элементы.Черновик.Видимость = НЕ ТолькоОтправкаПисем;
	Элементы.ТестоваяЗаявка.Видимость = НЕ ТолькоОтправкаПисем;
	Элементы.transactID.Видимость = НЕ ТолькоОтправкаПисем;
	Элементы.ОбодреннаяСуммаКредитаВРублях.Видимость = НЕ ТолькоОтправкаПисем;	
	Элементы.ЗамещающийАгент.Видимость = НЕ ТолькоОтправкаПисем;
	Элементы.ID_Заявки.Видимость = НЕ ТолькоОтправкаПисем;	
	Элементы.ПрикрепленныеФайлыСкачатьФайл.Видимость = НЕ ТолькоОтправкаПисем;
	
	Элементы.ГруппаОсновное.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок; 	
	Элементы.ГруппаСтатус.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок;
	//Элементы.Дополнительная.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок;
	Элементы.ГруппаДанныеПоКлиентуДляОтправки.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок;
	
	Элементы.ГруппаСопутствующиеДанные.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок И НЕ ТолькоОтправкаПисем; 
	Элементы.ПрикрепленныеФайлы.КоманднаяПанель.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок И НЕ ТолькоОтправкаПисем; 
	
	Элементы.ПрикрепленныеФайлыкнДобавитьФайл.Доступность = НЕ Объект.УспешнаяОтправка ИЛИ АдминистрированиеЗаявок ИЛИ ТолькоОтправкаПисем;
	Элементы.ПрикрепленныеФайлыкнОткрытьКарточкуФайла.Доступность = НЕ Объект.УспешнаяОтправка ИЛИ АдминистрированиеЗаявок ИЛИ ТолькоОтправкаПисем;
	Элементы.ПрикрепленныеФайлыкнУдалитьФайл.Доступность = НЕ Объект.УспешнаяОтправка ИЛИ АдминистрированиеЗаявок ИЛИ ТолькоОтправкаПисем;
	//Элементы.ПрикрепленныеФайлыкнПросмотрФайла.Доступность = НЕ Объект.УспешнаяОтправка ИЛИ АдминистрированиеЗаявок ИЛИ ТолькоОтправкаПисем;
	Элементы.ПрикрепленныеФайлыОбновитьФайлы.Доступность = НЕ Объект.УспешнаяОтправка ИЛИ АдминистрированиеЗаявок ИЛИ ТолькоОтправкаПисем;
	
	Элементы.КомментарииЗаявки.КоманднаяПанель.ТолькоПросмотр = Объект.УспешнаяОтправка И НЕ АдминистрированиеЗаявок И НЕ ТолькоОтправкаПисем; 
	Элементы.КомментарииЗаявкикнДобавитьСтрокиКомментария.Доступность = НЕ Объект.УспешнаяОтправка ИЛИ АдминистрированиеЗаявок ИЛИ ТолькоОтправкаПисем;
	
	Если Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отправка")
		ИЛИ Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ОтправленаПоПочте") Тогда
		Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.Телефония_Ожидание;
	ИначеЕсли Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ") Тогда
		Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.Телефония_АктивнаяЛиния;
	ИначеЕсли Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение") Тогда
		Элементы.КартинкаСостояние.Картинка = БиблиотекаКартинок.Телефония_СвободнаяЛиния;	
	КонецЕсли;
	
	ТолькоПросмотрДляСопустствующих = (Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ") ИЛИ 
		Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение"));
		
	Элементы.ГруппаКомментарии.ТолькоПросмотр = ТолькоПросмотрДляСопустствующих;	
		
	Элементы.ГруппаПрикрепленныеФайлы.ТолькоПросмотр = ТолькоПросмотрДляСопустствующих;		
	Элементы.ПрикрепленныеФайлы.КоманднаяПанель.ТолькоПросмотр = ТолькоПросмотрДляСопустствующих;		
	Элементы.ПрикрепленныеФайлыкнДобавитьФайл.Доступность = НЕ ТолькоПросмотрДляСопустствующих;
	Элементы.ПрикрепленныеФайлыкнОткрытьКарточкуФайла.Доступность = НЕ ТолькоПросмотрДляСопустствующих;
	Элементы.ПрикрепленныеФайлыкнУдалитьФайл.Доступность = НЕ ТолькоПросмотрДляСопустствующих;
	//Элементы.ПрикрепленныеФайлыкнПросмотрФайла.Доступность = НЕ ТолькоПросмотрДляСопустствующих;
	Элементы.ПрикрепленныеФайлыОбновитьФайлы.Доступность = НЕ ТолькоПросмотрДляСопустствующих;
		
	Элементы.ГруппаКомментарии.ТолькоПросмотр = ТолькоПросмотрДляСопустствующих;
	Элементы.КомментарииЗаявкикнДобавитьСтрокиКомментария.Доступность = НЕ ТолькоПросмотрДляСопустствующих;
	
	//Элементы.ФормаОтправитьЗаявкуOnLine.Доступность = НЕ ТолькоПросмотрДляСопустствующих И ТолькоОтправкаПисем;
	
	//++ Юкаев Роман 20180404 (//
	//EXTCODE Шумилин Сергей 26.03.2018 {{ ---> Для заявок, созданных при переносе исторической информации
	//Элементы.СубсидированнаяСтавкаВТБ.Видимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РекомендуемыйБанк, "СубсидированнаяСтавкаВТБ");
	//EXTCODE Шумилин Сергей 26.03.2018 <--- }} 
	Элементы.СубсидированнаяСтавкаВТБ.Видимость = Объект.РекомендуемыйБанк.СубсидированнаяСтавкаВТБ;
	//-- Юкаев Роман 20180404 )
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуФайлов()
		
	КолВоФайлов = Объект.ПрикрепленныеФайлы.Количество();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ДатаСоздания
	|ИЗ
	|	Справочник.ИпотечнаяЗаявкаПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ВладелецФайла ССЫЛКА Документ.ИпотечнаяЗаявка
	|	И НЕ Файлы.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка); 			   
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекущиеФайлы = Новый Массив;
		Выборка = РезультатЗапроса.Выбрать();		
		Если КолВоФайлов < Выборка.Количество() Тогда
			Пока Выборка.Следующий() Цикл
				НайденныеСтроки = Объект.ПрикрепленныеФайлы.НайтиСтроки(Новый Структура("Файл", Выборка.Ссылка));
				Если НЕ НайденныеСтроки.Количество() Тогда
					НоваяСтрока = Объект.ПрикрепленныеФайлы.Добавить();
					НоваяСтрока.Файл = Выборка.Ссылка;
					НоваяСтрока.Отправлять = Истина;
					НоваяСтрока.path = ЗаявкиНаКредитRestAPI.ПолучитьПутьКФайлу(НоваяСтрока.Файл);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Пока Выборка.Следующий() Цикл
				НайденныеСтроки = Объект.ПрикрепленныеФайлы.НайтиСтроки(Новый Структура("Файл", Выборка.Ссылка));
				Для каждого СтрокаФайл Из НайденныеСтроки Цикл 
					ТекущиеФайлы.Добавить(СтрокаФайл);
				КонецЦикла;
			КонецЦикла;			
		КонецЕсли;		
		Если ТекущиеФайлы.Количество() Тогда
			Объект.ПрикрепленныеФайлы.Очистить();
			Для каждого СтрокаФайл Из ТекущиеФайлы Цикл 
				НоваяСтрока = Объект.ПрикрепленныеФайлы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФайл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	Если НЕ КолВоФайлов = Объект.ПрикрепленныеФайлы.Количество() Тогда
		Модифицированность = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИпотечныеБанки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИпотечныеБанки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Банки КАК ИпотечныеБанки
	|ГДЕ
	|	НЕ ИпотечныеБанки.ПараметрыПодключения = ЗНАЧЕНИЕ(Справочник.ПараметрыПодключенияAPIИпотечныхБанков.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДоступныеБанки.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РекомендуемыйБанкПриИзмененииНаСервере()
	
	Объект.ПараметрыПодключения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РекомендуемыйБанк, "ПараметрыПодключения");
	УправлениеВидимостьюДоступностью();
	Если Объект.Черновик И ТолькоОтправкаПисем Тогда
		Объект.Черновик = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОтправитьОповещение()	
	ЗаявкиНаКредитRestAPI.ОтправитьОповещениеОбИзмененииСтатуса(ЗаявкиНаКредитRestAPI.СобратьСтруктуруПисьмаДляМенеджера(РеквизитФормыВЗначение("Объект")));	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Записать();	
	
	Если ДополнительныеПараметры.Свойство("CallBack") И ТипЗнч(ДополнительныеПараметры.CallBack) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.CallBack);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаМенеджеру(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОтправитьОповещение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправку_Асинхр(Результат, ДополнительныеПараметры) Экспорт	
	
	Если ТолькоОтправкаПисем Тогда
		ОтправитьПоПочте();		
	Иначе
		ОтправитьИпотечнуюЗаявку();			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте()
	
	Попытка
		Outlook = Новый COMОбъект("Outlook.Application");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать объект Outlook.Application");
		Возврат;
	КонецПопытки;
	
	КонтекстПисьма = ПолучитьКонтекстПисьма();
	
	Если КонтекстПисьма = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контекст письма не определен");
		Возврат;
	КонецЕсли;
	
	Accounts = Outlook.Session.Accounts;
	ИспользуемыеАккаунты = Новый СписокЗначений;
	Для каждого Account Из Accounts Цикл
		ИспользуемыеАккаунты.Добавить(Account.DisplayName);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Account = " + Account.DisplayName + " / " + Account.AccountType);
	КонецЦикла;	
	
	Письмо = Outlook.CreateItem(0);
	Письмо.Importance = 2;                                                    
	Письмо.Subject = "~~" + Объект.РекомендуемыйБанк + ". Заявка клиента " + Объект.ФИОКлиента + ", проект " + Объект.Проект; 
	//Письмо.Body = ЗаявкиНаКредитRestAPI.ПодготовитьТелоПисьмаДляОтправкиПочтовойЗаявки(Объект);
	Письмо.HTMLBody = КонтекстПисьма.HTMLBody;
	Для каждого ПочтаПолучателяЗаявок Из КонтекстПисьма.МассивПолучателей Цикл
		Письмо.Recipients.Add(ПочтаПолучателяЗаявок);
	КонецЦикла;
	//Письмо.To = КонтекстПисьма.ПочтаПолучателяЗаявок;
	//Письмо.Cc = КонтекстПисьма.АдресДляРассылки_common;
	//Письмо.SentOnBehalfOfName = КонтекстПисьма.АдресЭлектроннойПочты;//КонтекстПисьма.АдресДляРассылки;	
	//Письмо.SenderEmailAddress = ?	
	//Письмо.SendUsingAccount = ? 
	
	Для каждого СтрокаФайл Из Объект.ПрикрепленныеФайлы Цикл
		Если НЕ СтрокаФайл.Отправлять Тогда
			Продолжить;
		КонецЕсли;	
		ИмяФайла = ?(ЗначениеЗаполнено(СтрокаФайл.path), СтрокаФайл.path, ЗаявкиНаКредитRestAPI.ПолучитьПутьКФайлу(СтрокаФайл.Файл));
		РазмерФайлаМБ = ЗначениеРеквизитаОбъектаНаСервере(СтрокаФайл.Файл, "Размер") / 1000000;
		Если РазмерФайлаМБ > 10 Тогда
			МассивФайлов = РазделитьФайл(ИмяФайла, 10 * 1000000); //10 * 1024 * 1024
			Для каждого Файл Из МассивФайлов Цикл
				Письмо.Attachments.Add(Файл);
			КонецЦикла;
		Иначе
			Письмо.Attachments.Add(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Письмо.Display();
	
	ЗаписатьФактОтправкиЗаявкиПоПочте();
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФактОтправкиЗаявкиПоПочте()
	
	ТекущаяДата = ТекущаяДата();
	
	Объект.ДатаПодачиЗаявки = ТекущаяДата;
	Объект.ID_Заявки = 0;	
	Объект.Черновик = Ложь;
	Объект.ДатаУстановкиСтатуса = ТекущаяДата;
	Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ЗаявкаНаправленаВБанк");
	Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ОтправленаПоПочте");
	//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.ВРаботе");
	Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ПустаяСсылка");
	Объект.УспешнаяОтправка = Истина;
	
	Для каждого СтрокаФайл Из Объект.ПрикрепленныеФайлы Цикл
		Если СтрокаФайл.Отправлять Тогда
			СтрокаФайл.create_date = ТекущаяДата;
			СтрокаФайл.Отправлять = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого СтрокаКомментарий Из Объект.КомментарииЗаявки Цикл
		Если СтрокаКомментарий.Отправлять Тогда
			СтрокаКомментарий.ДатаОтправки = ТекущаяДата;
			СтрокаКомментарий.Отправлять = Ложь;
		КонецЕсли;
	КонецЦикла;		
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтекстПисьма()
	
	ПараметрыПодключения = ЗаявкиНаКредитRestAPI.ПолучитьПараметрыПодключения(Объект.ПараметрыПодключения, Объект.Ответственный);	
	Если ПараметрыПодключения = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	МассивПолучателей = Новый Массив;
	Для каждого Строка Из Объект.ПараметрыПодключения.ПочтовыеАдресаПолучателейЗаявок Цикл
		Если Строка.Проект.Пустая() Или Объект.Проект = Строка.Проект Тогда
			МассивПолучателей.Добавить(Строка.ПочтаПолучателяЗаявок);
		КонецЕсли;
	КонецЦикла;
	
	//ЗначениеРеквизитаОбъектаНаСервере(Объект.ПараметрыПодключения, "ПочтаПолучателяЗаявок")
	
	Возврат Новый Структура("АдресДляРассылки, АдресДляРассылки_common, АдресЭлектроннойПочты, МассивПолучателей, HTMLBody", 
		ПараметрыПодключения.АдресДляРассылки, ПараметрыПодключения.АдресДляРассылки_common, ЗаявкиНаКредитRestAPI.АдресЭлектроннойПочты(?(ЗначениеЗаполнено(Объект.Ответственный), Объект.Ответственный, Пользователи.ТекущийПользователь())),
		МассивПолучателей, ЗаявкиНаКредитRestAPI.ПодготовитьТелоПисьмаДляОтправкиПочтовойЗаявки(Объект));
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъектаНаСервере(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные); 
КонецФункции

&НаКлиенте
Процедура ИзменитьЗаявку_Асинхр(Результат, ДополнительныеПараметры) Экспорт	
	
	Ошибки = "";	
	ID_Заявки = ЗаявкиНаКредитRestAPI.ИзменитьЗаявку(Объект.ПараметрыПодключения, Объект.Ссылка, Объект.ID_Заявки, ПочтовыйАдресОтправителя, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
	Если Ошибки = "" Тогда
		Если Объект.ID_Заявки = ID_Заявки Тогда
			//Объект.ДатаПодачиЗаявки = ТекущаяДата();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные заявки изменены");
			Модифицированность = Истина;
			Записать();
			УправлениеВидимостьюДоступностью();
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при отправке заявки: " + Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлы_Асинхр(Результат, ДополнительныеПараметры) Экспорт	
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ОбновитьТаблицуФайлов();
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыводитьХодОбновления(Результат, ДополнительныеПараметры) Экспорт
		
	Если ДополнительныеПараметры.Свойство("CallBack") И ТипЗнч(ДополнительныеПараметры.CallBack) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.CallBack, Результат = КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеЗаявки_Асинхр(Результат, ДополнительныеПараметры) Экспорт	

	Ошибки = "";	
	Если ЗначениеЗаполнено(Объект.ID_Заявки) Тогда		
		Данные = ЗаявкиНаКредитRestAPI.ПолучитьДанныеОЗаявке(Объект.ПараметрыПодключения, Объект.ID_Заявки, Token, X_Auth_User, Объект.ТестоваяЗаявка, Ошибки);
		Если Ошибки = "" Тогда
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				Если Результат Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данные заявки " +  СтрЗаменить(Объект.ID_Заявки, Символы.НПП, "") + ":");
					Для каждого Элемент Из Данные Цикл
						Если ТипЗнч(Элемент.Значение) = Тип("Строка")
							ИЛИ ТипЗнч(Элемент.Значение) = Тип("Число")
							ИЛИ ТипЗнч(Элемент.Значение) = Тип("Булево")
							ИЛИ Элемент.Значение = Неопределено Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Ключ + " : " + ?(ТипЗнч(Элемент.Значение) = Тип("Число"), СтрЗаменить(Элемент.Значение, Символы.НПП, ""), Элемент.Значение));	
						ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Ключ + ": ");
							Для каждого ЭлементМассива Из Элемент.Значение Цикл
								Если Элемент.Ключ = "comments" Тогда
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.Таб + "(" + СтрЗаменить(ЭлементМассива.id, Символы.НПП, "") + "):" + ЭлементМассива.text + " : " + ЭлементМассива.first_name + " " + ЭлементМассива.last_name);
								ИначеЕсли Элемент.Ключ = "documents" Тогда
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.Таб + "(" + СтрЗаменить(ЭлементМассива.id, Символы.НПП, "") + "):" + ЭлементМассива.name + " : " + ЭлементМассива.url);
								ИначеЕсли Элемент.Ключ = "status_history" Тогда
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Символы.Таб + "(" + СтрЗаменить(ЭлементМассива.status, Символы.НПП, "") + "):" + ЭлементМассива.comment + "[" + ЭлементМассива.date + "]");
								КонецЕсли;
							КонецЦикла;		
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				УстановитьОбновляемыеЗначения(Данные);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении данных заявки: " + Ошибки);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка не отправлена");		
	КонецЕсли;	
	
	УправлениеВидимостьюДоступностью();

КонецПроцедуры

&НаСервере
Процедура РешениеБанкаПриИзмененииНаСервере()
	
	Объект.ДатаРешенияБанка = ТекущаяДата();	
	Если Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОдобрениеБанка") Тогда
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Одобрение");
		Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.КредитОдобрен");
		Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Одобрение");
	ИначеЕсли Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказБанка") Тогда
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");
		Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.Отказ");
		Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ");	
	ИначеЕсли Объект.РешениеБанка = ПредопределенноеЗначение("Справочник.РешенияБанков.ОтказКлиентаОтРассмотрения") Тогда
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.Отказ");
		Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ОтказКлиента");
		Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.Отказ");
	Иначе
		//Объект.ПредварительноеРешение = ПредопределенноеЗначение("Справочник.ПредварительныеРешенияБанков.ПустаяСсылка");
		Объект.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыИпотечныхЗаявок.ПустаяСсылка");
		Если Объект.УспешнаяОтправка Тогда
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ОтправленаПоПочте");
		Иначе
			Объект.СостояниеЗаявки = ПредопределенноеЗначение("Перечисление.СостоянияИпотечныхЗаявок.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	//Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
	УправлениеВидимостьюДоступностью();
		
КонецПроцедуры

//++ Юкаев Роман 20180122 (
&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокКлиентов(Объект.КонтактноеЛицо);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКлиентов(ТекущееКонтактноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаемщикиИпотечнойЗаявкиСрезПоследних.Клиент КАК Ссылка
		|ИЗ
		|	РегистрСведений.ЗаемщикиИпотечнойЗаявки.СрезПоследних(&Период, Регистратор = &Документ) КАК ЗаемщикиИпотечнойЗаявкиСрезПоследних
		|ГДЕ
		|	ЗаемщикиИпотечнойЗаявкиСрезПоследних.Клиент <> &ТекущееКонтактноеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаемщикиИпотечнойЗаявкиСрезПоследних.Клиент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаемщикиИпотечнойЗаявкиСрезПоследних.Клиент";
	
	Запрос.УстановитьПараметр("Документ", Объект.РасчетИпотеки);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущееКонтактноеЛицо", ТекущееКонтактноеЛицо);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый СписокЗначений;
	Иначе
		Выборка = Результат.Выбрать();
		СписокЭлементов = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			СписокЭлементов.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Возврат СписокЭлементов;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.КонтактноеЛицо = ВыбранноеЗначение;
		Элементы.КонтактноеЛицо.СписокВыбора.Очистить();
		Элементы.КонтактноеЛицо.СписокВыбора.Добавить(Объект.КонтактноеЛицо);
	КонецЕсли;
	КонтактноеЛицоПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		СтруктураПараметров = ПолучитьКонтактныеДанныеКлиента(Объект.КонтактноеЛицо);
		
		Объект.ДатаРожденияКлиента = СтруктураПараметров.ДатаРожденияКлиента;
		Объект.ФИОКлиента = СтруктураПараметров.ФИОКлиента;
		Объект.СерияНомерПаспорта = СтруктураПараметров.СерияНомерПаспорта;
		Объект.АдресФактическогоПроживания = СтруктураПараметров.АдресФактическогоПроживания;
		Объект.НомерТелефонаКлиента = СтруктураПараметров.НомерТелефона;
		Объект.EmailКлиента = СтруктураПараметров.EmailКлиента;
	Иначе
		ОчиститьКонтактныеДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактныеДанные()
	
	Объект.ДатаРожденияКлиента = Дата(1,1,1);
	Объект.ФИОКлиента = "";
	Объект.СерияНомерПаспорта = "";
	Объект.АдресФактическогоПроживания = "";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактныеДанныеКлиента(Клиент)
	
	СтруктураПараметров = Новый Структура("АдресФактическогоПроживания, ФИОКлиента, СерияНомерПаспорта, ДатаРожденияКлиента, НомерТелефона, EmailКлиента");
	
	СтруктураПараметров.ДатаРожденияКлиента = Клиент.ДатаРождения;
	СтруктураПараметров.ФИОКлиента = Клиент.ФИО;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление КАК Представление,
		|	"""" КАК Серия,
		|	"""" КАК Номер,
		|	1 КАК Ключ
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	"""",
		|	ДокументыФизическихЛицСрезПоследних.Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер,
		|	2
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			&Период,
		|			ФизЛицо = &ФизЛицо
		|				И ВидДокумента = Значение(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	3
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ОсновнойТелефонКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлиентыКонтактнаяИнформация.Представление,
		|	"""",
		|	"""",
		|	4
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &ФизЛицо
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКлиента)";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", Клиент);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураПараметров.АдресФактическогоПроживания = "";
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ключ = 1 Тогда
				СтруктураПараметров.АдресФактическогоПроживания = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 2 Тогда
				СтруктураПараметров.СерияНомерПаспорта = Выборка.Серия + " " + Выборка.Номер;
			ИначеЕсли Выборка.Ключ = 3 Тогда
				СтруктураПараметров.НомерТелефона = Выборка.Представление;
			ИначеЕсли Выборка.Ключ = 4 Тогда
				СтруктураПараметров.EmailКлиента = Выборка.Представление;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура КонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	КонтактноеЛицоПриИзменении(Элемент);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Проверка для создания документа взаимодействия с типом встреча, если взаимодействия нет, необходимо создать...
	СтрВстречи = CRMСервер.НаличиеДокументаВзаимодействияВстреча(Объект.Ссылка, Объект.КонтактноеЛицо);
	ПараметрыЗаписи.Вставить("ЕстьДокументВстреча", СтрВстречи.Результат);
	ПараметрыЗаписи.Вставить("ДокВстреча", 			СтрВстречи.ДокументВзаимодействие);		

	//Проверка для корректировки взаимодействия с будущей датой.
	СтрЗапланированнойВстречи = CRMСервер.НаличиеЗапланированногоДокументаВстреча(Объект.Ссылка, Объект.КонтактноеЛицо);
	ПараметрыЗаписи.Вставить("ЕстьЗапланированнаяВстреча", СтрЗапланированнойВстречи.Результат);
	ПараметрыЗаписи.Вставить("ДокЗапланированнаяВстреча", СтрЗапланированнойВстречи.ДокументВзаимодействие);

	ПараметрыЗаписи.Вставить("ЕстьДокументТелЗвонок", Ложь);
	ПараметрыЗаписи.Вставить("ДокТелЗвонок", Неопределено);

	СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Ссылка, Объект.КонтактноеЛицо);
	ПараметрыЗаписи.Вставить("ЕстьЗапланированныйЗвонок", СтрЗапланированногоЗвонка.Результат);
	ПараметрыЗаписи.Вставить("ДокЗапланированныйЗвонок", СтрЗапланированногоЗвонка.ДокументВзаимодействие);
	
КонецПроцедуры
//-- Юкаев Роман 20180122 )
#КонецОбласти
