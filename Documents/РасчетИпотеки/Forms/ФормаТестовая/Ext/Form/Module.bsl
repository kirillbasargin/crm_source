
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЖилойКомплекс();
	
	Если Параметры.Ключ.Пустая() И Параметры.Основание = Неопределено И Параметры.ЗначениеКопирования = Неопределено Тогда
		
		ЖилойКомплекс = Справочники.Проекты.ПустаяСсылка();
		ОсновнойЗаемщик = Объект.ДанныеОЗаемщиках.Добавить();
		
		ЗаполнитьСписокДокументов();
		ЗаполнитьОбщиеКнопкиЗаемщиков(0);
		
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	Иначе
		ЖилойКомплекс = Объект.ЖК;
		
		ЗаполнитьЗакладкуОН();
		
		КоличествоЗаемщиков = Объект.ДанныеОЗаемщиках.Количество();
		Элементы.УчитыватьДанныеСозаемщиков.Видимость = КоличествоЗаемщиков > 1;
		
		Если КоличествоЗаемщиков > 0 Тогда

			ИмяСтраницы = "СтраницаСозаемщик";
			
			Для Каждого СтрокаСозаемщик Из Объект.ДанныеОЗаемщиках Цикл
				Если СтрокаСозаемщик.НомерСтроки = 1 Тогда
					ЗаполнитьПараметрыОсновногоЗаемщика();
					
					//ДоступностьДанных = ЗначениеЗаполнено(ФИО);
					
					//Элементы.ДатаРождения.Доступность	 = Не ДоступностьДанных;
					//Элементы.ГражданствоРФ.Доступность	 = Не ДоступностьДанных;
					//Элементы.РегистрацияРФ.Доступность	 = Не ДоступностьДанных;
					//Элементы.Пол.Доступность			 = Не ДоступностьДанных;
					
					ЗаполнитьОбщиеКнопкиЗаемщиков(0);
				Иначе
					НомерСтраницы = СтрокаСозаемщик.НомерСтроки - 1;
					
					Если НомерСтраницы = 1 Тогда
						Элементы[ИмяСтраницы + Строка(НомерСтраницы)].Видимость = Истина;
						Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяСтраницы + Строка(НомерСтраницы)];
						
						ЗаполнитьОбщиеКнопкиЗаемщиков(НомерСтраницы);
					Иначе
						СкопироватьЭлементыСоСтраницы(ИмяСтраницы + "1", ИмяСтраницы, НомерСтраницы);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ЗаполнитьПараметрыСозаемщиков();
		Иначе
			ОсновнойЗаемщик = Объект.ДанныеОЗаемщиках.Добавить();
		
			ЗаполнитьСписокДокументов();
			ЗаполнитьОбщиеКнопкиЗаемщиков(0);
			
			Объект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Если Объект.Расчеты.Количество() > 0 Тогда
			РасчетВыполнен = Истина;
		КонецЕсли;
		
		//Страница Расчет
		СрокИпотеки1 = ?(Объект.СрокКредита1 % 60 = 0, Цел(Объект.СрокКредита1 / 12), 0);
		СрокИпотеки2 = ?(Объект.СрокКредита2 % 60 = 0, Цел(Объект.СрокКредита2 / 12), 0);
		СрокИпотеки3 = ?(Объект.СрокКредита3 % 60 = 0, Цел(Объект.СрокКредита3 / 12), 0);
		
		Если Параметры.Основание = Неопределено Тогда
			ДоступностьЖК = ЗначениеЗаполнено(Объект.Запрос);
			Элементы.ГруппаЖК.Доступность = Не ДоступностьЖК;
		//	Элементы.ГруппаФаза.Доступность = Не (ЗначениеЗаполнено(Объект.Фаза) И ДоступностьЖК);
		//	Элементы.ГруппаКорпус.Доступность = Не (ЗначениеЗаполнено(Объект.Корпус) И ДоступностьЖК);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОбщиеКнопки();
	
	Элементы.СтраницаПечать.ТолькоПросмотр = Объект.Расчеты.Количество() = 0;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбъектНедвижимости;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Пользователи.РолиДоступны("Администрирование") Тогда
		Элементы.Запрос.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) //++
	
	УстановитьСтатусДокумента();
	ВидимостьДоступностьНаСтраницеРасчет();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Проверка для создания документа взаимодействия с типом встреча, если взаимодействия нет, необходимо создать...
	СтрВстречи = CRMСервер.НаличиеДокументаВзаимодействияВстреча(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
	ПараметрыЗаписи.Вставить("ЕстьДокументВстреча", СтрВстречи.Результат);
	ПараметрыЗаписи.Вставить("ДокВстреча", 			СтрВстречи.ДокументВзаимодействие);		

	//Проверка для корректировки взаимодействия с будущей датой.
	СтрЗапланированнойВстречи = CRMСервер.НаличиеЗапланированногоДокументаВстреча(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
	ПараметрыЗаписи.Вставить("ЕстьЗапланированнаяВстреча", СтрЗапланированнойВстречи.Результат);
	ПараметрыЗаписи.Вставить("ДокЗапланированнаяВстреча", СтрЗапланированнойВстречи.ДокументВзаимодействие);

	ПараметрыЗаписи.Вставить("ЕстьДокументТелЗвонок", Ложь);
	ПараметрыЗаписи.Вставить("ДокТелЗвонок", Неопределено);

	СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
	ПараметрыЗаписи.Вставить("ЕстьЗапланированныйЗвонок", СтрЗапланированногоЗвонка.Результат);
	ПараметрыЗаписи.Вставить("ДокЗапланированныйЗвонок", СтрЗапланированногоЗвонка.ДокументВзаимодействие);	
		
	//++ Юкаев Роман 20180425 (//810598
	//МассивКлиентов = Новый Массив;
	Если Не Объект.Запрос.Пустая() Тогда
	//	Для Каждого Клиент Из Объект.ДанныеОЗаемщиках Цикл
	//		НайденныйКлиент = Объект.Запрос.Участники.НайтиСтроки(Новый Структура("Клиент", Клиент.ФИО));
	//		Если НайденныйКлиент.Количество() = 0 Тогда
	//			МассивКлиентов.Добавить(Клиент.ФИО);
	//		КонецЕсли;
	//	КонецЦикла;
	//
	//	Если МассивКлиентов.Количество() > 0 Тогда
	//		ДобавитьКлиентовВЗапрос(МассивКлиентов, Объект.Запрос);
	//	КонецЕсли;
		МассивКлиентов = Новый Массив;
		Для Каждого СтТЧ Из Объект.ДанныеОЗаемщиках Цикл
			МассивКлиентов.Добавить(СтТЧ.ФИО);
		КонецЦикла;
		
		ДозаполнитьКлиентов(Объект.Запрос, МассивКлиентов);
	КонецЕсли;
	//-- Юкаев Роман 20180425 )
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДозаполнитьКлиентов(Запрос, Клиенты)
	
	МассивКлиентов = Новый Массив;
	Для Каждого Клиент Из Клиенты Цикл
		НайденныйКлиент = Запрос.Участники.НайтиСтроки(Новый Структура("Клиент", Клиент));
		Если НайденныйКлиент.Количество() = 0 Тогда
			МассивКлиентов.Добавить(Клиент);
		КонецЕсли;
	КонецЦикла;

	Если МассивКлиентов.Количество() > 0 Тогда
		ДобавитьКлиентовВЗапрос(МассивКлиентов, Запрос);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СтрВстречи = CRMСервер.НаличиеДокументаВзаимодействияВстреча(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
		ПараметрыЗаписи.Вставить("ЕстьДокументВстреча", СтрВстречи.Результат);
		ПараметрыЗаписи.Вставить("ДокВстреча", 			СтрВстречи.ДокументВзаимодействие);				
		
		СтрЗвонка	= CRMСервер.НаличиеДокументаВзаимодействияТелефонныйЗвонок(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
		ПараметрыЗаписи.Вставить("ЕстьДокументТелЗвонок", 	СтрЗвонка.Результат);
		ПараметрыЗаписи.Вставить("ДокТелЗвонок", 			СтрЗвонка.ДокументВзаимодействие);				
		
		//СтрЗапланированногоЗвонка = CRMСервер.НаличиеДокументаВзаимодействияТелефонныйЗвонок(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
		СтрЗапланированногоЗвонка = CRMСервер.НаличиеЗапланированногоДокументаТелефонногоЗвонка(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
		ПараметрыЗаписи.Вставить("ЕстьЗапланированныйЗвонок", 	СтрЗапланированногоЗвонка.Результат);
		ПараметрыЗаписи.Вставить("ДокЗапланированныйЗвонок", 	СтрЗапланированногоЗвонка.ДокументВзаимодействие);
		
		//СтрЗапланированнойВстречи = CRMСервер.НаличиеДокументаВзаимодействияВстреча(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
		СтрЗапланированнойВстречи = CRMСервер.НаличиеЗапланированногоДокументаВстреча(Объект.Запрос, Объект.ДанныеОЗаемщиках[0].ФИО);
		ПараметрыЗаписи.Вставить("ЕстьЗапланированнаяВстреча", 	СтрЗапланированнойВстречи.Результат);
		ПараметрыЗаписи.Вставить("ДокЗапланированнаяВстреча", 	СтрЗапланированнойВстречи.ДокументВзаимодействие);
		
		СоздатьЗапланированныеДокументыВзаимодействий(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ДанныеОЗаемщиках.Количество() > 0 И Не ЗначениеЗаполнено(Объект.ДанныеОЗаемщиках[0].ФИО) Тогда
		Сообщить("Не заполнен Заемщик, запись документа не возможна!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись) Тогда
		//Флаг = ПроверитьЗаполнениеЗапросаИНаличиеДокументов(Истина);
		Если ПараметрыЗаписи.Свойство("ДопСписок") Тогда
			ПараметрыЗаписи.РежимЗаписи = ПараметрыЗаписи.ДопСписок;
			Флаг = ПроверитьЗаполнениеЗапросаИНаличиеДокументов(Истина);
			
			Если Флаг = Неопределено Тогда
			
			Иначе
				//Отказ = Истина;
				ОткрытьФорму("Документ.РасчетИпотеки.ФормаОбъекта", Новый Структура("Ключ, Модифицированность", Флаг, Модифицированность),, Новый УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.Независимый);
				Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
					СоздатьЗапланированныеДокументыВзаимодействий(ПараметрыЗаписи);
				КонецЕсли;
				Модифицированность = Ложь;
				Закрыть();
			КонецЕсли;
			
		Иначе
			ЖК = НайтиПроектПоГруппе(Объект.ЖК);
			МассивКлиентов = Новый Массив;
			Для Каждого СтрТЧ Из Объект.ДанныеОЗаемщиках Цикл
				МассивКлиентов.Добавить(СтрТЧ.ФИО);
			КонецЦикла;
			
			СписокКлиентов = ПолучитьСписокКлиентовПоЗапросам(МассивКлиентов, ЖК, Объект.Дата);
		
			Если СписокКлиентов = Неопределено Тогда
				//Создать новый запрос
				Объект.Запрос = СоздатьЗапрос(Объект.Дата, ЖК, Объект.Фаза, Объект.Корпус, Объект.ДанныеОЗаемщиках, Объект.СтоимостьКвартирыРуб, Объект.ПервоначальныйВзносРуб);
				
			ИначеЕсли СписокКлиентов.Свойство("СписокКлиентов") Тогда
				//показатьФорму
				Отказ = Истина;
				СписокЗнач = Новый СписокЗначений;
				
				Для Каждого Клиент Из СписокКлиентов.СписокКлиентов Цикл
					Если Объект.ДанныеОЗаемщиках.НайтиСтроки(Новый Структура("ФИО", Клиент)).Количество() = 0 Тогда
						СписокЗнач.Добавить(Клиент, Строка(Клиент)); 
					КонецЕсли;
				КонецЦикла;
					
				Оповещение = Новый ОписаниеОповещения("ПослеОтметкиЭлементов", ЭтотОбъект, Новый Структура("СписокПараметров, Режим", СписокКлиентов, ПараметрыЗаписи.РежимЗаписи));
				СписокЗнач.ПоказатьОтметкуЭлементов(Оповещение, "Уточните, участвуют ли клиенты из списка в текущем запросе Клиента?");
			Иначе
				//ОбработатьЗапросы
				Объект.Запрос = СписокКлиентов.Запрос;
				
				Для Каждого СтЗапрос Из СписокКлиентов.СписокЗапросов Цикл
					ДозаполнитьКлиентов(СтЗапрос, МассивКлиентов);
				КонецЦикла;
				
				Флаг = ПроверитьЗаполнениеЗапросаИНаличиеДокументов(Истина);
				
				Если Флаг = Неопределено Тогда
				
				Иначе
					Отказ = Истина;
					ОткрытьФорму("Документ.РасчетИпотеки.ФормаОбъекта", Новый Структура("Ключ, Модифицированность", Флаг, Модифицированность),, Новый УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.Независимый);
					Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
						СоздатьЗапланированныеДокументыВзаимодействий(ПараметрыЗаписи);
					КонецЕсли;
					Модифицированность = Ложь;
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаОбъектНедвижимости

&НаСервере
Процедура ЗаполнитьЗакладкуОН() //++
	
	ЖилойКомплексПриИзмененииНаСервере(Ложь);
	
	ФазаПриИзмененииНаСервере(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЖилойКомплекс() //++
	
	ЗапросЖК = Новый Запрос;
	ЗапросЖК.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Квартирограмма.ОбъектСтроительства.Проект КАК Ссылка
		|ПОМЕСТИТЬ п1
		|ИЗ
		|	РегистрСведений.Квартирограмма КАК Квартирограмма
		|ГДЕ
		|	Квартирограмма.СтатусПула = ЗНАЧЕНИЕ(Перечисление.СтатусыПулов.Открытие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(МультикалькуляторГруппыПроектов.Проект, п1.Ссылка) КАК Ссылка,
		|	ЕСТЬNULL(МультикалькуляторГруппыПроектов.ГруппаПроектов.Наименование, п1.Ссылка.Наименование) КАК Наименование,
		|	ЕСТЬNULL(МультикалькуляторГруппыПроектов.Активен, ИСТИНА) КАК Активен
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	п1 КАК п1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МультикалькуляторГруппыПроектов КАК МультикалькуляторГруппыПроектов
		|		ПО п1.Ссылка = МультикалькуляторГруппыПроектов.Проект
		|ГДЕ
		|	п1.Ссылка <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|	И п1.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПроектов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итог.Ссылка КАК Ссылка,
		|	ВТ_Итог.Наименование КАК Наименование,
		|	ВТ_Итог.Активен КАК Активен
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|ГДЕ
		|	ВТ_Итог.Активен";
	
	ЗапросЖК.УстановитьПараметр("Проект", ?(Объект.ЖК = Неопределено, Справочники.ГруппыПроектов.ПустаяСсылка(), Объект.ЖК));
	
	Результат = ЗапросЖК.Выполнить();
	
	Если Результат.Пустой() Тогда
		Сообщить("Не жилых комплексов для расчета ипотеки.");
	Иначе
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			Элементы.ЖилойКомплекс.СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбщиеКнопки() //++
	
	ЗапросПоПараметрам = Новый Запрос;
	ЗапросПоПараметрам.Текст = 
							"ВЫБРАТЬ
							|	ПараметрыПримененияСтавок_Значения.Ссылка КАК Ссылка,
							|	ПараметрыПримененияСтавок_Значения.Представление КАК Представление,
							|	ПараметрыПримененияСтавок_Значения.Владелец КАК Владелец
							|ИЗ
							|	Справочник.ПараметрыПримененияСтавок_Значения КАК ПараметрыПримененияСтавок_Значения
							|ГДЕ
							|	ПараметрыПримененияСтавок_Значения.Владелец В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыПримененияСтавок.ТипОбъекта), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыПримененияСтавок.Площадь))
							|
							|УПОРЯДОЧИТЬ ПО
							|	ПараметрыПримененияСтавок_Значения.Сортировка,
							|	ПараметрыПримененияСтавок_Значения.Наименование";
	
	Результат = ЗапросПоПараметрам.Выполнить();
	
	Если Результат.Пустой() Тогда
		Сообщить("Не найдены параметры заполнения документа!");
	Иначе
		
		ТаблицаПараметров = Результат.Выгрузить();
		
		//Площадь
		ПарамПлощадь = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Площадь));
		
		Если ПарамПлощадь.Количество() > 0 Тогда
			
			Для Каждого СтрокаПлощадь Из ПарамПлощадь Цикл
				Элементы.Площадь.СписокВыбора.Добавить(СтрокаПлощадь.Ссылка, СтрокаПлощадь.Представление);
			КонецЦикла;
		КонецЕсли;
		
		//ТипОбъекта
		ПарамТипОбъекта = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ТипОбъекта));
		
		Если ПарамТипОбъекта.Количество() > 0 Тогда
			
			Для Каждого СтрокаТипОбъекта Из ПарамТипОбъекта Цикл
				Элементы.ТипОбъекта.СписокВыбора.Добавить(СтрокаТипОбъекта.Ссылка, СтрокаТипОбъекта.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖилойКомплексПриИзменении(Элемент) //--
	
	Элементы.Фаза.СписокВыбора.Очистить();
	Элементы.Корпус.СписокВыбора.Очистить();
	
	Объект.ЖК = ЖилойКомплекс;
	
	ЖилойКомплексПриИзмененииНаСервере();
	
	Если Объект.СписокБанков.Количество() <> 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЖилойКомплексПриИзмененииНаСервере(Ключ = Истина) //++
	
	Если Ключ Тогда
		Объект.Фаза = Справочники.Фазы.ПустаяСсылка();
		Объект.Корпус = Справочники.ОбъектыСтроительства.ПустаяСсылка();
		Объект.Запрос = Документы.Запрос.ПустаяСсылка();
		Объект.Расчеты.Очистить();
		Объект.ДоступныеПрограммы.Очистить();
		Объект.СписокБанков.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МультикалькуляторГруппыПроектов.Проект КАК Проект
		|ПОМЕСТИТЬ ВТ_Проекты
		|ИЗ
		|	РегистрСведений.МультикалькуляторГруппыПроектов КАК МультикалькуляторГруппыПроектов
		|ГДЕ
		|	МультикалькуляторГруппыПроектов.Активен
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(&Проект) = ТИП(Справочник.ГруппыПроектов)
		|				ТОГДА МультикалькуляторГруппыПроектов.ГруппаПроектов = &Проект
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбъектыСтроительства.Фаза КАК Фаза,
		|	ОбъектыСтроительства.Фаза.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.Квартирограмма КАК Квартирограмма
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|		ПО Квартирограмма.ОбъектСтроительства = ОбъектыСтроительства.Ссылка
		|ГДЕ
		|	Квартирограмма.СтатусПула = ЗНАЧЕНИЕ(Перечисление.СтатусыПулов.Открытие)
		|	И Квартирограмма.ОбъектСтроительства.Фаза ССЫЛКА Справочник.Фазы
		|	И Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства В (ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЖилаяНедвижимость), ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЗемельныйУчасток))
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(&Проект) = ТИП(Справочник.Проекты)
		|				ТОГДА ОбъектыСтроительства.Проект = &Проект
		|			ИНАЧЕ ОбъектыСтроительства.Проект В
		|					(ВЫБРАТЬ
		|						ВТ_Проекты.Проект КАК Проект
		|					ИЗ
		|						ВТ_Проекты КАК ВТ_Проекты)
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Проект", Объект.ЖК);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаФаз = Результат.Выгрузить();
		ТаблицаФаз.Свернуть("Представление, Фаза");
		ТаблицаФаз.Сортировать("Представление");
		
		Для Каждого СтрокаФаз Из ТаблицаФаз Цикл
			Элементы.Фаза.СписокВыбора.Добавить(СтрокаФаз.Фаза, СтрокаФаз.Представление);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ФазаПриИзменении(Элемент) //++
	
	Элементы.Корпус.СписокВыбора.Очистить();
	
	ФазаПриИзмененииНаСервере();
	ПересчетДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ФазаПриИзмененииНаСервере(Ключ = Истина) //++
	
	Если Ключ Тогда
		Объект.Корпус = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МультикалькуляторГруппыПроектов.Проект КАК Проект
		|ПОМЕСТИТЬ ВТ_Проекты
		|ИЗ
		|	РегистрСведений.МультикалькуляторГруппыПроектов КАК МультикалькуляторГруппыПроектов
		|ГДЕ
		|	МультикалькуляторГруппыПроектов.Активен
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(&Проект) = ТИП(Справочник.ГруппыПроектов)
		|				ТОГДА МультикалькуляторГруппыПроектов.ГруппаПроектов = &Проект
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Квартирограмма.Корпус.Наименование КАК Корпус,
		|	ОбъектыСтроительства.Ссылка КАК ОбъектСтроительства,
		|	1 КАК Порядок
		|ИЗ
		|	РегистрСведений.Квартирограмма КАК Квартирограмма
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|		ПО Квартирограмма.ОбъектСтроительства = ОбъектыСтроительства.Ссылка
		|ГДЕ
		|	Квартирограмма.СтатусПула = ЗНАЧЕНИЕ(Перечисление.СтатусыПулов.Открытие)
		|	И Квартирограмма.ОбъектСтроительства.Фаза = &Фаза
		|	И Квартирограмма.ОбъектСтроительства.НазначениеОбъектаСтроительства В (ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЖилаяНедвижимость), ЗНАЧЕНИЕ(Перечисление.НазначениеОбъектовСтроительства.ЗемельныйУчасток))
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(&Проект) = ТИП(Справочник.Проекты)
		|				ТОГДА ОбъектыСтроительства.Проект = &Проект
		|			ИНАЧЕ ОбъектыСтроительства.Проект В
		|					(ВЫБРАТЬ
		|						ВТ_Проекты.Проект КАК Проект
		|					ИЗ
		|						ВТ_Проекты КАК ВТ_Проекты)
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Проект", Объект.ЖК);
	Запрос.УстановитьПараметр("Фаза", Объект.Фаза);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТаблицаКорпусов = Результат.Выгрузить();
		
		Для Каждого СтрКорпус Из ТаблицаКорпусов Цикл
			
			ДлинаСтроки = СтрДлина(СтрКорпус.Корпус);
				
			ЦифровойРяд = "1234567890";
			Порядок = "0";
			Для Индекс = 1 По ДлинаСтроки Цикл
				
				Символ = Сред(СтрКорпус.Корпус, Индекс, 1);
				Если Найти(ЦифровойРяд, Символ) <> 0 Тогда
					Порядок = Порядок + Строка(Символ);
				ИначеЕсли Символ = "." Или Символ = "," Тогда
					Порядок = Порядок + ",";
				КонецЕсли;
			КонецЦикла;
			
			СтрКорпус.Порядок = Число(Порядок);
		КонецЦикла;
		
		ТаблицаКорпусов.Сортировать("Порядок Возр, Корпус");
		
		Для Каждого СтрокаКорпус Из ТаблицаКорпусов Цикл
			Элементы.Корпус.СписокВыбора.Добавить(СтрокаКорпус.ОбъектСтроительства, СтрокаКорпус.Корпус);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьПриИзменении(Элемент)
	ПересчетДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	ПересчетДокумента();
КонецПроцедуры

&НаКлиенте
Процедура КорпусПриИзменении(Элемент) //++
	ПересчетДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКвартирыРубПриИзменении(Элемент) //++
	ПересчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтоимость() //++
	
	Если Объект.СтоимостьКвартирыРуб = 0 Тогда
		Объект.ПервоначальныйВзносПроцент = 0;
	Иначе
		Объект.ПервоначальныйВзносПроцент = Окр(100 * Объект.ПервоначальныйВзносРуб / Объект.СтоимостьКвартирыРуб, 2);
	КонецЕсли;
	
	Объект.СуммаКредитаРуб = Объект.СтоимостьКвартирыРуб - Объект.ПервоначальныйВзносРуб;
	
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальныйВзносРубПриИзменении(Элемент) //++
	ПересчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальныйВзносПроцентПриИзменении(Элемент) //++
	
	Объект.ПервоначальныйВзносРуб = Окр(Объект.СтоимостьКвартирыРуб * Объект.ПервоначальныйВзносПроцент / 100, 2);
	Объект.СуммаКредитаРуб = Объект.СтоимостьКвартирыРуб - Объект.ПервоначальныйВзносРуб;
	
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКредитаРубПриИзменении(Элемент) //++
	
	Объект.ПервоначальныйВзносРуб = Объект.СтоимостьКвартирыРуб - Объект.СуммаКредитаРуб;
	
	Если Объект.СтоимостьКвартирыРуб = 0 Тогда
		Объект.ПервоначальныйВзносПроцент = 0;
	Иначе
		Объект.ПервоначальныйВзносПроцент = Окр(100 * Объект.ПервоначальныйВзносРуб / Объект.СтоимостьКвартирыРуб, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГруппуПроекта(Проект)
	
	СписокГрупп = РегистрыСведений.МультикалькуляторГруппыПроектов.Получить(Новый Структура("Проект", Проект));
	
	Если ЗначениеЗаполнено(СписокГрупп) Тогда 
		Возврат	СписокГрупп.ГруппаПроектов;
	Иначе
		Возврат Справочники.ГруппыПроектов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции





#КонецОбласти

#Область СтраницаЗаемщик

&НаСервере
Процедура ЗаполнитьПараметрыОсновногоЗаемщика() //++
	
	ОсновнойЗаемщик = Объект.ДанныеОЗаемщиках[0];
	
	ФИО = ОсновнойЗаемщик.ФИО;
	Пол = ОсновнойЗаемщик.Пол;
	ДатаРождения = ОсновнойЗаемщик.ДатаРождения;
	ПолныхЛет = ОсновнойЗаемщик.КоличествоПолныхЛет;
	ГражданствоРФ = ОсновнойЗаемщик.ГражданствоРФ;
	РегистрацияРФ = ОсновнойЗаемщик.РегистрацияРФ;
	СемейноеПоложение = ОсновнойЗаемщик.СемейноеПоложение;
	НаличиеИждивенцев = ОсновнойЗаемщик.НаличиеИждивенцев;
	КатегорияЗанятости = ОсновнойЗаемщик.КатегорияЗанятости;
	СтажНаТекущемМестеРаботы = ОсновнойЗаемщик.СтажТекущий;
	ОбщийСтаж = ОсновнойЗаемщик.СтажОбщий;
	ФормаПодтвержденияДохода = ОсновнойЗаемщик.ФормаПодтвержденияДоходов;
	ЕжемесячныйДоход = ОсновнойЗаемщик.РазмерЕжемесячногоДохода;
	НаличиеЗПВБанке = ОсновнойЗаемщик.НаличиеЗПКартыБанка;
	ФинансовыеОбязательства = ОсновнойЗаемщик.ФинансовыеОбязательства;
	СуммаФинансовыхОбязательств = ОсновнойЗаемщик.ФинансовыеОбязательстваСумма;
	Банк = ОсновнойЗаемщик.БанкЭмитент;
	МатеринскийКапитал = ОсновнойЗаемщик.МатеринскийКапиталВПВ;
	
	Если ЗначениеЗаполнено(ФинансовыеОбязательства) Тогда
		ЭлементФО = Справочники.ПараметрыПримененияСтавок_Значения.НайтиПоНаименованию("Да", Истина, , ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФинансовыеОбязательства);
		Элементы.СуммаФинансовыхОбязательств.Видимость = ФинансовыеОбязательства = ЭлементФО;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаличиеЗПВБанке) Тогда
		ЭлементБанк = Справочники.ПараметрыПримененияСтавок_Значения.НайтиПоНаименованию("Да", Истина, , ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ЗарплатныйКлиент);
		Элементы.Банк.Видимость = НаличиеЗПВБанке = ЭлементБанк;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЗаемщика(Ключ = 0, Очистка = Ложь, Изменять = Неопределено) //++
	
	ТекущийЗаемщик = Объект.ДанныеОЗаемщиках[Ключ];
	
	ТекущийЗаемщик.ФИО = ЭтотОбъект["ФИО" + ?(Ключ = 0, "", Строка(Ключ))];
	Если ЗначениеЗаполнено(ТекущийЗаемщик.ФИО) Тогда
		
		Если Изменять = Неопределено Тогда
			ПараметрыПоФИО = ПолучитьПараметрыПоФИО(ТекущийЗаемщик.ФИО);
		
			Если ПараметрыПоФИО <> Неопределено Тогда
			
				ЭтотОбъект["Пол"           + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.Пол;
				ЭтотОбъект["ДатаРождения"  + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.ДатаРождения;
				ЭтотОбъект["ПолныхЛет" 	   + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.ПолныхЛет;
				ЭтотОбъект["ГражданствоРФ" + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.ГражданствоРФ;
				ЭтотОбъект["РегистрацияРФ" + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.РегистрацияРФ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Очистка Тогда
		ОчиститьДанные(Ключ);
	КонецЕсли;
	
	ТекущийЗаемщик.Пол 					= ЭтотОбъект["Пол" 			 + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.ДатаРождения 		= ЭтотОбъект["ДатаРождения"  + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.КоличествоПолныхЛет 	= ЭтотОбъект["ПолныхЛет" 	 + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.ГражданствоРФ 		= ЭтотОбъект["ГражданствоРФ" + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.РегистрацияРФ 		= ЭтотОбъект["РегистрацияРФ" + ?(Ключ = 0, "", Строка(Ключ))];
	
	ТекущийЗаемщик.СемейноеПоложение 	= ЭтотОбъект["СемейноеПоложение" 		+ ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.НаличиеИждивенцев 	= ЭтотОбъект["НаличиеИждивенцев" 		+ ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.КатегорияЗанятости 	= ЭтотОбъект["КатегорияЗанятости" 		+ ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.СтажТекущий 			= ЭтотОбъект["СтажНаТекущемМестеРаботы" + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.СтажОбщий 			= ЭтотОбъект["ОбщийСтаж" 			 	+ ?(Ключ = 0, "", Строка(Ключ))];
	
	ТекущийЗаемщик.ФормаПодтвержденияДоходов 	= ЭтотОбъект["ФормаПодтвержденияДохода"    + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.РазмерЕжемесячногоДохода 	= ЭтотОбъект["ЕжемесячныйДоход" 		   + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.НаличиеЗПКартыБанка 			= ЭтотОбъект["НаличиеЗПВБанке" 			   + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.ФинансовыеОбязательства 		= ЭтотОбъект["ФинансовыеОбязательства" 	   + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.ФинансовыеОбязательстваСумма = ЭтотОбъект["СуммаФинансовыхОбязательств" + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.БанкЭмитент 					= ЭтотОбъект["Банк" 			  		   + ?(Ключ = 0, "", Строка(Ключ))];
	ТекущийЗаемщик.МатеринскийКапиталВПВ 		= ЭтотОбъект["МатеринскийКапитал" 		   + ?(Ключ = 0, "", Строка(Ключ))];
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанные(Ключ)
	
	ЭтотОбъект["Пол" 			 			+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["ДатаРождения"  				+ ?(Ключ = 0, "", Строка(Ключ))] = Дата(1,1,1);
	ЭтотОбъект["ПолныхЛет" 	 				+ ?(Ключ = 0, "", Строка(Ключ))] = 0;
	ЭтотОбъект["ГражданствоРФ" 				+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["РегистрацияРФ" 				+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["СемейноеПоложение" 			+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["НаличиеИждивенцев" 			+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["КатегорияЗанятости" 		+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["СтажНаТекущемМестеРаботы" 	+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["ОбщийСтаж" 			 		+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	
	ЭтотОбъект["ФормаПодтвержденияДохода"   + ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["ЕжемесячныйДоход" 		   	+ ?(Ключ = 0, "", Строка(Ключ))] = 0;
	ЭтотОбъект["НаличиеЗПВБанке" 			+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["ФинансовыеОбязательства" 	+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	ЭтотОбъект["СуммаФинансовыхОбязательств" + ?(Ключ = 0, "", Строка(Ключ))] = 0;
	ЭтотОбъект["Банк" 			  		   	+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.Банки.ПустаяСсылка();
	ЭтотОбъект["МатеринскийКапитал" 		+ ?(Ключ = 0, "", Строка(Ключ))] = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийСтажПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	ПересчетДокумента();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СемейноеПоложениеПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	ПересчетДокумента();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаличиеИждивенцевПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеОбязательстваПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	Элементы.СуммаФинансовыхОбязательств.Видимость = ФинансовыеОбязательства = ВернутьКнопкуДаФинансовыеОбязательства();
	ПересчетДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьКнопкуДаФинансовыеОбязательства() //++
	Возврат ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФинансовыеОбязательства.ЗначениеДа;
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКнопкуДаЗарплатныйКлиент() //++
	Возврат ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ЗарплатныйКлиент.ЗначениеДа;
КонецФункции

&НаКлиенте
Процедура КатегорияЗанятостиПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтажНаТекущемМестеРаботыПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПодтвержденияДоходаПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура НаличиеЗПВБанкеПриИзменении(Элемент) //++
	
	ВидимостьЭлемента = НаличиеЗПВБанке = ВернутьКнопкуДаЗарплатныйКлиент();
	
	Строка = Объект.ДанныеОЗаемщиках[0];
	Строка.НаличиеЗПКартыБанка = НаличиеЗПВБанке;
	
	Элементы.Банк.Видимость = ВидимостьЭлемента;
	Если Не ВидимостьЭлемента Тогда 
		Строка.БанкЭмитент = Неопределено;
	КонецЕсли;
	
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраницаЗаемщик(Команда) //--
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоРФПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияРФПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(0,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура МатеринскийКапиталПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаФинансовыхОбязательствПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕжемесячныйДоходПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,, Истина);
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент) //++
	
	ОбновитьДанныеЗаемщика(,,Ложь);
	ПересчетДокумента();
	
	//ДоступностьДанных = ЗначениеЗаполнено(ФИО);
	
	//Элементы.ДатаРождения.Доступность = Не ДоступностьДанных;
	//Элементы.ГражданствоРФ.Доступность = Не ДоступностьДанных;
	//Элементы.РегистрацияРФ.Доступность = Не ДоступностьДанных;
	//Элементы.Пол.Доступность = Не ДоступностьДанных;
	
	Модифицированность = Истина;
	
	//Если ДоступностьДанных И ЗначениеЗаполнено(Объект.Запрос) Тогда
	//	Документ = ПроверитьКорректностьЗапроса(ФИО, Объект.Запрос);
	//	Если Документ <> Неопределено Тогда
	//		ПараметрыФормы = Новый Структура("Ключ, Модифицированность", Документ, Истина);
	//		ОткрытьФорму("Документ.РасчетИпотеки.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	//		Модифицированность = Ложь;
	//		Закрыть();
	//		Сообщить("Открыт и перезаполнен уже существующий документ Расчет ипотеки по данному клиенту и Запросу!");
	//	КонецЕсли;
	//КонецЕсли;
	
	//Элементы.Декорация2.Видимость = ЗначениеЗаполнено(ФИО);
	Если ЗначениеЗаполнено(Объект.ЖК) Тогда
		//ПоискЗапроса();
	КонецЕсли;
	Объект.Запрос = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент) //++
	
	ПересчитатьВозраст();

	Объект.ДанныеОЗаемщиках[0].ДатаРождения = ДатаРождения;
	Объект.ДанныеОЗаемщиках[0].КоличествоПолныхЛет = ПолныхЛет;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФИООчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьДанныеЗаемщика();
	ПересчетДокумента();
	
	//ДоступностьПоФИО = ЗначениеЗаполнено(ФИО);
	//Элементы.ДатаРождения.Доступность = ДоступностьПоФИО;
	//Элементы.ГражданствоРФ.Доступность = ДоступностьПоФИО;
	//Элементы.РегистрацияРФ.Доступность = ДоступностьПоФИО;
	//Элементы.Пол.Доступность = ДоступностьПоФИО;
	
	Модифицированность = Истина;
	//Элементы.Декорация2.Видимость = Ложь;
	Объект.Запрос = Неопределено;
	
КонецПроцедуры




#КонецОбласти

#Область СтраницаСозаемщик

&НаСервере
Процедура СоздатьЭлементНаФорме(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы)
	
	Имя = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
	
	Если СтрНачинаетсяС(Имя, "ПолныхЛет") Тогда 
		ТипДанных = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	Иначе
		ТипДанных = ПолучитьТипЭлемента(ТипЗнч(ЭтаФорма[Элемент.ПутьКДанным]));
	КонецЕсли;
	
	Если ИмяСтраницы = Элемент.Родитель.Имя Тогда
		СоздатьЭлемент(Имя, Тип(Элемент), НоваяСтраница, Элемент.Заголовок, ТипДанных);
	Иначе
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
		СоздатьЭлемент(Имя, Тип(Элемент), Элементы[ИмяРодителя], Элемент.Заголовок, ТипДанных);
	КонецЕсли;
	
	Элементы[Имя].ПутьКДанным = Имя;

	ОбновитьДанныеЭлемента(Элементы[Имя], Элемент);
	
	ДействиеПриИзменении = Элемент.ПолучитьДействие("ПриИзменении");
	Если ДействиеПриИзменении <> "" Тогда
		Элементы[Имя].УстановитьДействие("ПриИзменении", ДействиеПриИзменении);
	КонецЕсли;
	
	ДействиеОчистка = Элемент.ПолучитьДействие("Очистка");
	Если ДействиеОчистка <> "" Тогда
		Элементы[Имя].УстановитьДействие("Очистка", ДействиеОчистка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСозаемщиков(Команда)  //++
	
	Объект.ДанныеОЗаемщиках.Добавить();
	
	ДобавитьСозаемщиковФорма();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСозаемщиковФорма()

	ИмяСтраницы = "СтраницаСозаемщик";
	
	НомерСтраницы = Объект.ДанныеОЗаемщиках.Количество() - 1;
	Если НомерСтраницы = 1 Тогда
		Элементы[ИмяСтраницы + Строка(НомерСтраницы)].Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяСтраницы + Строка(НомерСтраницы)];
		ЗаполнитьОбщиеКнопкиЗаемщиков(НомерСтраницы);
	Иначе
		СкопироватьЭлементыСоСтраницы(ИмяСтраницы + "1", ИмяСтраницы, НомерСтраницы);
	КонецЕсли;
	
	Элементы.УчитыватьДанныеСозаемщиков.Видимость = Истина;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьЭлементыСоСтраницы(ИмяСтраницаШаблон, ИмяСтраницы, НомерСтраницы)
	
	СтраницаШаблон = Элементы[ИмяСтраницаШаблон];
	
	ИмяНовойСтраницы = ИмяСтраницы + Строка(НомерСтраницы);
	
	Элементы.Вставить(ИмяНовойСтраницы, Тип(СтраницаШаблон), Элементы.Страницы, Элементы.СтраницаРасчет);
	
	НоваяСтраница = Элементы[ИмяНовойСтраницы];
	НоваяСтраница.Заголовок = Сред(СтраницаШаблон.Заголовок, 1, СтрДлина(СтраницаШаблон.Заголовок) - 2) + " " + Строка(НомерСтраницы);
	
	Для Каждого Элемент Из СтраницаШаблон.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			СоздатьГруппу(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДекорацияФормы") Тогда
			СоздатьДекорацию(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			СоздатьКнопку(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеПереключателяФормы") Тогда
			СоздатьПереключатель(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
		Иначе
			Если Элемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
				СоздатьПереключатель(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
			Иначе
				СоздатьЭлементНаФорме(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтраница.ОтображатьЗаголовок = СтраницаШаблон.ОтображатьЗаголовок;
	НоваяСтраница.Картинка = СтраницаШаблон.Картинка;
	НоваяСтраница.ЦветФона = СтраницаШаблон.ЦветФона;
	НоваяСтраница.Группировка = СтраницаШаблон.Группировка;
	НоваяСтраница.Подсказка = СтраницаШаблон.Подсказка;
	
	Элементы.Страницы.ТекущаяСтраница = НоваяСтраница;
	
	//ЗаполнитьДаннымиСтроки
	ЗаполнитьОбщиеКнопкиЗаемщиков(НомерСтраницы);
	
КонецПроцедуры

Процедура СоздатьГруппу(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы)
	
	Имя = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
	
	Если ИмяСтраницы = Элемент.Родитель.Имя Тогда
		СоздатьЭлемент(Имя, Тип(Элемент), НоваяСтраница, Элемент.Заголовок, Неопределено);
	Иначе
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
		СоздатьЭлемент(Имя, Тип(Элемент), Элементы[ИмяРодителя], Элемент.Заголовок, Неопределено);
	КонецЕсли;
	
	ОбновитьДанныеЭлемента(Элементы[Имя], Элемент, Ложь);
	
	Если Элемент.ПодчиненныеЭлементы.Количество() > 0 Тогда
		
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл 
			Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
				СоздатьГруппу(ПодчиненныйЭлемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ДекорацияФормы") Тогда
				СоздатьДекорацию(ПодчиненныйЭлемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") Тогда
				СоздатьКнопку(ПодчиненныйЭлемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
			ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПолеПереключателяФормы") Тогда
				СоздатьПереключатель(ПодчиненныйЭлемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
			Иначе
				Если ПодчиненныйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
					СоздатьПереключатель(ПодчиненныйЭлемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
				Иначе
					СоздатьЭлементНаФорме(ПодчиненныйЭлемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПереключатель(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы)
	
	Имя = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
		
	ТипДанных = ПолучитьТипЭлемента(ТипЗнч(ЭтаФорма[Элемент.ПутьКДанным]));
	
	Если ИмяСтраницы = Элемент.Родитель.Имя Тогда
		СоздатьЭлемент(Имя, Тип(Элемент), НоваяСтраница, Элемент.Заголовок, ТипДанных);
	Иначе
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
		СоздатьЭлемент(Имя, Тип(Элемент), Элементы[ИмяРодителя], Элемент.Заголовок, ТипДанных);
	КонецЕсли;
	
	Элементы[Имя].ПутьКДанным = Имя;
	
	Переключатель = Элементы[Имя];
	Переключатель.Вид = Элемент.Вид;
	Переключатель.Заголовок = Элемент.Заголовок;
	Переключатель.ШиринаЭлемента = Элемент.ШиринаЭлемента;
	Переключатель.ВысотаЭлемента = Элемент.ВысотаЭлемента;
	Переключатель.ВидПереключателя = Элемент.ВидПереключателя;
	Переключатель.ПоложениеЗаголовка = Элемент.ПоложениеЗаголовка;
	//Переключатель.СписокВыбора.ЗагрузитьЗначения(Элемент.СписокВыбора.ВыгрузитьЗначения());
	Переключатель.ОдинаковаяШиринаКолонок = Элемент.ОдинаковаяШиринаКолонок;
	
	Переключатель.Шрифт = Элемент.Шрифт;
	Переключатель.ЦветФона = Элемент.ЦветФона;
	Переключатель.ЦветРамки = Элемент.ЦветРамки;
	Переключатель.ЦветТекста = Элемент.ЦветТекста;
	Переключатель.ЦветТекстаЗаголовка = Элемент.ЦветТекстаЗаголовка;
	Переключатель.Подсказка = Элемент.Подсказка;
	Переключатель.ОтображениеПодсказки = Элемент.ОтображениеПодсказки;
	Переключатель.КоличествоКолонок = Элемент.КоличествоКолонок;
	Переключатель.ЦветТекста = Элемент.ЦветТекста;
	
	Переключатель.УстановитьДействие("ПриИзменении", Элемент.ПолучитьДействие("ПриИзменении"));
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопку(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы)
	
	Имя = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
	Если ИмяСтраницы = Элемент.Родитель.Имя Тогда
		СоздатьЭлемент(Имя, Тип(Элемент), НоваяСтраница, Элемент.Заголовок, Неопределено);
	Иначе
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
		СоздатьЭлемент(Имя, Тип(Элемент), Элементы[ИмяРодителя], Элемент.Заголовок, Неопределено);
	КонецЕсли;
	
	Кнопка = Элементы[Имя];
	Кнопка.Заголовок = Элемент.Заголовок;
	Кнопка.Ширина = Элемент.Ширина;
	Кнопка.Высота = Элемент.Высота;
	Кнопка.РастягиватьПоВертикали = Элемент.РастягиватьПоВертикали;
	Кнопка.РастягиватьПоГоризонтали = Элемент.РастягиватьПоГоризонтали;
	Кнопка.Картинка = Элемент.Картинка;
	Кнопка.Вид = Элемент.Вид;
	Кнопка.ЦветРамки = Элемент.ЦветРамки;
	Кнопка.ЦветТекста = Элемент.ЦветТекста;
	Кнопка.ЦветФона = Элемент.ЦветФона;
	Кнопка.Фигура = Элемент.Фигура;
	Кнопка.ИмяКоманды = Элемент.ИмяКоманды;
	Кнопка.Шрифт = Элемент.Шрифт;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДекорацию(Элемент, НомерСтраницы, НоваяСтраница, ИмяСтраницы)
	
	Имя = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
	Если ИмяСтраницы = Элемент.Родитель.Имя Тогда
		СоздатьЭлемент(Имя, Тип(Элемент), НоваяСтраница, Элемент.Заголовок, Неопределено);
	Иначе
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - СтрДлина(Строка(НомерСтраницы))) + Строка(НомерСтраницы);
		СоздатьЭлемент(Имя, Тип(Элемент), Элементы[ИмяРодителя], Элемент.Заголовок, Неопределено);
	КонецЕсли;
	
	Декорация = Элементы[Имя];
	
	Декорация.Заголовок = Элемент.Заголовок;
	Декорация.Ширина = Элемент.Ширина;
	Декорация.Высота = Элемент.Высота;
	Декорация.РастягиватьПоВертикали = Элемент.РастягиватьПоВертикали;
	Декорация.РастягиватьПоГоризонтали = Элемент.РастягиватьПоГоризонтали;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипЭлемента(ТипЭлемента)
	
	Если ТипЭлемента = Тип("СправочникСсылка.ПараметрыПримененияСтавок_Значения") Тогда
		ТипДанных = Новый ОписаниеТипов("СправочникСсылка.ПараметрыПримененияСтавок_Значения");
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Клиенты") Тогда
		ТипДанных = Новый ОписаниеТипов("СправочникСсылка.Клиенты");
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Банки") Тогда
		ТипДанных = Новый ОписаниеТипов("СправочникСсылка.Банки");
	ИначеЕсли ТипЭлемента = Тип("Строка") Тогда
		ТипДанных = Новый ОписаниеТипов("Строка");
	ИначеЕсли ТипЭлемента = Тип("Дата") Тогда
		ТипДанных = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ИначеЕсли ТипЭлемента = Тип("Число") Тогда
		ТипДанных = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	Иначе
		ТипДанных = Новый ОписаниеТипов(Строка(ТипЭлемента));
	КонецЕсли;
	
	Возврат ТипДанных;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлемент(Имя, Тип, Родитель, ЗаголовокЭлемента, ТипДанных)
	
	Если СтрНачинаетсяС(Имя, "ПолныхЛет") Тогда 
		ТипДанных = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	КонецЕсли;
	
	Элементы.Добавить(Имя, Тип, Родитель);
	
	Если ТипДанных <> Неопределено Тогда
		МассивРеквизитов = Новый Массив;
		
		НовыйРеквизит = Новый РеквизитФормы(Имя, ТипДанных, , ЗаголовокЭлемента, Ложь);
		МассивРеквизитов.Добавить(НовыйРеквизит);
		
		ИзменитьРеквизиты(МассивРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеЭлемента(ТекущийЭлемент, ИсходныйЭлемент, Ключ = Истина)
	
	ТекущийЭлемент.Заголовок = ИсходныйЭлемент.Заголовок;
	ТекущийЭлемент.Вид = ИсходныйЭлемент.Вид;
	Если ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеПереключателя Тогда
		ТекущийЭлемент.РастягиватьПоВертикали = ИсходныйЭлемент.РастягиватьПоВертикали;
		ТекущийЭлемент.РастягиватьПоГоризонтали = ИсходныйЭлемент.РастягиватьПоГоризонтали;
	КонецЕсли;
	
	Если Ключ Тогда
		Если ТипЗнч(ТекущийЭлемент) = Тип("ГруппаФормы") Тогда
			ТекущийЭлемент.ОтображатьЗаголовок = ИсходныйЭлемент.ОтображатьЗаголовок;
			ТекущийЭлемент.Отображение = ИсходныйЭлемент.Отображение;
			ТекущийЭлемент.Группировка = ИсходныйЭлемент.Группировка;
			ТекущийЭлемент.Доступность = ИсходныйЭлемент.Группировка;
			ТекущийЭлемент.Ширина = ИсходныйЭлемент.Ширина;
			ТекущийЭлемент.Объединенная = ИсходныйЭлемент.Объединенная;
			ТекущийЭлемент.СквозноеВыравнивание = ИсходныйЭлемент.СквозноеВыравнивание;
			ТекущийЭлемент.ТолькоПросмотр = ИсходныйЭлемент.ТолькоПросмотр;
			ТекущийЭлемент.ВыравниваниеЭлементовИЗаголовков = ИсходныйЭлемент.ВыравниваниеЭлементовИЗаголовков;
			
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("ДекорацияФормы") Тогда
			ТекущийЭлемент.Высота = ИсходныйЭлемент.Высота;
			ТекущийЭлемент.Ширина = ИсходныйЭлемент.Ширина;
		ИначеЕсли ТипЗнч(ТекущийЭлемент) = Тип("КнопкаФормы") Тогда
			ТекущийЭлемент.Высота = ИсходныйЭлемент.Высота;
			ТекущийЭлемент.Ширина = ИсходныйЭлемент.Ширина;
			ТекущийЭлемент.Картинка = ИсходныйЭлемент.Картинка;
			ТекущийЭлемент.Вид = ИсходныйЭлемент.Вид;
			ТекущийЭлемент.ЦветРамки = ИсходныйЭлемент.ЦветРамки;
			ТекущийЭлемент.ЦветТекста = ИсходныйЭлемент.ЦветТекста;
			ТекущийЭлемент.ЦветФона = ИсходныйЭлемент.ЦветФона;
			ТекущийЭлемент.Фигура = ИсходныйЭлемент.Фигура;
			ТекущийЭлемент.ИмяКоманды = ИсходныйЭлемент.ИмяКоманды;
			ТекущийЭлемент.Шрифт = ИсходныйЭлемент.Шрифт;
		Иначе
			Если ТекущийЭлемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
				ТекущийЭлемент.Заголовок = ИсходныйЭлемент.Заголовок;
				ТекущийЭлемент.ШиринаЭлемента = ИсходныйЭлемент.ШиринаЭлемента;
				ТекущийЭлемент.ВысотаЭлемента = ИсходныйЭлемент.ВысотаЭлемента;
				ТекущийЭлемент.ВидПереключателя = ИсходныйЭлемент.ВидПереключателя;
				ТекущийЭлемент.ПоложениеЗаголовка = ИсходныйЭлемент.ПоложениеЗаголовка;
				//ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(ИсходныйЭлемент.СписокВыбора.ВыгрузитьЗначения());
				ТекущийЭлемент.ТолькоПросмотр = ИсходныйЭлемент.ТолькоПросмотр;
				ТекущийЭлемент.КоличествоКолонок = ИсходныйЭлемент.КоличествоКолонок;
				ТекущийЭлемент.ОдинаковаяШиринаКолонок = ИсходныйЭлемент.ОдинаковаяШиринаКолонок;
				ТекущийЭлемент.ОтображениеПодсказки = ИсходныйЭлемент.ОтображениеПодсказки;
				ТекущийЭлемент.Подсказка = ИсходныйЭлемент.Подсказка;
				ТекущийЭлемент.ЦветРамки = ИсходныйЭлемент.ЦветРамки;
				ТекущийЭлемент.ЦветТекста = ИсходныйЭлемент.ЦветТекста;
				ТекущийЭлемент.Доступность = ИсходныйЭлемент.Доступность;
				ТекущийЭлемент.ЦветТекстаЗаголовка = ИсходныйЭлемент.ЦветТекстаЗаголовка;
				ТекущийЭлемент.ЦветТекстаПодвала = ИсходныйЭлемент.ЦветТекстаПодвала;
				ТекущийЭлемент.ЦветФона = ИсходныйЭлемент.ЦветФона;
				ТекущийЭлемент.ЦветФонаЗаголовка = ИсходныйЭлемент.ЦветФонаЗаголовка;
				ТекущийЭлемент.Шрифт = ИсходныйЭлемент.Шрифт;
			Иначе
				ТекущийЭлемент.ПоложениеЗаголовка = ИсходныйЭлемент.ПоложениеЗаголовка;
				ТекущийЭлемент.Ширина = ИсходныйЭлемент.Ширина;
				
				ТекущийЭлемент.Видимость = ИсходныйЭлемент.Видимость;
				ТекущийЭлемент.ЦветФона = ИсходныйЭлемент.ЦветФона;
				ТекущийЭлемент.Высота = ИсходныйЭлемент.Высота;
				ТекущийЭлемент.Доступность = ИсходныйЭлемент.Доступность;
				ТекущийЭлемент.ТолькоПросмотр = ИсходныйЭлемент.ТолькоПросмотр;
				
				ТекущийЭлемент.ЦветТекстаЗаголовка = ИсходныйЭлемент.ЦветТекстаЗаголовка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущийЭлемент.ОтображатьЗаголовок = ИсходныйЭлемент.ОтображатьЗаголовок;
		ТекущийЭлемент.Отображение = ИсходныйЭлемент.Отображение;
		ТекущийЭлемент.Группировка = ИсходныйЭлемент.Группировка;
		ТекущийЭлемент.Ширина = ИсходныйЭлемент.Ширина;
		ТекущийЭлемент.Объединенная = ИсходныйЭлемент.Объединенная;
		ТекущийЭлемент.СквозноеВыравнивание = ИсходныйЭлемент.СквозноеВыравнивание;
		ТекущийЭлемент.ТолькоПросмотр = ИсходныйЭлемент.ТолькоПросмотр;
		ТекущийЭлемент.ВыравниваниеЭлементовИЗаголовков = ИсходныйЭлемент.ВыравниваниеЭлементовИЗаголовков;
		ТекущийЭлемент.Доступность = ИсходныйЭлемент.Доступность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭлемента(ТекущийЭлемент, ИсходныйЭлемент)
	
	ТекущийЭлемент.СписокВыбора.ЗагрузитьЗначения(ИсходныйЭлемент.СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСозаемщиков() //++
	
	Для Каждого Созаемщик Из Объект.ДанныеОЗаемщиках Цикл
		
		НомерСозаемщика = Созаемщик.НомерСтроки - 1;
		
		Если НомерСозаемщика = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма["ФИО" 							+ Строка(НомерСозаемщика)] = Созаемщик.ФИО;
		ЭтаФорма["Пол" 							+ Строка(НомерСозаемщика)] = Созаемщик.Пол;
		ЭтаФорма["ДатаРождения" 				+ Строка(НомерСозаемщика)] = Созаемщик.ДатаРождения;
		ЭтаФорма["ПолныхЛет" 					+ Строка(НомерСозаемщика)] = Созаемщик.КоличествоПолныхЛет;
		ЭтаФорма["ГражданствоРФ" 				+ Строка(НомерСозаемщика)] = Созаемщик.ГражданствоРФ;
		ЭтаФорма["РегистрацияРФ" 				+ Строка(НомерСозаемщика)] = Созаемщик.РегистрацияРФ;
		ЭтаФорма["СемейноеПоложение" 			+ Строка(НомерСозаемщика)] = Созаемщик.СемейноеПоложение;
		ЭтаФорма["НаличиеИждивенцев" 			+ Строка(НомерСозаемщика)] = Созаемщик.НаличиеИждивенцев;
		ЭтаФорма["КатегорияЗанятости" 			+ Строка(НомерСозаемщика)] = Созаемщик.КатегорияЗанятости;
		ЭтаФорма["СтажНаТекущемМестеРаботы" 	+ Строка(НомерСозаемщика)] = Созаемщик.СтажТекущий;
		ЭтаФорма["ОбщийСтаж" 					+ Строка(НомерСозаемщика)] = Созаемщик.СтажОбщий;
		ЭтаФорма["ФормаПодтвержденияДохода" 	+ Строка(НомерСозаемщика)] = Созаемщик.ФормаПодтвержденияДоходов;
		ЭтаФорма["ЕжемесячныйДоход" 			+ Строка(НомерСозаемщика)] = Созаемщик.РазмерЕжемесячногоДохода;
		ЭтаФорма["НаличиеЗПВБанке" 				+ Строка(НомерСозаемщика)] = Созаемщик.НаличиеЗПКартыБанка;
		ЭтаФорма["ФинансовыеОбязательства" 		+ Строка(НомерСозаемщика)] = Созаемщик.ФинансовыеОбязательства;
		ЭтаФорма["СуммаФинансовыхОбязательств" 	+ Строка(НомерСозаемщика)] = Созаемщик.ФинансовыеОбязательстваСумма;
		ЭтаФорма["Банк" 						+ Строка(НомерСозаемщика)] = Созаемщик.БанкЭмитент;
		ЭтаФорма["МатеринскийКапитал" 			+ Строка(НомерСозаемщика)] = Созаемщик.МатеринскийКапиталВПВ;
		
		Если ЗначениеЗаполнено(ЭтаФорма["ФинансовыеОбязательства" + Строка(НомерСозаемщика)]) Тогда
			ЭлементФО = Справочники.ПараметрыПримененияСтавок_Значения.НайтиПоНаименованию("Да", Истина, , ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФинансовыеОбязательства);
			Элементы["СуммаФинансовыхОбязательств" + Строка(НомерСозаемщика)].Видимость = ЭтаФорма["ФинансовыеОбязательства" + Строка(НомерСозаемщика)] = ЭлементФО;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭтаФорма["НаличиеЗПВБанке" + Строка(НомерСозаемщика)]) Тогда
			ЭлементБанк = Справочники.ПараметрыПримененияСтавок_Значения.НайтиПоНаименованию("Да", Истина, , ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ЗарплатныйКлиент);
			Элементы["Банк" + Строка(НомерСозаемщика)].Видимость = ЭтаФорма["НаличиеЗПВБанке" + Строка(НомерСозаемщика)] = ЭлементБанк;
		КонецЕсли;
		
		//ДоступностьДанных = ЗначениеЗаполнено(ЭтаФорма["ФИО" + Строка(НомерСозаемщика)]);
		//			
		//Элементы["ДатаРождения"	 + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
		//Элементы["ГражданствоРФ" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
		//Элементы["РегистрацияРФ" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
		//Элементы["Пол"			 + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти

#Область ОбщаяЗаемщикиСозаемщики

&НаСервере
Процедура ОчиститьПараметрыПервогоСозаемщика(НомерСозаемщика = 1) //++
	
	ПустаяСсылка = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
	
	ЭтаФорма["ФИО" 							+ Строка(НомерСозаемщика)] = Справочники.Клиенты.ПустаяСсылка();
	ЭтаФорма["Пол" 							+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["Пол" 							+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["ДатаРождения" 				+ Строка(НомерСозаемщика)] = Дата(1,1,1);
	ЭтаФорма["ПолныхЛет" 					+ Строка(НомерСозаемщика)] = 0;
	ЭтаФорма["ГражданствоРФ" 				+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["ГражданствоРФ" 				+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["РегистрацияРФ" 				+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["РегистрацияРФ" 				+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["СемейноеПоложение" 			+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["СемейноеПоложение" 			+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["НаличиеИждивенцев" 			+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["НаличиеИждивенцев" 			+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["КатегорияЗанятости" 			+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["КатегорияЗанятости" 			+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["СтажНаТекущемМестеРаботы" 	+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["СтажНаТекущемМестеРаботы" 	+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["ОбщийСтаж" 					+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["ОбщийСтаж" 					+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["ФормаПодтвержденияДохода" 	+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["ФормаПодтвержденияДохода" 	+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["ЕжемесячныйДоход" 			+ Строка(НомерСозаемщика)] = 0;
	ЭтаФорма["НаличиеЗПВБанке" 				+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["НаличиеЗПВБанке" 				+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["ФинансовыеОбязательства" 		+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["ФинансовыеОбязательства" 		+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
	ЭтаФорма["СуммаФинансовыхОбязательств" 	+ Строка(НомерСозаемщика)] = 0;
	ЭтаФорма["Банк" 						+ Строка(НомерСозаемщика)] = Справочники.Банки.ПустаяСсылка();
	ЭтаФорма["МатеринскийКапитал" 			+ Строка(НомерСозаемщика)] = ПустаяСсылка;
	Элементы["МатеринскийКапитал" 			+ Строка(НомерСозаемщика)].СписокВыбора.Очистить();
		
	Элементы["СуммаФинансовыхОбязательств" + Строка(НомерСозаемщика)].Видимость = Ложь;
	Элементы["Банк" + Строка(НомерСозаемщика)].Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВозраст() //++
	
	ТекущаяДата = НачалоДня(ТекущаяДата()); 

	ПолныхЛет = Год(ТекущаяДата) - Год(ДатаРождения);
	
	Если Месяц(ТекущаяДата) < Месяц(ДатаРождения) Тогда 
	    ПолныхЛет = ПолныхЛет - 1; 
	ИначеЕсли Месяц(ТекущаяДата) = Месяц(ДатаРождения) И День(ТекущаяДата) < День(ДатаРождения) Тогда 
	    ПолныхЛет = ПолныхЛет - 1; 
	КонецЕсли;
	
	Объект.ДанныеОЗаемщиках[0].КоличествоПолныхЛет = ПолныхЛет;
	
	ПересчетДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПоФИО(ТекущийЗаемщик) //++
	
	СписокПараметров = Новый Структура("Пол, ДатаРождения, ПолныхЛет, ГражданствоРФ, РегистрацияРФ");
	
	СписокПараметров.ДатаРождения = ТекущийЗаемщик.ДатаРождения;
	СписокПараметров.ПолныхЛет = ПолучитьЧислоПолныхЛет(ТекущийЗаемщик.ДатаРождения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыПримененияСтавок.Ссылка КАК Ссылка,
		|	ПараметрыПримененияСтавок.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ПараметрыПримененияСтавок.Наименование = ""Мужской""
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
		|	КОНЕЦ КАК Значение,
		|	1 КАК Таблица
		|ИЗ
		|	Справочник.ПараметрыПримененияСтавок_Значения КАК ПараметрыПримененияСтавок
		|ГДЕ
		|	ПараметрыПримененияСтавок.Владелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыПримененияСтавок.Пол)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПараметрыПримененияСтавок.Ссылка,
		|	ПараметрыПримененияСтавок.Наименование,
		|	ВЫБОР
		|		КОГДА ПараметрыПримененияСтавок.Наименование = ""Да""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	2
		|ИЗ
		|	Справочник.ПараметрыПримененияСтавок_Значения КАК ПараметрыПримененияСтавок
		|ГДЕ
		|	ПараметрыПримененияСтавок.Владелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыПримененияСтавок.ГражданствоРФ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПараметрыПримененияСтавок.Ссылка,
		|	ПараметрыПримененияСтавок.Наименование,
		|	ВЫБОР
		|		КОГДА ПараметрыПримененияСтавок.Наименование = ""Да""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	3
		|ИЗ
		|	Справочник.ПараметрыПримененияСтавок_Значения КАК ПараметрыПримененияСтавок
		|ГДЕ
		|	ПараметрыПримененияСтавок.Владелец = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ПараметрыПримененияСтавок.РегистрацияРФ)";
	
	Результат = Запрос.Выполнить();
	                                                                       
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выгрузка = Результат.Выгрузить();
		
		//Пол
		Значение = Выгрузка.НайтиСтроки(Новый Структура("Значение, Таблица", ТекущийЗаемщик.Пол, 1));
		Если Значение.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Значение[0].Ссылка) Тогда
				СписокПараметров.Пол = Значение[0].Ссылка;
			Иначе
				СписокПараметров.Пол = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		//Гражданство
		Значение = Выгрузка.НайтиСтроки(Новый Структура("Значение, Таблица", ПолучитьГражданство(ТекущийЗаемщик), 2));
		Если Значение.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Значение[0].Ссылка) Тогда
				СписокПараметров.ГражданствоРФ = Значение[0].Ссылка;
			Иначе
				СписокПараметров.ГражданствоРФ = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		//Регистрация
		Значение = Выгрузка.НайтиСтроки(Новый Структура("Значение, Таблица", ПолучитьРегистрацию(ТекущийЗаемщик), 3));
		
		Если Значение.Количество() > 0 Тогда
			Если ЗначениеЗаполнено(Значение[0].Ссылка) Тогда
				СписокПараметров.РегистрацияРФ = Значение[0].Ссылка;
			Иначе
				СписокПараметров.РегистрацияРФ = Справочники.ПараметрыПримененияСтавок_Значения.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Возврат СписокПараметров;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЧислоПолныхЛет(ДатаРождения) //++
	
	Если ДатаРождения = Дата(1,1,1) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата(); 
	
	ЧислоЛет = Год(ТекущаяДата) - Год(ДатаРождения); 
	
	Если Месяц(ТекущаяДата) < Месяц(ДатаРождения) Тогда 
		ЧислоЛет = ЧислоЛет - 1; 
	ИначеЕсли Месяц(ТекущаяДата) = Месяц(ДатаРождения) И День(ТекущаяДата) < День(ДатаРождения) Тогда 
		ЧислоЛет = ЧислоЛет - 1; 
	КонецЕсли; 
	
	Возврат ЧислоЛет;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГражданство(ТекущийЗаемщик) //++
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ГражданствоФизическихЛицСрезПоследних.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Гражданство
		|ИЗ
		|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &Клиент) КАК ГражданствоФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Клиент", ТекущийЗаемщик);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Гражданство;
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРегистрацию(ТекущийЗаемщик) //++
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КлиентыКонтактнаяИнформация.Страна = ""РОССИЯ""
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Регистрация
		|ИЗ
		|	Справочник.Клиенты.КонтактнаяИнформация КАК КлиентыКонтактнаяИнформация
		|ГДЕ
		|	КлиентыКонтактнаяИнформация.Ссылка = &Клиент
		|	И КлиентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КлиентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПоПропискеКлиента)";
	
	Запрос.УстановитьПараметр("Клиент", ТекущийЗаемщик);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Регистрация;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСозаемщика(Команда)
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтраницы = ПолучитьНомерСтраницы(ТекСтраница.Имя);
	
	//Если НомерСтраницы <= 1 Или ИмяСтраницы = "СтраницаРасчет" Тогда
	Если НомерСтраницы = 1 Тогда
		Элементы[ТекСтраница.Имя].Видимость = Ложь;
		Объект.ДанныеОЗаемщиках.Удалить(НомерСтраницы);
		
		Элементы.Страницы.ТекущаяСтраница = Элементы["СтраницаЗаемщик"];
		
		ОчиститьПараметрыПервогоСозаемщика();
	//КонецЕсли;
	Иначе
		Объект.ДанныеОЗаемщиках.Удалить(НомерСтраницы);
		Имя = ТекСтраница.Имя;
		УдалитьЭлементыИСтраницу(Имя, НомерСтраницы);
	КонецЕсли;
	
	ПереформироватьСтраницыСозаемщиков(НомерСтраницы);
	
	Элементы.УчитыватьДанныеСозаемщиков.Видимость = Объект.ДанныеОЗаемщиках.Количество() > 1;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаРасчеты

&НаКлиенте
Процедура СрокИпотеки2ПриИзменении(Элемент) //++
	
	Объект.СрокКредита2 = Число(СрокИпотеки2) * 12;
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИпотеки1ПриИзменении(Элемент) //++
	
	Объект.СрокКредита1 = Число(СрокИпотеки1) * 12;
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИпотеки3ПриИзменении(Элемент) //++
	
	Объект.СрокКредита3 = Число(СрокИпотеки3) * 12;
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеБанки(Команда) //++
	
	Модифицированность = Истина;
	
	Для Каждого СтрокаБанк Из Объект.СписокБанков Цикл
		СтрокаБанк.Выбор = Истина;
	КонецЦикла;
	Элементы.ГруппаЭтап3.Доступность = Истина;
	
	ОбновитьДоступныеПрограммы(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыборВсеБанки(Команда) //++
	
	Модифицированность = Истина;
	
	Для Каждого СтрокаБанк Из Объект.СписокБанков Цикл
		СтрокаБанк.Выбор = ?(СтрокаБанк.ДобавленВРучную, Истина, Ложь);
	КонецЦикла;
	Для Каждого СтрокаПрограмма Из Объект.ДоступныеПрограммы Цикл
		СтрокаПрограмма.Выбор = ?(СтрокаПрограмма.ДобавленВРучную, Истина, Ложь);
	КонецЦикла;
	Для Каждого СтрокаРасчет Из Объект.Расчеты Цикл
		СтрокаРасчет.Выбор = ?(СтрокаРасчет.ДобавленВРучную, Истина, Ложь);
	КонецЦикла;
	Элементы.ГруппаЭтап3.Доступность = Ложь;
	Элементы.Группа4.Доступность = Ложь;
	
	Объект.Расчеты.Очистить();
	Объект.ДоступныеПрограммы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьОсновным(Команда) //++
	
	ТекущиеДанные = Элементы.СписокБанков.ТекущиеДанные;
	ОсновнойБанк = ТекущиеДанные.Банк;
	
	Для Каждого СтрокаБанк Из Объект.СписокБанков Цикл
		
		Если СтрокаБанк.Банк = ОсновнойБанк Тогда
			СтрокаБанк.Выбор = Истина;
			СтрокаБанк.Основной = Истина;
		Иначе
			СтрокаБанк.Основной = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СортировкаРасчетов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокБанков(Команда) //++
	
	Если ПроверитьЗаполненностьДанныхЗаемщика() Тогда
		Возврат;
	КонецЕсли;
	
	ПересчетДокумента();
	
	Если Объект.СтопФакторы.Количество() > 0 Тогда
		ПечатьСтопФакторы(Неопределено);
	КонецЕсли;
	
	Элементы.СтраницаПечать.ТолькоПросмотр = Объект.Расчеты.Количество() = 0;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполненностьДанныхЗаемщика()
	
	ПустаяСсылка = ПредопределенноеЗначение("Справочник.ПараметрыПримененияСтавок_Значения.ПустаяСсылка");
	Если Объект.ДанныеОЗаемщиках[0].Пол = ПустаяСсылка Или Объект.ДанныеОЗаемщиках[0].ГражданствоРФ = ПустаяСсылка
		Или Объект.ДанныеОЗаемщиках[0].РегистрацияРФ = ПустаяСсылка Или Объект.ДанныеОЗаемщиках[0].СемейноеПоложение = ПустаяСсылка
		Или Объект.ДанныеОЗаемщиках[0].НаличиеИждивенцев = ПустаяСсылка Или Объект.ДанныеОЗаемщиках[0].КатегорияЗанятости = ПустаяСсылка 
		Или Объект.ДанныеОЗаемщиках[0].СтажТекущий = ПустаяСсылка Или Объект.ДанныеОЗаемщиках[0].СтажОбщий = ПустаяСсылка 
		Или Объект.ДанныеОЗаемщиках[0].ФормаПодтвержденияДоходов = ПустаяСсылка Или Объект.ДанныеОЗаемщиках[0].НаличиеЗПКартыБанка = ПустаяСсылка 
		Или Объект.ДанныеОЗаемщиках[0].ФинансовыеОбязательства = ПустаяСсылка Или Объект.ДанныеОЗаемщиках[0].МатеринскийКапиталВПВ = ПустаяСсылка Тогда
		
		Сообщить("По заемщику заполнены не все данные!");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьВсеДокументы(Команда) //++
	
	Модифицированность = Истина;
	
	Для Каждого СтрокаДокумент Из Объект.ПереченьДокументов Цикл
		СтрокаДокумент.Выбор = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыборВсехДокументов(Команда) //++
	
	Модифицированность = Истина;
	
	Для Каждого СтрокаДокумент Из Объект.ПереченьДокументов Цикл
		СтрокаДокумент.Выбор = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда) //++
	
	Объект.ПереченьДокументов.Очистить();
	ЗаполнитьСписокДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокКредита1Очистка(Элемент, СтандартнаяОбработка) //++
	
	СрокИпотеки1 = 0;
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокКредита1ПриИзменении(Элемент) //++
	
	СрокИпотеки1 = ?(Объект.СрокКредита1 % 60 = 0, Цел(Объект.СрокКредита1/12), 0);
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокКредита2Очистка(Элемент, СтандартнаяОбработка) //++
	
	СрокИпотеки2 = 0;
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокКредита2ПриИзменении(Элемент) //++
	
	СрокИпотеки2 = ?(Объект.СрокКредита2 % 60 = 0, Цел(Объект.СрокКредита2/12), 0);
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИпотеки4ПриИзменении(Элемент) //++
	
	СрокИпотеки3 = ?(Объект.СрокКредита3 % 60 = 0, Цел(Объект.СрокКредита3/12), 0);
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИпотеки4Очистка(Элемент, СтандартнаяОбработка) //++
	
	СрокИпотеки3 = 0;
	
	Если Объект.СписокБанков.Количество() > 0 Тогда
		ПересчетДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСтопФакторы(Команда) //++
	
	Если Объект.СтопФакторы.Количество() > 0 Тогда
	
		ТД = СформироватьТД();
		
		ПараметрыФормы = Новый Структура("ТД", ТД);
		
		ОткрытьФорму("Документ.РасчетИпотеки.Форма.ИнфоПоСтопФакторам", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТД() //++
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("ИнфоПоСтопФакторам");
	
	ТД = Новый ТабличныйДокумент;
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТД.Вывести(Область);
	
	СписокСтрокЗаемщик = ДокОбъект.СтопФакторы.НайтиСтроки(Новый Структура("Созаемщик, РезультатГруппы", 0, Ложь));
	
	ПредыдущаяГруппа = Неопределено;
	
	Если СписокСтрокЗаемщик.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("Заемщик");
		ТД.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ТД.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТД.Вывести(Область);
		
		ТекущийЦвет = Новый Цвет(255,255,255);
		
		Для Каждого СтрокаСписка Из СписокСтрокЗаемщик Цикл
			
			Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			Если ПредыдущаяГруппа = Неопределено Тогда
				ПредыдущаяГруппа = СтрокаСписка.Группа;
			КонецЕсли;
			
			Если СтрокаСписка.Группа <> ПредыдущаяГруппа Тогда
				ТекущийЦвет = ?(ТекущийЦвет = Новый Цвет(255,255,255), Новый Цвет(231,231,233), Новый Цвет(255,255,255));
			КонецЕсли;
			
			Область.Область("СтрокаТаблицы").ЦветФона = ТекущийЦвет;
			Область.Область("СтрокаТаблицыОтступ").ЦветФона = Новый Цвет(255,255,255);
			
			Область.Параметры.Банк = СтрокаСписка.Банк;
			Область.Параметры.Причина = СокрЛП(Строка(СтрокаСписка.СтопФактор)) + " = " + СокрЛП(СтрокаСписка.Значение);
			Область.Параметры.ФИО = Строка(Объект.ДанныеОЗаемщиках[СтрокаСписка.Созаемщик].ФИО);
			ТД.Вывести(Область);
			
			ПредыдущаяГруппа = СтрокаСписка.Группа;
		КонецЦикла;
	КонецЕсли;
	
	Если ДокОбъект.СтопФакторы.Количество() > 1 Тогда
		Для Каждого СтрокаСозаемщик Из ДокОбъект.СтопФакторы Цикл
			Если СтрокаСозаемщик.Созаемщик = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
			
			Если СтрокаСписка.Группа = 0 Или СтрокаСписка.Группа <> ПредыдущаяГруппа Тогда
				Область.Область("СтрокаТаблицы").ЦветФона = Новый Цвет(231,231,233);
			Иначе
				Область.Область("СтрокаТаблицы").ЦветФона = Новый Цвет(255,255,255);
			КонецЕсли;
			Область.Область("СтрокаТаблицыОтступ").ЦветФона = Новый Цвет(255,255,255);
			
			Область.Параметры.Банк = СтрокаСписка.Банк;
			Область.Параметры.Причина = СокрЛП(Строка(СтрокаСписка.СтопФактор)) + " = " + СокрЛП(СтрокаСписка.Значение);
			Область.Параметры.ФИО = Строка(Объект.ДанныеОЗаемщиках[СтрокаСозаемщик.Созаемщик].ФИО);
			ТД.Вывести(Область);
			
			ПредыдущаяГруппа = СтрокаСписка.Группа;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТД;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДоступныеПрограммы(Команда) //++
	
	Если ПроверитьЗаполненностьДанныхЗаемщика() Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойРасчетДокумента();
	
	Элементы.СтраницаПечать.ТолькоПросмотр = Объект.Расчеты.Количество() = 0;
	Элементы.ГруппаЭтап3.Доступность = Истина; //Доступные программы
	Элементы.Группа4.Доступность = Объект.ДоступныеПрограммы.Количество() > 0; //Расчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеПрограммы(Команда) //++
	
	Для Каждого Программа Из Объект.ДоступныеПрограммы Цикл
		Программа.Выбор = Истина;
	КонецЦикла;
	Элементы.Группа4.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыборСоВсехПрограмм(Команда) //++
	
	Для Каждого Программа Из Объект.ДоступныеПрограммы Цикл
		Программа.Выбор = ?(Программа.ДобавленВРучную, Истина, Ложь);
	КонецЦикла;
	Для Каждого Расчет Из Объект.Расчеты Цикл
		Расчет.Выбор = ?(Расчет.ДобавленВРучную, Истина, Ложь);
	КонецЦикла;
	Элементы.Группа4.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковБанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) //++
	
	//Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
	//	Элементы.СписокБанков.ТекущиеДанные.ДобавленВРучную = Истина;
	//	Элементы.СписокБанков.ТекущиеДанные.Выбор = Истина;
	//КонецЕсли;
	ТекСтрока = Элементы.СписокБанков.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока.ДобавленВРучную = Истина;
		ТекСтрока.Выбор = Истина;
		ТекСтрока.Банк = ВыбранноеЗначение;
		Элементы.ГруппаЭтап3.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковБанкОчистка(Элемент, СтандартнаяОбработка) //++
	
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаЭтап3.Доступность = Объект.ДоступныеПрограммы.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументов(НеЗанят = Ложь, МатКапитал = Истина, Младше27 = Истина, Форма2НДФЛ = Истина, 
								НетРегистрации = Истина, ФормаБанка = Истина, ФинОбязательства = Истина,
								ВоеннаяИпотека = Истина, Пенсионер = Истина, ВБраке = Истина, ВРазводе = Истина, Вдовец = Истина) //++
								
	Таблица = Объект.ПереченьДокументов;
	
	ДобавитьСтрокуВТЧСВыбором(Таблица, "Паспорт");
	ДобавитьСтрокуВТЧСВыбором(Таблица, "Второй документ: Свидетельство гос-го пенсионного страхования (СНИЛС)");
	ДобавитьСтрокуВТЧСВыбором(Таблица, "Копия трудовой книжки, заверенная на работе");
	ДобавитьСтрокуВТЧСВыбором(Таблица, "Анкета на ипотечный кредит");
	ДобавитьСтрокуВТЧ(Таблица, "Свидетельство о рождении");
	ДобавитьСтрокуВТЧ(Таблица, "Документы на активы (недвижимость, авто, ценные бумаги…)");
	ДобавитьСтрокуВТЧ(Таблица, "Документы об образовании");
	ДобавитьСтрокуВТЧ(Таблица, "Второй документ: загран паспорт");
	ДобавитьСтрокуВТЧ(Таблица, "Второй документ: ИНН");
	
	Если Не НеЗанят Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Копия трудового договора, заверенная на работе");
	КонецЕсли;
	
	Если Форма2НДФЛ Тогда
		ДобавитьСтрокуВТЧСВыбором(Таблица, "Справка 2-НДФЛ (за прошлый и текущий год)");
	КонецЕсли;
	
	Если ФормаБанка Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Справка о доходах по форме банка");
	КонецЕсли;

	Если ВБраке Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Свидетельство о браке");
		ДобавитьСтрокуВТЧ(Таблица, "Брачный договор");
	КонецЕсли;
	
	Если ВРазводе Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Свидетельство о разводе");
	КонецЕсли;
	
	Если Вдовец Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Свидетельство о смерти");
	КонецЕсли;
	
	Если НетРегистрации Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Временная регистрация");
	КонецЕсли;
	
	Если Младше27 Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Документы об отношении к воинской службе (для мужчин до 27 лет)");
	КонецЕсли;
	
	Если ФинОбязательства Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Документы о действующих кредитных обязательствах");
	КонецЕсли;
	
	Если Пенсионер Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Пенсионное удостоверение");
	КонецЕсли;
	
	Если МатКапитал Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Сертификат на материнский капитал");
		ДобавитьСтрокуВТЧ(Таблица, "Справка из ПФ РФ об остатке материнского капитала на счету клиента");
	КонецЕсли;
	
	Если ВоеннаяИпотека Тогда
		ДобавитьСтрокуВТЧ(Таблица, "Контракт о прохождении воинской службы");
	КонецЕсли;
	
	ДобавитьСтрокуВТЧ(Таблица, "Справка по форме гос.учереждения");
	ДобавитьСтрокуВТЧ(Таблица, "Налоговая декларация");
	
	Таблица.Сортировать("Выбор Убыв");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВТЧ(Таблица, Строка) //++
	
	НС = Таблица.Добавить();
	НС.Документ = Строка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВТЧСВыбором(Таблица, Строка)
	
	НС = Таблица.Добавить();
	НС.Документ = Строка;
	НС.Выбор = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ) //++
	
	Если Элементы.СписокБанков.ТекущиеДанные.Банк.Пустая() И Не ОтменаРедактирования Тогда
		//Отказ = Истина;
		Объект.СписокБанков.Удалить(Элементы.СписокБанков.ТекущиеДанные.НомерСтроки - 1);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПоТипу(ТипСтроки, ТипКолонки, ЗначенияПересечения) //++
	
	СтруктураВозврата = Новый Структура("ЗначениеКолонки, ЗначениеСтроки");
	
	Для Каждого Стр Из ЗначенияПересечения Цикл
		Если Стр.Владелец = ТипСтроки Тогда	
			СтруктураВозврата.Вставить("ЗначениеСтроки", Стр.Ссылка);
		ИначеЕсли Стр.Владелец = ТипКолонки Тогда
			СтруктураВозврата.Вставить("ЗначениеКолонки", Стр.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСхемУсловийСтавки(СписокБанков, СписокПрограмм) //++
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИпотечныеСтавкиСрезПоследних.Период КАК Период,
		|	ИпотечныеСтавкиСрезПоследних.Банк КАК Банк,
		|	ИпотечныеСтавкиСрезПоследних.Группа КАК Группа,
		|	ИпотечныеСтавкиСрезПоследних.Расположение КАК Расположение,
		|	ИпотечныеСтавкиСрезПоследних.СхемаУсловийСтавок КАК СхемаУсловийСтавок,
		|	ИпотечныеСтавкиСрезПоследних.Параметр КАК Параметр,
		|	ИпотечныеСтавкиСрезПоследних.Ставка КАК Ставка,
		|	ИпотечныеСтавкиСрезПоследних.Активен КАК Активен,
		|	ИпотечныеСтавкиСрезПоследних.Тип КАК Тип,
		|	ИпотечныеСтавкиСрезПоследних.ПрограммаКредитования КАК ПрограммаКредитования
		|ИЗ
		|	РегистрСведений.ИпотечныеСтавки.СрезПоследних(
		|			&Период,
		|			Банк В (&СписокБанков)
		|				И (&Период МЕЖДУ ПрограммаКредитования.НачалоДействия И ПрограммаКредитования.ОкончаниеДействия)
		|				И НЕ СхемаУсловийСтавок.ПометкаУдаления) КАК ИпотечныеСтавкиСрезПоследних
		|ГДЕ
		|	ИпотечныеСтавкиСрезПоследних.Активен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Банк,
		|	ПрограммаКредитования,
		|	СхемаУсловийСтавок,
		|	Параметр,
		|	Ставка";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("СписокБанков", СписокБанков.ВыгрузитьКолонку("Банк"));
	
	Если СписокПрограмм <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ИпотечныеСтавкиСрезПоследних.ПрограммаКредитования В(&Программа)"; 
		Запрос.УстановитьПараметр("Программа", СписокПрограмм);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выгрузка = Результат.Выгрузить();
		Возврат Выгрузка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаАккредитованныеБанки(Итоги) //++
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыСтроительства.Ссылка КАК ОС
		|ПОМЕСТИТЬ ВТ_ОС_По_Проектам
		|ИЗ
		|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|ГДЕ
		|	ОбъектыСтроительства.Проект В(&Проект)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(СтопФакторыБанковСрезПоследних.УсловиеКредитования, НЕОПРЕДЕЛЕНО) КАК СтопФактор,
		|	ЕСТЬNULL(СтопФакторыБанковСрезПоследних.Значение, НЕОПРЕДЕЛЕНО) КАК Значение,
		|	АккредитацияОбъектовСтроительстваВБанкахСрезПоследних.Банк КАК Банк,
		|	ЕСТЬNULL(СтопФакторыБанковСрезПоследних.Группа, НЕОПРЕДЕЛЕНО) КАК Группа,
		|	ВТ_ОС_По_Проектам.ОС.Проект КАК Проект,
		|	ВЫБОР
		|		КОГДА СтопФакторыБанковСрезПоследних.Значение.Владелец = Значение(ПланВидовХарактеристик.ПараметрыПримененияСтавок.Пол)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Сортировка
		|ИЗ
		|	РегистрСведений.АккредитацияОбъектовСтроительстваВБанках.СрезПоследних(
		|			&Дата,
		|			ОбъектСтроительства.Фаза = &Фаза
		|				И ВЫБОР
		|					КОГДА &Корпус = ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
		|						ТОГДА ОбъектСтроительства В
		|								(ВЫБРАТЬ
		|									ВТ_ОС_По_Проектам.ОС КАК ОС
		|								ИЗ
		|									ВТ_ОС_По_Проектам КАК ВТ_ОС_По_Проектам)
		|					ИНАЧЕ ОбъектСтроительства = &Корпус
		|				КОНЕЦ) КАК АккредитацияОбъектовСтроительстваВБанкахСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтопФакторыБанков.СрезПоследних(&Дата, ) КАК СтопФакторыБанковСрезПоследних
		|		ПО АккредитацияОбъектовСтроительстваВБанкахСрезПоследних.Банк = СтопФакторыБанковСрезПоследних.ИпотечныйБанк
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОС_По_Проектам КАК ВТ_ОС_По_Проектам
		|		ПО АккредитацияОбъектовСтроительстваВБанкахСрезПоследних.ОбъектСтроительства = ВТ_ОС_По_Проектам.ОС
		|ГДЕ
		|	ЕСТЬNULL(СтопФакторыБанковСрезПоследних.Активен, ИСТИНА)
		|	И АккредитацияОбъектовСтроительстваВБанкахСрезПоследних.Аккредитация
		|	И Истина //КАК ДопУсловие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сортировка";
	
	Если Итоги Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Истина //КАК ДопУсловие", "");
		
		ТекстЗапроса = ТекстЗапроса + " 
										|ИТОГИ ПО
										|	Банк, 
										|	Группа";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Истина //КАК ДопУсловие", " И НЕ АккредитацияОбъектовСтроительстваВБанкахСрезПоследних.Банк В (&СписокИмеющихсяБанков)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПересчетДокумента()
	
	ЕстьРасчет = Объект.ДоступныеПрограммы.Количество() > 0;
	
	Если Объект.СрокКредита1 = 0 И Объект.СрокКредита2 = 0 И Объект.СрокКредита3 = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПересчетДокументаНаСервере();
	
	Если ЕстьРасчет Тогда
		ОсновнойРасчетДокумента();
		//Записать();
	КонецЕсли;
	Модифицированность = Истина;
	
	Элементы.ГруппаПравая.Видимость = Объект.Расчеты.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ОсновнойРасчетДокумента(СписокОграничивающихПрограмм = Неопределено, СписокОграничивающихБанков = Неопределено, ПолныйРасчет = Истина) //++
	
	Если ПолныйРасчет Тогда
		//Добавленные вручную банки
		ДобавленныеВРучнуюБанки = Объект.СписокБанков.Выгрузить(Новый Структура("ДобавленВручную", Истина)).ВыгрузитьКолонку("Банк");
	
		//Добавленные вручную расчеты
		РасчетыДобавленныеВручную = Объект.Расчеты.Выгрузить();
		РасчетыДобавленныеВручную.Очистить();
		
		Для Каждого Расчет Из Объект.Расчеты Цикл
			Если ДобавленныеВРучнуюБанки.Найти(Расчет.Банк) <> Неопределено И Расчет.ДобавленВручную Тогда
				НоваяСтрока = РасчетыДобавленныеВручную.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Расчет);
			КонецЕсли;
		КонецЦикла;
		
		Объект.Расчеты.Очистить();
	
		//Добавленные вручную программы
		ПрограммыДобавленныеВручную = Объект.ДоступныеПрограммы.Выгрузить();
		ПрограммыДобавленныеВручную.Очистить();
		
		Для Каждого Программа Из Объект.ДоступныеПрограммы Цикл
			Если ДобавленныеВРучнуюБанки.Найти(Программа.Банк) <> Неопределено И Программа.ДобавленВручную Тогда
				НоваяСтрока = ПрограммыДобавленныеВручную.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Программа);
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДоступныеПрограммы.Очистить();
	КонецЕсли;
	
	//Список выбранных банков для расчета
	
	Если СписокОграничивающихБанков = Неопределено Тогда
		СписокБанков = Объект.СписокБанков.Выгрузить(Новый Структура("Выбор", Истина), "Банк");
	Иначе
		СписокБанков = Новый ТаблицаЗначений;
		СписокБанков.Колонки.Добавить("Банк");
		Для Каждого СтрокаОгрБанк Из СписокОграничивающихБанков Цикл
			НС = СписокБанков.Добавить();
			НС.Банк = СтрокаОгрБанк;
		КонецЦикла;
	КонецЕсли;
	
	//Расчетные шаги
	РасчетныеШагиБанков = ПолучитьСписокРасчетныхШагов(СписокБанков);
	
	ПараметрыСхем = ПолучитьПараметрыСхемУсловийСтавки(СписокБанков, СписокОграничивающихПрограмм);
	
	//Массив сроков
	Сроки = Новый Массив;
	Если Объект.СрокКредита1 <> 0 Тогда
		Сроки.Добавить(Объект.СрокКредита1);
	КонецЕсли;
	Если Объект.СрокКредита2 <> 0 Тогда
		Сроки.Добавить(Объект.СрокКредита2);
	КонецЕсли;
	Если Объект.СрокКредита3 <> 0 Тогда
		Сроки.Добавить(Объект.СрокКредита3);
	КонецЕсли;
	
	//ДопУсловия кредитования
	СписокДопУсловий = ПолучитьСписокДопУсловий(Объект.ЖК, Объект.ТипОбъекта, СписокБанков);
	
	//Основной
	Для Каждого ВыбранныйБанк Из СписокБанков Цикл
		
		ПроцентнаяСтавка = ОпределитьПроцентнуюСтавку(ПараметрыСхем, ВыбранныйБанк.Банк, Сроки, Объект.ПервоначальныйВзносПроцент, Объект.ТипОбъекта, 
														Объект.Площадь, Объект.ДанныеОЗаемщиках[0], Объект.СуммаКредитаРуб);
		
		Для Каждого Срок Из ПроцентнаяСтавка Цикл
			
			Если Срок.Значение = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Определить номер корпуса - текст
			Для Каждого Ст Из Элементы.Корпус.СписокВыбора Цикл
				Если Ст.Значение = Объект.Корпус Тогда
					НомерКорпуса = Ст.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ПроходитОтбор = СхемаПроходитОтбор(Срок.СхемаУсловийСтавок, НомерКорпуса, Объект.Фаза, Объект.Площадь, Объект.ТипОбъекта, Объект.ЖК, 
												Объект.ДанныеОЗаемщиках.Выгрузить());
			Если НЕ ПроходитОтбор Тогда
				Продолжить;	
			КонецЕсли;
			
			НовРасчет = Объект.Расчеты.Добавить();
			СтрШага = РасчетныеШагиБанков.Найти(ВыбранныйБанк.Банк);
			ВыбранныйВидКредитаШагРасчетный = ?(СтрШага = Неопределено, 12, СтрШага.ШагРасчетный);
			
			НовРасчет.Банк = ВыбранныйБанк.Банк;
			НовРасчет.СрокКредита = Срок.Длительность;
			НовРасчет.Сортировка = ?(НовРасчет.Банк = ОсновнойБанк, 0, 1);	
			НовРасчет.Программа = Срок.Программа;
			НовРасчет.СхемаУсловийСтавок = Срок.СхемаУсловийСтавок;
			НовРасчет.ПроцентнаяСтавка = Срок.Значение;	
			
			КПКД = ВернутьКПКД(ВыбранныйБанк.Банк);
			Если КПКД = Неопределено ИЛИ КПКД = 0  Тогда
				Сообщить("Необходимо внести коэффициент платеж/доход для банка """ + ВыбранныйБанк.Банк + """");
				Возврат;
			КонецЕсли;
			
			ПС = НовРасчет.ПроцентнаяСтавка / 100 / 12; // ежемесячная процентная ставка
			Икс = POW(1 + ПС, -(НовРасчет.СрокКредита - ВыбранныйВидКредитаШагРасчетный));
			
			НовРасчет.СуммаПлатежа = ?(НовРасчет.ПроцентнаяСтавка = 0, 0, Объект.СуммаКредитаРуб * ПС / (1 - Икс));
			НовРасчет.МинимальныйДоход = НовРасчет.СуммаПлатежа / КПКД;
			
			Отбор = Новый Структура("Банк, РезультатГруппы", НовРасчет.Банк, Ложь);
			ИсключаемыеСозаемщики = Объект.СтопФакторы.Выгрузить(Отбор);
			
			НовРасчет.СовокупныйДоход = 0;
			
			Для Каждого Созаемщик Из Объект.ДанныеОЗаемщиках Цикл
				
				СозаемщикВИсключении = ИсключаемыеСозаемщики.НайтиСтроки(Новый Структура("Созаемщик", Созаемщик.ФИО));
				
				Если СозаемщикВИсключении.Количество() = 0 Тогда
					НовРасчет.СовокупныйДоход = НовРасчет.СовокупныйДоход + Созаемщик.РазмерЕжемесячногоДохода - Созаемщик.ФинансовыеОбязательстваСумма;
				КонецЕсли;
			КонецЦикла;
			
			Если НовРасчет.МинимальныйДоход > НовРасчет.СовокупныйДоход Тогда
				НовРасчет.Выбор = Ложь; 
				НовРасчет.Описание = "Совокупный доход заемщиков (" + НовРасчет.СовокупныйДоход + ") меньше минимально необходимого (" + НовРасчет.МинимальныйДоход+")";
			Иначе
				НовРасчет.Выбор = Истина;
			КонецЕсли;
			
			Если Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Банк, Программа, Выбор", ВыбранныйБанк.Банк, Срок.Программа, Истина)).Количество() = 0 Тогда
				НоваяПрограмма = Объект.ДоступныеПрограммы.Добавить();
				НоваяПрограмма.Банк = ВыбранныйБанк.Банк;
				НоваяПрограмма.Программа = Срок.Программа;
				НоваяПрограмма.Выбор = Истина;
			КонецЕсли;
			
			Если СписокДопУсловий <> Неопределено Тогда
				
				СписокУсловий = СписокДопУсловий.НайтиСтроки(Новый Структура("Банк, Программа", ВыбранныйБанк.Банк, Срок.Программа));
				
				Если СписокУсловий.Количество() > 0 Тогда
					НовРасчет.ДопРасходы = СписокУсловий[0].ДополнительныеРасходы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПолныйРасчет Тогда
		Если ПрограммыДобавленныеВручную.Количество() > 0 Тогда
			Для Каждого Программа Из ПрограммыДобавленныеВручную Цикл
				ЗаполнитьЗначенияСвойств(Объект.ДоступныеПрограммы.Добавить(), Программа);
			КонецЦикла;
		КонецЕсли;
		
		Если РасчетыДобавленныеВручную.Количество() > 0 Тогда
			Для Каждого Расчет Из РасчетыДобавленныеВручную Цикл
				ЗаполнитьЗначенияСвойств(Объект.Расчеты.Добавить(), Расчет);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СортировкаПрограмм();
	
	СортировкаРасчетов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокРасчетныхШагов(СписокБанков)
	
	Запрос = Новый Запрос;
	Запрос.Текст  = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	БанкиВидыКредита.Ссылка КАК Банк,
				|	БанкиВидыКредита.ШагРасчетный КАК ШагРасчетный
				|ИЗ
				|	Справочник.Банки.ВидыКредита КАК БанкиВидыКредита
				|ГДЕ
				|	БанкиВидыКредита.ВидКредита = ЗНАЧЕНИЕ(Справочник.ВидыКредитов.ИпотечныйКредит)
				|	И БанкиВидыКредита.Ссылка В(&СписокБанков)";
	
	Если ТипЗнч(СписокБанков) = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("СписокБанков", СписокБанков);
	Иначе
		Запрос.УстановитьПараметр("СписокБанков", СписокБанков.ВыгрузитьКолонку("Банк"));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		РасчетныеШагиБанков = Новый ТаблицаЗначений;
		РасчетныеШагиБанков.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.Банки"));
		РасчетныеШагиБанков.Колонки.Добавить("ШагРасчетный", Новый ОписаниеТипов("Число"));
	Иначе
		РасчетныеШагиБанков = Результат.Выгрузить();
	КонецЕсли;
	
	Возврат РасчетныеШагиБанков;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокДопУсловий(ЖК, ТипОбъекта, СписокБанков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияИпотечногоКредитованияСрезПоследних.Банк КАК Банк,
		|	УсловияИпотечногоКредитованияСрезПоследних.ДополнительныеРасходы КАК ДополнительныеРасходы,
		|	УсловияИпотечногоКредитованияСрезПоследних.Программа КАК Программа
		|ИЗ
		|	РегистрСведений.УсловияИпотечногоКредитования.СрезПоследних(
		|			&Период,
		|			Банк В (&СписокБанков)
		|				И ВидКредита = ЗНАЧЕНИЕ(Справочник.ВидыКредитов.ИпотечныйКредит)
		|				И Проект = &ЖК
		|				И ТипОбъекта = &ТипОбъекта) КАК УсловияИпотечногоКредитованияСрезПоследних";
	
	Запрос.УстановитьПараметр("ЖК", ПолучитьГруппуПроекта(ЖК));
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	Если ТипЗнч(СписокБанков) = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("СписокБанков", СписокБанков);
	Иначе
		Запрос.УстановитьПараметр("СписокБанков", СписокБанков.ВыгрузитьКолонку("Банк"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКПКД(Банк)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КоэффициентыПлатежДоходСрезПоследних.Коэффициент
		|ИЗ
		|	РегистрСведений.КоэффициентыПлатежДоход.СрезПоследних(&Дата, Банк = &Банк) КАК КоэффициентыПлатежДоходСрезПоследних";
	
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Коэффициент;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаПроходитОтбор(Схема, НомерКорпуса, Фаза, Площадь, ТипОбъекта, Проект, ТаблицаДанныеОЗаемщиках)
	
	Рез = Истина;
	МассивПВХ = Новый Массив;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Проект.Ссылка КАК Проект,
		|	Фазы.Ссылка КАК Фаза,
		|	&Корпус КАК Корпус,
		|	&Площадь КАК Площадь,
		|	&ТипОбъекта КАК ТипОбъекта
		|   //ДополнительныеПараметры
		|ИЗ
		|	Справочник.Фазы КАК Фазы
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проект
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Проект.Ссылка = &Проект И Фазы.Ссылка = &Фаза";
	
	//ДополнитьЗапросДаннымиПВХ(ТекстЗапроса, МассивПВХ);
	ТекстДополнения = "";
	//ТаблицаДанныеОЗаемщиках = Объект.ДанныеОЗаемщиках.Выгрузить();
		
	ДанныеОЗаемщике = ТаблицаДанныеОЗаемщиках[0];
	ОписаниеТипаПВХ = Новый ОписаниеТипов("СправочникСсылка.ПараметрыПримененияСтавок_Значения");
	ТипЧисло = Тип("Число");
	
	Для Каждого Стр Из ТаблицаДанныеОЗаемщиках.Колонки Цикл
		Если ТипЗнч(ДанныеОЗаемщике[Стр.Имя]) = ТипЧисло Тогда
			Если Стр.Имя = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			ТекстДополнения = ТекстДополнения + Символы.ПС + ", &" + Стр.Имя + " КАК " + Стр.Имя;
			МассивПВХ.Добавить(Стр.Имя);
		ИначеЕсли Стр.ТипЗначения.ПривестиЗначение() = ОписаниеТипаПВХ.ПривестиЗначение() Тогда
			УникальныйИдентификатор = СтрЗаменить(Строка(ДанныеОЗаемщике[Стр.Имя].Владелец.УникальныйИдентификатор()),"-","_");
			Поле = "Поле"+УникальныйИдентификатор;            
			ТекстДополнения = ТекстДополнения + Символы.ПС + ", &" + Стр.Имя + " КАК " + Поле;
			МассивПВХ.Добавить(Стр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	//
	Если Проект.ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток И Фаза = Справочники.Фазы.ПустаяСсылка() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Фазы.Ссылка = &Фаза", "");
	КонецЕсли;
	//
	
	//+Площадь
	Поле = "Поле"+ СтрЗаменить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Площадь.УникальныйИдентификатор(),"-","_");
	ТекстДополнения = ТекстДополнения + Символы.ПС + ", &Площадь" + " КАК " + Поле;

	//+ТипОбъекта
	Поле = "Поле"+ СтрЗаменить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ТипОбъекта.УникальныйИдентификатор(),"-","_");
	ТекстДополнения = ТекстДополнения + Символы.ПС + ", &ТипОбъекта" + " КАК " + Поле;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПараметры", ТекстДополнения);
	//
	
	СхемаКомпоновки 							= Справочники.СхемыУсловийСтавки.СоздатьСхемуКомпоновкиОтборы();
	СхемаКомпоновки.НаборыДанных.Набор1.Запрос  = ТекстЗапроса;
	СхемаКомпоновки.Параметры.Очистить();

	ИсточникДоступныхНастроекКомпоновкиДанных	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикМакетаКомпоновкиДанных			= Новый КомпоновщикМакетаКомпоновкиДанных;	
	КомпоновщикНастроекКомпоновкиДанных 		= Новый КомпоновщикНастроекКомпоновкиДанных;
	
	НоваяГруппировка = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Использование	= Истина;
	НоваяГруппировка.Имя			= "Проект";	
	
	ВыбранноеПолеГруппировки = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеГруппировки.Поле 			= Новый ПолеКомпоновкиДанных("Проект");
	ВыбранноеПолеГруппировки.Использование 	= Истина;
	
	Параметр = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Добавить();	
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Проект");
	Параметр.Значение = Проект;
	Параметр.Использование = Истина;
	
	Если Проект.ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток И Фаза = Справочники.Фазы.ПустаяСсылка() Тогда
	Иначе
		Параметр = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Добавить();	
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Фаза");
		Параметр.Значение = Фаза;
		Параметр.Использование = Истина;  
	КонецЕсли;
	
	Параметр = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Добавить();	
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Корпус");
	Параметр.Значение = НомерКорпуса;
	Параметр.Использование = Истина;  
	
	Параметр = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Добавить();	
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Площадь");
	Параметр.Значение = Площадь;
	Параметр.Использование = Истина; 
	
	Параметр = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Добавить();	
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ТипОбъекта");
	Параметр.Значение = ТипОбъекта;
	Параметр.Использование = Истина; 
	
	//ПВХ
	Для Каждого Стр Из МассивПВХ Цикл	
		Параметр = КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы.Добавить();	
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных(Стр);
		//Параметр.Значение = ДанныеОЗаемщиках[0][Стр]; 
		Параметр.Значение = ТаблицаДанныеОЗаемщиках[0][Стр];
		Параметр.Использование = Истина;  
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Очистить();
	Если ЗначениеЗаполнено(Схема) Тогда 
		СкопироватьЭлементыОтбораРекурсивно(КомпоновщикНастроекКомпоновкиДанных.Настройки,  Схема.ХранилищеНастроекКомпоновкиДанныхОтборы.Получить());
	КонецЕсли;
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновки
				,КомпоновщикНастроекКомпоновкиДанных.Настройки, , ,	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
	ПроцессорВыводаВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаВКоллекциюЗначений.УстановитьОбъект(ТаблицаРезультат); 	
	ПроцессорВыводаВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	Возврат ТаблицаРезультат.Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СкопироватьЭлементыОтбораРекурсивно(Приемник, Источник) Экспорт
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Приемник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыПриемник = Приемник;
	Иначе
		ЭлементыПриемник = Приемник.Отбор;
	КонецЕсли;

	Если ТипЗнч(Источник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыИсточник = Источник;
	Иначе
		ЭлементыИсточник = Источник.Отбор;
	КонецЕсли;
	
	ЭлементыПриемник.Элементы.Очистить();
	Для Каждого ЭлементОтбора Из ЭлементыИсточник.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			НовыйЭлемент = ЭлементыПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));	
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);

			СкопироватьЭлементыОтбораРекурсивно(НовыйЭлемент, ЭлементОтбора);
		Иначе
			
			ПредставлениеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если Найти(ПредставлениеОтбора, "ПрограммируемыеУсловия") > 0 Тогда
				Продолжить;			
			КонецЕсли; 
				
			НовыйЭлемент = ЭлементыПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьПроцентнуюСтавку(ПараметрыСхем, Банк, Сроки, ПервоначальныйВзносПроцент, ТипОбъекта, Площадь, Заемщик, СуммаКредита)
	
 	Отбор = Новый Структура("Банк", Банк);
	
	//ПараметрыБанка = ПараметрыСхем.НайтиСтроки(Отбор);
	//
	//Таблица = Новый ТаблицаЗначений;
	//Таблица.Колонки.Добавить("Расположение");
	//Таблица.Колонки.Добавить("Банк");
	//Таблица.Колонки.Добавить("Группа");
	//Таблица.Колонки.Добавить("Значение");
	//Таблица.Колонки.Добавить("Ставка");
	//Таблица.Колонки.Добавить("СхемаУсловийСтавок");
	//Таблица.Колонки.Добавить("ПрограммаКредитования");
	//
	//СписокСхем = Новый Массив;
	//
	//Для Каждого Стр Из ПараметрыБанка Цикл
	//	ДобавитьЗначенияВТаблицу(Стр, Таблица);
	//	
	//	Если СписокСхем.Найти(Стр.СхемаУсловийСтавок) = Неопределено Тогда
	//		СписокСхем.Добавить(Стр.СхемаУсловийСтавок);
	//	КонецЕсли;
	//КонецЦикла;
	
	Таблица = ПараметрыСхем.Скопировать(Отбор, "Расположение, Банк, Группа, Ставка, СхемаУсловийСтавок, ПрограммаКредитования, Параметр");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("Использовать", Новый ОписаниеТипов("Булево"));
	
	Ставки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		ЗначенияУсловий = Справочники.СхемыУсловийСтавки.ПолучитьЗначенияУсловий(СтрокаТаблицы.СхемаУсловийСтавок, СтрокаТаблицы.Расположение, Неопределено);
		Если ЗначенияУсловий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияСтрокКолонок = ПолучитьЗначениеПоТипу(СтрокаТаблицы.СхемаУсловийСтавок.Строки, СтрокаТаблицы.СхемаУсловийСтавок.Колонки, ЗначенияУсловий.Значение.ЗначенияПересечения);
		СтрокаТаблицы.Значение = Новый Структура("ЗначениеСтроки, ЗначениеКолонки", ЗначенияСтрокКолонок.ЗначениеСтроки, ЗначенияСтрокКолонок.ЗначениеКолонки);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Параметр) Тогда
			СтрокаТаблицы.Значение.Вставить("Значение3", СтрокаТаблицы.Параметр);
		КонецЕсли;
		
		Для Каждого Срок Из Сроки Цикл
			Для Каждого Условие Из СтрокаТаблицы.Значение Цикл
				
				Если Условие.Значение = Неопределено Тогда
					УсловиеВыполняется = Истина;
				ИначеЕсли Условие.Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ПервоначальныйВзнос Тогда
					УсловиеВыполняется = ПервоначальныйВзносПроцент >= Условие.Значение.Минимум И ПервоначальныйВзносПроцент <Условие.Значение.Максимум;
				ИначеЕсли Условие.Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СрокКредита Тогда
					УсловиеВыполняется = (Срок / 12) >= Условие.Значение.Минимум И (Срок / 12) <= Условие.Значение.Максимум;	
				ИначеЕсли Условие.Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ТипОбъекта Тогда
					УсловиеВыполняется = ТипОбъекта = Условие.Значение;	
				ИначеЕсли Условие.Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Площадь Тогда
					УсловиеВыполняется = Площадь = Условие.Значение;	
				Иначе
					//УсловиеВыполняется = СтопФакторПрисутствуетУЗаемщика(Условие.Значение, 0, СтрокаТаблицы);
					УсловиеВыполняется = ПроверитьСтопФакторы(Условие.Значение, Заемщик, СуммаКредита, Срок, Срок, Срок, СтрокаТаблицы.Банк);
				КонецЕсли;
				
				Если НЕ УсловиеВыполняется Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УсловиеВыполняется Тогда
				Ставки.Добавить(Новый Структура("Программа, СхемаУсловийСтавок, Длительность, Значение", СтрокаТаблицы.СхемаУсловийСтавок.Владелец, СтрокаТаблицы.СхемаУсловийСтавок, Срок, СтрокаТаблицы.Ставка));	
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	//СписокСхем = Таблица.Скопировать(, "СхемаУсловийСтавок");
	//СписокСхем.Свернуть("СхемаУсловийСтавок");
	
	//Ставки = Новый Массив;
	//
	//Для Каждого Схема Из СписокСхем Цикл
	//	Для Каждого Срок Из Сроки Цикл
	//		Ставка = РазмерСтавки(Схема, Срок, Таблица);
	//		Ставки.Добавить(Новый Структура("Программа, СхемаУсловийСтавок,Длительность,Значение", Схема.Владелец, Схема, Срок, Ставка));	
	//	КонецЦикла;
	//КонецЦикла;        
	
	Возврат Ставки;
	
КонецФункции

&НаСервере
Процедура ПересчетДокументаНаСервере() //++
	
	СписокБанковДобавленныхВручную = Объект.СписокБанков.Выгрузить(Новый Структура("ДобавленВРучную", Истина));
	
	ВыбранныеБанки = Объект.СписокБанков.Выгрузить(Новый Структура("Выбор",    Истина));
	ОсновныеБанки  = Объект.СписокБанков.Выгрузить(Новый Структура("Основной", Истина));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАккредитованныеБанки(Истина);
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Проект", Объект.ЖК);
	Запрос.УстановитьПараметр("Фаза", Объект.Фаза);
	Запрос.УстановитьПараметр("Корпус", Объект.Корпус);
	
	Результат = Запрос.Выполнить();
	
	Объект.СтопФакторы.Очистить();
	Объект.СписокБанков.Очистить();
	
	Если Не Результат.Пустой() Тогда
		
	    ВыборкаБанк = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СписокБанков = Новый ТаблицаЗначений;
		СписокБанков.Колонки.Добавить("Банк");
		
		Пока ВыборкаБанк.Следующий() Цикл
			
			ВыборкаГруппа = ВыборкаБанк.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			БанкПодошел = Истина;
			
			Пока ВыборкаГруппа.Следующий() Цикл
				
				Выборка = ВыборкаГруппа.Выбрать();
				
				Если ВыборкаГруппа.Группа = 0 Тогда 
					
					Пока Выборка.Следующий() Цикл 
						
						Если Выборка.Значение = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого Заемщик Из Объект.ДанныеОЗаемщиках Цикл
						
							Если Заемщик.НомерСтроки = 1 Или Объект.УчитыватьДанныеСозаемщиков Тогда
								
								РезультатПроверки = ПроверитьСтопФакторы(Выборка.Значение, Заемщик, Объект.СуммаКредитаРуб, Объект.СрокКредита1, Объект.СрокКредита2, Объект.СрокКредита3, Банк);
								
								Если РезультатПроверки Тогда
									
									НС = Объект.СтопФакторы.Добавить();
									НС.СтопФактор = Выборка.СтопФактор;
									НС.Значение = Выборка.Значение;
									НС.Созаемщик = Заемщик.НомерСтроки - 1;
									НС.Результат = Не РезультатПроверки;
									НС.Банк = ВыборкаБанк.Банк;
									НС.Группа = ВыборкаГруппа.Группа;
									НС.РезультатГруппы = Ложь;
									
									БанкПодошел = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				Иначе
					
					ТаблицаСтопФакторовГруппы = Новый ТаблицаЗначений;
					ТаблицаСтопФакторовГруппы.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.ПараметрыПримененияСтавок_Значения"));
					ТаблицаСтопФакторовГруппы.Колонки.Добавить("СтопФактор", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ПараметрыПримененияСтавок"));
					
					Пока Выборка.Следующий() Цикл
						НС = ТаблицаСтопФакторовГруппы.Добавить();
						ЗаполнитьЗначенияСвойств(НС, Выборка);
					КонецЦикла;
					
					Для Каждого Заемщик Из Объект.ДанныеОЗаемщиках Цикл 
						Если Заемщик.НомерСтроки = 1 Или Объект.УчитыватьДанныеСозаемщиков Тогда
							
							ПродолжаемПроверку = Истина;
							ПредыдущийСтопФактор = Неопределено;
							
							НомерСтроки = 0;
							
							Для Каждого СтрокаФактор Из ТаблицаСтопФакторовГруппы Цикл
								
								Если СтрокаФактор.СтопФактор = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Пол Тогда
									ПродолжаемПроверку = СтрокаФактор.Значение = Заемщик.Пол;
									
									ПредыдущийСтопФактор = СтрокаФактор;
									НомерСтроки = НомерСтроки + 1;
								Иначе
									Если ПродолжаемПроверку Тогда
										
										РезультатПроверки = ПроверитьСтопФакторы(СтрокаФактор.Значение, Заемщик, Объект.СуммаКредитаРуб, Объект.СрокКредита1, Объект.СрокКредита2, Объект.СрокКредита3, Банк);
										
										Если РезультатПроверки Тогда
											
											Если ПредыдущийСтопФактор <> Неопределено И НомерСтроки = 1 Тогда
												НС = Объект.СтопФакторы.Добавить();
												НС.СтопФактор = ПредыдущийСтопФактор.СтопФактор;
												НС.Значение = ПредыдущийСтопФактор.Значение;
												НС.Созаемщик = Заемщик.НомерСтроки - 1;
												НС.Результат = Не РезультатПроверки;
												НС.Банк = ВыборкаБанк.Банк;
												НС.Группа = ВыборкаГруппа.Группа;
												НС.РезультатГруппы = Ложь;
											КонецЕсли;
											
											НС = Объект.СтопФакторы.Добавить();
											НС.СтопФактор = СтрокаФактор.СтопФактор;
											НС.Значение = СтрокаФактор.Значение;
											НС.Созаемщик = Заемщик.НомерСтроки - 1;
											НС.Результат = Не РезультатПроверки;
											НС.Банк = ВыборкаБанк.Банк;
											НС.Группа = ВыборкаГруппа.Группа;
											НС.РезультатГруппы = Ложь;
											
											БанкПодошел = Ложь;
											
											НомерСтроки = НомерСтроки + 1;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
			Если БанкПодошел Тогда
				НовыйБанк = Объект.СписокБанков.Добавить();
				НовыйБанк.Банк = ВыборкаБанк.Банк;
				НовыйБанк.Выбор = Ложь;
				НовыйБанк.Основной = Ложь;
				НовыйБанк.ДобавленВРучную = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		//ДобавитьБанки добавленные вручную
		Для Каждого БанкДВ Из СписокБанковДобавленныхВручную Цикл
			
			СписокСтрок = Объект.СписокБанков.НайтиСтроки(Новый Структура("Банк", БанкДВ.Банк));
			
			Если СписокСтрок.Количество() > 0 Тогда
				Для Каждого СтрБанк Из СписокСтрок Цикл
					СтрБанк.ДобавленВРучную = Истина;
				КонецЦикла;
			Иначе
				НБ = Объект.СписокБанков.Добавить();
				НБ.Банк = БанкДВ.Банк;
				НБ.ДобавленВРучную = Истина;
			КонецЕсли;
		КонецЦикла;
		
		//Проставим основной банк
		Для Каждого СтрБанк Из ОсновныеБанки Цикл
			СписокСтрок = Объект.СписокБанков.НайтиСтроки(Новый Структура("Банк", СтрБанк.Банк));
			Для Каждого Ст Из СписокСтрок Цикл
				Ст.Основной = Истина;
			КонецЦикла;
		КонецЦикла;
		
		//Проставим выбранные ранее банки
		Для Каждого ВыбранныйБанк из ВыбранныеБанки Цикл
			СписокСтрок = Объект.СписокБанков.НайтиСтроки(Новый Структура("Банк", ВыбранныйБанк.Банк));
			Для Каждого Ст из СписокСтрок Цикл
				Ст.Выбор = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Объект.СтопФакторы.Сортировать("Созаемщик, Группа Возр");
	
	Если Объект.СтопФакторы.Количество() > 0 Тогда
		Элементы.СтопФакторыПечатьСтопФакторы.Заголовок = "Показать Стоп-факторы (" + Объект.СтопФакторы.Количество() + ")";
		Элементы.СтопФакторыПечатьСтопФакторы.Картинка = БиблиотекаКартинок.Информация;
	Иначе
		Элементы.СтопФакторыПечатьСтопФакторы.Заголовок = "Показать Стоп-факторы";
		Элементы.СтопФакторыПечатьСтопФакторы.Картинка = БиблиотекаКартинок.ИнформацияПоНедоступнымПолям;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСтопФакторы(Значение, Заемщик, СуммаКредита, СрокКредита1, СрокКредита2, СрокКредита3, Банк)
	
	Если Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Возраст Тогда
		Возврат Заемщик.КоличествоПолныхЛет > Значение.Минимум И Заемщик.КоличествоПолныхЛет <= Значение.Максимум;
	ИначеЕсли Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СуммаКредита Тогда
		Возврат СуммаКредита > Значение.Минимум И СуммаКредита <= Значение.Максимум;
	ИначеЕсли Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ВозрастНаМоментПогашенияКредита Тогда
		
		Возраст1 = Заемщик.КоличествоПолныхЛет + СрокКредита1 / 12;
		Возраст2 = Заемщик.КоличествоПолныхЛет + СрокКредита2 / 12;
		Возраст3 = Заемщик.КоличествоПолныхЛет + СрокКредита3 / 12;
		
		Если (Возраст1 > Значение.Минимум И Возраст1 <= Значение.Максимум)
			И (Возраст2 > Значение.Минимум И Возраст2 <= Значение.Максимум)
			И (Возраст3 > Значение.Минимум И Возраст3 <= Значение.Максимум) Тогда
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Значение.Владелец = ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ЗарплатныйКлиент Тогда
		Если Значение.Владелец.ЗначениеДа = Заемщик.НаличиеЗПКартыБанка И Заемщик.БанкЭмитент = Банк Тогда
			Возврат Значение = Значение.Владелец.ЗначениеДа;
		Иначе
			Возврат Значение = Значение.Владелец.ЗначениеНет;
		КонецЕсли;
	КонецЕсли;
	
	Если Заемщик.Свойство(Значение.Владелец.ИмяПредопределенныхДанных) Тогда
		Если Заемщик[Значение.Владелец.ИмяПредопределенныхДанных] = Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтрокуРасчеты(ВыбранныйБанк)
	
	Возврат Объект.ДоступныеПрограммы.Выгрузить(Новый Структура("Банк", ВыбранныйБанк)).ВыгрузитьКолонку("Программа");
	
КонецФункции

&НаКлиенте
Процедура РасчетыПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленВРучную Тогда
		Элемент.СписокВыбора.Очистить();
		
		//СписокПрограмм = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Банк,ДобавленВРучную", ТекущиеДанные.Банк, Истина));
		СписокПрограмм = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Банк", ТекущиеДанные.Банк));
		
		Если СписокПрограмм.Количество() = 0 Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			Для Каждого СтрокаМассива Из СписокПрограмм Цикл
				Если ЗначениеЗаполнено(СтрокаМассива.Программа) Тогда
					Элемент.СписокВыбора.Добавить(СтрокаМассива.Программа, Строка(СтрокаМассива.Программа));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыБанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДобавленВРучную = Истина;
		ТекущиеДанные.Выбор = Истина;
		
		ТекущиеДанные.Банк = ВыбранноеЗначение;
		
		Список = Объект.СписокБанков.НайтиСтроки(Новый Структура("Банк", ТекущиеДанные.Банк));
		Если Список.Количество() > 0 Тогда
			ТекущиеДанные.ПорядокБанка = Список[0].НомерСтроки;
		КонецЕсли;
		ТекущиеДанные.Сортировка = ?(ТекущиеДанные.Банк = ОсновнойБанк, 0, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПрограммаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДобавленВРучную = Истина;
		ТекущиеДанные.Выбор = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //++
	
	ТекущиеДанные = Элементы.СписокБанков.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	
	Если ТекущиеДанные <> Неопределено И (Не ЗначениеЗаполнено(ТекущиеДанные.Банк) Или ТекущиеДанные.ДобавленВРучную) Тогда
		
		СписокВозможныхБанков = ПолучитьВозможныеБанки(Объект.ЖК, Объект.Фаза, Объект.Корпус);
		
		Если СписокВозможныхБанков = Неопределено Тогда
			//СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВозможныхБанков);
		КонецЕсли;
		//СписокВозможныхБанков = ПолучитьВозможныеБанки(Объект.ЖК, Объект.Фаза, Объект.Корпус);
			
		//Если СписокВозможныхБанков = Неопределено Тогда
		//	//СтандартнаяОбработка = Ложь;
		//	ПоказатьПредупреждение(,"Отсутствуют аккредитованные банки!", 100);
		//Иначе
		//	
		//	ДопПараметры = Новый Структура("ТекущаяСтрока", ТекущиеДанные.НомерСтроки);
		//	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораБанка", ЭтаФорма, ДопПараметры);
		//	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВозможныхБанков, Элементы.ДобавитьБанк); 
		////	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВозможныхБанков);
		//КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВозможныеБанки(ЖК, Фаза, Корпус, ИсключатьТекущие = Истина) //++
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаАккредитованныеБанки(Ложь);
	
	Запрос.УстановитьПараметр("Дата",   ТекущаяДата());
	Запрос.УстановитьПараметр("Проект", ЖК);
	Запрос.УстановитьПараметр("Фаза",   Фаза);
	Запрос.УстановитьПараметр("Корпус", Корпус);
	
	Если ИсключатьТекущие Тогда
		Запрос.УстановитьПараметр("СписокИмеющихсяБанков", Объект.СписокБанков.Выгрузить().ВыгрузитьКолонку("Банк"));
	Иначе
		Запрос.УстановитьПараметр("СписокИмеющихсяБанков", Новый Массив);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выгрузка = Результат.Выгрузить();
		Выгрузка.Свернуть("Банк");
		
		Возврат Выгрузка.ВыгрузитьКолонку("Банк");
	КонецЕсли;
	
КонецФункции





#КонецОбласти

#Область СтраницаПечать

&НаКлиенте
Процедура ПечатьОбновить(Команда) //++
	
	//Записать();
	ТД = СформироватьТДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда) //++
	
	ТипФайла = "PDF";
	ИмяФайлаВложения = "расчет."+ ТипФайла;
	ПолноеИмяФайлаВложения = КаталогВременныхФайлов() + ИмяФайлаВложения;
	ТД.Записать(ПолноеИмяФайлаВложения, ТипФайлаТабличногоДокумента.PDF);
	
	Outlook = Новый COMОбъект("Outlook.Application");
	Письмо = Outlook.CreateItem(0);
	
	Клиент = ?(ЗначениеЗаполнено(ФИО), Строка(ФИО), "");
	
	Письмо.Subject = "~~Расчет по ипотечному кредиту. Объект """ + ?(Объект.ЖК.Пустая(), "", СокрЛП(Объект.ЖК)) + ?(Клиент = "", "", """, клиент """ + СокрЛП(Клиент) + """");
	Письмо.Body = "Добрый день.
				  |Как и договаривались, по итогу нашего разговора, направляю Вам анкеты, расчет и перечень документов.
				  |Прошу подтвердить получение письма.";
	
	Попытка
		Письмо.Attachments.Add(ПолноеИмяФайлаВложения);
	Исключение
	КонецПопытки; 
	                              
	Попытка
		Письмо.Display();
	Исключение
	КонецПопытки; 
	
	УдалитьФайлы(ПолноеИмяФайлаВложения);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТДНаСервере() //++
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ПолеСверху = 0;
	ТабДок.ПолеСлева = 0;
	ТабДок.ПолеСнизу = 0;
	ТабДок.ПолеСправа = 0;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("Печать");
	
	Шапка = Макет.ПолучитьОбласть("Область1");
	Шапка.Параметры.Номер = Объект.Номер;
	Шапка.Параметры.Дата = Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
	Шапка.Параметры.Стоимость = Формат(Объект.СтоимостьКвартирыРуб, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0");
	Шапка.Параметры.ПВ = Формат(Объект.ПервоначальныйВзносПроцент, "ЧЦ=4; ЧДЦ=2; ЧРД=,; ЧН=0");
	Шапка.Параметры.Кредит = Формат(Объект.СуммаКредитаРуб, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0");
	Шапка.Параметры.ЖК = СокрЛП(Объект.Корпус.Наименование);
	Шапка.Параметры.Менеджер = СокрЛП(Пользователи.ТекущийПользователь()); //СокрЛП(Объект.Ответственный.Наименование);
	Шапка.Параметры.ПервоначальнаяСтоимость =  Формат(Объект.ПервоначальныйВзносРуб, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=0");
	
	//Логотип = Макет.ПолучитьОбласть("ОбластьЛого");
	
	ДанныеКартинки = ПолучитьКартинку(Объект.ЖК, Объект.Корпус);
	
	Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
		Шапка.Области.ЛОГОТИП.Картинка = Новый Картинка(ДанныеКартинки);
	Иначе
		Шапка.Области.ЛОГОТИП.Картинка = Новый Картинка;
	КонецЕсли;
	
	НастройкиМенеджера = ПолучитьНастройкиПользователя(Пользователи.ТекущийПользователь()); //Объект.Ответственный
	
	Шапка.Параметры.МенеджерПочта = НастройкиМенеджера.Почта;
	Шапка.Параметры.МенеджерТелефон = НастройкиМенеджера.Телефон;
	
	ДанныеОЗаемщике = Объект.ДанныеОЗаемщиках[0];
	ЗаполнитьЗначенияСвойств(Шапка.Параметры, ДанныеОЗаемщике);
	
	ТабДок.Вывести(Шапка);
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДок.Вывести(ОбластьШапка);
	
	СписокРасчетов = Объект.Расчеты.Выгрузить();
	СписокРасчетов.Сортировать("ПроцентнаяСтавка");
	МинимальнаяСтавка = ?(СписокРасчетов.Количество() = 0, 0, СписокРасчетов[0].ПроцентнаяСтавка);
	
	СписокРасчетов.Сортировать("СуммаПлатежа");
	МинимальныйПлатеж = ?(СписокРасчетов.Количество() = 0, 0, СписокРасчетов[0].СуммаПлатежа);
	
	ВыбранныеРасчеты = СписокРасчетов.Скопировать(Новый Структура("Выбор", Истина));
	ВыбранныеРасчеты.Сортировать("Сортировка, ПорядокБанка, НомерСтроки Возр, СрокКредита");
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаРасчета Из ВыбранныеРасчеты Цикл
		
		Область = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаРасчета);
		
		Если СтрокаРасчета.СуммаПлатежа = МинимальныйПлатеж Тогда
			Область.Область("R1C21:R1C22").ЦветФона = Новый Цвет(0, 255, 0);
		КонецЕсли;
		
		Если СтрокаРасчета.ПроцентнаяСтавка = МинимальнаяСтавка Тогда
			Область.Область("R1C13:R1C15").ЦветФона = Новый Цвет(0, 255, 0);
		КонецЕсли;
		
		Область.Параметры.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		Область.Параметры.СрокКредита = Формат(СтрокаРасчета.СрокКредита, "ЧГ=0") + " (" + Формат(Цел(СтрокаРасчета.СрокКредита/12), "ЧГ=0") + ")";
		ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		
		МассивОбластейДляПроверки = Новый Массив;
		МассивОбластейДляПроверки.Добавить(Область);
		МассивОбластейДляПроверки.Добавить(ОбластьПустаяСтрока);
		
		Если Не ТабДок.ПроверитьВывод(МассивОбластейДляПроверки) Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабДок.Вывести(ОбластьШапка);
		КонецЕсли;
		
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.МенеджерПочта = НастройкиМенеджера.Почта;
	
	СписокДокументов = Объект.ПереченьДокументов.НайтиСтроки(Новый Структура("Выбор", Истина));
	
	ПоловинаДокументов = Цел(СписокДокументов.Количество() / 2);
	ДокКоличество = 1;
	Группа1 = "";
	Группа2 = "";
	
	Для Каждого Документ Из СписокДокументов Цикл
		Если ДокКоличество <= ПоловинаДокументов Тогда
			Группа1 = Группа1 + ?(Группа1 = "", "", Символы.ПС) + Строка(ДокКоличество) + ". " + СокрЛП(Документ.Документ);
		Иначе
			Группа2 = Группа2 + ?(Группа2 = "", "", Символы.ПС) + Строка(ДокКоличество) + ". " + СокрЛП(Документ.Документ);
		КонецЕсли;
		
		ДокКоличество = ДокКоличество + 1;
	КонецЦикла;
	Область.Параметры.ГруппаДокументов1 = Группа1;
	Область.Параметры.ГруппаДокументов2 = Группа2;
	
	Колонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	МассивОбластейДляПроверки = Новый Массив;
	МассивОбластейДляПроверки.Добавить(Область);
	МассивОбластейДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивОбластейДляПроверки.Добавить(Колонтитул);
	
	Если Не ТабДок.ПроверитьВывод(МассивОбластейДляПроверки) Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	МассивОбластейДляПроверки = Новый Массив;
	МассивОбластейДляПроверки.Добавить(Область);
	МассивОбластейДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивОбластейДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивОбластейДляПроверки.Добавить(Колонтитул);
	
	Пока ТабДок.ПроверитьВывод(МассивОбластейДляПроверки) Цикл
		ТабДок.Вывести(Область);
	КонецЦикла;
	
	ТабДок.Вывести(Колонтитул);
	
	Возврат ТабДок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКартинку(ЖК, Корпус) //++
	
	Если ЗначениеЗаполнено(Корпус) Тогда
		Возврат Корпус.Родитель.Макет.Получить();
	Иначе
		Если ЗначениеЗаполнено(ЖК) Тогда
			Возврат ЖК.Макет.Получить();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиПользователя(Пользователь) //++
	
	СтруктураПараметров = Новый Структура("Почта, Телефон", "", "");
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат СтруктураПараметров;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДопСвойства
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	(ДополнительныеРеквизитыИСведения.Имя = ""МультикалькуляторТелефон""
		|			ИЛИ ДополнительныеРеквизитыИСведения.Имя = ""МультикалькуляторПочта"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользователиДополнительныеРеквизиты.Значение КАК Значение,
		|	ПользователиДополнительныеРеквизиты.Свойство КАК Свойство
		|ИЗ
		|	Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
		|ГДЕ
		|	ПользователиДополнительныеРеквизиты.Ссылка = &Пользователь
		|	И ПользователиДополнительныеРеквизиты.Свойство В
		|			(ВЫБРАТЬ
		|				ВТ_ДопСвойства.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_ДопСвойства КАК ВТ_ДопСвойства)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураПараметров;
	Иначе
		Выборка = Результат.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			Если Выборка.Свойство.Имя = "МультикалькуляторТелефон" Тогда
				СтруктураПараметров.Телефон = Выборка.Значение;
			ИначеЕсли Выборка.Свойство.Имя = "МультикалькуляторПочта" Тогда
				СтруктураПараметров.Почта = Выборка.Значение;
			КонецЕсли;
		КонецЦикла;
	
		Возврат СтруктураПараметров;
	КонецЕсли;
	
КонецФункции



#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ДобавитьКлиентовВЗапрос(МассивКлиентов, Запрос)
	
	ЗапросОбъект = Запрос.ПолучитьОбъект();
	Для Каждого Клиент Из МассивКлиентов Цикл
		НС = ЗапросОбъект.Участники.Добавить();
		НС.Клиент = Клиент;
	КонецЦикла;
	
	Попытка
		ЗапросОбъект.Записать(?(Запрос.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	Исключение
		Сообщить("Не удалось добавить клиентов в запрос " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивОтборовДляФизЛиц() //++
	
	Отбор = Новый СписокЗначений;
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.РегистрацияРФ);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СемейноеПоложение);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.НаличиеИждивенцев);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.КатегорияЗанятости);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СтажТекущий);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СтажОбщий);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФормаПодтвержденияДоходов);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ЗарплатныйКлиент);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФинансовыеОбязательства);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.МатеринскийКапиталВПВ);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ГражданствоРФ);
	Отбор.Добавить(ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Пол);
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбщиеКнопкиЗаемщиков(Ключ)
	
	ЗапросПоПараметрам = Новый Запрос;
	ЗапросПоПараметрам.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыПримененияСтавок_Значения.Ссылка КАК Ссылка,
		|	ПараметрыПримененияСтавок_Значения.Представление КАК Представление,
		|	ПараметрыПримененияСтавок_Значения.Владелец КАК Владелец
		|ИЗ
		|	Справочник.ПараметрыПримененияСтавок_Значения КАК ПараметрыПримененияСтавок_Значения
		|ГДЕ
		|	ПараметрыПримененияСтавок_Значения.Владелец В(&МассивОграничений)
		|	И НЕ ПараметрыПримененияСтавок_Значения.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПараметрыПримененияСтавок_Значения.Сортировка,
		|	ПараметрыПримененияСтавок_Значения.Наименование";
	
	ЗапросПоПараметрам.УстановитьПараметр("МассивОграничений", МассивОтборовДляФизЛиц());
	
	Результат = ЗапросПоПараметрам.Выполнить();
	
	Если Результат.Пустой() Тогда
		Сообщить("Не найдены параметры заполнения документа!");
	Иначе
		
		ТаблицаПараметров = Результат.Выгрузить();
		
		//СемейноеПоложение
		ПарамСемейноеПоложение = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СемейноеПоложение));
		
		Если ПарамСемейноеПоложение.Количество() > 0 Тогда
			
			Для Каждого СтрокаСемейноеПоложение Из ПарамСемейноеПоложение Цикл
				Если Ключ = 0 Тогда
					Элементы.СемейноеПоложение.СписокВыбора.Добавить(СтрокаСемейноеПоложение.Ссылка, СтрокаСемейноеПоложение.Представление);
				Иначе
					Элементы["СемейноеПоложение" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаСемейноеПоложение.Ссылка, СтрокаСемейноеПоложение.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Наличие иждивенцев
		ПарамНаличиеИждивенцев = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.НаличиеИждивенцев));
		
		Если ПарамНаличиеИждивенцев.Количество() > 0 Тогда
			
			Для Каждого СтрокаНаличиеИждивенцев Из ПарамНаличиеИждивенцев Цикл
				Если Ключ = 0 Тогда
					Элементы.НаличиеИждивенцев.СписокВыбора.Добавить(СтрокаНаличиеИждивенцев.Ссылка, СтрокаНаличиеИждивенцев.Представление);
				Иначе
					Элементы["НаличиеИждивенцев" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаНаличиеИждивенцев.Ссылка, СтрокаНаличиеИждивенцев.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Наличие финансовых обязательств
		ПарамФинансовыеОбязательства = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФинансовыеОбязательства));
		
		Если ПарамФинансовыеОбязательства.Количество() > 0 Тогда
			
			Для Каждого СтрокаФинансовыеОбязательства Из ПарамФинансовыеОбязательства Цикл
				Если Ключ = 0 Тогда
					Элементы.ФинансовыеОбязательства.СписокВыбора.Добавить(СтрокаФинансовыеОбязательства.Ссылка, СтрокаФинансовыеОбязательства.Представление);
				Иначе
					Элементы["ФинансовыеОбязательства" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаФинансовыеОбязательства.Ссылка, СтрокаФинансовыеОбязательства.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Пол
		ПарамПол = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.Пол));
		
		Если ПарамПол.Количество() > 0 Тогда
			
			Для Каждого СтрокаПол Из ПарамПол Цикл
				Если Ключ = 0 Тогда
					Элементы.Пол.СписокВыбора.Добавить(СтрокаПол.Ссылка, СтрокаПол.Представление);
				Иначе
					Элементы["Пол" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаПол.Ссылка, СтрокаПол.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Гражданство
		ПарамГражданство = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ГражданствоРФ));
		
		Если ПарамГражданство.Количество() > 0 Тогда
			
			Для Каждого СтрокаГражданство Из ПарамГражданство Цикл
				Если Ключ = 0 Тогда
					Элементы.ГражданствоРФ.СписокВыбора.Добавить(СтрокаГражданство.Ссылка, СтрокаГражданство.Представление);
				Иначе
					Элементы["ГражданствоРФ" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаГражданство.Ссылка, СтрокаГражданство.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Регистрация
		ПарамРегистрация = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.РегистрацияРФ));
		
		Если ПарамРегистрация.Количество() > 0 Тогда
			
			Для Каждого СтрокаРегистрация Из ПарамРегистрация Цикл
				Если Ключ = 0 Тогда
					Элементы.РегистрацияРФ.СписокВыбора.Добавить(СтрокаРегистрация.Ссылка, СтрокаРегистрация.Представление);
				Иначе
					Элементы["РегистрацияРФ" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаРегистрация.Ссылка, СтрокаРегистрация.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Материнский капитал
		ПарамМатеринскийКапитал = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.МатеринскийКапиталВПВ));
		
		Если ПарамМатеринскийКапитал.Количество() > 0 Тогда
			
			Для Каждого СтрокаМатеринскийКапитал Из ПарамМатеринскийКапитал Цикл
				Если Ключ = 0 Тогда
					Элементы.МатеринскийКапитал.СписокВыбора.Добавить(СтрокаМатеринскийКапитал.Ссылка, СтрокаМатеринскийКапитал.Представление);
				Иначе
					Элементы["МатеринскийКапитал" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаМатеринскийКапитал.Ссылка, СтрокаМатеринскийКапитал.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Категория занятости
		ПарамКатегорияЗанятости = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.КатегорияЗанятости));
		
		Если ПарамКатегорияЗанятости.Количество() > 0 Тогда
			
			Для Каждого СтрокаКатегорияЗанятости Из ПарамКатегорияЗанятости Цикл
				Если Ключ = 0 Тогда
					Элементы.КатегорияЗанятости.СписокВыбора.Добавить(СтрокаКатегорияЗанятости.Ссылка, СтрокаКатегорияЗанятости.Представление);
				Иначе
					Элементы["КатегорияЗанятости" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаКатегорияЗанятости.Ссылка, СтрокаКатегорияЗанятости.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Стаж текущий
		ПарамСтажТекущий = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СтажТекущий));
		
		Если ПарамСтажТекущий.Количество() > 0 Тогда
			
			Для Каждого СтрокаСтажТекущий Из ПарамСтажТекущий Цикл
				Если Ключ = 0 Тогда
					Элементы.СтажНаТекущемМестеРаботы.СписокВыбора.Добавить(СтрокаСтажТекущий.Ссылка, СтрокаСтажТекущий.Представление);
				Иначе
					Элементы["СтажНаТекущемМестеРаботы" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаСтажТекущий.Ссылка, СтрокаСтажТекущий.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Стаж общий
		ПарамСтажОбщий = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.СтажОбщий));
		
		Если ПарамСтажОбщий.Количество() > 0 Тогда
			
			Для Каждого СтрокаСтажОбщий Из ПарамСтажОбщий Цикл
				Если Ключ = 0 Тогда
					Элементы.ОбщийСтаж.СписокВыбора.Добавить(СтрокаСтажОбщий.Ссылка, СтрокаСтажОбщий.Представление);
				Иначе
					Элементы["ОбщийСтаж" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаСтажОбщий.Ссылка, СтрокаСтажОбщий.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Форма подтверждения
		ПарамФормаПодтвержденияДоходов = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ФормаПодтвержденияДоходов));
		
		Если ПарамФормаПодтвержденияДоходов.Количество() > 0 Тогда
			
			Для Каждого СтрокаФПД Из ПарамФормаПодтвержденияДоходов Цикл
				Если Ключ = 0 Тогда
					Элементы.ФормаПодтвержденияДохода.СписокВыбора.Добавить(СтрокаФПД.Ссылка, СтрокаФПД.Представление);
				Иначе
					Элементы["ФормаПодтвержденияДохода" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаФПД.Ссылка, СтрокаФПД.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Наличие ЗП банка
	    ПарамЗарплатныйКлиент = ТаблицаПараметров.НайтиСтроки(Новый Структура("Владелец", ПланыВидовХарактеристик.ПараметрыПримененияСтавок.ЗарплатныйКлиент));
		
		Если ПарамЗарплатныйКлиент.Количество() > 0 Тогда
			
			Для Каждого СтрокаЗарплатныйКлиент Из ПарамЗарплатныйКлиент Цикл
				Если Ключ = 0 Тогда
					Элементы.НаличиеЗПВБанке.СписокВыбора.Добавить(СтрокаЗарплатныйКлиент.Ссылка, СтрокаЗарплатныйКлиент.Представление);
				Иначе
					Элементы["НаличиеЗПВБанке" + Строка(Ключ)].СписокВыбора.Добавить(СтрокаЗарплатныйКлиент.Ссылка, СтрокаЗарплатныйКлиент.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДокумента() //++
	
	Если Объект.Проведен Тогда 
		СтатусДокумента = 1;
	ИначеЕсли Объект.ПометкаУдаления Тогда 
		СтатусДокумента = 3;
	Иначе 
		СтатусДокумента = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда) //++
	
	ИндексТекущейСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(Элементы.Страницы.ТекущаяСтраница);
	
	ЧислоЗаемщиков = Объект.ДанныеОЗаемщиках.Количество();
	
	Если ИндексТекущейСтраницы = 1 и ЧислоЗаемщиков = 1 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы[ИндексТекущейСтраницы + 2];
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы[ИндексТекущейСтраницы + 1];
	КонецЕсли;
	
	//Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьДоступностьНаСтраницеРасчет() //++
	
	Если Объект.СписокБанков.Количество() = 0 Тогда
		Элементы.ГруппаЭтап3.Доступность = Ложь; //Доступные программы
		Элементы.Группа4.Доступность = Ложь; //Расчеты;
	ИначеЕсли Объект.ДоступныеПрограммы.Количество() = 0 Тогда
		Элементы.Группа4.Доступность = Ложь;
		Элементы.ГруппаЭтап3.Доступность = Истина;
	Иначе
		Элементы.Группа4.Доступность = Истина;
		Элементы.ГруппаЭтап3.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры



#КонецОбласти



&НаКлиенте
Функция ПолучитьНомерСтраницы(Имя)
	
	ЧисловаяСтрока = "0123456789";
	ОбрабатываемоеИмя = Прав(Имя, 2); // больше 99 заемщиков скорее всего не будет
	
	ПерваяЦифра = Лев(ОбрабатываемоеИмя, 1);
	Номер = "";
	
	Если СтрНайти(ЧисловаяСтрока, ПерваяЦифра) <> 0 Тогда
		Номер = Номер + ПерваяЦифра;
	КонецЕсли;
	
	ВтораяЦифра = Прав(ОбрабатываемоеИмя, 1);
	
	Если СтрНайти(ЧисловаяСтрока, ВтораяЦифра) <> 0 Тогда
		Номер = Номер + ВтораяЦифра;
	КонецЕсли;
	
	Возврат ?(Номер = "", 0, Число(Номер));
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыИСтраницу(Имя, Номер)
	
	МассивРеквизитов = Новый Массив;
	МассивЭлементов = Новый Массив;
	
	Для Каждого Элемент Из Элементы[Имя].ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			УдалитьГруппу(Элемент, МассивЭлементов, МассивРеквизитов);
		Иначе
			УдалитьЭлемент(Элемент, МассивЭлементов);
		КонецЕсли;
	КонецЦикла;
	
	//Реквизиты формы
	ИзменитьРеквизиты(, МассивРеквизитов);
	
	//Элементы формы
	Для Каждого Элемент Из МассивЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	//страница
	Элементы.Удалить(Элементы[Имя]);
	
	//строка таблицы
	//Объект.ДанныеОЗаемщиках.Удалить(Номер);
	
	ИмяСтраницы = "СтраницаСозаемщик" + Строка(Номер - 1);
	Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлемент(Элемент, МассивЭлементов)
	
	МассивРеквизитов = Новый Массив;
	
	Если ТипЗнч(Элемент) <> Тип("ДекорацияФормы") И ТипЗнч(Элемент) <> Тип("КнопкаФормы") И Элемент.ПутьКДанным <> "" Тогда
		МассивРеквизитов.Добавить(Элемент.ПутьКДанным);
	КонецЕсли;
	
	//Реквизиты формы
	ИзменитьРеквизиты(, МассивРеквизитов);
	
	//Элементы формы
	МассивЭлементов.Добавить(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьГруппу(Элемент, МассивЭлементов, МассивРеквизитов)
	
	Для Каждого ЭлементГруппы Из Элемент.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы") Тогда
			УдалитьГруппу(ЭлементГруппы, МассивЭлементов, МассивРеквизитов);
			МассивЭлементов.Добавить(ЭлементГруппы);
		Иначе
			МассивЭлементов.Добавить(ЭлементГруппы);
			Если ТипЗнч(ЭлементГруппы) <> Тип("ДекорацияФормы") И ТипЗнч(ЭлементГруппы) <> Тип("КнопкаФормы") И ЭлементГруппы.ПутьКДанным <> "" Тогда
				МассивРеквизитов.Добавить(ЭлементГруппы.ПутьКДанным);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереименоватьГруппу(ИмяЭлемента, Элемент, НоваяСтраница, МассивРеквизитовУдалить, МассивЭлементов, Индекс, ДлинаНомера, Номер)
	
	Если Номер <> 2 Тогда
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - ДлинаНомера) + Строка(Индекс - 1);
		Элементы.Добавить(ИмяЭлемента, Тип(Элемент), Элементы[ИмяРодителя]);
	КонецЕсли;
	
	ОбновитьДанныеЭлемента(Элементы[ИмяЭлемента], Элемент, Ложь);
	
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл

		ИмяЭлемента = Сред(ПодчиненныйЭлемент.Имя, 1, СтрДлина(ПодчиненныйЭлемент.Имя) - ДлинаНомера) + Строка(Индекс - 1);
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ПереименоватьГруппу(ИмяЭлемента, ПодчиненныйЭлемент, НоваяСтраница, МассивРеквизитовУдалить, МассивЭлементов, Индекс, ДлинаНомера, Номер);
		Иначе
			ПереименоватьЭлемент(ИмяЭлемента, ПодчиненныйЭлемент, НоваяСтраница, МассивРеквизитовУдалить, МассивЭлементов, Индекс, ДлинаНомера, Номер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПереименоватьЭлемент(ИмяЭлемента, Элемент, НоваяСтраница, МассивРеквизитовУдалить, МассивЭлементов, Индекс, ДлинаНомера, Номер)
	
	Если Номер <> 2 Тогда
		ИмяРодителя = Сред(Элемент.Родитель.Имя, 1, СтрДлина(Элемент.Родитель.Имя) - ДлинаНомера) + Строка(Индекс - 1);
		Элементы.Добавить(ИмяЭлемента, Тип(Элемент), Элементы[ИмяРодителя]);
	КонецЕсли;
	
	ОбновитьДанныеЭлемента(Элементы[ИмяЭлемента], Элемент);
	
	Если Элементы[ИмяЭлемента].Вид = ВидПоляФормы.ПолеПереключателя Тогда
		ОбновитьСписокВыбораЭлемента(Элементы[ИмяЭлемента], Элемент);
	КонецЕсли;
	
	Если ТипЗнч(Элемент) <> Тип("ДекорацияФормы") И ТипЗнч(Элемент) <> Тип("КнопкаФормы") И Элемент.ПутьКДанным <> "" Тогда
		
		ДействиеПриИзменении = Элемент.ПолучитьДействие("ПриИзменении");
		Если ДействиеПриИзменении <> "" Тогда
			Элементы[ИмяЭлемента].УстановитьДействие("ПриИзменении", ДействиеПриИзменении);
		КонецЕсли;
		
		ДействиеОчистка = Элемент.ПолучитьДействие("Очистка");
		Если ДействиеОчистка <> "" Тогда
			Элементы[ИмяЭлемента].УстановитьДействие("Очистка", ДействиеОчистка);
		КонецЕсли;
		
		ТекРеквизит = ЭтаФорма[Элемент.ПутьКДанным];
	
		МассивРеквизитовУдалить.Добавить(Элемент.ПутьКДанным);

		ИмяРеквизита = Сред(Элемент.ПутьКДанным, 1, СтрДлина(Элемент.ПутьКДанным) - ДлинаНомера) + Строка(Индекс - 1);
		Если Номер <> 2 Тогда
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ПолучитьТипЭлемента(ТипЗнч(ЭтаФорма[Элемент.ПутьКДанным])), , Элемент.Заголовок, Ложь);
			
			МассивРеквизитовДобавить = Новый Массив;
			МассивРеквизитовДобавить.Добавить(НовыйРеквизит);
			ИзменитьРеквизиты(МассивРеквизитовДобавить);
		КонецЕсли;
		
		ЭтаФорма[ИмяРеквизита] = ТекРеквизит;
		
		Если Номер <> 2 Тогда
			Элементы[ИмяЭлемента].ПутьКДанным = ИмяРеквизита;
		КонецЕсли;
	Иначе
		//МассивЭлементов.Добавить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереформироватьСтраницыСозаемщиков(Номер)
	
	СледующийНомер = Номер + 1;
	КоличествоСозаемщиков = Объект.ДанныеОЗаемщиках.Количество();
	
	ДлинаНомера = СтрДлина(Строка(Номер));
	
	Если Номер <= КоличествоСозаемщиков Тогда
		Имя = "СтраницаСозаемщик";
		Для Индекс = СледующийНомер По КоличествоСозаемщиков Цикл
			ТекущееИмя = Имя + Строка(Индекс);
			ТекущаяСтраница = Элементы[ТекущееИмя];
			ЗаголовокСтраницы = Сред(ТекущаяСтраница.Заголовок, 1, СтрДлина(ТекущаяСтраница.Заголовок) - ДлинаНомера);
			
			ИмяНовойСтраницы = Имя + Строка(Индекс - 1);
			ТипСтраницы = Тип(ТекущаяСтраница);
			Если Индекс = 2 Тогда
				НоваяСтраница = Элементы.СтраницаСозаемщик1;
				НоваяСтраница.Видимость = Истина;
			Иначе
				Элементы.Вставить(ИмяНовойСтраницы, ТипСтраницы, Элементы.Страницы, ТекущаяСтраница);
				НоваяСтраница = Элементы[ИмяНовойСтраницы];
				НоваяСтраница.Заголовок = ЗаголовокСтраницы + Строка(Индекс - 1);
				
				НоваяСтраница.ОтображатьЗаголовок = ТекущаяСтраница.ОтображатьЗаголовок;
				НоваяСтраница.Картинка = ТекущаяСтраница.Картинка;
				НоваяСтраница.ЦветФона = ТекущаяСтраница.ЦветФона;
				НоваяСтраница.Группировка = ТекущаяСтраница.Группировка;
				НоваяСтраница.Подсказка = ТекущаяСтраница.Подсказка;
			КонецЕсли;
			
			МассивРеквизитовУдалить = Новый Массив;
			МассивЭлементов = Новый Массив;
			
			Для Каждого Элемент Из Элементы[ТекущееИмя].ПодчиненныеЭлементы Цикл
			
				МассивЭлементов.Добавить(Элемент);

				ИмяЭлемента = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - ДлинаНомера) + Строка(Индекс - 1);
			
				Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
					ПереименоватьГруппу(ИмяЭлемента, Элемент, НоваяСтраница, МассивРеквизитовУдалить, МассивЭлементов, Индекс, ДлинаНомера, Индекс);
				Иначе
					ПереименоватьЭлемент(ИмяЭлемента, Элемент, НоваяСтраница, МассивРеквизитовУдалить, МассивЭлементов, Индекс, ДлинаНомера, Индекс);
				КонецЕсли;
			КонецЦикла;
			ИзменитьРеквизиты(, МассивРеквизитовУдалить);
			
			Для Каждого ЭлементМассива Из МассивЭлементов Цикл
				Элементы.Удалить(ЭлементМассива);
			КонецЦикла;

			Элементы.Удалить(ТекущаяСтраница);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросПриИзменении(Элемент)
	
	ДоступностьРеквизита = ЗначениеЗаполнено(Объект.Запрос);
	
	Элементы.ГруппаЖКИФаза.Доступность = ДоступностьРеквизита;
	Элементы.ГруппаКорпус.Доступность = ДоступностьРеквизита;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоступностьРеквизита = ЗначениеЗаполнено(Объект.Запрос);
	
	Элементы.ГруппаЖКИФаза.Доступность = ДоступностьРеквизита;
	Элементы.ГруппаКорпус.Доступность = ДоступностьРеквизита;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДоступностьРеквизита = ЗначениеЗаполнено(Объект.Запрос);
	
	Элементы.ГруппаЖКИФаза.Доступность = ДоступностьРеквизита;
	Элементы.ГруппаКорпус.Доступность = ДоступностьРеквизита;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформационноеСообщениеНажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковПриИзменении(Элемент)
	
	СортировкаРасчетов();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокБанков.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ДобавленВРучную Тогда
		Отказ = Истина;
		Сообщить("Удалить можно только добавленные вручную банки!");
	Иначе
		ПередУдалениемБанкаНаСервере(ТекущиеДанные.Банк);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередУдалениемБанкаНаСервере(Банк)

	//Удалить программы и расчеты по банку
	СписокПрограммБанка = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Банк", Банк));
	Если СписокПрограммБанка.Количество() > 0 Тогда
		Для Каждого Программа Из СписокПрограммБанка Цикл
			Объект.ДоступныеПрограммы.Удалить(Объект.ДоступныеПрограммы.Индекс(Программа));
		КонецЦикла;
	КонецЕсли;
	
	//Удалить расчеты банка
	СписокРасчетовБанка = Объект.Расчеты.НайтиСтроки(Новый Структура("Банк", Банк));
	Если СписокРасчетовБанка.Количество() > 0 Тогда
		Для Каждого Расчет Из СписокРасчетовБанка Цикл
			Объект.Расчеты.Удалить(Объект.Расчеты.Индекс(Расчет));
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СортировкаРасчетов()
	
	МассивБанков = Объект.СписокБанков.Выгрузить();
	
	Для Каждого СтрокаРасчет Из Объект.Расчеты Цикл
		
		СтрокаРасчет.Сортировка = ?(СтрокаРасчет.Банк = ОсновнойБанк, 0, 1);
		//СписокСтрок = Объект.СписокБанков.НайтиСтроки(Новый Структура("Банк", СтрокаРасчет.Банк));
		//Для Каждого СтрокаСписка Из СписокСтрок Цикл
		//	СтрокаРасчет.ПорядокБанка = СтрокаСписка.НомерСтроки;
		//	Прервать;
		//КонецЦикла;
		
		Строка = МассивБанков.Найти(СтрокаРасчет.Банк, "Банк");
		СтрокаРасчет.ПорядокБанка = ?(Строка = Неопределено, 99, Строка.НомерСтроки);
	КонецЦикла;
	
	Объект.Расчеты.Сортировать("Сортировка, ПорядокБанка, Программа, НомерСтроки Возр, СрокКредита");
	
КонецПроцедуры

&НаСервере
Процедура СортировкаПрограмм()
	
	МассивБанков = Объект.СписокБанков.Выгрузить();
	
	Для Каждого Программа Из Объект.ДоступныеПрограммы Цикл
		Программа.Сортировка = ?(Программа.Банк = ОсновнойБанк, 0, 1);
		Строка = МассивБанков.Найти(Программа.Банк, "Банк");
		Программа.ПорядокБанка = ?(Строка = Неопределено, 99, Строка.НомерСтроки);
	КонецЦикла;
	
	Объект.ДоступныеПрограммы.Сортировать("Сортировка, ПорядокБанка");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыборРасчеты(Команда)
	
	Для Каждого СтрокаРасчеты Из Объект.Расчеты Цикл 
		СтрокаРасчеты.Выбор = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеРасчеты(Команда)
	
	Для Каждого СтрокаРасчеты Из Объект.Расчеты Цикл 
		СтрокаРасчеты.Выбор = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя <> "РасчетыСрокКредита" И Элемент.ТекущийЭлемент.Имя <> "РасчетыПроцентнаяСтавка" Тогда
		ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Описание <> "" И Не ТекущиеДанные.ДобавленВРучную Тогда
			Сообщить(ТекущиеДанные.Описание);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьБанки(ТекущийБанк, Ключ = Истина)
	
	Если ЗначениеЗаполнено(ТекущийБанк) Тогда
		
		СписокБанков = Объект.СписокБанков.НайтиСтроки(Новый Структура("Банк", ТекущийБанк));
		
		Для Каждого СтрокаБанк Из СписокБанков Цикл
			Если Ключ Тогда
				Возврат Не СтрокаБанк.ДобавленВРучную;
			Иначе
				Возврат СтрокаБанк.ДобавленВРучную;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РасчетыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ДобавленВРучную Тогда
		
		Если ПроверитьБанки(ТекущиеДанные.Банк) Тогда
			Сообщить("Удалять можно расчеты по добавленному вручную банку!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	
	//Если ТекущиеДанные <> Неопределено И (НЕ ЗначениеЗаполнено(ТекущиеДанные.Банк) Или ТекущиеДанные.ДобавленВРучную) Тогда
	Если ТекущиеДанные <> Неопределено Тогда
		//СписокВозможныхБанков = Объект.СписокБанков.НайтиСтроки(Новый Структура("ДобавленВРучную", Истина));

		//Если СписокВозможныхБанков.Количество() = 0 Тогда
		Если Объект.ДоступныеПрограммы.Количество() = 0 Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			Для Каждого СтрокаМассива Из Объект.ДоступныеПрограммы Цикл
				Если Элемент.СписокВыбора.НайтиПоЗначению(СтрокаМассива.Банк) = Неопределено Тогда
					Элемент.СписокВыбора.Добавить(СтрокаМассива.Банк, Строка(СтрокаМассива.Банк));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	//Иначе
	//	СтандартнаяОбработка = Ложь;
	//	Сообщить("Изменять можно только добавленные вручную расчеты!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСозаемщикаПриИзменении(Элемент) //++
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	Если Элемент.Имя = "ФинансовыеОбязательства" + Строка(НомерСозаемщика) Тогда
		Элементы["СуммаФинансовыхОбязательств" + Строка(НомерСозаемщика)].Видимость = ЭтаФорма["ФинансовыеОбязательства" + Строка(НомерСозаемщика)] = ВернутьКнопкуДаФинансовыеОбязательства();
	ИначеЕсли Элемент.Имя = "НаличиеЗПВБанке" + Строка(НомерСозаемщика) Тогда
		Элементы["Банк" + Строка(НомерСозаемщика)].Видимость = ЭтаФорма["НаличиеЗПВБанке" + Строка(НомерСозаемщика)] = ВернутьКнопкуДаЗарплатныйКлиент();
	КонецЕсли;
	
	Если Элемент.Имя = "РегистрацияРФ" + Строка(НомерСозаемщика)
		Или Элемент.Имя = "Пол" + Строка(НомерСозаемщика)
		Или Элемент.Имя = "ГражданствоРФ" + Строка(НомерСозаемщика)
		Или Элемент.Имя = "ДатаРождения" + Строка(НомерСозаемщика)
		Или Элемент.Имя = "ПолныхЛет" + Строка(НомерСозаемщика) Тогда
		ОбновитьДанныеЗаемщика(НомерСозаемщика,, Истина);
	Иначе
		ОбновитьДанныеЗаемщика(НомерСозаемщика,, Истина);
	КонецЕсли;
	
	Если Объект.УчитыватьДанныеСозаемщиков 
						И (Элемент.Имя = "СуммаФинансовыхОбязательств" + Строка(НомерСозаемщика) 
						Или Элемент.Имя = "ЕжемесячныйДоход" + Строка(НомерСозаемщика)) Тогда
		
		ПересчетДокумента();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница) //++
	
	Если ТекущаяСтраница.Заголовок = "Расчет" Тогда
		ВидимостьДоступностьНаСтраницеРасчет();
		Элементы.ГруппаПравая.Видимость = Истина;
	ИначеЕсли ТекущаяСтраница.Заголовок = "Печать" Тогда
		СформироватьПечатнуюФорму();
		Элементы.ГруппаПравая.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПравая.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФорму()
	//Записать();
	ТД = СформироватьТДНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыБанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //--
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	
	//++ Юкаев Роман 20180427 (//810686
	Если ТекущиеДанные <> Неопределено И (НЕ ЗначениеЗаполнено(ТекущиеДанные.Банк) Или ТекущиеДанные.ДобавленВРучную) Тогда
		
		СписокВозможныхБанков = Объект.СписокБанков.НайтиСтроки(Новый Структура("ДобавленВРучную", Истина));
		
		Если СписокВозможныхБанков.Количество() = 0 Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			Для Каждого СтрокаМассива Из СписокВозможныхБанков Цикл
				Элемент.СписокВыбора.Добавить(СтрокаМассива.Банк, Строка(СтрокаМассива.Банк));
			КонецЦикла;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		Сообщить("Изменять можно только добавленные вручную программы!");
	КонецЕсли;
	//Если ТекущиеДанные <> Неопределено Тогда
	//	Для Каждого СтрокаБанк Из Объект.СписокБанков Цикл
	//		Элемент.СписокВыбора.Добавить(СтрокаБанк.Банк, Строка(СтрокаБанк.Банк));
	//	КонецЦикла;
	//КонецЕсли;
	//-- Юкаев Роман 20180427 )
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ) //--
	
	Если Элементы.ДоступныеПрограммы.ТекущиеДанные.Банк.Пустая() И Не ОтменаРедактирования Тогда
		Объект.ДоступныеПрограммы.Удалить(Элементы.ДоступныеПрограммы.ТекущиеДанные.НомерСтроки - 1);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыБанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДобавленВРучную = Истина;
		ТекущиеДанные.Выбор = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленВРучную Тогда
	//Если ТекущиеДанные <> Неопределено Тогда
		Элемент.СписокВыбора.Очистить();
		
		СписокПрограмм = ПолучитьСписокПрограммПоБанкам(Объект.ЖК, Объект.Фаза, Объект.Корпус);
		
		Если СписокПрограмм = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.СписокВыбора.ЗагрузитьЗначения(СписокПрограмм);
		КонецЕсли;
	Иначе
		Сообщить("Изменять можно только программы по добавленным вручную банкам!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПрограммПоБанкам(ЖК, Фаза, Корпус) //--
	
	Возврат Новый Массив;
	
КонецФункции

&НаКлиенте
Процедура СписокБанковБанкОткрытие(Элемент, СтандартнаяОбработка) //--
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковВыборПриИзменении(Элемент) //++
	
	Если Объект.СрокКредита1 = 0 И Объект.СрокКредита2 = 0 И Объект.СрокКредита3 = 0 Тогда
		
		Элементы.ГруппаЭтап3.Доступность = Ложь; //Доступные программы
		Элементы.Группа4.Доступность = Ложь; //Расчеты
		
		Объект.Расчеты.Очистить();
		Объект.ДоступныеПрограммы.Очистить();
		
		Возврат;
	КонецЕсли;
	
	СписокВыбранныхБанков = Объект.СписокБанков.НайтиСтроки(Новый Структура("Выбор", Истина));
	Если СписокВыбранныхБанков.Количество() > 0 Тогда
		
		ТекущиеДанные = Элементы.СписокБанков.ТекущиеДанные;
		
		Если ТекущиеДанные.Банк = ПредопределенноеЗначение("Справочник.Банки.ПустаяСсылка") тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.Выбор Тогда
			Если ТекущиеДанные.ДобавленВРучную Тогда
				СписокПрограмм = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Банк", ТекущиеДанные.Банк));
				Для Каждого Программа Из СписокПрограмм Цикл
					Программа.Выбор = Истина;
				КонецЦикла;
				СписокРасчетов = Объект.Расчеты.НайтиСтроки(Новый Структура("Банк", ТекущиеДанные.Банк));
				Для Каждого Расчет Из СписокРасчетов Цикл
					Расчет.Выбор = Истина;
				КонецЦикла;
			Иначе
				СписокБанков = Новый Массив;
				СписокБанков.Добавить(ТекущиеДанные.Банк);
			
				ОсновнойРасчетДокумента(, СписокБанков, Ложь);
			КонецЕсли;
		Иначе
			//УдалитьПрограммы
			СписокПрограмм = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Банк", ТекущиеДанные.Банк));
			Для Каждого Программа Из СписокПрограмм Цикл
				Если Программа.ДобавленВРучную Тогда
					Программа.Выбор = Ложь;
				Иначе
					Объект.ДоступныеПрограммы.Удалить(Объект.ДоступныеПрограммы.Индекс(Программа));
				КонецЕсли;
			КонецЦикла;
			
			//УдалитьРасчеты
			СписокРасчетов = Объект.Расчеты.НайтиСтроки(Новый Структура("Банк", ТекущиеДанные.Банк));
			Для Каждого Расчет Из СписокРасчетов Цикл
				Если Расчет.ДобавленВРучную Тогда
					Расчет.Выбор = Ложь;
				Иначе
					Объект.Расчеты.Удалить(Объект.Расчеты.Индекс(Расчет));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элементы.ГруппаЭтап3.Доступность = Объект.ДоступныеПрограммы.Количество() > 0;
		
		Видимость = Объект.Расчеты.Количество() > 0;
		
		Элементы.СтраницаПечать.ТолькоПросмотр = Видимость;
		Элементы.Группа4.Доступность = Видимость;
		
	Иначе
		Элементы.ГруппаЭтап3.Доступность = Ложь; //Доступные программы
		Элементы.Группа4.Доступность = Ложь; //Расчеты
		Элементы.СтраницаПечать.ТолькоПросмотр = Истина;
		
		Объект.Расчеты.Очистить();
		Объект.ДоступныеПрограммы.Очистить();
	КонецЕсли;
	
	СписокБанков = Объект.СписокБанков.НайтиСтроки(Новый Структура("Выбор", Истина));
	Элементы.ГруппаЭтап3.Доступность = СписокБанков.Количество() > 0;
	
	СписокПрограмм = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Выбор", Истина));
	Элементы.Группа4.Доступность = СписокПрограмм.Количество() > 0;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыВыборПриИзменении(Элемент) //++
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	
	СписокРасчетов = Объект.Расчеты.НайтиСтроки(Новый Структура("Банк, Программа", ТекущиеДанные.Банк, ТекущиеДанные.Программа));
	
	Если СписокРасчетов.Количество() > 0 Тогда
		Если Не ТекущиеДанные.Выбор Тогда
			Для Каждого СтрокаСписка Из СписокРасчетов Цикл
				Если СтрокаСписка.ДобавленВРучную Тогда
					Продолжить;
				КонецЕсли;
				Объект.Расчеты.Удалить(Объект.Расчеты.Индекс(СтрокаСписка));
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.Выбор И Не ТекущиеДанные.ДобавленВРучную Тогда
			ДобавитьРасчетыПоПрограмме(ТекущиеДанные.Банк, ТекущиеДанные.Программа);
		КонецЕсли;
	КонецЕсли;
	
	СписокВыбранныхПрограмм = Объект.ДоступныеПрограммы.НайтиСтроки(Новый Структура("Выбор", Истина));
	
	Элементы.Группа4.Доступность = СписокВыбранныхПрограмм.Количество() > 0;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасчетыПоПрограмме(Банк, Программа) //++
	
	СписокБанков = Новый Массив;
	СписокБанков.Добавить(Банк);
	
	СписокПрограмм = Новый Массив;
	СписокПрограмм.Добавить(Программа);
	
	ОсновнойРасчетДокумента(СписокПрограмм, СписокБанков, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыПрограммаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДобавленВРучную = Истина;
		ТекущиеДанные.Выбор = Истина;
		ТекущиеДанные.Программа = ВыбранноеЗначение;
		
		Элементы.Группа4.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСхемаУсловийСтавокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	ДозаполнитьСтрокуРасчетовНаКлиенте(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьСтрокуРасчетовНаКлиенте(ТекущиеДанные)
	
	Если Объект.УчитыватьДанныеСозаемщиков Тогда
		СовокупныйДоход = Объект.ДанныеОЗаемщиках.Итог("РазмерЕжемесячногоДохода") - Объект.ДанныеОЗаемщиках.Итог("ФинансовыеОбязательстваСумма");
	Иначе
		СовокупныйДоход = Объект.ДанныеОЗаемщиках[0].РазмерЕжемесячногоДохода - Объект.ДанныеОЗаемщиках[0].ФинансовыеОбязательстваСумма;
	КонецЕсли;
	
	ТекущиеДанные.СовокупныйДоход = СовокупныйДоход;
	ТекущиеДанные.Выбор = Истина;
	
	ДозаполнитьСтрокуНаСервере(Объект.ЖК, Объект.ТипОбъекта, ТекущиеДанные.Банк, ТекущиеДанные.ПроцентнаяСтавка, ТекущиеДанные.СрокКредита, 
						Объект.СуммаКредитаРуб, ТекущиеДанные.СуммаПлатежа, ТекущиеДанные.МинимальныйДоход, ТекущиеДанные.Программа, ТекущиеДанные.ДопРасходы);
	
	Если ТекущиеДанные.МинимальныйДоход > ТекущиеДанные.СовокупныйДоход Тогда
		ТекущиеДанные.Описание = "Совокупный доход заемщиков (" + ТекущиеДанные.СовокупныйДоход + ") меньше минимально необходимого (" + ТекущиеДанные.МинимальныйДоход+")";
	КонецЕсли;
	
	ТекущиеДанные.ДобавленВРучную = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДозаполнитьСтрокуНаСервере(ЖК, ТипОбъекта, Банк, ПроцентнаяСтавка, СрокКредита, СуммаКредитаРуб, СуммаПлатежа, МинимальныйДоход, Программа, ДопРасходы)
	
	Список = Новый Массив;
	Список.Добавить(Банк);
	
	РасчетныеШагиБанков = ПолучитьСписокРасчетныхШагов(Список);
	СтрШага = РасчетныеШагиБанков.Найти(Банк);
	ВыбранныйВидКредитаШагРасчетный = ?(СтрШага = Неопределено, 12, СтрШага.ШагРасчетный);
	
	КПКД = ВернутьКПКД(Банк);
	Если КПКД = Неопределено ИЛИ КПКД = 0 Тогда
		Сообщить("Необходимо внести коэффициент платеж/доход для банка """ + Строка(Банк) + """");
		Возврат;
	КонецЕсли;
	
	ПС = ПроцентнаяСтавка / 100 / 12;
	Икс = POW(1 + ПС, -(СрокКредита - ВыбранныйВидКредитаШагРасчетный));
	Если 1 - Икс = 0 Тогда
		СуммаПлатежа = 0;
	Иначе
		СуммаПлатежа = ?(ПроцентнаяСтавка = 0, 0, СуммаКредитаРуб * ПС / (1 - Икс));
	КонецЕсли;
	
	МинимальныйДоход = ?(КПКД = 0, 0, СуммаПлатежа / КПКД);
	
	//ДопУсловия кредитования
	СписокДопУсловий = ПолучитьСписокДопУсловий(ЖК, ТипОбъекта, Список);
	Если СписокДопУсловий <> Неопределено Тогда
		
		СписокУсловий = СписокДопУсловий.НайтиСтроки(Новый Структура("Банк, Программа", Банк, Программа));
		
		Если СписокУсловий.Количество() > 0 Тогда
			ДопРасходы = СписокУсловий[0].ДополнительныеРасходы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПроцентнаяСтавкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	ДозаполнитьСтрокуРасчетовНаКлиенте(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСрокКредитаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	//++ Юкаев Роман 20180427 (//810686
	//Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленВРучную Тогда
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
		ДозаполнитьСтрокуРасчетовНаКлиенте(ТекущиеДанные);
	КонецЕсли;
	//Иначе
	//	СтандартнаяОбработка = Ложь;
	//	Сообщить("Изменять можно расчеты по добавленному вручную банку!");
	//КонецЕсли;
	//-- Юкаев Роман 20180427 )
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСуммаПлатежаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленВРучную Тогда
		ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
		ДозаполнитьСтрокуРасчетовНаКлиенте(ТекущиеДанные);
	Иначе
		СтандартнаяОбработка = Ложь;
		Сообщить("Изменять можно расчеты по добавленному вручную банку!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДанныеСозаемщиковПриИзменении(Элемент)
	
	ПересчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИО1ПриИзменении(Элемент)
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	Если ФИО = ЭтаФорма["ФИО" + Строка(НомерСозаемщика)] Тогда
		Сообщить("Совпадают Заемщик и Созаемщик" + Строка(НомерСозаемщика));
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеЗаемщика(НомерСозаемщика,,Ложь);
	//ПересчетДокумента(); //не нужен, т.к. не изменяются значимые реквизиты
	
	//ДоступностьДанных = ЗначениеЗаполнено(ЭтаФорма["ФИО" + Строка(НомерСозаемщика)]);
	//
	//Элементы["ДатаРождения" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	//Элементы["ГражданствоРФ" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	//Элементы["РегистрацияРФ" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	//Элементы["Пол" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФИО1Очистка(Элемент, СтандартнаяОбработка)
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	ДоступностьДанных = ЗначениеЗаполнено(ЭтаФорма["ФИО" + Строка(НомерСозаемщика)]);
	
	Элементы["ДатаРождения" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	Элементы["ГражданствоРФ" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	Элементы["РегистрацияРФ" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	Элементы["Пол" + Строка(НомерСозаемщика)].Доступность = Не ДоступностьДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда) //++
	
	ОсновнойРасчетДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСхемаУсловийСтавокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленВРучную Тогда
		
	Иначе
		СтандартнаяОбработка = Ложь;
		Сообщить("Изменять можно расчеты по добавленному вручную банку!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДоступныеПрограммы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ДобавленВРучную Тогда
		
		Если ПроверитьБанки(ТекущиеДанные.Банк) Тогда
			Сообщить("Удалять можно расчеты по добавленному вручную банку!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасчет(Команда)
	
	ОсновнойРасчетДокумента();
	
	Элементы.СтраницаПечать.ТолькоПросмотр = Объект.Расчеты.Количество() = 0;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПрограммыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументовПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументовВыборПриИзменении(Элемент)
	Модифицированность = Истина;
	Объект.ПереченьДокументов.Сортировать("Выбор");
КонецПроцедуры

&НаКлиенте
Процедура РасчетыВыборПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЕжемесячныйДоход1ПриИзменении(Элемент)
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	ОбновитьДанныеЗаемщика(НомерСозаемщика,,Истина);
	Если Объект.УчитыватьДанныеСозаемщиков Тогда
		ПересчетДокумента();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Банк1ПриИзменении(Элемент)
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	ОбновитьДанныеЗаемщика(НомерСозаемщика,,Истина);
	Если Объект.УчитыватьДанныеСозаемщиков Тогда
		ПересчетДокумента();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаФинансовыхОбязательств1ПриИзменении(Элемент)
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	ОбновитьДанныеЗаемщика(НомерСозаемщика,,Истина);
	Если Объект.УчитыватьДанныеСозаемщиков Тогда
		ПересчетДокумента();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапланированныеДокументыВзаимодействий(ПараметрыЗаписи)
	
	ПараметрыОткрываемойФормы = Новый Структура("Основание", Объект.Запрос);	
	
	Если ПараметрыЗаписи.Свойство("ДокЗапланированнаяВстреча") Тогда
		ПараметрыОткрываемойФормы.Вставить("ЗапланированнаяВстреча", ПараметрыЗаписи.ДокЗапланированнаяВстреча);
	КонецЕсли;
	Если ПараметрыЗаписи.Свойство("ДокЗапланированныйЗвонок") Тогда
		ПараметрыОткрываемойФормы.Вставить("ЗапланированныйЗвонок",  ПараметрыЗаписи.ДокЗапланированныйЗвонок);
	КонецЕсли;
	Если ПараметрыЗаписи.Свойство("ДокВстреча") Тогда
		ПараметрыОткрываемойФормы.Вставить("ТекущаяВстреча",		 ПараметрыЗаписи.ДокВстреча);
	КонецЕсли;
	Если ПараметрыЗаписи.Свойство("ДокТелЗвонок") Тогда
		ПараметрыОткрываемойФормы.Вставить("ТекущийЗвонок",			 ПараметрыЗаписи.ДокТелЗвонок);
	КонецЕсли;

	ПараметрыОткрываемойФормы.Вставить("ТекущееСобытие",		 Истина);
	ПараметрыОткрываемойФормы.Вставить("СтатусЗапроса",			 ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ПустаяСсылка"));
	ПараметрыОткрываемойФормы.Вставить("РасшифровкаСтатуса",	 ПредопределенноеЗначение("Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка"));
	
	МассивКлиентов = Новый СписокЗначений;
	
	Для каждого Клиент Из Объект.ДанныеОЗаемщиках Цикл
		Если ЗначениеЗаполнено(Клиент.ФИО) Тогда
			МассивКлиентов.Добавить(Клиент.ФИО);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрываемойФормы.Вставить("МассивКлиентов", МассивКлиентов);
		
	//<810997>, Басаргин (07.05.2018) {	
	//СтатусЗапроса = ЗначениеРеквизитаОбъектаНаСервере(Объект.Запрос, "Статус");
	//ПараметрыОткрываемойФормы.Вставить("СтатусЗапроса", СтатусЗапроса);
	ПараметрыОткрываемойФормы.Вставить("ТекущаяВстреча", Неопределено);
	ПараметрыОткрываемойФормы.Вставить("ТекущийЗвонок", Неопределено);		
	//Если //СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыЗапроса.ВРаботе")
	//	НЕ ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированнаяВстреча)
	//	И НЕ ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированныйЗвонок) Тогда
	//	Возврат;	
	//КонецЕсли;				
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ДокТелЗвонок)
		ИЛИ ЗначениеЗаполнено(ПараметрыЗаписи.ДокВстреча) Тогда
		Возврат;	
	КонецЕсли;		
	
	ПараметрыОткрываемойФормы.Вставить("ТекущееСобытие", ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированнаяВстреча) ИЛИ ЗначениеЗаполнено(ПараметрыЗаписи.ДокЗапланированныйЗвонок));		
	//<810997> }
	
	ОткрытьФорму("Документ.Запрос.Форма.ФормаСозданияВзаимодействия", ПараметрыОткрываемойФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъектаНаСервере(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные); 
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ Юкаев Роман 20180507 (//810997
	//Если ИмяСобытия = "ИзменениеКлиентаДляРасчетаИпотеки" Тогда
	//	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	//	Если ТекущаяСтраница = Элементы.СтраницаЗаемщик Тогда
	//		Если ФИО.Пустая() Тогда
	//			Объект.ДанныеОЗаемщиках[0].ФИО = Параметр.Клиент;
	//			ФИО = Параметр.Клиент;
	//		КонецЕсли;
	//	ИначеЕсли СтрНачинаетсяС(ТекущаяСтраница, "СтраницаСозаемщик") Тогда
	//		НомерЗаемщика = Число(СтрЗаменить(ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	//		Если ЭтаФорма["ФИО" + Строка(НомерЗаемщика)].Пустая() Тогда
	//			Объект.ДанныеОЗаемщиках[НомерЗаемщика].ФИО = Параметр.Клиент;
	//			ЭтаФорма["ФИО" + Строка(НомерЗаемщика)] = Параметр.Клиент;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ОбновитьСтрокуЗаемщикаНаСервере(Параметр.Клиент);
	//КонецЕсли;
	//-- Юкаев Роман )
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуЗаемщикаНаСервере(Клиент)
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		НайденныеСтроки = Объект.ДанныеОЗаемщиках.НайтиСтроки(Новый Структура("ФИО", Клиент));
		
		Если НайденныеСтроки.Количество() <> 0 Тогда
			
			ПараметрыПоФИО = ПолучитьПараметрыПоФИО(Клиент);
			Если ПараметрыПоФИО <> Неопределено Тогда
				Для Каждого Заемщик Из НайденныеСтроки Цикл
					
					Ключ = Заемщик.НомерСтроки - 1;
					
					ЭтотОбъект["ФИО" + ?(Ключ = 0, "", Строка(Ключ))] = Клиент;
					
					Заемщик.Пол = ПараметрыПоФИО.Пол;
					ЭтотОбъект["Пол"           + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.Пол;
					
					Заемщик.ДатаРождения = ПараметрыПоФИО.ДатаРождения;
					ЭтотОбъект["ДатаРождения"  + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.ДатаРождения;
					
					Заемщик.КоличествоПолныхЛет = ПараметрыПоФИО.ПолныхЛет;
					ЭтотОбъект["ПолныхЛет" 	   + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.ПолныхЛет;
					
					Заемщик.ГражданствоРФ = ПараметрыПоФИО.ГражданствоРФ;
					ЭтотОбъект["ГражданствоРФ" + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.ГражданствоРФ;
					
					Заемщик.РегистрацияРФ = ПараметрыПоФИО.РегистрацияРФ;
					ЭтотОбъект["РегистрацияРФ" + ?(Ключ = 0, "", Строка(Ключ))] = ПараметрыПоФИО.РегистрацияРФ;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныхЛет1ПриИзменении(Элемент)
	
	НомерСозаемщика = Число(СтрЗаменить(Элементы.Страницы.ТекущаяСтраница.Имя, "СтраницаСозаемщик", ""));
	
	Объект.ДанныеОЗаемщиках[НомерСозаемщика].ДатаРождения = Дата(1,1,1);
	ЭтаФорма["ДатаРождения" + Строка(НомерСозаемщика)] = Дата(1,1,1);
	
	ОбновитьДанныеЗаемщика(НомерСозаемщика,, Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныхЛетПриИзменении(Элемент)
	
	Объект.ДанныеОЗаемщиках[0].ДатаРождения = Дата(1,1,1);
	ЭтаФорма["ДатаРождения"] = Дата(1,1,1);
	
	ОбновитьДанныеЗаемщика(0,, Истина);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗапрос(Заемщики, ЖК, СтоимостьКвартирыРуб, Корпус, Фаза, Дата, ПервоначальныйВзносРуб)
	
	//ЗапросТ = Новый Запрос;
	//ЗапросТ.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЗаявкаНаСделку.ДокументОснование КАК ДокументОснование
	//	|ПОМЕСТИТЬ ВТ_Исключения
	//	|ИЗ
	//	|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
	//	|ГДЕ
	//	|	НЕ ЗаявкаНаСделку.ПометкаУдаления
	//	|	И ЗаявкаНаСделку.Дата < ДОБАВИТЬКДАТЕ(&ДатаОтбора, ДЕНЬ, -14)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЗапросУчастники.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.Запрос.Участники КАК ЗапросУчастники
	//	|ГДЕ
	//	|	ЗапросУчастники.Клиент = &Клиент
	//	|	И НЕ ЗапросУчастники.Ссылка В
	//	|				(ВЫБРАТЬ
	//	|					ВТ_Исключения.ДокументОснование КАК ДокументОснование
	//	|				ИЗ
	//	|					ВТ_Исключения КАК ВТ_Исключения)
	//	|	И ЗапросУчастники.Ссылка.Проект = &Проект
	//	|	И НЕ ЗапросУчастники.Ссылка.ПометкаУдаления";
	//
	//ЗапросТ.УстановитьПараметр("Клиент", Заемщики[0].ФИО);
	//ЗапросТ.УстановитьПараметр("Проект", ЖК);
	//ЗапросТ.УстановитьПараметр("ДатаОтбора", Дата);
	//
	//Результат = ЗапросТ.Выполнить();
	//
	//Если Результат.Пустой() Тогда
	//	Возврат СоздатьЗапрос(Дата, ЖК, Фаза, Корпус, Заемщики, СтоимостьКвартирыРуб, ПервоначальныйВзносРуб);
	//Иначе
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();

	//	Возврат Выборка.Ссылка;
	//КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеЗапросаИНаличиеДокументов(ПроведениеДокумента = Ложь)
	
	//Если Не ЗначениеЗаполнено(Объект.Запрос) Тогда
	//	
	//	Объект.Запрос = НайтиЗапрос(Объект.ДанныеОЗаемщиках, НайтиПроектПоГруппе(Объект.ЖК), Объект.СтоимостьКвартирыРуб, Объект.Корпус, Объект.Фаза, Объект.Дата, Объект.ПервоначальныйВзносРуб);
	//	
	//	Если Не ЗначениеЗаполнено(Объект.Запрос) Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//КонецЕсли;
	
	ЗапросТ = Новый Запрос;
	ЗапросТ.Текст = 
		"ВЫБРАТЬ
		|	РасчетИпотекиДанныеОЗаемщиках.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасчетИпотеки.ДанныеОЗаемщиках КАК РасчетИпотекиДанныеОЗаемщиках
		|ГДЕ
		|	РасчетИпотекиДанныеОЗаемщиках.ФИО = &Клиент
		|	И РасчетИпотекиДанныеОЗаемщиках.Ссылка.Запрос = &Запрос
		|	И РасчетИпотекиДанныеОЗаемщиках.Ссылка.ЖК = &ЖК
		|	И РасчетИпотекиДанныеОЗаемщиках.Ссылка <> &Ссылка
		|	И НЕ РасчетИпотекиДанныеОЗаемщиках.Ссылка.ПометкаУдаления";
	
	ЗапросТ.УстановитьПараметр("Клиент", Объект.ДанныеОЗаемщиках[0].ФИО);
	ЗапросТ.УстановитьПараметр("Запрос", Объект.Запрос);
	ЗапросТ.УстановитьПараметр("ЖК", Объект.ЖК);
	ЗапросТ.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = ЗапросТ.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
	
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ДокОбъект, Объект,,"Номер, Дата, Проведен, ПометкаУдаления, Ссылка");
		
		ДокОбъект.ДанныеОЗаемщиках.Загрузить(Объект.ДанныеОЗаемщиках.Выгрузить());
		ДокОбъект.СписокБанков.Загрузить(Объект.СписокБанков.Выгрузить());
		ДокОбъект.Расчеты.Загрузить(Объект.Расчеты.Выгрузить());
		ДокОбъект.ДоступныеПрограммы.Загрузить(Объект.ДоступныеПрограммы.Выгрузить());
		ДокОбъект.СтопФакторы.Загрузить(Объект.СтопФакторы.Выгрузить());
		ДокОбъект.ПереченьДокументов.Загрузить(Объект.ПереченьДокументов.Выгрузить());
		
		НачатьТранзакцию();
		Попытка
			Если ПроведениеДокумента Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокОбъект.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Не удалось обновить найденный документ - " + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
		Отказ = Истина;
		
		НачатьТранзакцию();
		
		Если Объект.Ссылка.Пустая() Тогда
			ОтменитьТранзакцию();
		Иначе
			ЭтотО = РеквизитФормыВЗначение("Объект");
			Если Объект.Проведен Тогда
				ЭтотО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			ЭтотО.ПометкаУдаления = Истина;
			
			Попытка
				ЭтотО.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Сообщить("Не удалось пометить на удаление новый документ - " + ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		Возврат ДокОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьЗапрос(Дата, Проект, Фаза, Корпус, Заемщики, ОбъемСредствНаПокупку, ИмеющиесяНаличныеСредства)
	
	НовыйЗапрос = Документы.Запрос.СоздатьДокумент();
	
	НовыйЗапрос.Автор = Пользователи.ТекущийПользователь();
	НовыйЗапрос.Ответственный = НовыйЗапрос.Автор;
	
	НовыйЗапрос.Дата = Дата;
	НовыйЗапрос.Клиент = Заемщики[0].ФИО;
	НовыйЗапрос.ОбъемСредствНаПокупку = ИмеющиесяНаличныеСредства;
	НовыйЗапрос.ИмеющиесяНаличныеСредства = ОбъемСредствНаПокупку;
	
	Для Каждого СтрФИО Из Заемщики Цикл
		НС = НовыйЗапрос.Участники.Добавить();
		НС.Клиент = СтрФИО.ФИО;
		Если СтрФИО.НомерСтроки = 1 Тогда
			НС.Основной = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Фаза) Тогда
		НС = НовыйЗапрос.Фазы.Добавить();
		НС.Фаза = Фаза;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Корпус) Тогда
		НС = НовыйЗапрос.СписокОбъектовСтроительства.Добавить();
		НС.Корпус = НайтиКорпус(Корпус);
		НС.ОбъектСтроительства = Корпус; //НайтиОбъектСтроительства(НайтиПроектПоГруппе(Проект), Фаза, Корпус);
	КонецЕсли;
	
	НовыйЗапрос.Проект = Проект;
	НовыйЗапрос.ТипОбъектаНедвижимости = НовыйЗапрос.Проект.ВидНедвижимости;
	НовыйЗапрос.Статус = Перечисления.СтатусыЗапроса.ВРаботе;
	
	ФормаОплаты = НовыйЗапрос.ФормыОплаты.Добавить();
	ФормаОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Ипотека;
	
	Попытка
		НовыйЗапрос.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить("Не удалось создать документ запрос!");
	КонецПопытки;
	
	Возврат НовыйЗапрос.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПроектПоГруппе(Группа)
	
	Если ТипЗнч(Группа) = Тип("СправочникСсылка.Проекты") Тогда
		Возврат Группа;
	КонецЕсли;
	
	ЗапросТ = Новый Запрос;
	ЗапросТ.Текст = 
		"ВЫБРАТЬ
		|	МультикалькуляторГруппыПроектов.Проект КАК Проект
		|ИЗ
		|	РегистрСведений.МультикалькуляторГруппыПроектов КАК МультикалькуляторГруппыПроектов
		|ГДЕ
		|	МультикалькуляторГруппыПроектов.ГруппаПроектов = &ГруппаПроектов
		|	И МультикалькуляторГруппыПроектов.Активен";
	
	ЗапросТ.УстановитьПараметр("ГруппаПроектов", Группа);
	
	Результат = ЗапросТ.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Проекты.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Проект;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКорпус(ОС)
	
	ЗапросТ = Новый Запрос;
	ЗапросТ.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыСтроительства.Корпус КАК Корпус
		|ИЗ
		|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
		|ГДЕ
		|	ОбъектыСтроительства.Ссылка = &Ссылка";
	
	ЗапросТ.УстановитьПараметр("Ссылка", ОС);
	
	Результат = ЗапросТ.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.КорпусаОбъектовСтроительства.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Корпус;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтметкиЭлементов(Список, Параметры) Экспорт
	
	СписокПараметров = Новый Структура("СписокПараметров, ДопСписок, СписокЗапросов", Параметры.СписокПараметров, Параметры.Режим, Параметры.СписокПараметров.СписокЗапросов);
	
	МассивКлиентов = Новый Массив;
	Для Каждого СтрСписка Из Объект.ДанныеОЗаемщиках Цикл
		МассивКлиентов.Добавить(СтрСписка.ФИО);
	КонецЦикла;
	
	Если Список <> Неопределено Тогда
		Для Каждого СтрСписка Из Список Цикл
			Если СтрСписка.Пометка Тогда
				МассивКлиентов.Добавить(СтрСписка.Значение);
				НС = Объект.ДанныеОЗаемщиках.Добавить();
				НС.ФИО = СтрСписка.Значение;
				Парам = ПолучитьПараметрыПоФИО(СтрСписка.Значение);
				ЗаполнитьЗначенияСвойств(НС, Парам);
				ДобавитьСозаемщиковФорма();
				ЗаполнитьПараметрыСозаемщиков();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокЗапросов = ПолучитьСписокУникальныхЗапросов(МассивКлиентов, СписокПараметров.СписокЗапросов);
	
	Если СписокЗапросов <> Неопределено Тогда
		
		Объект.Запрос = СписокЗапросов[0];
		Для Каждого Запрос Из СписокЗапросов Цикл
			ДозаполнитьКлиентов(Запрос, МассивКлиентов);
		КонецЦикла;
	КонецЕсли;
	
	Записать(СписокПараметров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокУникальныхЗапросов(Клиенты, Запросы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапросУчастники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЗапросыИсключение
		|ИЗ
		|	Документ.Запрос.Участники КАК ЗапросУчастники
		|ГДЕ
		|	ЗапросУчастники.Ссылка В(&Ссылка)
		|	И НЕ ЗапросУчастники.Клиент В (&Клиенты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапросУчастники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапросУчастники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Запрос.Участники КАК ЗапросУчастники
		|ГДЕ
		|	ЗапросУчастники.Клиент В(&Клиенты)
		|	И ЗапросУчастники.Ссылка В(&Ссылка)
		|	И НЕ ЗапросУчастники.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_ЗапросыИсключение.Ссылка
		|				ИЗ
		|					ВТ_ЗапросыИсключение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("Клиенты", Клиенты);
	Запрос.УстановитьПараметр("Ссылка", Запросы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Либо запросов нет, либо во всех запросах есть посторонние люди
		
		Возврат Запросы;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокКлиентовПоЗапросам(Клиенты, ЖК, Дата)
	
	ЗапросТ = Новый Запрос;
	ЗапросТ.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаСделку.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТ_Исключения
		|ИЗ
		|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
		|ГДЕ
		|	НЕ ЗаявкаНаСделку.ПометкаУдаления
		|	И ЗаявкаНаСделку.Дата < ДОБАВИТЬКДАТЕ(&ДатаОтбора, ДЕНЬ, -14)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапросУчастники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Запросы
		|ИЗ
		|	Документ.Запрос.Участники КАК ЗапросУчастники
		|ГДЕ
		|	ЗапросУчастники.Клиент В(&Клиенты)
		|	И ЗапросУчастники.Ссылка.Проект = &Проект
		|	И НЕ ЗапросУчастники.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапросУчастники.Клиент КАК Клиент,
		|	ВЫБОР
		|		КОГДА ЗапросУчастники.Клиент В (&Клиенты)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВСписке,
		|	ЗапросУчастники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Запрос.Участники КАК ЗапросУчастники
		|ГДЕ
		|	ЗапросУчастники.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Запросы.Ссылка
		|			ИЗ
		|				ВТ_Запросы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапросУчастники.Клиент,
		|	ВЫБОР
		|		КОГДА ЗапросУчастники.Клиент В (&Клиенты)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЗапросУчастники.Ссылка";
	
	ЗапросТ.УстановитьПараметр("Клиенты", Клиенты);
	ЗапросТ.УстановитьПараметр("Проект", ЖК);
	ЗапросТ.УстановитьПараметр("ДатаОтбора", Дата);
	
	Результат = ЗапросТ.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выгрузка = Результат.Выгрузить();
		
		КонтрагентыНеИзСписка = Выгрузка.НайтиСтроки(Новый Структура("ВСписке", Ложь));
		
		СписокЗапросов = Выгрузка.Скопировать(, "Ссылка");
		СписокЗапросов.Свернуть("Ссылка");
		СписокЗапросов.Сортировать("Ссылка Убыв");
		
		СписокКлиентов = Выгрузка.Скопировать(, "Клиент");
		СписокКлиентов.Свернуть("Клиент");
		
		Если КонтрагентыНеИзСписка.Количество() = 0 Тогда
			Возврат Новый Структура("СписокЗапросов, Запрос", СписокЗапросов.ВыгрузитьКолонку("Ссылка"), СписокЗапросов[0].Ссылка);
		Иначе
			Возврат Новый Структура("СписокЗапросов, СписокКлиентов", СписокЗапросов.ВыгрузитьКолонку("Ссылка"), СписокКлиентов.ВыгрузитьКолонку("Клиент"));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЕстьОдобрениеПриИзменении(Элемент)
	
	Если Объект.ЕстьОдобрение Тогда
		КоличествоСозаемщиков = Объект.ДанныеОЗаемщиках.Количество() - 1;
		Если КоличествоСозаемщиков > 0 Тогда
			Пока КоличествоСозаемщиков <> 0 Цикл
			//Для Счетчик = 1 по КоличествоСозаемщиков Цикл
				Если КоличествоСозаемщиков <> 1 Тогда
					УдалитьЭлементыИСтраницу("СтраницаСозаемщик" + Строка(КоличествоСозаемщиков), КоличествоСозаемщиков);
				Иначе
					Элементы.СтраницаСозаемщик1.Видимость = Ложь;
					ОчиститьПараметрыПервогоСозаемщика();
				КонецЕсли;
				Объект.ДанныеОЗаемщиках.Удалить(КоличествоСозаемщиков);
				КоличествоСозаемщиков = КоличествоСозаемщиков - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//Блокировка элементов //790375
	Элементы.ГруппаЗаемщикПравая2.Доступность				 = Не Объект.ЕстьОдобрение;
	Элементы.ГруппаДатаРожденияИлиПолныхЛет.Доступность		 = Не Объект.ЕстьОдобрение;
	Элементы.Группа2.Доступность							 = Не Объект.ЕстьОдобрение;
	Элементы.ГруппаНаличиеФинансовыхОбязательств.Доступность = Не Объект.ЕстьОдобрение;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаемщик;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЗаемщика(Команда)
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерСозаемщика = ПолучитьНомерСтраницы(ТекСтраница.Имя);
	ОбменятьЗаемщикаСозаемщика(НомерСозаемщика);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбменятьЗаемщикаСозаемщика(НомерСтроки)
	
	ТЗ = Объект.ДанныеОЗаемщиках.Выгрузить();
	Объект.ДанныеОЗаемщиках.Очистить();
	
	ТЗ.Сдвинуть(ТЗ[0], НомерСтроки);
	ТЗ.Сдвинуть(ТЗ[НомерСтроки - 1], -(НомерСтроки - 1));
	
	Объект.ДанныеОЗаемщиках.Загрузить(ТЗ);
	
	ОчиститьПараметрыПервогоСозаемщика(НомерСтроки);
	
	ЗаполнитьПараметрыСозаемщиков();
	ЗаполнитьПараметрыОсновногоЗаемщика();
	ЗаполнитьОбщиеКнопкиЗаемщиков(НомерСтроки);
	
КонецПроцедуры
