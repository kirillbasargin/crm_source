
#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

//<828132>, Басаргин (26.06.2018) {
&НаКлиенте 
Перем ЗакрытиеРазрешено;

&НаКлиенте 
Перем ДопФормыВзаимодействийЗакрыты;
//<828132> }

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
	КонецЕсли;
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Входящий = НЕ (Параметры.Свойство("Основание")
		И НЕ (Параметры.Основание = Ложь ИЛИ Параметры.Основание = Неопределено));
	КонецЕсли;
	
	// Определим типы контактов, которые можно создать.
	СписокИнтерактивноСоздаваемыхКонтактов = Взаимодействия.СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов();
	Элементы.СоздатьКонтакт.Видимость      = СписокИнтерактивноСоздаваемыхКонтактов.Количество() > 0;

	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Свойство("ДанныеУчастника") Тогда
		Если ТипЗнч(Параметры.ДанныеУчастника) = Тип("Массив") Тогда
			Если Объект.АбонентКонтакт <> Параметры.ДанныеУчастника[0].Контакт Тогда
				ЗаполнитьНаОснованииУчастника(Параметры.ДанныеУчастника[0]);
			КонецЕсли;			
		Иначе
			Если Объект.АбонентКонтакт <> Параметры.ДанныеУчастника.Контакт Тогда
				ЗаполнитьНаОснованииУчастника(Параметры.ДанныеУчастника);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

	//<828132>, Басаргин (13.09.2018) {
	Если Параметры.Ключ.Пустая() Тогда
		Если Параметры.Свойство("Ответственный") Тогда
			Объект.Ответственный = Параметры.Ответственный;
		КонецЕсли;
	КонецЕсли;
	//<828132> }
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	ПриСозданииИПриЧтенииНаСервере();
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");

	//EXTCODE Шумилин Сергей 31.03.2017 {{ --->
	Элементы.СтраницаОписание.Видимость = Ложь;
	//EXTCODE Шумилин Сергей 31.03.2017 <--- }} 	
	
	//<789123>, Басаргин (21.03.2018) {
	Если Параметры.Свойство("ОчиститьРассмотретьПосле") И Параметры.ОчиститьРассмотретьПосле Тогда
		РассмотретьПосле = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;	
	//<789123> }
	
	//<828132>, Басаргин (04.09.2018) {	
	Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	ЭтоМенеджерГПТ = УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Ответственный); 
	ЭтоМенеджерФилиала = УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , Ответственный);

	//Если (Параметры.Свойство("СозданиеЗвонкаИзТелефонии") И Параметры.СозданиеЗвонкаИзТелефонии) 
	//	И (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала) Тогда
	//	ЗаполнитьЗначенияСвойств(Объект, ПолучитьНачальноеЗаполнениеСтадииСтатусаЗапросаНаСервере(Предмет, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала));
	//КонецЕсли;	
	
	Если ЭтоМенеджерГПТ И Параметры.Ключ.Пустая() Тогда
		Объект.Тема = "Планируемый телефонный звонок";
	КонецЕсли;
	
	Элементы.ГруппаСтатусРасшифровкаСтатуса.Доступность = НачальнаяДоступностьСтатусаИРасшифровкиСтатусаЗапроса();
	Элементы.ГруппаСтатусРасшифровкаСтатуса.Видимость = ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала;
	
	ЭтаФорма.ТолькоПросмотр = НЕ НачалоДня(Объект.ДатаОкончания) = НачалоДня(ТекущаяДата()) И РегистрыСведений.Взаимодействия.ПолучитьСтатусВзаимодействия(Объект.Ссылка) = Перечисления.СтатусыВзаимодействий.Завершено;
	
	Если НЕ Объект.Ссылка.Пустая() И (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала) Тогда
		ДоступностьСтатусаРасшифровкиСтатуса = Ложь;
		АктуальныеПараметрыЗапроса = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыЗапроса(Предмет);		
		Если Параметры.СозданиеЗвонкаИзТелефонии И АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если АктуальныеПараметрыЗапроса.Взаимодействие = Объект.Ссылка							
			И РегистрыСведений.Взаимодействия.ПолучитьСтатусВзаимодействия(Объект.Ссылка) = Перечисления.СтатусыВзаимодействий.Завершено
			И (?(ЭтоМенеджерГПТ, АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) ИЛИ НЕ ЗначениеЗаполнено(АктуальныеПараметрыЗапроса.СтадияЗапроса))
			И (Пользователи.ТекущийПользователь() = Объект.Автор ИЛИ Пользователи.ТекущийПользователь() = Объект.Ответственный) Тогда
			ДоступностьСтатусаРасшифровкиСтатуса = Истина;
		КонецЕсли;	
		Элементы.СтатусЗапроса.Доступность = ДоступностьСтатусаРасшифровкиСтатуса ИЛИ Параметры.СозданиеЗвонкаИзТелефонии;
		Элементы.РасшифровкаСтатусаЗапроса.Доступность = ДоступностьСтатусаРасшифровкиСтатуса ИЛИ Параметры.СозданиеЗвонкаИзТелефонии;
		Элементы.ГруппаСтатусРасшифровкаСтатуса.Доступность = ДоступностьСтатусаРасшифровкиСтатуса ИЛИ Параметры.СозданиеЗвонкаИзТелефонии;
	КонецЕсли;	
	//<828132> }
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииИПриЧтенииНаСервере();
	
	//EXTCODE Шумилин Сергей 08.06.2017 {{ --->
	ТолькоПросмотр 					= НЕ CRMСервер.ПроверитьВозможностьРедактированияДокументовВзаимодействия(ТекущийОбъект.Автор, ТекущийОбъект.Ответственный);	
	Элементы.Предмет.ТолькоПросмотр = ТолькоПросмотр;
	//EXTCODE Шумилин Сергей 08.06.2017 <--- }} 
		
	//<766923>, Басаргин (30.01.2018) {
	УстановитьТолькоПросмотрДляЗапланированныхВзаимодействий(ТекущийОбъект);
	//<766923> }
	
	Если УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()) Тогда
		ТолькоПросмотр = Ложь;
	КонецЕсли;	
	
	АктивностьВзаимодействия = РегистрыСведений.Взаимодействия.ПолучитьАктивностьЗаписи(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи, РежимПроведения)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	//++ Юкаев Роман 20180206 ( //771565
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		РегистрыСведений.ИзмененияВзаимодействий.ОбработатьОбъект(ТекущийОбъект, Предмет, Рассмотрено, РассмотретьПосле);
	КонецЕсли;
	//-- Юкаев Роман 20180206 )
	
	////<789123>, Басаргин (14.03.2018) {
	//CRMСервер.ПередЗаписьюВзаимодействияНаСервере(ТекущийОбъект); 
	////<789123> }
	
	//<850233>, Басаргин (25.07.2018) {
	Если ЗначениеЗаполнено(Объект.Ответственный)
		И НЕ Объект.Ссылка.Пустая()
		И ТипЗнч(Объект.Ответственный) = Тип("СправочникСсылка.Пользователи")
		И НЕ ЭтаФорма.Рассмотрено 
		И НЕ Объект.Отменено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаЗвонок.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаЗвонок КАК ЗаявкаНаЗвонок
		|ГДЕ
		|	ЗаявкаНаЗвонок.Взаимодействие = &Взаимодействие";
		
		Запрос.УстановитьПараметр("Взаимодействие", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ГруппаОтветственного = РегистрыСведений.Взаимодействия.ПолучитьГруппуОтветственного(Объект.Ответственный, РассмотретьПосле);
			Если НЕ ГруппаОтветственного = Справочники.ГруппыПользователей.НайтиПоНаименованию("ГПТ", Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ответственный на дату взаимодействия не входит в группу ГПТ, просьба выбрать другого Ответственного", Объект.Ссылка, "Ответственный", "Объект", Отказ);	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	//<850233> }
	
	//<828132>, Басаргин (18.06.2018) {
	Если ЭтоМенеджерГПТ	ИЛИ ЭтоМенеджерФилиала Тогда
		ВыполнитьПроверкиПоСтатусуРасшифровкеСтатуса(Отказ);
	КонецЕсли;
	//<828132> }	
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
		
	//<>, Басаргин (25.10.2017) {
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Отказ", Отказ);	
	//<> }	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект,ИмяСобытия, Параметр, Источник);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	//EXTCODE Шумилин Сергей 07.12.2017 {{ --->
	CRMСервер.ПослеЗаписиВзаимодействияНаСервере(ТекущийОбъект, ЭтотОбъект, ПараметрыЗаписи);
	//EXTCODE Шумилин Сергей 07.12.2017 <--- }} 
	
	АктивностьВзаимодействия = РегистрыСведений.Взаимодействия.ПолучитьАктивностьЗаписи(Объект.Ссылка);
	
	//<828132>, Басаргин (05.09.2018) {
	РегистрыСведений.Взаимодействия.ПодготовитьВзаимодействияДляОткрытия(Объект.Ссылка, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала, ПараметрыЗаписи);
	//<828132> }
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "ТелефонныйЗвонок");
	ПроверитьДоступностьСозданияКонтакта();
	//EXTCODE Шумилин Сергей 01.12.2017 {{ --->
	//CRMКлиент.ВывестиФормуСозданияЗапланированногоВзаимодействияДляМенеджераФилиала(ЭтотОбъект, ПараметрыЗаписи);
	Оповестить("ОбновитьРабочийСтолКлиента");
	//EXTCODE Шумилин Сергей 01.12.2017 <--- }} 	
	
	//<828132>, Басаргин (20.06.2018) {
	Оповестить("ОбновлениеСтадииСтатусаЗапроса");	
	
	Если ПараметрыЗаписи.Свойство("ПараметрыОткрытияВзаимодействий") И НЕ ПараметрыЗаписи.ПараметрыОткрытияВзаимодействий = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура();
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
			ДополнительныеПараметры.Вставить("ЗакрытьПослеЗаписи", ПараметрыЗаписи.ЗакрытьПослеЗаписи);
		КонецЕсли;		
		ОписаниеОповещенияОЗакрытииДопФормВзаимодействий = Новый ОписаниеОповещения("ЗавершениеЗакрытияДопФормВзаимодействий", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыОткрытияФормы = ПараметрыЗаписи.ПараметрыОткрытияВзаимодействий;	
		Если ПараметрыОткрытияФормы.ВзаимодействияДляОткрытия.Количество() Тогда			
			Для каждого Взаимодействие Из ПараметрыОткрытияФормы.ВзаимодействияДляОткрытия Цикл	
				//ПоказатьЗначение(ОписаниеОповещенияОЗакрытииДопФормВзаимодействий, Взаимодействие);	
				ФормаВзаимодействия = ?(ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.Встреча"), "Документ.Встреча.ФормаОбъекта", "Документ.ТелефонныйЗвонок.ФормаОбъекта");
				ПараметрыФормы = Новый Структура("Ключ", Взаимодействие);
				ОткрытьФорму(ФормаВзаимодействия, ПараметрыФормы, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииДопФормВзаимодействий, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);					
			КонецЦикла;
			ДопФормыВзаимодействийЗакрыты = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ПараметрыОткрытияФормы.ФормаВзаимодействия) Тогда
				ОткрытьФорму(ПараметрыОткрытияФормы.ФормаВзаимодействия, ПараметрыОткрытияФормы.ПараметрыНовогоВзаимодействия, ЭтаФорма, Истина, , , ОписаниеОповещенияОЗакрытииДопФормВзаимодействий, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				ДопФормыВзаимодействийЗакрыты = Ложь;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//<828132> }
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ Рассмотрено И НЕ Объект.Отменено Тогда
		ПроверяемыеРеквизиты.Добавить("РассмотретьПосле");	
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//<828132>, Басаргин (26.06.2018) {
	Если НЕ ЗавершениеРаботы Тогда
		Если ЗакрытиеРазрешено = Неопределено 
			И Параметры.СозданиеЗвонкаИзТелефонии
			И (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала) Тогда
			ВыполнитьПроверкиПоСтатусуРасшифровкеСтатуса(Отказ);
			ЗакрытиеРазрешено = ?(Отказ, Неопределено, Истина);
		КонецЕсли;
		Если ТипЗнч(ДопФормыВзаимодействийЗакрыты) = Тип("Булево") Тогда
			Отказ = НЕ ДопФормыВзаимодействийЗакрыты;
		КонецЕсли;
	КонецЕсли;	
	//<828132> }

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыОписаниеДополнительноПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//EXTCODE Шумилин Сергей 17.11.2017 {{ --->
	ОткрытьФорму("Справочник.Клиенты.Форма.ФормаВыбора", Новый Структура("СозданиеКлиентаИзЗапроса", Истина), Элемент);	

	//EXTCODE Шумилин Сергей 17.11.2017 <--- }} 	
	//
	СтандартнаяОбработка = Ложь;
	//
	//ПараметрыОткрытия = Новый Структура;
	//ПараметрыОткрытия.Вставить("ТолькоEmail",                       Ложь);
	//ПараметрыОткрытия.Вставить("ТолькоТелефон",                     Истина);
	//ПараметрыОткрытия.Вставить("ЗаменятьПустыеАдресИПредставление", Истина);
	//ПараметрыОткрытия.Вставить("ДляФормыУточненияКонтактов",        Ложь);
	//ПараметрыОткрытия.Вставить("ИдентификаторФормы",                УникальныйИдентификатор);
	//
	//ВзаимодействияКлиент.ВыбратьКонтакт(Предмет, Объект.АбонентКакСвязаться,
	//         Объект.АбонентПредставление, Объект.АбонентКонтакт, ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаПриИзменении(Элемент)
	
	ПроверитьДоступностьСозданияКонтакта();
	ИзменилисьКонтакты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)
	
	ВзаимодействияВызовСервера.ПредставлениеИВсяКонтактнаяИнформациюКонтакта(Объект.АбонентКонтакт,
	                                                                         Объект.АбонентПредставление,
	                                                                         Объект.АбонентКакСвязаться);
	ПроверитьДоступностьСозданияКонтакта();
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект,ЭтотОбъект,"ТелефонныйЗвонок");
	ИзменилисьКонтакты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(РассмотретьПосле, 
		ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
		
	//++ Юкаев Роман 20171225 ( //Задача 755754
	Объект.Удалить_РассмотретьПосле = РассмотретьПосле;
	//-- Юкаев Роман 20171225 )
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотреноПриИзменении(Элемент)
	
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	Элементы.ДатаОкончания.Доступность =  НЕ Рассмотрено;
	
	//EXTCODE Шумилин Сергей 25.10.2017 {{ --->
	//Объект.ДатаОкончания 			= ТекущаяДата();
	АБ_ИзменилсяПризнакРассмотрено 	= Истина;
	//EXTCODE Шумилин Сергей 25.10.2017 <--- }} 	
	
	//<>, Басаргин (27.10.2017) {
	Если Рассмотрено Тогда
		Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	Иначе
		Объект.Ответственный = 0;
		Элементы.Ответственный.ТолькоПросмотр = Ложь;		
	КонецЕсли;
	Элементы.Ответственный.Доступность = НЕ Рассмотрено;
	//<> }
	
	//<828132>, Басаргин (04.09.2018) {
	Объект.ДатаОкончания = ТекущаяДата();
	ДатаОкончания = Объект.ДатаОкончания;
	ВремяОкончания = Объект.ДатаОкончания;
	//Продолжительность = Объект.ДатаОкончания - Объект.ДатаНачала;
	
	Объект.Отменено = ?(Рассмотрено, Ложь, Объект.Отменено);
	Если ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала Тогда 
		УстановитьВидимостьИЗаполнитьСтатусРасшифровкуСтатуса();	
	КонецЕсли;
	//<828132> }
			
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//<828132>, Басаргин (04.09.2018) {	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ПолучитьНачальноеЗаполнениеСтадииСтатусаЗапросаНаСервере(ВыбранноеЗначение, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала));
	КонецЕсли;
	//<828132> }
		
КонецПроцедуры

//EXTCODE Шумилин Сергей 04.08.2017 {{ --->
&НаКлиенте
Процедура ОтмененоПриИзменении(Элемент)
	
	//<828132>, Басаргин (04.09.2018) {
	Объект.ДатаОкончания = ТекущаяДата();
	ДатаОкончания = Объект.ДатаОкончания;
	ВремяОкончания = Объект.ДатаОкончания;
	//Продолжительность = Объект.ДатаОкончания - Объект.ДатаНачала;

	Рассмотрено = ?(Объект.Отменено, Ложь, Рассмотрено);
	Если ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала Тогда 
		УстановитьВидимостьИЗаполнитьСтатусРасшифровкуСтатуса();	
	КонецЕсли;
	//<828132> }		
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработкуРаботаСКлиентами(Команда)
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		
		ПараметрыФормы = Новый Структура("ПозиционированиеНаКлиенте", Объект.АбонентКонтакт);
		ОткрытьФорму("Обработка.РаботаСКлиентом.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		
		////<789123>, Басаргин (27.03.2018) {
		//Если ЭтоМенеджерГПТ Тогда
		//	ОткрытьФорму("ОбщаяФорма.РабочийСтолГПТ", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		//Иначе
		//	ОткрытьФорму("Обработка.РаботаСКлиентом.Форма", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор, , ЭтаФорма.НавигационнаяСсылка);
		//КонецЕсли;	 
		////<789123> }
				
	КонецЕсли;
	
КонецПроцедуры
//EXTCODE Шумилин Сергей 04.08.2017 <--- }} 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКонтактВыполнить()

	ВзаимодействияКлиент.СоздатьКонтакт(
		Объект.АбонентПредставление, Объект.АбонентКакСвязаться, Объект.Ссылка, СписокИнтерактивноСоздаваемыхКонтактов);

КонецПроцедуры

&НаКлиенте
Процедура СвязанныеВзаимодействияВыполнить()

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Предмет", Объект.Предмет);

	ОткрытьФорму("ЖурналДокументов.Взаимодействия.ФормаСписка", ПараметрыОтбора, ЭтотОбъект, , Окно);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

//<828132>, Басаргин (17.09.2018) {
&НаКлиенте
Процедура ФормаЗаписать(Команда)
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("ЗакрытьПослеЗаписи", Истина));
	Закрыть();
	
КонецПроцедуры
//<828132> }

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНаОснованииУчастника(ДанныеУчастника)
	
	Объект.АбонентКонтакт = ДанныеУчастника.Контакт;
	Если ПустаяСтрока(ДанныеУчастника.КакСвязаться) Тогда
		
		Объект.АбонентКакСвязаться = "";
		Взаимодействия.ДозаполнитьПоляКонтактов(Объект.АбонентКонтакт,
			Объект.АбонентПредставление,
			Объект.АбонентКакСвязаться,
			Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Иначе
		
		Объект.АбонентКакСвязаться = ДанныеУчастника.КакСвязаться;
		
	КонецЕсли;
	
	Объект.АбонентПредставление = ДанныеУчастника.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	Иначе
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	
	Элементы.ДатаОкончания.Доступность =  НЕ Рассмотрено;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПроверитьДоступностьСозданияКонтакта()
	
	Элементы.СоздатьКонтакт.Доступность = (НЕ Объект.Ссылка.Пустая()) 
	                                      И (Не ЗначениеЗаполнено(Объект.АбонентКонтакт)) 
	                                      И (Не ПустаяСтрока(Объект.АбонентПредставление));
	
КонецПроцедуры

//<766923>, Басаргин (30.01.2018) {
Процедура УстановитьТолькоПросмотрДляЗапланированныхВзаимодействий(ТекущийОбъект)
	
	Если УправлениеДоступом.ЕстьРоль("ПолныеПрава", , Пользователи.ТекущийПользователь()) Тогда
		ТолькоПросмотр = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если ТолькоПросмотр И НЕ ТекущийОбъект.Отменено И НЕ Рассмотрено Тогда
		ТолькоПросмотр = ПолучитьТолькоПросмотрПоАвтору(ТекущийОбъект.Автор, ТекущийОбъект.Ответственный);
	КонецЕсли;
	
	//Если ТолькоПросмотр И НЕ Рассмотрено И НЕ ТекущийОбъект.Отменено Тогда
	//	Если УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Пользователи.АвторизованныйПользователь()) Тогда	
	//		ТолькоПросмотр = НЕ УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , ТекущийОбъект.Автор);                       
	//	КонецЕсли;
	//	Если УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , Пользователи.АвторизованныйПользователь()) Тогда
	//		Если ТипЗнч(ТекущийОбъект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
	//			ТолькоПросмотр = НЕ (УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ТекущийОбъект.Автор) ИЛИ УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ТекущийОбъект.Ответственный));
	//		ИначеЕсли ТипЗнч(ТекущийОбъект.Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	//			ТолькоПросмотр = НЕ (УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , ТекущийОбъект.Автор) ИЛИ Справочники.ГруппыПользователей.НайтиПоНаименованию("Филиал", Истина) = РегистрыСведений.Взаимодействия.ПолучитьВерхнийУровеньГруппы(ТекущийОбъект.Ответственный));
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьТолькоПросмотрПоАвтору(Автор, Ответственный)
		
	Если Автор = Пользователи.ТекущийПользователь() Тогда 
		Возврат Ложь;
	ИначеЕсли УправлениеДоступом.ЕстьРоль("МенеджерГПТ", , Пользователи.ТекущийПользователь()) Тогда	
		Возврат НЕ (ПолучитьГруппуПользователя(Автор) = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь()) ИЛИ ЕстьСоответствиеКоординаторов_ГПТ(Автор, Ответственный));	
	ИначеЕсли УправлениеДоступом.ЕстьРоль("МенеджерФилиала", , Пользователи.ТекущийПользователь()) Тогда
		Возврат НЕ (ПолучитьГруппуПользователя(Автор) = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь())
					ИЛИ ПолучитьГруппуПользователя(Ответственный) = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь()));		
	Иначе
		Возврат Истина;				
	КонецЕсли;
	
КонецФункции

Функция ЕстьСоответствиеКоординаторов_ГПТ(Автор, Ответственный)

	ТекущаяГруппа = ПолучитьГруппуПользователя(Пользователи.ТекущийПользователь());
	ГруппаАвтора  = ПолучитьГруппуПользователя(Автор);
	ГруппаОтветственного  = ПолучитьГруппуПользователя(Ответственный);
	ГруппаГПТ = Справочники.ГруппыПользователей.НайтиПоНаименованию("ГПТ", Истина);
	ГруппаКоординаторы = Справочники.ГруппыПользователей.НайтиПоНаименованию("Координаторы", Истина);
	СтаршиеСменыГПТ = Справочники.ГруппыПользователей.НайтиПоНаименованию("Старшие смены ГПТ", Истина);
	
	Возврат (ТекущаяГруппа = ГруппаКоординаторы И (ГруппаАвтора = ГруппаГПТ ИЛИ ГруппаОтветственного = ГруппаГПТ ИЛИ ГруппаАвтора = СтаршиеСменыГПТ ИЛИ ГруппаОтветственного = СтаршиеСменыГПТ))
			ИЛИ (ТекущаяГруппа = ГруппаГПТ И (ГруппаАвтора = ГруппаКоординаторы ИЛИ ГруппаОтветственного = ГруппаКоординаторы ИЛИ ГруппаАвтора = СтаршиеСменыГПТ ИЛИ ГруппаОтветственного = СтаршиеСменыГПТ))
			ИЛИ (ТекущаяГруппа = СтаршиеСменыГПТ И (ГруппаАвтора = ГруппаГПТ ИЛИ ГруппаОтветственного = ГруппаГПТ ИЛИ ГруппаАвтора = ГруппаКоординаторы ИЛИ ГруппаОтветственного = ГруппаКоординаторы));
	
КонецФункции

Функция ПолучитьГруппуПользователя(Ответственный)
	
	ГруппаОтветственного = Неопределено;
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		ГруппаОтветственного = Ответственный;
	ИначеЕсли ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК Группа
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппыПользователейСостав.Ссылка.Наименование";			
		
		Запрос.УстановитьПараметр("Пользователь", Ответственный);
		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл						
			ГруппаОтветственного = ВыборкаДетальныеЗаписи.Группа;
			Если ЗначениеЗаполнено(ГруппаОтветственного) Тогда				
				Пока ЗначениеЗаполнено(ГруппаОтветственного.Родитель) Цикл
					ГруппаОтветственного = ГруппаОтветственного.Родитель;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;                                                             
	
	Если ЗначениеЗаполнено(ГруппаОтветственного) Тогда
		Пока ЗначениеЗаполнено(ГруппаОтветственного.Родитель) Цикл
			ГруппаОтветственного = ГруппаОтветственного.Родитель;
		КонецЦикла;	
	КонецЕсли; 
	
	Возврат ГруппаОтветственного;
	
КонецФункции
//<766923> }

//<828132>, Басаргин (07.06.2018) {
&НаСервереБезКонтекста
Функция ПолучитьНачальноеЗаполнениеСтадииСтатусаЗапросаНаСервере(Предмет, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала)
	Возврат РегистрыСведений.Взаимодействия.ПолучитьНачальноеЗаполнениеСтадииСтатусаЗапроса(Предмет, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала);
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИЗаполнитьСтатусРасшифровкуСтатуса()
	
	Если НЕ (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала) Тогда
		Возврат;
	КонецЕсли;
	
	АктуальныеПараметрыЗапроса = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыЗапроса(Предмет);
	
	СтадияЗапроса = АктуальныеПараметрыЗапроса.СтадияЗапроса;
	СтатусЗапроса = АктуальныеПараметрыЗапроса.СтатусЗапроса;
		
	ДоступностьСтатусаРасшифровкиСтатуса = Ложь;
	
	Если НЕ Объект.Отменено И НЕ Рассмотрено Тогда
		Объект.СтатусЗапроса = Неопределено;
		Объект.РасшифровкаСтатусаЗапроса = Неопределено;
		ДоступностьСтатусаРасшифровкиСтатуса = Ложь;
	ИначеЕсли Объект.Отменено Тогда
		Если СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе
			И ?(ЭтоМенеджерГПТ, СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) Тогда
			Объект.СтатусЗапроса = Перечисления.СтатусыЗапроса.Отказ;
			Объект.РасшифровкаСтатусаЗапроса = Неопределено;
			ДоступностьСтатусаРасшифровкиСтатуса = Истина;
		Иначе
			Объект.СтатусЗапроса = Неопределено;
			Объект.РасшифровкаСтатусаЗапроса = Неопределено;
			ДоступностьСтатусаРасшифровкиСтатуса = Ложь;			
		КонецЕсли;
	 ИначеЕсли Рассмотрено Тогда
		Если ?(ЭтоМенеджерГПТ, СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) Тогда
			ДоступностьСтатусаРасшифровкиСтатуса = Истина;
		КонецЕсли;
	КонецЕсли;		
	
	//Если НЕ Объект.Ссылка.Пустая() Тогда			
	//	Если АктуальныеПараметрыЗапроса.Взаимодействие = Объект.Ссылка							
	//		И РегистрыСведений.Взаимодействия.ПолучитьСтатусВзаимодействия(Объект.Ссылка) = Перечисления.СтатусыВзаимодействий.Завершено
	//		И ?(ЭтоМенеджерГПТ, СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка)
	//		И (Пользователи.ТекущийПользователь() = Объект.Автор ИЛИ Пользователи.ТекущийПользователь() = Объект.Ответственный) Тогда
	//		ДоступностьСтатусаРасшифровкиСтатуса = Истина;
	//	КонецЕсли;	
	//КонецЕсли;		
	
	Элементы.ГруппаСтатусРасшифровкаСтатуса.Доступность = ДоступностьСтатусаРасшифровкиСтатуса;
	Элементы.СтатусЗапроса.Доступность = ДоступностьСтатусаРасшифровкиСтатуса;
	Элементы.РасшифровкаСтатусаЗапроса.Доступность = ДоступностьСтатусаРасшифровкиСтатуса;		
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкиПоСтатусуРасшифровкеСтатуса(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Предмет)
		ИЛИ НЕ (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала) Тогда
		Возврат;
	КонецЕсли;
		
	АктуальныеПараметрыЗапроса = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыЗапроса(Предмет);
	
	Если Объект.Отменено Тогда
		Если АктуальныеПараметрыЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе
			И ?(ЭтоМенеджерГПТ, АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СтатусЗапроса) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить статус запроса", Объект.Ссылка, "СтатусЗапроса", "Объект", Отказ);
				Возврат;	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаСтатусаЗапроса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить расшифровку статуса запроса", Объект.Ссылка, "РасшифровкаСтатусаЗапроса", "Объект", Отказ);
				Возврат;	
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли Рассмотрено Тогда
		Если ?(ЭтоМенеджерГПТ, АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка)
				ИЛИ НЕ ЗначениеЗаполнено(АктуальныеПараметрыЗапроса.СтадияЗапроса) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.СтатусЗапроса) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить статус запроса", Объект.Ссылка, "СтатусЗапроса", "Объект", Отказ);
				Возврат;	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаСтатусаЗапроса) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить расшифровку статуса запроса", Объект.Ссылка, "РасшифровкаСтатусаЗапроса", "Объект", Отказ);
				Возврат;	
			КонецЕсли;			
		КонецЕсли;
		Если НЕ Объект.Ссылка.Пустая() Тогда			
			ПараметрыВзаимодействия = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыВзаимодействия(Объект.Ссылка);
			Если НЕ АктуальныеПараметрыЗапроса.Взаимодействие = Объект.Ссылка Тогда				
				Если ПараметрыВзаимодействия.Статус = Перечисления.СтатусыВзаимодействий.Завершено
					И (НЕ Объект.СтатусЗапроса = ПараметрыВзаимодействия.СтатусЗапроса 
						ИЛИ НЕ Объект.РасшифровкаСтатусаЗапроса = ПараметрыВзаимодействия.РасшифровкаСтатусаЗапроса) Тогда					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя менять статус/расшифровку статуса у завершенного неактуального взаимодействия", Объект.Ссылка, "СтатусЗапроса", "Объект", Отказ);
					Возврат;
				КонецЕсли;
			Иначе
				Если ПараметрыВзаимодействия.Статус = Перечисления.СтатусыВзаимодействий.Завершено
					И НЕ (Пользователи.ТекущийПользователь() = Объект.Автор
						ИЛИ Пользователи.ТекущийПользователь() = Объект.Ответственный)
					И (НЕ Объект.СтатусЗапроса = ПараметрыВзаимодействия.СтатусЗапроса 
						ИЛИ НЕ Объект.РасшифровкаСтатусаЗапроса = ПараметрыВзаимодействия.РасшифровкаСтатусаЗапроса) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Только автор может менять статус/расшифровку статуса у завершенного неактуального взаимодействия", Объект.Ссылка, "СтатусЗапроса", "Объект", Отказ);
					Возврат;
				КонецЕсли;				
		    КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция НачальнаяДоступностьСтатусаИРасшифровкиСтатусаЗапроса()
	
	ДоступностьСтатусаРасшифровкиСтатуса = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Объект.Отменено И НЕ Рассмотрено Тогда
			Объект.СтатусЗапроса = Неопределено;
			Объект.РасшифровкаСтатусаЗапроса = Неопределено;
		КонецЕсли;
	
		Возврат ДоступностьСтатусаРасшифровкиСтатуса;
	КонецЕсли;

	АктуальныеПараметрыЗапроса = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыЗапроса(Предмет);
	
	Если Объект.Отменено Тогда
		Если АктуальныеПараметрыЗапроса.СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе
			И ?(ЭтоМенеджерГПТ, АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) Тогда
			ДоступностьСтатусаРасшифровкиСтатуса = Истина;		
		КонецЕсли;		
	ИначеЕсли Рассмотрено Тогда
		Если ?(ЭтоМенеджерГПТ, АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ АктуальныеПараметрыЗапроса.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка)
				ИЛИ НЕ ЗначениеЗаполнено(АктуальныеПараметрыЗапроса.СтадияЗапроса) Тогда
			ДоступностьСтатусаРасшифровкиСтатуса = Истина;	
		КонецЕсли;
		Если НЕ Объект.Ссылка.Пустая() Тогда			
			ПараметрыВзаимодействия = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыВзаимодействия(Объект.Ссылка);
			Если НЕ АктуальныеПараметрыЗапроса.Взаимодействие = Объект.Ссылка Тогда				
				Если ПараметрыВзаимодействия.Статус = Перечисления.СтатусыВзаимодействий.Завершено Тогда					
					ДоступностьСтатусаРасшифровкиСтатуса = Ложь;		
				КонецЕсли;
			Иначе
				Если ПараметрыВзаимодействия.Статус = Перечисления.СтатусыВзаимодействий.Завершено
					И НЕ (Пользователи.ТекущийПользователь() = Объект.Автор
						ИЛИ Пользователи.ТекущийПользователь() = Объект.Ответственный) Тогда
					ДоступностьСтатусаРасшифровкиСтатуса = Ложь;	
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ДоступностьСтатусаРасшифровкиСтатуса;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеЗакрытияДопФормВзаимодействий(Результат, ДополнительныеПараметры) Экспорт
	
	ДопФормыВзаимодействийЗакрыты = Истина;		
	Если ДополнительныеПараметры.Свойство("ЗакрытьПослеЗаписи") И ДополнительныеПараметры.ЗакрытьПослеЗаписи Тогда			
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//<828132> }

#КонецОбласти
