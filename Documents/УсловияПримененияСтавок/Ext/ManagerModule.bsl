
Процедура ЗаполнитьТабДокПоСхеме(Схема, ТабДок, Расположения=Неопределено, ХранилищеНастроекКомпоновкиДанных=Неопределено, СтрокиКолонки = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Схема) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Схема) = Тип("СправочникСсылка.СхемыУсловийСтавки")  Тогда
		СхемаОбъект = Схема.ПолучитьОбъект();
	Иначе
		СхемаОбъект = ДанныеФормыВЗначение(Схема,Тип("СправочникОбъект.СхемыУсловийСтавки"));
	КонецЕсли;
			   	
	Строки = СхемаОбъект.Строки;
	Колонки = СхемаОбъект.Колонки;
	
	СтрокиКолонки = Новый Структура("Строки, Колонки", Строки, Колонки);

	Если НЕ ЗначениеЗаполнено(Строки) И НЕ ЗначениеЗаполнено(Колонки) Тогда
		Возврат;
	КонецЕсли;
	//
	ТабДок = Новый ТабличныйДокумент;
	Область11 = ТабДок.Область(1,1);
	Область11.Текст =  Колонки.Наименование  + Символы.ПС + Строки.Наименование;
	ШиринаЗаголовка = Макс(СтрДлина(Колонки.Наименование),СтрДлина(Строки.Наименование));
	ЧестнаяШирина = ШиринаЗаголовка*3 / Pow(ШиринаЗаголовка,0.3);
	Область11.ШиринаКолонки = ЧестнаяШирина;

	ОформлениеСтрокиКолонки(Область11);
	
	Если НЕ ЗначениеЗаполнено(Колонки) Тогда
		Область12 = ТабДок.Область(1,2);
		ОформлениеСтрокиКолонки(Область12);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Строки) Тогда
		Область21 = ТабДок.Область(2,1);
		ОформлениеСтрокиКолонки(Область21);
	КонецЕсли;
	

	СтруктураТаблицы = СхемаОбъект.ВернутьСтруктуруТаблицы(ХранилищеНастроекКомпоновкиДанных);
	
	
	ПоложениеКолонокИСтрок = Новый Соответствие;
	Расположения = Новый СписокЗначений;
	
	СформироватьСтрокиКолонки(Схема, ТабДок, СтруктураТаблицы, ПоложениеКолонокИСтрок, Колонки, Строки);

	
	Для Каждого Массив Из СтруктураТаблицы Цикл
		Расположение = ОпределитьПоложениеЭлемента(Массив, Строки, Колонки, ПоложениеКолонокИСтрок);
		Расположения.Добавить(Расположение);
		Если Расположение.Колонка<>1 И Расположение.Строка<>1 Тогда
			Область = ТабДок.Область(Расположение.Строка, Расположение.Колонка);
			ОформлениеЯчейкиЗначения(Область);

		КонецЕсли;
	КонецЦикла;
	СлитьСовпадающиеЯчейки(Расположения);
	ДобавитьЛегенду(ТабДок, Расположения, Строки, Колонки);
	Расположения = Расположения;
	
КонецПроцедуры

Процедура ДобавитьЛегенду(ТабДок, Расположения, Строки, Колонки)
	
	Если Расположения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ЗначениеРасположения = Расположения[0].Значение;
	Если ЗначениеРасположения.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ЗначенияПересечения = ЗначениеРасположения.ЗначенияПересечения;
	Если ЗначенияПересечения.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоСтрок = 1;
	Для Каждого Стр Из Расположения Цикл
		ЧислоСтрок = Макс(ЧислоСтрок, Стр.Значение.Строка);	
	КонецЦикла;
	
	ТекСтрока = 1;
	Для Каждого Стр Из ЗначенияПересечения Цикл
		Если Стр.Владелец = Строки ИЛИ Стр.Владелец = Колонки Тогда
			Продолжить;
		КонецЕсли;
		Область = ТабДок.Область(ТекСтрока+ЧислоСтрок+2, 1);
		Область.Текст = "Параметр " + ТекСтрока;
		ОформлениеЯчейкиЛегенды(Область);
		Область = ТабДок.Область(ТекСтрока+ЧислоСтрок+2, 2);
		Область.Текст = Стр.Владелец.Наименование + " = " + Стр.Наименование;
		ОформлениеЯчейкиЛегенды(Область, Ложь);

		ТекСтрока = ТекСтрока+1;
	КонецЦикла;	
		
КонецПроцедуры

Процедура ОтобразитьЗначенияВТабДоке(Схема, ТабДок, Расположения, Период, ЗначенияСтавок = Неопределено) Экспорт
	
	Если Расположения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строки = Схема.Строки;
	Колонки = Схема.Колонки;

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИпотечныеСтавкиСрезПоследних.Тип,
		|	ИпотечныеСтавкиСрезПоследних.Параметр,
		|	ИпотечныеСтавкиСрезПоследних.Группа,
		|	ИпотечныеСтавкиСрезПоследних.Ставка,
		|	ИпотечныеСтавкиСрезПоследних.Расположение
		|ИЗ
		|	РегистрСведений.ИпотечныеСтавки.СрезПоследних(&Период, СхемаУсловийСтавок = &Схема) КАК ИпотечныеСтавкиСрезПоследних
		|ГДЕ
		|	ИпотечныеСтавкиСрезПоследних.Активен";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Схема", Схема);
	
	ЗначенияСтавок = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ЗначенияСтавок Цикл
		Текст = "";
		
		Область = ТабДок.Область(Стр.Расположение);
		Расположение = ПолучитьРасположение(Область, Строки, Колонки, Расположения);
		
		Если РедактируемоеПоле(Расположение, Текст, Строки, Колонки) Тогда
			Область.Текст = Стр.Ставка;
		Иначе
		Отбор = Новый Структура("Расположение", Стр.Расположение);
		СтрокиТаблицы = ЗначенияСтавок.НайтиСтроки(Отбор);
		Область.Текст = "";
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Область.Текст = Область.Текст +?(Область.Текст = "", ""," / ")+ СтрокаТаблицы.Ставка;
		КонецЦикла;

		КонецЕсли;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьРасположение(Область, Строки, Колонки, Расположения)
	
	Колонка = Область.Лево;
	Строка = Область.Верх;
	
	Для Каждого Стр Из Расположения Цикл
		Если Стр.Значение.Колонка = Колонка И Стр.Значение.Строка = Строка Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;

КонецФункции

Функция РедактируемоеПоле(Расположение, Текст="", Строки, Колонки)
	
	Если Расположение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияПересечения = Расположение.Значение.ЗначенияПересечения;
	РазрешитьРедактирование = Истина;
	
	Для Каждого Стр Из ЗначенияПересечения Цикл
		Если Стр.Владелец <> Строки И Стр.Владелец<> Колонки Тогда
			РазрешитьРедактирование = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазрешитьРедактирование;
	
КонецФункции

Процедура СформироватьСтрокиКолонки(СхемаОбъект, ТабДок, СтруктураТаблицы, ПоложениеКолонокИСтрок, Колонки, Строки)
	
	ТекущаяКолонка = 2;
	ТекущаяСтрока = 2;
	
	ТЗСтроки = СхемаОбъект.СортировкаСтрок.Выгрузить();
	ТЗКолонки = СхемаОбъект.СортировкаКолонок.Выгрузить();
	
	
	ТЗСтроки.Сортировать("НомерСтроки Возр");
	ТЗКолонки.Сортировать("НомерСтроки Возр");
	
	
	Для Каждого Стр Из ТЗКолонки Цикл
		ТекОбласть = ТабДок.Область(1,ТекущаяКолонка);
		ТекОбласть.Текст =	Стр.Значение.Наименование;
		ОформлениеСтрокиКолонки(ТекОбласть);
		ПоложениеКолонокИСтрок.Вставить(Стр.Значение.Ссылка, Новый Структура("Имя, Колонка, Строка",ТекОбласть.Имя, ТекущаяКолонка, 1));
		
		ТекущаяКолонка = ТекущаяКолонка +1;
		ШиринаЗаголовка = Макс(СтрДлина(ТекОбласть.Текст),1);
		ЧестнаяШирина = ШиринаЗаголовка*3 / Pow(ШиринаЗаголовка,0.3);
		ТекОбласть.ШиринаКолонки = ЧестнаяШирина;
	КонецЦикла;
	
	МаксШирина = 0;
	Для Каждого Стр Из ТЗСтроки Цикл
		ТекОбласть = ТабДок.Область(ТекущаяСтрока,1);
		ТекОбласть.Текст =	Стр.Значение.Наименование;
		ОформлениеСтрокиКолонки(ТекОбласть);
		ПоложениеКолонокИСтрок.Вставить(Стр.Значение.Ссылка, Новый Структура("Имя, Колонка, Строка",ТекОбласть.Имя, 1, ТекущаяСтрока)); 
		ТекущаяСтрока = ТекущаяСтрока +1;	
	КонецЦикла;


КонецПроцедуры

Процедура ОформлениеСтрокиКолонки(Область) Экспорт
	
	Область.ЦветФона = Новый Цвет(30,102,175);
	Область.ЦветТекста = Новый Цвет(255,255,255);
	Область.ЦветРамки = Новый Цвет(228,242,255);
	Область.Шрифт = Новый Шрифт(Область.Шрифт,,10,Истина);
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.Обвести(Линия, Линия, Линия, Линия);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;
	Если Область.Верх = 1 И Область.Лево = 1 Тогда
		Коэффициент = 1.2;
	Иначе
		Коэффициент = 2
	КонецЕсли;

	Если Область.Верх = 1 Тогда
	МаксШирина = 10;
	КоличествоСтрок = СтрЧислоСтрок(Область.Текст);
	Для i=1 По КоличествоСтрок Цикл
	ШиринаЗаголовка = Макс(СтрДлина(СтрПолучитьСтроку(Область.Текст,i)),1);
	ЧестнаяШирина = ШиринаЗаголовка*3 / Pow(ШиринаЗаголовка,0.3);
	МаксШирина = Макс(МаксШирина, ЧестнаяШирина);
	КонецЦикла;
	Область.ШиринаКолонки = МаксШирина;
	КонецЕсли;

КонецПроцедуры

Процедура ОформлениеЯчейкиЗначения(Область) Экспорт
	
	Область.ЦветФона = Новый Цвет(240,248,255);
	Область.ЦветТекста = Новый Цвет(20,82,145);
	Область.ЦветРамки =   Новый Цвет(40,129,197);
	Область.Шрифт = Новый Шрифт(Область.Шрифт,,10,Истина);
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	Область.Обвести(, , Линия, Линия);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

КонецПроцедуры


Процедура ОформлениеЯчейкиЛегенды(Область, ОбластьПараметра=Истина) Экспорт
	
	//Если ЦветФона Тогда
	//	Область.ЦветФона = Новый Цвет(240,248,255);
	//КонецЕсли;
	Если ОбластьПараметра Тогда
		Область.ЦветТекста = Новый Цвет(20,82,145);
	КонецЕсли;
	Область.ЦветРамки =   Новый Цвет(40,129,197);
	Область.Шрифт = Новый Шрифт(Область.Шрифт,,8,ОбластьПараметра);
	//Если Обвести Тогда
	//Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	//Область.Обвести(Линия, Линия, Линия, Линия);
	//КонецЕсли;
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто;

КонецПроцедуры



Функция  ОпределитьПоложениеЭлемента(Массив, Строки, Колонки, ПоложениеКолонокИСтрок)
	
	Строка = Неопределено;
	Колонка = Неопределено;
	
	ЗначенияПересечения = Новый Массив;
	
	Для Каждого Стр Из Массив Цикл
		Если Стр.Владелец = Строки Тогда
			Строка = Стр;
		ИначеЕсли Стр.Владелец = Колонки Тогда
			Колонка = Стр;
		КонецЕсли;
		
	ЗначенияПересечения.Добавить(Стр);
	КонецЦикла;
	
	ПоложениеС = ПоложениеКолонокИСтрок.Получить(Строка);
	ПоложениеК = ПоложениеКолонокИСтрок.Получить(Колонка);
	
	Возврат Новый Структура("Колонка, Строка, ЗначенияПересечения", ?(ПоложениеК = Неопределено, 2,ПоложениеК.Колонка), ?(ПоложениеС = Неопределено, 2, ПоложениеС.Строка), ЗначенияПересечения);	
КонецФункции

Процедура СлитьСовпадающиеЯчейки(Расположения)
	
	РасположенияНовый = Новый Массив;
	
	Для Каждого Стр Из Расположения Цикл 
		СтрокаПрисутствует  = НайтиСтроку(Стр, Расположения);
		Если СтрокаПрисутствует <> Неопределено Тогда
			ДобавитьНедостающее(Стр, СтрокаПрисутствует);
		КонецЕсли;
			РасположенияНовый.Добавить(Стр);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтроку(СтрВ, Расположения)
	Стр = СтрВ.Значение;
	Для Каждого СтрокаС Из Расположения Цикл
		Строка = СтрокаС.Значение;
		Если Стр.Колонка = Строка.Колонка И Стр.Строка = Строка.Строка И Строка <> Стр Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьНедостающее(Стр,СтрокаПрисутствует)
	
	Для Каждого Строка Из СтрокаПрисутствует.ЗначенияПересечения Цикл
		Для Каждого Зн Из Стр.Значение.ЗначенияПересечения Цикл
			Если СтрокаПрисутствует.ЗначенияПересечения.Найти(Зн) = Неопределено Тогда
				 СтрокаПрисутствует.ЗначенияПересечения.Добавить(Зн);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьСхемуКомпоновки() Экспорт 
	
    ЗапросКомпоновки =  СформироватьЗапросКомпоновкиДляПрограммируемыхУсловий();
    ТекстЗапроса = ПолучитьТекстЗапросаСхемыКомпоновки(ЗапросКомпоновки);
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.СтрокаСоединения="";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "Набор1";
	НаборДанных.ИсточникДанных = "ИсточникДанных1"; 
	
    ПапкаПолейНабора = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
    ПапкаПолейНабора.Заголовок    = "Параметры";
    ПапкаПолейНабора.ПутьКДанным  = "Параметры";
    
    ПараметрНабора = СхемаКомпоновкиДанных.Параметры.Добавить();
    ПараметрНабора.Использование            = ИспользованиеПараметраКомпоновкиДанных.Всегда;
    ПараметрНабора.Имя                      = "СсылкаДоговор";
    ПараметрНабора.ВключатьВДоступныеПоля   = Ложь;
	
	ПараметрНабора = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрНабора.Использование            = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрНабора.Имя                      = "СписокПараметров";
	ПараметрНабора.ВключатьВДоступныеПоля   = Ложь;
	
	ПараметрНабора = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрНабора.Использование            = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	ПараметрНабора.Имя                      = "МассивСсылок";
	ПараметрНабора.ВключатьВДоступныеПоля   = Ложь;
    
    
	Для Каждого Поле из ЗапросКомпоновки.Поля Цикл 
		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле 		= Поле.Поле;
		ПолеНабора.Заголовок    = Поле.Параметры.Наименование;// + " = " + Поле.Представление;
		ПолеНабора.ПутьКДанным	= "ПараметрыПримененияСтавок."+ Поле.Поле; 	
        ПолеНабора.ТипЗначения  = Поле.ТипЗначения;
		ПараметрВыбора = ПолеНабора.ПараметрыРедактирования.Элементы.Найти("ПараметрыВыбора");
		НовыйОтбор=ПараметрВыбора.Значение.Добавить();
		НовыйОтбор.Имя = "Отбор.Владелец";
		НовыйОтбор.Значение = Поле.Параметры;
		ПараметрВыбора.Использование = Истина; 
		
		ПараметрВыбора = ПолеНабора.ПараметрыРедактирования.Элементы.Найти("ФормаВыбора");
		ПараметрВыбора.Значение = "Справочник.ПараметрыПримененияСтавок_Значения.Форма.ФормаВыбораОдноЗначение";
		ПараметрВыбора.Использование = Истина; 
		
		
        ПараметрНабора = СхемаКомпоновкиДанных.Параметры.Добавить();
        ПараметрНабора.Использование            = ИспользованиеПараметраКомпоновкиДанных.Авто;
        ПараметрНабора.Имя                      = Поле.Поле;
        ПараметрНабора.ВключатьВДоступныеПоля   = Ложь;
        ПараметрНабора.ТипЗначения              = Поле.ТипЗначения;
        ПараметрНабора.ОграничениеИспользования = Истина;

    КонецЦикла;
    
    
    
    
	Возврат  СхемаКомпоновкиДанных;

КонецФункции  

Функция ПолучитьТекстЗапросаСхемыКомпоновки(ЗапросКомпоновкиДляПрограммируемыхУсловий)
	
	ТекстЗапроса  = ЗапросКомпоновкиДляПрограммируемыхУсловий.ТекстЗапроса;
	ТекстЗапроса  = ТекстЗапроса + Символы.ПС + 
	"ВЫБРАТЬ
	|	Параметры.*
	|ИЗ
	| Параметры КАК Параметры";         	
	
	Возврат ТекстЗапроса;              
                                    
КонецФункции                                    

Функция СформироватьЗапросКомпоновкиДляПрограммируемыхУсловий() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыПримененияСтавок.Ссылка КАК Ссылка,
	|	ПараметрыПримененияСтавок.ТипЗначения,
	|	ПараметрыПримененияСтавок.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ПараметрыПримененияСтавок КАК ПараметрыПримененияСтавок
	|ГДЕ
	|	НЕ ПараметрыПримененияСтавок.ПометкаУдаления";
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Запрос = "";
	Поля = Новый Массив;
    СоответствиеПолей = Новый Соответствие;
	
	Если Выборка.Количество()>0 Тогда  
		Запрос = "ВЫБРАТЬ
		| 	%СПИCОКПОЛЕЙ%
        |	ПОМЕСТИТЬ Параметры
        |   ИЗ
        |	%СПИСОКТАБЛИЦ%
        |   ;
        |
        |   ////////////////////////////////////////////////////////////////////////////////";
		СПИCОКПОЛЕЙ = "";
		СПИСОКТАБЛИЦ = "";
		сч=1;
		Пока Выборка.Следующий() Цикл 
			УникальныйИдентификатор = СтрЗаменить(Строка(Выборка.Ссылка.УникальныйИдентификатор()),"-","_");
			Поля.Добавить(Новый Структура("Поле,Представление,Параметры, ТипЗначения","Поле"+УникальныйИдентификатор,СокрЛП(Выборка.Наименование),Выборка.Ссылка, Выборка.ТипЗначения));
            СоответствиеПолей.Вставить("Поле"+УникальныйИдентификатор, Выборка.Ссылка); 
			Поле = "Поле"+УникальныйИдентификатор+".Поле КАК Поле"+УникальныйИдентификатор+","+Символы.ПС;
            
            Если сч > 1 Тогда 
                Таблица = "{ПОЛНОЕ СОЕДИНЕНИЕ ("
            Иначе
                Таблица = "(";
            КонецЕсли;
                
            Таблица = Таблица + "ВЫБРАТЬ &Поле"+УникальныйИдентификатор+" КАК Поле ";
            
            Таблица = Таблица + ") КАК Поле"+УникальныйИдентификатор + Символы.ПС;
            Если сч > 1 Тогда 
                Таблица = Таблица + " ПО (ИСТИНА)}"
            КонецЕсли;
            
            Таблица = Таблица +","+Символы.ПС;
            
            СПИCОКПОЛЕЙ 	= СПИCОКПОЛЕЙ 	+ Поле;
            СПИСОКТАБЛИЦ 	= СПИСОКТАБЛИЦ  + Таблица;
			сч= сч+1;
		КонецЦикла;
		СПИCОКПОЛЕЙ 	= Лев(СПИCОКПОЛЕЙ,СтрДлина(СПИCОКПОЛЕЙ)-2); //удалил последнюю запятую
        СПИСОКТАБЛИЦ    = Лев(СПИСОКТАБЛИЦ,СтрДлина(СПИСОКТАБЛИЦ)-2); //удалил последнюю запятую
		Запрос = СтрЗаменить(Запрос,"%СПИCОКПОЛЕЙ%",СПИCОКПОЛЕЙ);
        Запрос = СтрЗаменить(Запрос,"%СПИСОКТАБЛИЦ%",СПИСОКТАБЛИЦ);
	КонецЕсли;
	Возврат Новый Структура("ТекстЗапроса, Поля, СоответствиеПолей",Запрос, Поля, СоответствиеПолей);
КонецФункции
