
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СтруктураЗаписи() Экспорт
	
	Возврат Новый Структура(
		//Измерения
		"Взаимодействие,
		//Ресурсы
		|АктивностьВзаимодействия, 
		|Статус, 
		|ДатаВзаимодействия,
		|Контакт, 
		|КонтактыСтрокой,
		|Номер,
		|ПериодВзаимодействия,
		|Ответственный,
		|ГруппаОтветственного,
		|ТипВзаимодействия,	
		|Предмет,			
		|Проект,
		|Офис,
		|МестоПроведенияВстречи,
		|ТипОбъектаНедвижимости,
		|ФормыОплатыСтрокой,		
		//<828132>, Басаргин (20.06.2018) {
		|СтадияЗапроса,
		|СтатусЗапроса,
		|РасшифровкаСтатусаЗапроса,		
		|ДатаПоследнегоИзменения,				
		//<828132> }				
		//Служебные
		|Рассмотрено,
		|РассмотретьПосле");

КонецФункции

Процедура ЗаписатьВзаимодействие(Взаимодействие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураЗаписи = СтруктураЗаписи();
	Если ТипЗнч(Взаимодействие) = Тип("ДокументОбъект.Встреча") Тогда
		СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча; 
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
		СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок; 
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ЭлектронноеПисьмоВходящее;
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ЭлектронноеПисьмоИсходящее; 
	//<865768>, Басаргин (14.09.2018) {
	Иначе
		Если ТипЗнч(Взаимодействие) = Тип("ДокументОбъект.ЗаявкаНаСделку") Тогда
			ЗаписатьЗаявкуНаСделку(Взаимодействие);	
		ИначеЕсли ТипЗнч(Взаимодействие) = Тип("СправочникОбъект.Сделки") Тогда
			ЗаписатьСделку(Взаимодействие);	
		КонецЕсли;
	//<865768> }			
		Возврат;
	КонецЕсли;	
	
	СтруктураЗаписи.Взаимодействие = Взаимодействие.Ссылка;
	СтруктураЗаписи.Номер = Взаимодействие.Номер;
	СтруктураЗаписи.ПериодВзаимодействия = Взаимодействие.Дата;
	СтруктураЗаписи.Ответственный = Взаимодействие.Ответственный;
	ЗаполнитьКонтактыЗаписи(Взаимодействие.Ссылка, СтруктураЗаписи);	
	
	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Взаимодействие.Ссылка);
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтруктураРеквизитов, "Предмет, Рассмотрено, РассмотретьПосле");	

	Если ЗначениеЗаполнено(СтруктураЗаписи.Предмет) И ТипЗнч(СтруктураЗаписи.Предмет) = Тип("ДокументСсылка.Запрос") Тогда
		Если ТипЗнч(СтруктураЗаписи.Предмет) = Тип("ДокументСсылка.Запрос") Тогда
			СтруктураЗаписи.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗаписи.Предмет, "Проект");
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
				
	Если Взаимодействие.Отменено Тогда
		СтруктураЗаписи.Статус = Перечисления.СтатусыВзаимодействий.Отменено;
	ИначеЕсли НЕ СтруктураЗаписи.Рассмотрено = Неопределено И СтруктураЗаписи.Рассмотрено Тогда
		СтруктураЗаписи.Статус = Перечисления.СтатусыВзаимодействий.Завершено; 
	Иначе
		СтруктураЗаписи.Статус = Перечисления.СтатусыВзаимодействий.Запланировано; 
	КонецЕсли; 
			
	Если СтруктураЗаписи.Статус = Перечисления.СтатусыВзаимодействий.Запланировано Тогда 
		СтруктураЗаписи.ДатаВзаимодействия = СтруктураРеквизитов.РассмотретьПосле;
	Иначе
		Если СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча Тогда 
			СтруктураЗаписи.ДатаВзаимодействия = Взаимодействие.ДатаОкончания;							
		ИначеЕсли СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок Тогда 
			СтруктураЗаписи.ДатаВзаимодействия = Взаимодействие.ДатаОкончания;	
		ИначеЕсли СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ЭлектронноеПисьмоВходящее Тогда
			СтруктураЗаписи.ДатаВзаимодействия = Взаимодействие.Дата;
		ИначеЕсли СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ЭлектронноеПисьмоИсходящее Тогда
			СтруктураЗаписи.ДатаВзаимодействия = Взаимодействие.ДатаОтправления;
		Иначе
			Возврат;
		КонецЕсли;				
	КонецЕсли;
	
	СтруктураЗаписи.ДатаВзаимодействия = ?(ЗначениеЗаполнено(СтруктураЗаписи.ДатаВзаимодействия), СтруктураЗаписи.ДатаВзаимодействия, СтруктураЗаписи.ПериодВзаимодействия);
	Если СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча Тогда 
		Если ЗначениеЗаполнено(Взаимодействие.МестоПроведенияВстречи) Тогда
			СтруктураЗаписи.Офис = Взаимодействие.МестоПроведенияВстречи; 
			СтруктураЗаписи.ГруппаОтветственного = ?(НЕ ЗначениеЗаполнено(Взаимодействие.ГруппаОтветственного), ПолучитьГруппуОтветственного(Взаимодействие.Ответственный, СтруктураЗаписи.ДатаВзаимодействия, СтруктураЗаписи), ПолучитьВерхнийУровеньГруппы(Взаимодействие.ГруппаОтветственного));			
		КонецЕсли;
	Иначе
		СтруктураЗаписи.ГруппаОтветственного = ПолучитьГруппуОтветственного(Взаимодействие.Ответственный, ?(ЗначениеЗаполнено(СтруктураЗаписи.ДатаВзаимодействия), СтруктураЗаписи.ДатаВзаимодействия, СтруктураЗаписи.ПериодВзаимодействия), СтруктураЗаписи);     
	КонецЕсли;
			
	СтруктураЗаписи.АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Вторичное; //?(НЕ СтруктураЗаписи.Статус = "Завершено", Перечисления.ТипАктивностиВзаимодействия.Вторичное, Перечисления.ТипАктивностиВзаимодействия.Первичное);
	
	Если ЗначениеЗаполнено(СтруктураЗаписи.Офис) Тогда
		СтруктураЗаписи.МестоПроведенияВстречи = Перечисления.МестаПроведенияВстреч[СтруктураЗаписи.Офис];
	КонецЕсли;
	
	//<828132>, Басаргин (20.06.2018) {
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Взаимодействие, "СтатусЗапроса, РасшифровкаСтатусаЗапроса");
	СтруктураЗаписи.ДатаПоследнегоИзменения = ?(ЗначениеЗаполнено(СтруктураЗаписи.СтатусЗапроса) И ЗначениеЗаполнено(СтруктураЗаписи.РасшифровкаСтатусаЗапроса), СтруктураЗаписи.ДатаВзаимодействия, Неопределено); //ПолучитьДатуПоследнегоИзменения(Взаимодействие.Ссылка, СтруктураЗаписи.Предмет, СтруктураЗаписи.СтатусЗапроса, СтруктураЗаписи.РасшифровкаСтатусаЗапроса, СтруктураЗаписи.Статус);		
	ПересчетПриПометкеУдаления = Взаимодействие.ДополнительныеСвойства.Свойство("ПересчетПриПометкеУдаления");
	//<828132> }
		
	ВыполнитьЗаписьВРегистр(Взаимодействие.Ссылка, СтруктураЗаписи, ПересчетПриПометкеУдаления);

	Если НЕ ЗначениеЗаполнено(СтруктураЗаписи.ГруппаОтветственного) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи.АктивностьВзаимодействия = ПолучитьАктивностьВзаимодействия(СтруктураЗаписи);	
	Если НЕ СтруктураЗаписи.АктивностьВзаимодействия = Неопределено Тогда
		ВыполнитьЗаписьВРегистр(Взаимодействие.Ссылка, СтруктураЗаписи, ПересчетПриПометкеУдаления);
	КонецЕсли;
	
	//<789123>, Басаргин (29.03.2018) {
	УправлениеЗаявкамиНаЗвонок.ОбработкаЗаявкиНаЗвонокПриЗаписиВзаимодействия(Взаимодействие);
	//<789123> }	
	
	//<853881>, Басаргин (10.08.2018) {
	ПроверяемыеИменаГрупп = Новый Массив;
	ПроверяемыеИменаГрупп.Добавить("Филиал");
	ПроверяемыеИменаГрупп.Добавить("Центральный офис");
	Если СтруктураЗаписи.АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Первичное
			И СтруктураЗаписи.Статус = Перечисления.СтатусыВзаимодействий.Завершено
			И СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча 
			И НЕ ПроверяемыеИменаГрупп.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗаписи.ГруппаОтветственного, "Наименование")) = Неопределено
			И НачалоДня(СтруктураЗаписи.ДатаВзаимодействия) = НачалоДня(ТекущаяДата()) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапросФормыОплаты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Запрос.ФормыОплаты КАК ЗапросФормыОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетИпотеки КАК РасчетИпотеки
		|		ПО ЗапросФормыОплаты.Ссылка = РасчетИпотеки.Запрос
		|ГДЕ
		|	ЗапросФормыОплаты.Ссылка = &Ссылка
		|	И ЗапросФормыОплаты.ФормаОплаты В (ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Ипотека), ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ВоеннаяИпотекаМолодострой), ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ВоеннаяИпотекаНеМолодострой))
		|	И РасчетИпотеки.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Ссылка", СтруктураЗаписи.Предмет);
		
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда			
			СсылкаНаДокумент = Документы.РасчетИпотеки.ПолучитьСсылку();	
			НовыйДокумент = Документы.РасчетИпотеки.СоздатьДокумент();
			НовыйДокумент.УстановитьСсылкуНового(СсылкаНадокумент);
			НовыйДокумент.Дата = ТекущаяДата();			
			НовыйДокумент.Заполнить(СтруктураЗаписи.Предмет);
			НовыйДокумент.Ответственный = СтруктураЗаписи.Ответственный;
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);	
		КонецЕсли;
	КонецЕсли;	
	//<853881> }
	
КонецПроцедуры

Процедура УдалитьЗаписьИзРегистра(Взаимодействие = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	Если Взаимодействие <> Неопределено Тогда
		НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
	КонецЕсли;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистр(Взаимодействие, СтруктураЗаписи, ПересчетПриПометкеУдаления = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка	
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтруктураЗаписи);
		Запись.Взаимодействие = Взаимодействие;
		
		//<828132>, Басаргин (22.06.2018) {
		ЗаполнитьСтадиюСтатусРасшифровкуСтатуса(Запись);
		
		МассивИзмененийВзаимодействия = Новый Массив;
		АктуальныеПараметрыВзаимодействия = ПолучитьАктуальныеПараметрыВзаимодействия(Взаимодействие);
		
		Если ПересчетПриПометкеУдаления Тогда 
			Если НЕ АктуальныеПараметрыВзаимодействия.СтадияЗапроса = Запись.СтадияЗапроса И Запись.Статус = Перечисления.СтатусыВзаимодействий.Завершено Тогда
				НаименованиеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.ГруппаОтветственного, "Наименование");
				Если НаименованиеГруппы = "ГПТ" И НЕ СтруктураЗаписи.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок
					ИЛИ НаименованиеГруппы = "Филиал" И СтруктураЗаписи.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка Тогда
					Запись.СтатусЗапроса = Неопределено;
					Запись.РасшифровкаСтатусаЗапроса = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ЗаявкаНаСделку") И НЕ ТипЗнч(Взаимодействие) = Тип("СправочникСсылка.Сделки") Тогда		
			Если НЕ АктуальныеПараметрыВзаимодействия.СтатусЗапроса = Запись.СтатусЗапроса И (ЗначениеЗаполнено(АктуальныеПараметрыВзаимодействия.СтатусЗапроса) ИЛИ ЗначениеЗаполнено(Запись.СтатусЗапроса)) Тогда	
				РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "СтатусЗапроса", Запись.СтатусЗапроса, АктуальныеПараметрыВзаимодействия.СтатусЗапроса);
			КонецЕсли;
			Если НЕ АктуальныеПараметрыВзаимодействия.РасшифровкаСтатусаЗапроса = Запись.РасшифровкаСтатусаЗапроса И (ЗначениеЗаполнено(АктуальныеПараметрыВзаимодействия.СтатусЗапроса) ИЛИ ЗначениеЗаполнено(Запись.СтатусЗапроса)) Тогда
				РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "РасшифровкаСтатусаЗапроса", Запись.РасшифровкаСтатусаЗапроса, АктуальныеПараметрыВзаимодействия.РасшифровкаСтатусаЗапроса);
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Записать();

		ОбновитьПараметрыЗапросаЛинейный(Запись);	
		//<828132> }
		
		ЗафиксироватьТранзакцию();	
	Исключение
	    Если ТранзакцияАктивна() Тогда
	        ОтменитьТранзакцию();
	    КонецЕсли;
		
		ВызватьИсключение Взаимодействие;
	КонецПопытки;	
		
	Если Константы.ЗаписыватьИзмененияВзаимодействия.Получить() Тогда
		Если МассивИзмененийВзаимодействия.Количество() Тогда
			РегистрыСведений.Взаимодействия.ЗафиксироватьИзмененияВзаимодействия(МассивИзмененийВзаимодействия);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьТекущийСтатусВзаимодействия(Ссылка, СтруктураРеквизитов = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	СтруктураРеквизитов = ?(СтруктураРеквизитов = Неопределено, Взаимодействия.СтруктураРеквизитовВзаимодействия(Ссылка), СтруктураРеквизитов);	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Отменено") Тогда
		ТекущийСтатус = Перечисления.СтатусыВзаимодействий.Отменено;
	ИначеЕсли НЕ СтруктураРеквизитов.Рассмотрено = Неопределено И СтруктураРеквизитов.Рассмотрено Тогда
		ТекущийСтатус = Перечисления.СтатусыВзаимодействий.Завершено;
	Иначе
		ТекущийСтатус = Перечисления.СтатусыВзаимодействий.Запланировано; 
	КонецЕсли; 
	
	Возврат ТекущийСтатус;
	
КонецФункции

Функция ПолучитьАктивностьЗаписи(Взаимодействие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаимодействия.АктивностьВзаимодействия КАК АктивностьВзаимодействия
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.АктивностьВзаимодействия;
	КонецЕсли;
		
КонецФункции

Процедура УстановитьСтатусВзаимодействияСФиксациейИзменений(Взаимодействие, СтатусВзаимодействия, МассивИзменений = Неопределено, ОтветственныйВзаимодействия = Неопределено) Экспорт
	
	ВзаимодействиеОбъект = Взаимодействие.ПолучитьОбъект();
	Если ВзаимодействиеОбъект = Неопределено Тогда														
		Возврат;	
	КонецЕсли;

	ТекущийСтатусВзаимоедйствия = РегистрыСведений.Взаимодействия.ПолучитьТекущийСтатусВзаимодействия(Взаимодействие);

	Если ТекущийСтатусВзаимоедйствия = СтатусВзаимодействия Тогда
		Возврат;
	КонецЕсли;

	МассивИзмененийВзаимодействия = ?(МассивИзменений = Неопределено, Новый Массив, МассивИзменений);	
	Если СтатусВзаимодействия = Перечисления.СтатусыВзаимодействий.Отменено Тогда
		НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			Для каждого Запись Из НаборЗаписей Цикл
				Если Запись.Рассмотрено Тогда
					РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Рассмотрено", Ложь, Истина);
					Запись.Рассмотрено = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;			
		Если НЕ ВзаимодействиеОбъект.Отменено Тогда
			РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Отменено", Истина, Ложь);
			ВзаимодействиеОбъект.Отменено = Истина;
			ВзаимодействиеОбъект.Записать();	
		КонецЕсли;				
	ИначеЕсли СтатусВзаимодействия = Перечисления.СтатусыВзаимодействий.Завершено Тогда		
		НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			Для каждого Запись Из НаборЗаписей Цикл
				Если НЕ Запись.Рассмотрено Тогда
					РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Рассмотрено", Истина, Ложь);
					Запись.Рассмотрено = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;			
		Если ВзаимодействиеОбъект.Отменено Тогда
			РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Отменено", Ложь, Истина);
			ВзаимодействиеОбъект.Отменено = Ложь;
		КонецЕсли;
		//<>, Басаргин (17.07.2018) {
		Если ТипЗнч(ВзаимодействиеОбъект) = Тип("ДокументОбъект.Встреча") 
				ИЛИ ТипЗнч(ВзаимодействиеОбъект) = Тип("ДокументОбъект.ТелефонныйЗвонок") Тогда
			ДатаОкончания = ТекущаяДата();
			РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "ДатаОкончания", ДатаОкончания, ВзаимодействиеОбъект.ДатаОкончания);	
			ВзаимодействиеОбъект.ДатаОкончания = ТекущаяДата();					
		КонецЕсли;
		ВзаимодействиеОбъект.Записать();	
		//<> }
	ИначеЕсли СтатусВзаимодействия = Перечисления.СтатусыВзаимодействий.Запланировано Тогда
		НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			Для каждого Запись Из НаборЗаписей Цикл
				Если Запись.Рассмотрено Тогда
					РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Рассмотрено", Ложь, Истина);
					Запись.Рассмотрено = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;			
		Если ВзаимодействиеОбъект.Отменено Тогда
			РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Отменено", Ложь, Истина);
			ВзаимодействиеОбъект.Отменено = Ложь;
			ВзаимодействиеОбъект.Записать();	
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтветственныйВзаимодействия = Неопределено И НЕ ВзаимодействиеОбъект.Ответственный = ОтветственныйВзаимодействия Тогда				
		РегистрыСведений.Взаимодействия.ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, "Ответственный", ОтветственныйВзаимодействия, ВзаимодействиеОбъект.Ответственный);					
		ВзаимодействиеОбъект.Ответственный = ОтветственныйВзаимодействия; 						
		ВзаимодействиеОбъект.Записать();				
	КонецЕсли;
	
	РегистрыСведений.Взаимодействия.ЗаписатьВзаимодействие(ВзаимодействиеОбъект);
	
	Если МассивИзменений = Неопределено И МассивИзмененийВзаимодействия.Количество() Тогда
		РегистрыСведений.Взаимодействия.ЗафиксироватьИзмененияВзаимодействия(МассивИзмененийВзаимодействия);
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьКонтактыЗаписи(Взаимодействие, СтруктураЗаписи) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтактыВзаимодействий.Контакт КАК Контакт,
	|	ПРЕДСТАВЛЕНИЕ(КонтактыВзаимодействий.Контакт) КАК КонтактПредставление
	|ИЗ
	|	РегистрСведений.КонтактыВзаимодействий КАК КонтактыВзаимодействий
	|ГДЕ
	|	КонтактыВзаимодействий.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Контакт = Неопределено;
	КонтактыСтрокой = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Контакт = Неопределено И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контакт) Тогда
			Контакт = ВыборкаДетальныеЗаписи.Контакт;		
		КонецЕсли;
		КонтактыСтрокой = КонтактыСтрокой + ВыборкаДетальныеЗаписи.КонтактПредставление + "; ";
	КонецЦикла;
	
	СтруктураЗаписи.Контакт = Контакт;
	СтруктураЗаписи.КонтактыСтрокой = ?(НЕ ПустаяСтрока(КонтактыСтрокой), Сред(КонтактыСтрокой, 1, СтрДлина(КонтактыСтрокой) - 2), "");
	
КонецПроцедуры

Функция ПолучитьГруппуОтветственного(Ответственный, ДатаВзаимодействия, СтруктураЗаписи = Неопределено, СписокОграничений = Неопределено) Экспорт 
	
	ГруппаОтветственного = Неопределено;
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда		
		//<828132>, Басаргин (22.06.2018) {
		//ГруппаОтветственного = Ответственный;
		Если СписокОграничений = Неопределено Тогда
			ГруппаОтветственного = Ответственный;			
		Иначе
			Если НЕ СписокОграничений.Найти(Ответственный) = Неопределено Тогда
				ГруппаОтветственного = Ответственный;							
			КонецЕсли;
		КонецЕслИ;
		//<828132> }				
	ИначеЕсли ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда		
		Если НЕ СтруктураЗаписи = Неопределено 
			И СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча
			И ЗначениеЗаполнено(СтруктураЗаписи.Офис) Тогда				
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СоставыГруппПользователейИсторияИзмений.ГруппаПользователей КАК Группа
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователейИсторияИзмений КАК СоставыГруппПользователейИсторияИзмений
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА &ДатаВзаимодействия >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
			|			ИНАЧЕ &ДатаВзаимодействия >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
			|					И &ДатаВзаимодействия < СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы
			|		КОНЕЦ
			|	И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь
			|
			|УПОРЯДОЧИТЬ ПО                      
			|	СоставыГруппПользователейИсторияИзмений.ГруппаПользователей";
			
			//<828132>, Басаргин (22.06.2018) {
			Если НЕ СписокОграничений = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь",
											"И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь И СоставыГруппПользователейИсторияИзмений.ГруппаПользователей В(&СписокОграничений)");
				Запрос.УстановитьПараметр("СписокОграничений", СписокОграничений);											
			КонецЕсли;
			//<828132> }
						
			Запрос.УстановитьПараметр("ДатаВзаимодействия", ДатаВзаимодействия);
			Запрос.УстановитьПараметр("Пользователь", Ответственный);
			
			РезультатЗапроса = Запрос.Выполнить();
			ГруппыПользователей = Новый Массив;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ГруппыПользователей.Добавить(ВыборкаДетальныеЗаписи.Группа);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СоответствиеГруппПользователейОфисам.ГруппаПользователей КАК Группа,
			|	СоответствиеГруппПользователейОфисам.Офис КАК Офис
			|ИЗ
			|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.Пользователь = &Пользователь)
			|			И (СоставыГруппПользователей.ГруппаПользователей = СоответствиеГруппПользователейОфисам.ГруппаПользователей)
			|			И (СоставыГруппПользователей.Используется)
			|ГДЕ
			|	СоответствиеГруппПользователейОфисам.ГруппаПользователей В ИЕРАРХИИ(&ГруппыПользователей)
			|	И СоответствиеГруппПользователейОфисам.Офис = &Офис
			|	И СоответствиеГруппПользователейОфисам.Проект = &Проект
			|
			|УПОРЯДОЧИТЬ ПО
			|	СоответствиеГруппПользователейОфисам.ГруппаПользователей.Наименование";
			
			Запрос.УстановитьПараметр("ГруппыПользователей", ГруппыПользователей);
			Запрос.УстановитьПараметр("Офис", СтруктураЗаписи.Офис);
			Запрос.УстановитьПараметр("Проект", СтруктураЗаписи.Проект);
			Запрос.УстановитьПараметр("Пользователь", Ответственный);
			
			РезультатЗапроса = Запрос.Выполнить();			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ГруппаОтветственного = ВыборкаДетальныеЗаписи.Группа;
			КонецЕсли;	
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|	СоставыГруппПользователейИсторияИзмений.ГруппаПользователей КАК Группа
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователейИсторияИзмений КАК СоставыГруппПользователейИсторияИзмений
			|ГДЕ
			|	ВЫБОР
			|			КОГДА СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА &ДатаВзаимодействия >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
			|			ИНАЧЕ &ДатаВзаимодействия >= СоставыГруппПользователейИсторияИзмений.ДатаВключенияВГруппу
			|					И &ДатаВзаимодействия < СоставыГруппПользователейИсторияИзмений.ДатаВыходаИзГруппы
			|		КОНЕЦ
			|	И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|	СоставыГруппПользователейИсторияИзмений.ГруппаПользователей";
			
			//<828132>, Басаргин (22.06.2018) {
			Если НЕ СписокОграничений = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь",
											"И СоставыГруппПользователейИсторияИзмений.Пользователь = &Пользователь И СоставыГруппПользователейИсторияИзмений.ГруппаПользователей В(&СписокОграничений)");
				Запрос.УстановитьПараметр("СписокОграничений", СписокОграничений);											
			КонецЕсли;
			//<828132> }					  
						
			Запрос.УстановитьПараметр("ДатаВзаимодействия", ДатаВзаимодействия);
			Запрос.УстановитьПараметр("Пользователь", Ответственный);
			
			РезультатЗапроса = Запрос.Выполнить();		
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ГруппаОтветственного = ВыборкаДетальныеЗаписи.Группа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаОтветственного) Тогда
		Пока ЗначениеЗаполнено(ГруппаОтветственного.Родитель) Цикл
			ГруппаОтветственного = ГруппаОтветственного.Родитель;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ГруппаОтветственного;
	
КонецФункции

Функция ПолучитьОфисГруппы(ГруппаОтветственного) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоответствиеГруппПользователейОфисам.Офис КАК Офис
	|ИЗ
	|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
	|ГДЕ
	|	СоответствиеГруппПользователейОфисам.ГруппаПользователей = &ГруппаПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Офис УБЫВ";
		
	Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаОтветственного);

	РезультатЗапроса = Запрос.Выполнить();		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Офис;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАктивностьВзаимодействия(СтруктураЗаписи) 
	
	ГруппаИпотечныеБрокеры = ТипЗнч(СтруктураЗаписи.ГруппаОтветственного) = Тип("СправочникСсылка.ГруппыПользователей")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗаписи.ГруппаОтветственного, "Наименование") = "Ипотечные брокеры";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаимодействия.Взаимодействие КАК Взаимодействие,
	|	Взаимодействия.АктивностьВзаимодействия КАК АктивностьВзаимодействия,
	|	Взаимодействия.Статус КАК Статус,
	|	Взаимодействия.ДатаВзаимодействия КАК ДатаВзаимодействия,
	|	Взаимодействия.Контакт КАК Контакт,
	|	Взаимодействия.КонтактыСтрокой КАК КонтактыСтрокой,
	|	Взаимодействия.Номер КАК Номер,
	|	Взаимодействия.ПериодВзаимодействия КАК ПериодВзаимодействия,
	|	Взаимодействия.Ответственный КАК Ответственный,
	|	Взаимодействия.ГруппаОтветственного КАК ГруппаОтветственного,
	|	Взаимодействия.ТипВзаимодействия КАК ТипВзаимодействия,
	|	Взаимодействия.Предмет КАК Предмет,
	|	Взаимодействия.Проект КАК Проект,
	|	Взаимодействия.Офис КАК Офис,
	|	Взаимодействия.МестоПроведенияВстречи КАК МестоПроведенияВстречи,
	|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
	|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса,
	|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
	|	Взаимодействия.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	ИСТИНА
	|	И Взаимодействия.ГруппаОтветственного = &ГруппаОтветственного
	|	И Взаимодействия.ТипВзаимодействия = &ТипВзаимодействия
	|	И Взаимодействия.Статус = &Статус
	|	И Взаимодействия.Предмет = &Предмет
	|	И Взаимодействия.Офис В(&Офис)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВзаимодействия";
	
	Запрос.УстановитьПараметр("ГруппаОтветственного", СтруктураЗаписи.ГруппаОтветственного);
	Запрос.УстановитьПараметр("Предмет", СтруктураЗаписи.Предмет);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВзаимодействий.Завершено);
	
	Если ГруппаИпотечныеБрокеры Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.ТипВзаимодействия = &ТипВзаимодействия", "");
	Иначе
		Запрос.УстановитьПараметр("ТипВзаимодействия", СтруктураЗаписи.ТипВзаимодействия);
	КонецЕсли;	
	
	//<828132>, Басаргин (28.06.2018) {
	Если СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок Тогда
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.ГруппаОтветственного = &ГруппаОтветственного", "");
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.ТипВзаимодействия = &ТипВзаимодействия", "");
		//Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.Статус = &Статус", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.Офис В(&Офис)", "");
	КонецЕсли;		
	//<828132> }
		
	Если НЕ СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча ИЛИ ГруппаИпотечныеБрокеры Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.Офис В(&Офис)", "");
	Иначе
		Офисы = Новый Массив;
		Если СтруктураЗаписи.Офис = "ОПО" ИЛИ СтруктураЗаписи.Офис = "Филиал" Тогда
			Офисы.Добавить("ОПО");
			Офисы.Добавить("Филиал");
		Иначе
			Офисы.Добавить(СтруктураЗаписи.Офис);
		КонецЕсли;
		Запрос.УстановитьПараметр("Офис", Офисы);		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТЗ = РезультатЗапроса.Выгрузить();	
		Если СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок Тогда
			//<828132>, Басаргин (05.09.2018) { //коммент
			//СтадияЗапроса = РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.ПолучитьПоследнее(СтруктураЗаписи.ДатаВзаимодействия, Новый Структура("Запрос", СтруктураЗаписи.Предмет));
			////СтадияЗапроса = РегистрыСведений.ИзменениеСтатусаСтадииЗапроса.ПолучитьПервое(НачалоДня(СтруктураЗаписи.ДатаВзаимодействия), Новый Структура("Запрос", СтруктураЗаписи.Предмет));						
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Взаимодействия.Взаимодействие КАК Взаимодействие,
			|	Взаимодействия.ДатаВзаимодействия КАК ДатаВзаимодействия
			|ИЗ
			|	РегистрСведений.Взаимодействия КАК Взаимодействия
			|ГДЕ
			|	Взаимодействия.АктивностьВзаимодействия = ЗНАЧЕНИЕ(Перечисление.ТипАктивностиВзаимодействия.Первичное)
			|	И Взаимодействия.Предмет = &Предмет
			|	И Взаимодействия.ГруппаОтветственного.Наименование В (""ГПТ"", ""Филиал"", ""Земля розница"", ""Центральный офис"", ""Коммерческая недвижимость"")
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаВзаимодействия";
			
			Запрос.УстановитьПараметр("Предмет", СтруктураЗаписи.Предмет);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ДатаВзаимодействияПервичного = ВыборкаДетальныеЗаписи.ДатаВзаимодействия;
			Иначе
				ДатаВзаимодействияПервичного = Дата(1, 1, 1);
			КонецЕсли;
			//<828132> }
		КонецЕсли;		
		Если СтруктураЗаписи.Взаимодействие = ТЗ[0].Взаимодействие Тогда
			Если ТЗ[0].АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Первичное Тогда
				Если ТЗ.Количество() > 1 Тогда
					Для й = 1 По ТЗ.Количество() - 1 Цикл
						_СтруктураЗаписи = СтруктураЗаписи();
						ЗаполнитьЗначенияСвойств(_СтруктураЗаписи, ТЗ[й]);
						АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Вторичное;
						Если НЕ АктивностьВзаимодействия = ТЗ[й].АктивностьВзаимодействия Тогда
							_СтруктураЗаписи.АктивностьВзаимодействия = АктивностьВзаимодействия;
							ВыполнитьЗаписьВРегистр(ТЗ[й].Взаимодействие, _СтруктураЗаписи);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Возврат Неопределено;
			Иначе
				Для й = 0 По ТЗ.Количество() - 1 Цикл
					Если ТЗ[й].Взаимодействие = СтруктураЗаписи.Взаимодействие Тогда
						Продолжить;
					КонецЕсли;
					_СтруктураЗаписи = СтруктураЗаписи();
					ЗаполнитьЗначенияСвойств(_СтруктураЗаписи, ТЗ[й]);
					АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Вторичное;
					Если НЕ АктивностьВзаимодействия = ТЗ[й].АктивностьВзаимодействия Тогда
						_СтруктураЗаписи.АктивностьВзаимодействия = АктивностьВзаимодействия;
						ВыполнитьЗаписьВРегистр(ТЗ[й].Взаимодействие, _СтруктураЗаписи);
					КонецЕсли;
				КонецЦикла;				
				Активность = Перечисления.ТипАктивностиВзаимодействия.Первичное;
				//<828132>, Басаргин (26.06.2018) {//коммент
				Если СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок И НЕ ГруппаИпотечныеБрокеры Тогда
					//Активность = ?(СтадияЗапроса.Стадия = Перечисления.СтадииЗапроса.Звонок, Активность, Перечисления.ТипАктивностиВзаимодействия.Вторичное);
					Активность = ?(НачалоДня(СтруктураЗаписи.ДатаВзаимодействия) <= НачалоДня(ДатаВзаимодействияПервичного) ИЛИ НЕ ЗначениеЗаполнено(ДатаВзаимодействияПервичного), Активность, Перечисления.ТипАктивностиВзаимодействия.Вторичное);
				КонецЕсли;				
				//<828132> }
				
				Возврат Активность;
			КонецЕсли;
		Иначе			
			//<828132>, Басаргин (11.09.2018) {
			Для й = 0 По ТЗ.Количество() - 1 Цикл
				Если ТЗ[й].Взаимодействие = СтруктураЗаписи.Взаимодействие Тогда
					Продолжить;
				КонецЕсли;
				_СтруктураЗаписи = СтруктураЗаписи();
				ЗаполнитьЗначенияСвойств(_СтруктураЗаписи, ТЗ[й]);
				АктивностьВзаимодействия = ?(й = 0, Перечисления.ТипАктивностиВзаимодействия.Первичное, Перечисления.ТипАктивностиВзаимодействия.Вторичное);				
				Если СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок И НЕ ГруппаИпотечныеБрокеры Тогда
					//Активность = ?(СтадияЗапроса.Стадия = Перечисления.СтадииЗапроса.Звонок, Активность, Перечисления.ТипАктивностиВзаимодействия.Вторичное);
					АктивностьВзаимодействия = ?(НачалоДня(_СтруктураЗаписи.ДатаВзаимодействия) <= НачалоДня(ДатаВзаимодействияПервичного) ИЛИ НЕ ЗначениеЗаполнено(ДатаВзаимодействияПервичного), АктивностьВзаимодействия, Перечисления.ТипАктивностиВзаимодействия.Вторичное);
				КонецЕсли;				
				Если НЕ АктивностьВзаимодействия = ТЗ[й].АктивностьВзаимодействия Тогда
					_СтруктураЗаписи.АктивностьВзаимодействия = АктивностьВзаимодействия;
					ВыполнитьЗаписьВРегистр(ТЗ[й].Взаимодействие, _СтруктураЗаписи);
				КонецЕсли;
			КонецЦикла;				
			//<828132> }						
			Если СтруктураЗаписи.АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Первичное Тогда
				Возврат Перечисления.ТипАктивностиВзаимодействия.Вторичное;
			КонецЕсли;				
		КонецЕсли;
	КонецЕсли;
			
КонецФункции

Процедура ЗаполнитьФормыОплатыСтрокой(СтруктураЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ЗапросФормыОплаты.ФормаОплаты) КАК ФормаОплатыПредставление
	|ИЗ
	|	Документ.Запрос.ФормыОплаты КАК ЗапросФормыОплаты
	|ГДЕ
	|	ЗапросФормыОплаты.Ссылка = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", СтруктураЗаписи.Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ФормыОплатыСтрокой = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ФормыОплатыСтрокой = ФормыОплатыСтрокой + ВыборкаДетальныеЗаписи.ФормаОплатыПредставление + "; ";
	КонецЦикла;
	
	СтруктураЗаписи.ФормыОплатыСтрокой = ?(НЕ ПустаяСтрока(ФормыОплатыСтрокой), Сред(ФормыОплатыСтрокой, 1, СтрДлина(ФормыОплатыСтрокой) - 2), "");
	
КонецПроцедуры

Функция ПолучитьОфисГруппыПоПроекту(Ответственный, Проект, СписокВыбора = Неопределено, ГруппыПользователя = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоответствиеГруппПользователейОфисам.Офис КАК Офис,
	|	СоответствиеГруппПользователейОфисам.ГруппаПользователей КАК ГруппаПользователей
	|ИЗ
	|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
	|ГДЕ
	|	СоответствиеГруппПользователейОфисам.ГруппаПользователей В(&ГруппаПользователей)
	|	И СоответствиеГруппПользователейОфисам.Проект = &Проект";
	
	Запрос.УстановитьПараметр("ГруппаПользователей", ПолучитьГруппуПользователяВторогоУровня(Ответственный)); //?(Не ЗначениеЗаполнено(ГруппаПользователей), ПолучитьГруппуПользователяВторогоУровня(Ответственный), ГруппаПользователей)
	Запрос.УстановитьПараметр("Проект", Проект);

	РезультатЗапроса = Запрос.Выполнить();		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Офис;
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 0 Тогда		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ СписокВыбора = Неопределено И СписокВыбора.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Офис) = Неопределено Тогда
				СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Офис);
			КонецЕсли;
			Если НЕ ГруппыПользователя = Неопределено И ГруппыПользователя.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ГруппаПользователей) = Неопределено Тогда
				ГруппыПользователя.Добавить(ВыборкаДетальныеЗаписи.ГруппаПользователей);
			КонецЕсли;			
		КонецЦикла;				
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьГруппуОфисаПоПроекту(Офис, Проект, СписокВыбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоответствиеГруппПользователейОфисам.ГруппаПользователей КАК ГруппаПользователей
	|ИЗ
	|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
	|ГДЕ
	|	СоответствиеГруппПользователейОфисам.Проект = &Проект
	|	И СоответствиеГруппПользователейОфисам.Офис = &Офис";
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	СоответствиеГруппПользователейОфисам.Офис УБЫВ";
		
	Запрос.УстановитьПараметр("Офис", Офис);
	Запрос.УстановитьПараметр("Проект", Проект);

	РезультатЗапроса = Запрос.Выполнить();		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.ГруппаПользователей;
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписи.Количество() > 0 Тогда		
		Если НЕ СписокВыбора = Неопределено Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.ГруппаПользователей);
			КонецЦикла;				
		КонецЕсли;	
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьГруппуПользователяВторогоУровня(Ответственный) Экспорт
	
	ГруппыОтветственного = Новый Массив;
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Если ЗначениеЗаполнено(Ответственный.Родитель) И НЕ ЗначениеЗаполнено(Ответственный.Родитель.Родитель) Тогда
			ГруппыОтветственного.Добавить(Ответственный);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГруппыПользователейСостав.Ссылка КАК Группа
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Пользователь = &Пользователь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Группа";			
		
		Запрос.УстановитьПараметр("Пользователь", Ответственный);
		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл						
			Группа = ВыборкаДетальныеЗаписи.Группа;			
			Пока ЗначениеЗаполнено(Группа.Родитель) Цикл
				Если НЕ ЗначениеЗаполнено(Группа.Родитель.Родитель) Тогда
					ГруппыОтветственного.Добавить(Группа);
					Прервать;
				КонецЕсли;
				Группа = Группа.Родитель;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;                                                             
	
	Если ГруппыОтветственного.Количество() Тогда
		Возврат ГруппыОтветственного;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерхнийУровеньГруппы(ГруппаИерархии, ВерхняяГруппа = Неопределено) Экспорт

    Если ГруппаИерархии.Уровень() <> 0 Тогда        
        ВерхняяГруппа = ПолучитьВерхнийУровеньГруппы(ГруппаИерархии.Родитель);        
        Если ВерхняяГруппа.Уровень() = 0 Тогда        
            Возврат ВерхняяГруппа;        
        КонецЕсли;         
    Иначе        
        Возврат ГруппаИерархии;        
    КонецЕсли;    
    
КонецФункции

Функция ПолучитьВторойУровеньГруппы(ГруппаИерархии, ВерхняяГруппа = Неопределено) Экспорт

    Если ГруппаИерархии.Уровень() <> 1 Тогда        
        ВерхняяГруппа = ПолучитьВторойУровеньГруппы(ГруппаИерархии.Родитель);        
        Если ВерхняяГруппа.Уровень() = 1 Тогда        
            Возврат ВерхняяГруппа;        
        КонецЕсли;         
    Иначе        
        Возврат ГруппаИерархии;        
    КонецЕсли;    
    
КонецФункции

Процедура ДобавитьИзменениеВзаимодействияВМассив(МассивИзмененийВзаимодействия, Взаимодействие, Реквизит, НовоеЗначение, СтароеЗначение) Экспорт	
	МассивИзмененийВзаимодействия.Добавить(Новый Структура("Взаимодействие, Реквизит, НовоеЗначение, СтароеЗначение", Взаимодействие, Реквизит, НовоеЗначение, СтароеЗначение));	
КонецПроцедуры

Процедура ЗафиксироватьИзмененияВзаимодействия(МассивИзмененийВзаимодействия) Экспорт
	
	Для каждого Изменение Из МассивИзмененийВзаимодействия Цикл
		Попытка
			РегистрыСведений.ИзмененияВзаимодействий.ЗаписатьИзменениеВРегистр(Изменение.Взаимодействие, ТекущаяДата(), Пользователи.ТекущийПользователь(), Изменение.Реквизит, Изменение.НовоеЗначение, Изменение.СтароеЗначение);	
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОтветственногоИзИзмененияВзаимодействий(Взаимодействие) Экспорт

	ОтветственныйВзаимодействия = Неопределено;
	
	Набор = РегистрыСведений.ИзмененияВзаимодействий.СоздатьНаборЗаписей();
	Набор.Отбор.Взаимодействие.Установить(Взаимодействие);
	Набор.Прочитать();
	
	Если Набор.Количество() Тогда		
		ТаблицаНабор = Набор.Выгрузить();
		ТаблицаНабор.Сортировать("Период УБЫВ");		
		Для каждого Строка Из ТаблицаНабор Цикл
			Если Строка.Реквизит = "Ответственный" Тогда
				ОтветственныйВзаимодействия = Строка.СтароеЗначение; 
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат ОтветственныйВзаимодействия;
	
КонецФункции

//<865768>, Басаргин (04.09.2018) {
Функция ПолучитьСтатусВзаимодействия(Взаимодействие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаимодействия.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Статус;
 	КонецЕсли;	
	
КонецФункции

Функция ПолучитьАктуальнуюСтадиюЗапроса(Предмет, Взаимодействие = Неопределено, ДатаВзаимодействия = Неопределено, ТолькоЗаполнено = Ложь, ЗаполненыСтатусИРасшифровка = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
	|	Взаимодействия.Взаимодействие КАК Взаимодействие
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Предмет = &Предмет
	|	И Взаимодействия.ДатаВзаимодействия < &ДатаВзаимодействия
	|	И НЕ Взаимодействия.СтадияЗапроса = ЗНАЧЕНИЕ(Перечисление.СтадииЗапроса.ПустаяСсылка)
	|	И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)
	|	И НЕ Взаимодействия.РасшифровкаСтатусаЗапроса = ЗНАЧЕНИЕ(Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка)
	|	И Взаимодействия.Взаимодействие <> &Взаимодействие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ";
	
	Если НЕ ЗаполненыСтатусИРасшифровка Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Взаимодействия.РасшифровкаСтатусаЗапроса = ЗНАЧЕНИЕ(Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка)", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Взаимодействие) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Взаимодействия.Взаимодействие <> &Взаимодействие", "");
	Иначе
		Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);		
	КонецЕсли;
			
	Запрос.Текст = ?(НЕ ТолькоЗаполнено, СтрЗаменить(Запрос.Текст, "И НЕ Взаимодействия.СтадияЗапроса = ЗНАЧЕНИЕ(Перечисление.СтадииЗапроса.ПустаяСсылка)", ""), Запрос.Текст);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ДатаВзаимодействия", ?(Не ЗначениеЗаполнено(ДатаВзаимодействия), ТекущаяДата(), ДатаВзаимодействия));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтадияЗапроса;
 	КонецЕсли;
	
	Возврат Перечисления.СтадииЗапроса.Звонок;
	
КонецФункции

Функция ПолучитьАктуальныйСтатусЗапроса(Предмет, ТолькоЗаполнено = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Предмет = &Предмет
	|	И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ";
	
	Запрос.Текст = ?(НЕ ТолькоЗаполнено, СтрЗаменить(Запрос.Текст, "И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)", ""), Запрос.Текст);
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтатусЗапроса;
 	КонецЕсли;
	                                   	
КонецФункции

Функция ПолучитьАктуальнуюРасшифровкуСтатусаЗапроса(Предмет, ТолькоЗаполнено = Ложь) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Предмет = &Предмет
	|	И НЕ Взаимодействия.РасшифровкаСтатусаЗапроса = ЗНАЧЕНИЕ(Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка)	
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ";
	
	Запрос.Текст = ?(НЕ ТолькоЗаполнено, СтрЗаменить(Запрос.Текст, "И НЕ Взаимодействия.РасшифровкаСтатусаЗапроса = ЗНАЧЕНИЕ(Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка)", ""), Запрос.Текст);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.РасшифровкаСтатусаЗапроса;
 	КонецЕсли;
	
КонецФункции

Функция ПолучитьАктуальныеПараметрыЗапроса(Предмет, ТолькоЗаполненные = Истина) Экспорт 
	
	АктуальныеПараметры = Новый Структура("СтадияЗапроса, СтатусЗапроса, РасшифровкаСтатусаЗапроса, Взаимодействие");
			
	Запрос = Новый Запрос;
	Если ТолькоЗаполненные Тогда		
		Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
		//|	Взаимодействия.Взаимодействие КАК Взаимодействие
		//|ПОМЕСТИТЬ ВТ_Стадия
		//|ИЗ
		//|	РегистрСведений.Взаимодействия КАК Взаимодействия
		//|ГДЕ
		//|	Взаимодействия.Предмет = &Предмет
		//|	И НЕ Взаимодействия.СтадияЗапроса = ЗНАЧЕНИЕ(Перечисление.СтадииЗапроса.ПустаяСсылка)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	Взаимодействия.Взаимодействие КАК Взаимодействие,
		//|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса
		//|ПОМЕСТИТЬ ВТ_Статус
		//|ИЗ
		//|	РегистрСведений.Взаимодействия КАК Взаимодействия
		//|ГДЕ
		//|	Взаимодействия.Предмет = &Предмет
		//|	И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	Взаимодействия.Взаимодействие КАК Взаимодействие,
		//|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса
		//|ПОМЕСТИТЬ ВТ_РасшифровкаСтатуса
		//|ИЗ
		//|	РегистрСведений.Взаимодействия КАК Взаимодействия
		//|ГДЕ
		//|	Взаимодействия.Предмет = &Предмет
		//|	И НЕ Взаимодействия.РасшифровкаСтатусаЗапроса = ЗНАЧЕНИЕ(Справочник.ПричиныСтатусовЗапроса.ПустаяСсылка)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	ВТ_Стадия.СтадияЗапроса КАК СтадияЗапроса,
		//|	ВТ_Стадия.Взаимодействие КАК Взаимодействие,
		//|	ВТ_Статус.СтатусЗапроса КАК СтатусЗапроса,
		//|	ВТ_РасшифровкаСтатуса.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса
		//|ИЗ
		//|	ВТ_Стадия КАК ВТ_Стадия
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статус КАК ВТ_Статус
		//|		ПО ВТ_Стадия.Взаимодействие = ВТ_Статус.Взаимодействие
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасшифровкаСтатуса КАК ВТ_РасшифровкаСтатуса
		//|		ПО ВТ_Стадия.Взаимодействие = ВТ_РасшифровкаСтатуса.Взаимодействие";	

		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		//|	Взаимодействия.Взаимодействие КАК Взаимодействие,
		//|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса,
		//|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
		//|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса
		//|ИЗ
		//|	РегистрСведений.Взаимодействия КАК Взаимодействия
		//|ГДЕ
		//|	Взаимодействия.Предмет = &Предмет
		//|	И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ";
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
		|	Взаимодействия.Взаимодействие КАК Взаимодействие
		|ПОМЕСТИТЬ ВТ_Стадия
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Предмет = &Предмет
		|	И НЕ Взаимодействия.СтадияЗапроса = ЗНАЧЕНИЕ(Перечисление.СтадииЗапроса.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Взаимодействия.Взаимодействие КАК Взаимодействие,
		|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса,
		|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
		|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса
		|ПОМЕСТИТЬ ВТ_СтатусРасшифровкаСтатуса
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Предмет = &Предмет
		|	И НЕ Взаимодействия.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыЗапроса.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_СтатусРасшифровкаСтатуса.Взаимодействие, ВТ_Стадия.Взаимодействие) КАК Взаимодействие,
		|	ВТ_СтатусРасшифровкаСтатуса.СтатусЗапроса КАК СтатусЗапроса,
		|	ВТ_СтатусРасшифровкаСтатуса.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
		|	ЕСТЬNULL(ВТ_СтатусРасшифровкаСтатуса.СтадияЗапроса, ВТ_Стадия.СтадияЗапроса) КАК СтадияЗапроса
		|ИЗ
		|	ВТ_СтатусРасшифровкаСтатуса КАК ВТ_СтатусРасшифровкаСтатуса
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Стадия КАК ВТ_Стадия
		|		ПО (ИСТИНА)";		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
		|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса,
		|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
		|	Взаимодействия.Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Предмет = &Предмет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаимодействия.ДатаПоследнегоИзменения УБЫВ";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(АктуальныеПараметры, ВыборкаДетальныеЗаписи);
 	КонецЕсли;
	
	Возврат АктуальныеПараметры;                                                                                                                                           	
	
КонецФункции

Функция ПолучитьАктуальныеПараметрыВзаимодействия(Взаимодействие) Экспорт 
	
	АктуальныеПараметры = Новый Структура("СтадияЗапроса, СтатусЗапроса, РасшифровкаСтатусаЗапроса, Предмет, Взаимодействие, Статус");
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
	|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса,
	|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
	|	Взаимодействия.Взаимодействие КАК Взаимодействие,
	|	Взаимодействия.Предмет КАК Предмет
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Взаимодействие = &Взаимодействие";
		
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(АктуальныеПараметры, ВыборкаДетальныеЗаписи);
 	КонецЕсли;
	
	Возврат АктуальныеПараметры;                                                                                                                                           	
	
КонецФункции

Функция ПолучитьНачальноеЗаполнениеСтадииСтатусаЗапроса(Предмет, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала) Экспорт
		
	АктуальныеПараметрыЗапроса = РегистрыСведений.Взаимодействия.ПолучитьАктуальныеПараметрыЗапроса(Предмет);
	
	СтадияЗапроса = АктуальныеПараметрыЗапроса.СтадияЗапроса; //РегистрыСведений.Взаимодействия.ПолучитьАктуальнуюСтадию(Предмет);
	СтатусЗапроса = АктуальныеПараметрыЗапроса.СтатусЗапроса; //РегистрыСведений.Взаимодействия.ПолучитьАктуальныйСтатус(Предмет);
	РасшифровкаСтатусаЗапроса = Неопределено;
	
	Если СтатусЗапроса = Перечисления.СтатусыЗапроса.Отказ
		И ?(ЭтоМенеджерГПТ, СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) Тогда				
		СтатусЗапроса = Перечисления.СтатусыЗапроса.Отказ;
		РасшифровкаСтатусаЗапроса = Неопределено;		
	ИначеЕсли СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе
		И ?(ЭтоМенеджерГПТ, СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок, НЕ СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка) Тогда
		СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе;		
		РасшифровкаСтатусаЗапроса = Неопределено;
	Иначе
		СтатусЗапроса = СтатусЗапроса;
		РасшифровкаСтатусаЗапроса = АктуальныеПараметрыЗапроса.РасшифровкаСтатусаЗапроса; //РегистрыСведений.Взаимодействия.ПолучитьАктуальнуюРасшифровкуСтатуса(Предмет);			
	КонецЕсли;
	
	Возврат Новый Структура("СтадияЗапроса, СтатусЗапроса, РасшифровкаСтатусаЗапроса", СтадияЗапроса, СтатусЗапроса, РасшифровкаСтатусаЗапроса);
	
КонецФункции

Процедура ЗаписатьЗаявкуНаСделку(ЗаявкаНаСделку, ВыполнитьПолныйПересчет = Истина) Экспорт
	
	Если НЕ ТипЗнч(ЗаявкаНаСделку) = Тип("ДокументОбъект.ЗаявкаНаСделку") Тогда
		Возврат;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураЗаписи = СтруктураЗаписи();
	СтруктураЗаписи.ПериодВзаимодействия = ЗаявкаНаСделку.Дата;
	СтруктураЗаписи.Номер = ЗаявкаНаСделку.Номер;
	СтруктураЗаписи.ДатаВзаимодействия = ЗаявкаНаСделку.Дата;	
	СтруктураЗаписи.ДатаПоследнегоИзменения = ЗаявкаНаСделку.Дата; 	
	СтруктураЗаписи.Ответственный = ЗаявкаНаСделку.Ответственный;
	СтруктураЗаписи.Предмет = ЗаявкаНаСделку.ДокументОснование;
	СтруктураЗаписи.Проект = ЗаявкаНаСделку.Проект;
	СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Сделка; 		
	СтруктураЗаписи.АктивностьВзаимодействия = Неопределено;	
	СтруктураЗаписи.Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗаписи.Предмет, "Клиент");
		
	СписокОграничений = Новый Массив;
	СписокОграничений.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Филиал", Истина));
	СписокОграничений.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Центральный офис", Истина));
	
	СтруктураЗаписи.ГруппаОтветственного = ПолучитьГруппуОтветственного(СтруктураЗаписи.Ответственный, СтруктураЗаписи.ДатаВзаимодействия, СтруктураЗаписи, СписокОграничений);
	
	ПересчетПриПометкеУдаления = ЗаявкаНаСделку.ДополнительныеСвойства.Свойство("ПересчетПриПометкеУдаления");
	
	ВыполнитьЗаписьВРегистр(ЗаявкаНаСделку.Ссылка, СтруктураЗаписи, ПересчетПриПометкеУдаления);
	
	Если ВыполнитьПолныйПересчет Тогда
		ПересчитатьЗаписиПоЗапросу(СтруктураЗаписи.Предмет);	
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьСделку(Сделка, ВыполнитьПолныйПересчет = Истина) Экспорт
		
	Если НЕ ТипЗнч(Сделка) = Тип("СправочникОбъект.Сделки") Тогда
		Возврат;		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураЗаписи = СтруктураЗаписи();
	СтруктураЗаписи.ПериодВзаимодействия = Сделка.ДатаРасторженияСделки;
	СтруктураЗаписи.Номер = Сделка.Код;
	СтруктураЗаписи.ДатаВзаимодействия = Сделка.ДатаРасторженияСделки;	
	СтруктураЗаписи.ДатаПоследнегоИзменения = Сделка.ДатаРасторженияСделки;	
	
	РеквизитыЗаявиНаСделку = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сделка.ЗаявкаНаСделку, "Ответственный, ДокументОснование, Проект");	
	СтруктураЗаписи.Ответственный = РеквизитыЗаявиНаСделку.Ответственный;
	СтруктураЗаписи.Предмет = РеквизитыЗаявиНаСделку.ДокументОснование;
	СтруктураЗаписи.Проект = РеквизитыЗаявиНаСделку.Проект;
	
	СтруктураЗаписи.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Расторжение; 		
	СтруктураЗаписи.АктивностьВзаимодействия = Неопределено;	
	
	СтруктураЗаписи.Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураЗаписи.Предмет, "Клиент");
	
	СписокОграничений = Новый Массив;
	СписокОграничений.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Филиал", Истина));
	СписокОграничений.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Центральный офис", Истина));
	
	СтруктураЗаписи.ГруппаОтветственного = ПолучитьГруппуОтветственного(СтруктураЗаписи.Ответственный, СтруктураЗаписи.ДатаВзаимодействия, СтруктураЗаписи, СписокОграничений);
	
	ПересчетПриПометкеУдаления = Сделка.ДополнительныеСвойства.Свойство("ПересчетПриПометкеУдаления");
	
	ВыполнитьЗаписьВРегистр(Сделка.Ссылка, СтруктураЗаписи, ПересчетПриПометкеУдаления);
	
	Если ВыполнитьПолныйПересчет Тогда
		ПересчитатьЗаписиПоЗапросу(СтруктураЗаписи.Предмет);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтадиюСтатусРасшифровкуСтатуса(Взаимодействие) Экспорт
	
	ГруппыВстречи = Новый Массив;
	ГруппыВстречи.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Филиал", Истина));
	ГруппыВстречи.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Земля розница", Истина));
	ГруппыВстречи.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Центральный офис", Истина));
	ГруппыВстречи.Добавить(Справочники.ГруппыПользователей.НайтиПоНаименованию("Коммерческая недвижимость", Истина));
	
	Если Взаимодействие.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Расторжение Тогда
		Взаимодействие.СтадияЗапроса = Перечисления.СтадииЗапроса.Переговоры;
		Взаимодействие.СтатусЗапроса = Перечисления.СтатусыЗапроса.Отказ; 
		Взаимодействие.РасшифровкаСтатусаЗапроса = Справочники.ПричиныСтатусовЗапроса.РасторжениеСделки;
	ИначеЕсли Взаимодействие.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Сделка Тогда
		Взаимодействие.СтадияЗапроса = Перечисления.СтадииЗапроса.Сделка;
		Взаимодействие.СтатусЗапроса = Перечисления.СтатусыЗапроса.Завершено; 
		Взаимодействие.РасшифровкаСтатусаЗапроса = Неопределено; 
	ИначеЕсли Взаимодействие.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.Встреча
		И Взаимодействие.Статус = Перечисления.СтатусыВзаимодействий.Завершено
		И Взаимодействие.АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Первичное
		И НЕ ГруппыВстречи.Найти(Взаимодействие.ГруппаОтветственного) = Неопределено Тогда
		Взаимодействие.СтадияЗапроса = Перечисления.СтадииЗапроса.Переговоры; 
		Взаимодействие.ДатаПоследнегоИзменения = Взаимодействие.ДатаВзаимодействия;
	ИначеЕсли Взаимодействие.ТипВзаимодействия = Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок
		И Взаимодействие.Статус = Перечисления.СтатусыВзаимодействий.Завершено
		И Взаимодействие.АктивностьВзаимодействия = Перечисления.ТипАктивностиВзаимодействия.Первичное
		И Взаимодействие.ГруппаОтветственного = Справочники.ГруппыПользователей.НайтиПоНаименованию("ГПТ", Истина) Тогда
		Взаимодействие.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок;
		Взаимодействие.ДатаПоследнегоИзменения = Взаимодействие.ДатаВзаимодействия;		
	Иначе
 		Взаимодействие.СтадияЗапроса = ПолучитьАктуальнуюСтадиюЗапроса(Взаимодействие.Предмет, Взаимодействие.Взаимодействие, Взаимодействие.ДатаВзаимодействия);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьПараметрыЗапросаЛинейный(Взаимодействие) Экспорт
	
	АктуальныеПараметрыЗапроса = ПолучитьАктуальныеПараметрыЗапроса(Взаимодействие.Предмет);
	
	НаборЗаписей = РегистрыСведений.ПараметрыЗапросаЛинейный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Взаимодействие.Предмет);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.Стадия = АктуальныеПараметрыЗапроса.СтадияЗапроса; 
			Запись.Статус = АктуальныеПараметрыЗапроса.СтатусЗапроса; 
			Запись.РасшифровкаСтатуса = АктуальныеПараметрыЗапроса.РасшифровкаСтатусаЗапроса; 
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьУдалениеЗаписиСПересчетом(Взаимодействие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Взаимодействие = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(Взаимодействие);		
	НаборЗаписей.Прочитать();		
	Если Не НаборЗаписей.Количество() Тогда
		Возврат;
	КонецЕсли;		
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Предмет = Неопределено;
	Если ТипЗнч(Взаимодействие) = Тип("ДокументСсылка.ЗаявкаНаСделку") Тогда
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ДокументОснование");	
	ИначеЕсли ТипЗнч(Взаимодействие) = Тип("СправочникСсылка.Сделки") Тогда
		ЗаявкаНаСделку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Взаимодействие, "ЗаявкаНаСделку");
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаСделку, "ДокументОснование");
	Иначе			
		Предмет = Взаимодействия.СтруктураРеквизитовВзаимодействия(Взаимодействие).Предмет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат;	
	КонецЕсли;
	
	ПересчитатьЗаписиПоЗапросу(Предмет);
	
КонецПроцедуры

Процедура ПересчитатьЗаписиПоЗапросу(Предмет, ПересчитыватьДляСделок = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();	
	Попытка			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Взаимодействия.Взаимодействие КАК Взаимодействие
		|ИЗ
		|	РегистрСведений.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Предмет = &Предмет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Взаимодействия.ДатаВзаимодействия";
		
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
			ВзаимодействиеОбъект = ВыборкаДетальныеЗаписи.Взаимодействие.ПолучитьОбъект();
			Если ВзаимодействиеОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВзаимодействиеОбъект.ДополнительныеСвойства.Вставить("ПересчетПриПометкеУдаления", Истина);
			Если ТипЗнч(ВзаимодействиеОбъект) = Тип("ДокументОбъект.ЗаявкаНаСделку") Тогда
				ЗаписатьЗаявкуНаСделку(ВзаимодействиеОбъект, ПересчитыватьДляСделок);	
			ИначеЕсли ТипЗнч(ВзаимодействиеОбъект) = Тип("СправочникОбъект.Сделки") Тогда
				ЗаписатьСделку(ВзаимодействиеОбъект, ПересчитыватьДляСделок);
			Иначе				
				ЗаписатьВзаимодействие(ВзаимодействиеОбъект);
			КонецЕсли;			
		КонецЦикла;
		
		АктуальныеПараметрыЗапроса = ПолучитьАктуальныеПараметрыЗапроса(Предмет);
		
		НаборЗаписей = РегистрыСведений.ПараметрыЗапросаЛинейный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Предмет);		
		НаборЗаписей.Прочитать();		
		Если НаборЗаписей.Количество() Тогда
			Для каждого Запись Из НаборЗаписей Цикл				
				Запись.Статус = АктуальныеПараметрыЗапроса.СтатусЗапроса;
				Запись.РасшифровкаСтатуса = АктуальныеПараметрыЗапроса.РасшифровкаСтатусаЗапроса;
				Запись.Стадия = АктуальныеПараметрыЗапроса.СтадияЗапроса;				
			КонецЦикла;
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Статус = АктуальныеПараметрыЗапроса.СтатусЗапроса;
			НоваяЗапись.РасшифровкаСтатуса = АктуальныеПараметрыЗапроса.РасшифровкаСтатусаЗапроса;
			НоваяЗапись.Стадия = АктуальныеПараметрыЗапроса.СтадияЗапроса;						
		КонецЕсли;					
		НаборЗаписей.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение	
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение Предмет;
	КонецПопытки;
		
КонецПроцедуры

Процедура ПодготовитьВзаимодействияДляОткрытия(Взаимодействие, ЭтоМенеджерГПТ, ЭтоМенеджерФилиала, ПараметрыЗаписи) Экспорт

	ВзаимодействияДляОткрытия = Новый Массив;
	ПараметрыНовогоВзаимодействия = Неопределено;
	ПараметрыОткрытияВзаимодействий = Неопределено;
	ПараметрыТекущегоВзаимодействия = Новый Структура("Предмет, Проект, СтадияЗапроса, СтатусЗапроса, РасшифровкаСтатусаЗапроса, ДатаПоследнегоИзменения, Контакт, Статус");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаимодействия.Предмет КАК Предмет,
	|	Взаимодействия.СтадияЗапроса КАК СтадияЗапроса,
	|	Взаимодействия.СтатусЗапроса КАК СтатусЗапроса,
	|	Взаимодействия.РасшифровкаСтатусаЗапроса КАК РасшифровкаСтатусаЗапроса,
	|	Взаимодействия.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	Взаимодействия.Проект КАК Проект,
	|	Взаимодействия.Контакт КАК Контакт,
	|	Взаимодействия.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие", Взаимодействие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыТекущегоВзаимодействия, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Предмет = ПараметрыТекущегоВзаимодействия.Предмет;
	Проект = ПараметрыТекущегоВзаимодействия.Проект;	
	ДанныеУчастника = Новый Массив;
	ДанныеУчастника.Добавить(Новый Структура("Контакт, КакСвязаться, Представление", ПараметрыТекущегоВзаимодействия.Контакт, "", Строка(ПараметрыТекущегоВзаимодействия.Контакт)));
	//ДанныеУчастника = Новый Структура("Контакт, КакСвязаться, Представление", ПараметрыТекущегоВзаимодействия.Контакт, "", Строка(ПараметрыТекущегоВзаимодействия.Контакт));
	
	Если ЭтоМенеджерГПТ И ПараметрыТекущегоВзаимодействия.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок Тогда		
		Если НЕ (ЗначениеЗаполнено(Проект) 
			И ПараметрыТекущегоВзаимодействия.Статус = Перечисления.СтатусыВзаимодействий.Завершено 
			И ПараметрыТекущегоВзаимодействия.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок
			И ПараметрыТекущегоВзаимодействия.СтатусЗапроса = Перечисления.СтатусыЗапроса.ВРаботе) Тогда		
			Возврат;	
		КонецЕсли;
		
		ГруппаЗемляОпт = Справочники.Проекты.НайтиПоНаименованию("Земельные участки - опт");
		ГруппаЗемляРозница = Справочники.Проекты.НайтиПоНаименованию("Земельные участки - розница");
		
		Если НЕ (Проект.ПринадлежитЭлементу(ГруппаЗемляОпт)) Тогда //ИЛИ Проект.ПринадлежитЭлементу(ГруппаЗемляРозница)
			Если НЕ ПараметрыТекущегоВзаимодействия.РасшифровкаСтатусаЗапроса = Справочники.ПричиныСтатусовЗапроса.НазначенаВстреча Тогда					
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СоставыГруппПользователей.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ ВТ_ПользователиГПТ
				|ИЗ
				|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
				|ГДЕ
				|	СоставыГруппПользователей.ГруппаПользователей.Наименование = ""ГПТ""
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Взаимодействия.Взаимодействие КАК Взаимодействие
				|ИЗ
				|	РегистрСведений.Взаимодействия КАК Взаимодействия
				|ГДЕ
				|	Взаимодействия.Предмет = &Предмет
				|	И Взаимодействия.ТипВзаимодействия = &ТипВзаимодействия
				|	И Взаимодействия.Статус = &Статус
				|	И ВЫБОР
				|			КОГДА НЕ Взаимодействия.Взаимодействие ССЫЛКА Справочник.Сделки
				|				ТОГДА Взаимодействия.Взаимодействие.Автор В
				|						(ВЫБРАТЬ
				|							ВТ_ПользователиГПТ.Пользователь КАК Пользователь
				|						ИЗ
				|							ВТ_ПользователиГПТ КАК ВТ_ПользователиГПТ)
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ";
				
				Запрос.УстановитьПараметр("Предмет", Предмет);
				Запрос.УстановитьПараметр("ТипВзаимодействия", Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок);
				Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВзаимодействий.Запланировано);
				Запрос.УстановитьПараметр("ГруппаОтветственного", Справочники.ГруппыПользователей.НайтиПоНаименованию("ГПТ"));
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ВзаимодействияДляОткрытия.Добавить(ВыборкаДетальныеЗаписи.Взаимодействие);
				КонецЦикла;
				
				Если НЕ ВзаимодействияДляОткрытия.Количество() Тогда									
					ПараметрыНовогоВзаимодействия = Новый Структура("Предмет, Ответственный, ДанныеУчастника", Предмет, Пользователи.ТекущийПользователь(), ДанныеУчастника);	
				КонецЕсли;
				ПараметрыОткрытияВзаимодействий = Новый Структура("ФормаВзаимодействия, ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия", "Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия);
			ИначеЕсли ПараметрыТекущегоВзаимодействия.РасшифровкаСтатусаЗапроса = Справочники.ПричиныСтатусовЗапроса.НазначенаВстреча Тогда					
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СоставыГруппПользователей.Пользователь КАК Пользователь
				|ПОМЕСТИТЬ ВТ_ПользователиГПТ
				|ИЗ
				|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
				|ГДЕ
				|	СоставыГруппПользователей.ГруппаПользователей.Наименование = ""ГПТ""
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Взаимодействия.Взаимодействие КАК Взаимодействие
				|ИЗ
				|	РегистрСведений.Взаимодействия КАК Взаимодействия
				|ГДЕ
				|	Взаимодействия.Предмет = &Предмет
				|	И Взаимодействия.ТипВзаимодействия = &ТипВзаимодействия
				|	И Взаимодействия.Статус = &Статус
				|	И ВЫБОР
				|			КОГДА НЕ Взаимодействия.Взаимодействие ССЫЛКА Справочник.Сделки
				|				ТОГДА Взаимодействия.Взаимодействие.Автор В
				|						(ВЫБРАТЬ
				|							ВТ_ПользователиГПТ.Пользователь КАК Пользователь
				|						ИЗ
				|							ВТ_ПользователиГПТ КАК ВТ_ПользователиГПТ)
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ";
				
				Запрос.УстановитьПараметр("Предмет", Предмет);
				Запрос.УстановитьПараметр("ТипВзаимодействия", Перечисления.ТипыВзаимодействий.Встреча);
				Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВзаимодействий.Запланировано);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ВзаимодействияДляОткрытия.Добавить(ВыборкаДетальныеЗаписи.Взаимодействие);
				КонецЦикла;
				
				Если НЕ ВзаимодействияДляОткрытия.Количество() Тогда						
					Офис = "";
					ВидНедвижимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ВидНедвижимости");
					Если ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЖилаяНедвижимость Тогда
						Офис = "Филиал";	
					ИначеЕсли ВидНедвижимости = Перечисления.ВидыОбъектовНедвижимости.ЗемельныйУчасток Тогда
						Офис = "Экскурсия";	
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	СоответствиеГруппПользователейОфисам.ГруппаПользователей КАК Ответственный
					|ИЗ
					|	РегистрСведений.СоответствиеГруппПользователейОфисам КАК СоответствиеГруппПользователейОфисам
					|ГДЕ
					|	СоответствиеГруппПользователейОфисам.Офис = &Офис
					|	И СоответствиеГруппПользователейОфисам.Проект = &Проект
					|	И СоответствиеГруппПользователейОфисам.ГруппаПользователей В ИЕРАРХИИ(&ГруппаРодитель)
					|	И НЕ СоответствиеГруппПользователейОфисам.ГруппаПользователей.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	СоответствиеГруппПользователейОфисам.ГруппаПользователей.Наименование";
					
					Запрос.УстановитьПараметр("Офис", Офис);
					Запрос.УстановитьПараметр("Проект", Проект);					
					Запрос.УстановитьПараметр("ГруппаРодитель", ?(Офис = "Экскурсия", Справочники.ГруппыПользователей.НайтиПоНаименованию("Земля розница", Истина), Справочники.ГруппыПользователей.НайтиПоНаименованию("Филиал", Истина)));
					
					РезультатЗапроса = Запрос.Выполнить();			
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						Ответственный = ВыборкаДетальныеЗаписи.Ответственный;
					КонецЕсли;						
					ПараметрыНовогоВзаимодействия = Новый Структура("Предмет, Ответственный, Офис, ДанныеУчастника", Предмет, Ответственный, Офис, ДанныеУчастника);							
				КонецЕсли;				
				ПараметрыОткрытияВзаимодействий = Новый Структура("ФормаВзаимодействия, ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия", "Документ.Встреча.ФормаОбъекта", ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия);			
			КонецЕсли;	
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь КАК Пользователь
			|ПОМЕСТИТЬ ВТ_ПользователиГПТ
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей.Наименование = ""ГПТ""
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Взаимодействия.Взаимодействие КАК Взаимодействие
			|ИЗ
			|	РегистрСведений.Взаимодействия КАК Взаимодействия
			|ГДЕ
			|	Взаимодействия.Предмет = &Предмет
			|	И Взаимодействия.ТипВзаимодействия В(&ТипыВзаимодействия)
			|	И Взаимодействия.Статус = &Статус
			|	И ВЫБОР
			|			КОГДА НЕ Взаимодействия.Взаимодействие ССЫЛКА Справочник.Сделки
			|				ТОГДА Взаимодействия.Взаимодействие.Автор В
			|						(ВЫБРАТЬ
			|							ВТ_ПользователиГПТ.Пользователь КАК Пользователь
			|						ИЗ
			|							ВТ_ПользователиГПТ КАК ВТ_ПользователиГПТ)
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ";
			
			ТипыВзаимодействия = Новый Массив;
			ТипыВзаимодействия.Добавить(Перечисления.ТипыВзаимодействий.ТелефонныйЗвонок);
			ТипыВзаимодействия.Добавить(Перечисления.ТипыВзаимодействий.Встреча);
			
			Запрос.УстановитьПараметр("Предмет", Предмет);
			Запрос.УстановитьПараметр("ТипыВзаимодействия", ТипыВзаимодействия);
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВзаимодействий.Запланировано);
			Запрос.УстановитьПараметр("ГруппаОтветственного", Справочники.ГруппыПользователей.НайтиПоНаименованию("ГПТ"));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ВзаимодействияДляОткрытия.Добавить(ВыборкаДетальныеЗаписи.Взаимодействие);
			КонецЦикла;
			
			Если НЕ ВзаимодействияДляОткрытия.Количество() Тогда				
				ПараметрыНовогоВзаимодействия = Новый Структура("Предмет, Ответственный, ДанныеУчастника", Предмет, ГруппаЗемляОпт, ДанныеУчастника);	
			КонецЕсли;
			ПараметрыОткрытияВзаимодействий = Новый Структура("ФормаВзаимодействия, ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия", "Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия);				
		КонецЕсли;							
	ИначеЕсли (ЭтоМенеджерГПТ ИЛИ ЭтоМенеджерФилиала)  
		И НЕ ПараметрыТекущегоВзаимодействия.СтадияЗапроса = Перечисления.СтадииЗапроса.Звонок 
		И ПараметрыТекущегоВзаимодействия.Статус = Перечисления.СтатусыВзаимодействий.Завершено Тогда
		ПараметрыНовогоВзаимодействия = Новый Структура("Предмет, Проект, ДанныеУчастника", Предмет, Проект, ДанныеУчастника);
		ПараметрыОткрытияВзаимодействий = Новый Структура("ФормаВзаимодействия, ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия", "РегистрСведений.Взаимодействия.Форма.ПланироварниеПереговоров", ПараметрыНовогоВзаимодействия, ВзаимодействияДляОткрытия);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПараметрыОткрытияВзаимодействий", ПараметрыОткрытияВзаимодействий);
	
КонецПроцедуры 
//<865768> }

#КонецОбласти

#КонецЕсли      