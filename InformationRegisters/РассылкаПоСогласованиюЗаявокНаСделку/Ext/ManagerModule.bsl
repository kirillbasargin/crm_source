
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СтруктураЗаписи() Экспорт
	
	Возврат Новый Структура(
		//Измерения
		"ЗаявкаНаСделку,
		|СтатусЗаявки,
		|ДатаСоздания,
		//Ресурсы
		|Взаимодействие,
		|ТекстПисьма,		
		|ТемаПисьма,
		|Получатель,
		|ЗадачаИсполнителя,		
		//Реквизиты
		|ДатаПоследнейОтправки");

КонецФункции

Процедура ЗаписатьРассылку(ЗаявкаНаСделку, СтатусЗаявки, ДатаСоздания, ЗадачаИсполнителя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаНаСделку) Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийСтатус = РегистрыСведений.СтатусыСделки.ПолучитьПоследнее(ДатаСоздания, Новый Структура("ЗаявкаНаСделку", ЗаявкаНаСделку)).Статус;
	ПредыдущийСтатус = РегистрыСведений.СтатусыСделки.ПолучитьПоследнее(Новый Граница(ДатаСоздания, ВидГраницы.Исключая), Новый Структура("ЗаявкаНаСделку", ЗаявкаНаСделку)).Статус;	
	
	Если НЕ ЗначениеЗаполнено(ПредыдущийСтатус) Тогда
		Возврат;
	КонецЕсли;

	НомерЗаявки = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаСделку, "Номер"));
	ДатаЗаявки = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаСделку, "Дата"));
	
	ТекстПисьма = "";	
	Если ПоследнийСтатус = Перечисления.СтатусыСделки.Оформление 
		И ПредыдущийСтатус = Перечисления.СтатусыСделки.СогласованиеИБ Тогда
		Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			ТекстПисьма = "Ипотечный специалист " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "Исполнитель") + " отклонил(а) заявку " + НомерЗаявки + " от " + ДатаЗаявки
			 + " по причине: " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "РезультатВыполнения")) + ". Дата отклонения " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "ДатаИсполнения") + ""; //РезультатВыполненияЗадачи(ЗадачаИсполнителя);
		Иначе
			ТекстПисьма = "Ипотечный специалист отклонил заявку " + НомерЗаявки + " от " + ДатаЗаявки; 
		КонецЕсли;
	КонецЕсли;
	
	Если ПоследнийСтатус = Перечисления.СтатусыСделки.Оформление 
		И ПредыдущийСтатус = Перечисления.СтатусыСделки.СогласованиеЮриста Тогда
		Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			ТекстПисьма = "Юрист " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "Исполнитель") + " отклонил(а) заявку " + НомерЗаявки + " от " + ДатаЗаявки
			 + " по причине: " + СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "РезультатВыполнения")) + ". Дата отклонения " + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "ДатаИсполнения") + ""; //РезультатВыполненияЗадачи(ЗадачаИсполнителя);
        Иначе
			ТекстПисьма = "Юрист отклонил заявку " + НомерЗаявки + " от " + ДатаЗаявки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусЗаявки = Перечисления.СтатусыСделки.Отказ Тогда //ПоследнийСтатус = 
		ТекстПисьма = "Сотрудник ОУиОС отклонил заявку " + НомерЗаявки + " от " + ДатаЗаявки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		КлиентЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаСделку, "ДокументОснование"), "Клиент");
	Исключение
	КонецПопытки;
	ТемаПисьма = "Отклонена заявка " + НомерЗаявки + " от " + ДатаЗаявки + " по клиенту " + КлиентЗапроса;
	Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаСделку, "Автор");
	
	ВыполнитьЗаписьВРегистр(ЗаявкаНаСделку, СтатусЗаявки, ДатаСоздания, , , ТекстПисьма, ТемаПисьма, Получатель, ЗадачаИсполнителя);
	
КонецПроцедуры

Процедура УдалитьЗаписьИзРегистра(ЗаявкаНаСделку, СтатусЗаявки, ДатаСоздания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаСделку.Установить(ЗаявкаНаСделку);
	НаборЗаписей.Отбор.СтатусЗаявки.Установить(СтатусЗаявки);
	НаборЗаписей.Отбор.ДатаСоздания.Установить(ДатаСоздания);
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистр(ЗаявкаНаСделку, СтатусЗаявки, ДатаСоздания, Отправлено = Ложь, ДатаПоследнейОтправки = Неопределено, ТекстПисьма = "", ТемаПисьма = "", Получатель = Неопределено, ЗадачаИсполнителя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаСделку.Установить(ЗаявкаНаСделку);
	НаборЗаписей.Отбор.СтатусЗаявки.Установить(СтатусЗаявки);
	НаборЗаписей.Отбор.ДатаСоздания.Установить(ДатаСоздания);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ЗаявкаНаСделку = ЗаявкаНаСделку;
	Запись.СтатусЗаявки = СтатусЗаявки;
	Запись.ДатаСоздания = ДатаСоздания;
	Запись.ТекстПисьма = ТекстПисьма;
	Запись.Отправлено = Отправлено;
	Запись.ДатаПоследнейОтправки = ДатаПоследнейОтправки;
	Запись.ТемаПисьма = ТемаПисьма;
	Запись.Получатель = Получатель;	
	Запись.ЗадачаИсполнителя = ЗадачаИсполнителя;
	
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура РассылкаУведомленийПоСогласованиюЗаявокНаСделку() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РассылкаПоСогласованиюЗаявокНаСделку.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
	|	РассылкаПоСогласованиюЗаявокНаСделку.СтатусЗаявки КАК СтатусЗаявки,
	|	РассылкаПоСогласованиюЗаявокНаСделку.ДатаСоздания КАК ДатаСоздания,
	|	РассылкаПоСогласованиюЗаявокНаСделку.ТекстПисьма КАК ТекстПисьма,
	|	РассылкаПоСогласованиюЗаявокНаСделку.ТемаПисьма КАК ТемаПисьма,
	|	РассылкаПоСогласованиюЗаявокНаСделку.Получатель КАК Получатель,
	|	РассылкаПоСогласованиюЗаявокНаСделку.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ИЗ
	|	РегистрСведений.РассылкаПоСогласованиюЗаявокНаСделку КАК РассылкаПоСогласованиюЗаявокНаСделку
	|ГДЕ
	|	РассылкаПоСогласованиюЗаявокНаСделку.ДатаСоздания МЕЖДУ &ПериодНачало И &ПериодОкончание
	|	И НЕ РассылкаПоСогласованиюЗаявокНаСделку.Отправлено";
	
	Запрос.УстановитьПараметр("ПериодНачало", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПериодОкончание", КонецДня(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТекстПисьма) Тогда
			Продолжить;
		КонецЕсли;
		ВыполнитьЗаписьВРегистр(ВыборкаДетальныеЗаписи.ЗаявкаНаСделку, ВыборкаДетальныеЗаписи.СтатусЗаявки, ВыборкаДетальныеЗаписи.ДатаСоздания, 
			ОтправитьУведомлениеОСменеСтатусаЗаявкиНаСделку(ВыборкаДетальныеЗаписи.Получатель, ВыборкаДетальныеЗаписи.ЗаявкаНаСделку, ВыборкаДетальныеЗаписи.ДатаСоздания, ВыборкаДетальныеЗаписи.ТекстПисьма, ВыборкаДетальныеЗаписи.ТемаПисьма),
				ТекущаяДата(), ВыборкаДетальныеЗаписи.ТекстПисьма, ВыборкаДетальныеЗаписи.ТемаПисьма, ВыборкаДетальныеЗаписи.Получатель, ВыборкаДетальныеЗаписи.ЗадачаИсполнителя);
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьУведомлениеОСменеСтатусаЗаявкиНаСделку(Получатель, ЗаявкаНаСделку, ДатаСоздания, ТекстПисьма = "", ТемаПисьма = "", УчетнаяЗапись = Неопределено) Экспорт
	
	ПочтовыйАдресПолучателя = АдресЭлектроннойПочты(Получатель);
	
	Если НЕ ЗначениеЗаполнено(ПочтовыйАдресПолучателя) Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Получатель.ИдентификаторПользователяИБ);
		Если НЕ ПользовательИБ = Неопределено Тогда
			ПользовательОС = СокрЛП(ПользовательИБ.ПользовательОС);
			Если СтрНайти(ПользовательОС, "\\ABSGROUP\") > 0 Тогда
			 	ПочтовыйАдресПолучателя = СтрЗаменить(ПользовательОС, "\\ABSGROUP\", "") + "@absgroup.ru";
			ИначеЕсли СтрНайти(ПользовательОС, "ABSGROUP\") > 0 Тогда
			 	ПочтовыйАдресПолучателя = СтрЗаменить(ПользовательОС, "ABSGROUP\", "") + "@absgroup.ru";
			КонецЕсли;			
	    КонецЕсли;		
	КонецЕсли;	
		
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'РассылкаПоСогласованиюЗаявокНаСделку.Уведомление о смене статусов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'"), Строка(Получатель)));
		Возврат Ложь;
	КонецЕсли;
			
	Если Не ЗначениеЗаполнено(ТекстПисьма) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'РассылкаПоСогласованиюЗаявокНаСделку.Уведомление о смене статусов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление не отправлено, так как не указан текст письма по заявке на сделку %1.'"), Строка(ЗаявкаНаСделку)));		
		
		Возврат Ложь;
	КонецЕсли;
	
	Если ТемаПисьма = "" Тогда
		ТемаПисьма = "Рассылка по согласованию заявок на сделку";	
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			?(УчетнаяЗапись = Неопределено, МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), УчетнаяЗапись), ПараметрыПисьма);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'РассылкаПоСогласованиюЗаявокНаСделку.Уведомление о смене статусов'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке уведомления о смене статусов: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			   
		Возврат Ложь;
	КонецПопытки;

	ЗаписьЖурналаРегистрации(НСтр("ru = 'РассылкаПоСогласованиюЗаявокНаСделку.Уведомление о смене статусов'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'"), ПочтовыйАдресПолучателя));
		
	Возврат Истина;	
		
КонецФункции

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция АдресЭлектроннойПочты(Получатель) Экспорт
	
	Адрес = "";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Адрес = ЭлектроннаяПочтаВнешнегоПользователя(Получатель);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

Функция ЭлектроннаяПочтаВнешнегоПользователя(Получатель)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		Возврат МодульУправлениеКонтактнойИнформациейСлужебный.ПервоеЗначениеКонтактнойИнформацииОбъектаПоТипу(
			Получатель.ОбъектАвторизации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция РезультатВыполненияЗадачи(Знач ЗадачаСсылка)
	
	СтрокаФормат = "%1, %2 " + НСтр("ru = 'отклонил(а) задачу'") + ":
		           |%3
		           |";
	//?(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "Выполнена"),
	//"%1, %2 " + НСтр("ru = 'выполнил(а) задачу'") + ":
	//           |%3
	//           |",
	//"%1, %2 " + НСтр("ru = 'отклонил(а) задачу'") + ":
	//           |%3
	//           |");
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, ЗадачаДанные.ДатаИсполнения, ЗадачаДанные.Исполнитель, Комментарий);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли