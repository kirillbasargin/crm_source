
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина;
	Настройки.СкрытьКомандыРассылки                              = Истина;
	Настройки.ПараметрыРасположенияЭлементовУправления           = ОпределитьРасположениеЭлементовУправления();
	
	Настройки.События.ПриСозданииНаСервере               = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере    = Истина;
	Настройки.События.ПриОпределенииПараметровВыбора     = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже.
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД,
	НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(НовыеНастройкиКД) = Тип("НастройкиКомпоновкиДанных") Тогда
		НастройкиКД = НовыеНастройкиКД;
	Иначе
		НастройкиКД = КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	ПараметрыОтчета = ПараметрыОтчета(НастройкиКД, НовыеПользовательскиеНастройкиКД);
	
	Если КлючСхемы <> КлючВарианта Тогда
		
		КлючСхемы = КлючВарианта;
		
		Если КлючВарианта = "Основной" Тогда
			ЗаполнитьСхемуКомпоновкиДанных_Горизонталь(ПараметрыОтчета.ДокументВладелец,
				СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		ИначеЕсли КлючВарианта = "Дополнительный" Тогда
			ЗаполнитьСхемуКомпоновкиДанных_Вертикаль(ПараметрыОтчета.ДокументВладелец,
				СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Истина);
		КонецЕсли;
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
		НастройкиКДПоУмолчаниюТиповойСхемы(ПараметрыОтчета, НовыеНастройкиКД, КлючВарианта);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//   ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример 1 - Добавление команды с обработчиком в ОтчетыКлиентПереопределяемый.ОбработчикКоманды:
//	Команда = Форма.Команды.Добавить("МояОсобеннаяКоманда");
//	Команда.Действие  = "Подключаемый_Команда";
//	Команда.Заголовок = НСтр("ru = 'Моя команда...'");
//	
//	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Форма.Элементы.ГруппаПрограммныйИнтерфейс);
//	Кнопка.ИмяКоманды = Команда.Имя;
//	
//	Форма.ПостоянныеКоманды.Добавить(КомандаСоздать.Имя);
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Параметры.Свойство("ДокументВладелец") Тогда
		СтруктураПараметровДанных = Новый Структура("ДокументВладелец", Форма.Параметры.ДокументВладелец);
		УстановитьПараметрыДанных(КомпоновщикНастроек.Настройки, СтруктураПараметровДанных);
	ИначеЕсли Не Форма.Параметры.Свойство("ПараметрКоманды") Тогда
		ВызватьИсключение НСтр("ru = 'Для начала работы с отчетом необходимо воспользоваться соответствующей командой в форме интересующего документа.'");
		Отказ = Истина;
	Иначе
		ДокументВладелец = Форма.Параметры.ПараметрКоманды;
		Если Не ЗначениеЗаполнено(ДокументВладелец) Тогда
			ВызватьИсключение НСтр("ru = 'Для начала работы с отчетом необходимо воспользоваться соответствующей командой в форме интересующего документа.'");
			Отказ = Истина;
		Иначе
			Если Не ДокументВладелец.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Для непроведенного документа вывод отчета невозможен.'");
				Отказ = Истина;
			Иначе
				СтруктураПараметровДанных = Новый Структура("ДокументВладелец", ДокументВладелец);
				УстановитьПараметрыДанных(КомпоновщикНастроек.Настройки, СтруктураПараметровДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета.
//   СвойстваНастройки - Структура - Описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов -
//           Тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений -
//           Объекты, которые будут предложены пользователю в списке выбора.
//           Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос -
//           Возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево -
//           Когда Истина, то выбор пользователя будет ограничен значениями,
//           указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	ПолеИмяРегистра = Новый ПолеКомпоновкиДанных("ПараметрыДанных.СписокРегистров");
	Если СвойстваНастройки.ПолеКД = ПолеИмяРегистра Тогда
	
		Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ГлобальныеНастройки") Тогда
	
			СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
	
			ГлобальныеНастройки = ПерехватитьГлобальныеНастройки();
			ЗначенияДляВыбора   = Новый СписокЗначений;
	
			Для Каждого ГлобальнаяНастройка Из ГлобальныеНастройки Цикл
				
				ТекущееЗначениеДляВыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
					НРег(ГлобальнаяНастройка.ЛокализацияВидРегистра), ГлобальнаяНастройка.ПредставлениеРегистра);
	
				ЗначенияДляВыбора.Добавить(ТекущееЗначениеДляВыбора, , Истина);
	
			КонецЦикла;
	
			СвойстваНастройки.ЗначенияДляВыбора = ЗначенияДляВыбора;
	
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПередЗагрузкойВариантаНаСервере" в синтакс-помощнике.
//   ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере().
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ПараметрСКД         = Новый ПараметрКомпоновкиДанных("ДокументВладелец");
	ДокументПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ПараметрСКД);
	
	Если ДокументПараметрСКД <> Неопределено Тогда
		ДокументПараметр = ДокументПараметрСКД.Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПараметр) Тогда
	
		УстановитьПараметрыДанных(НовыеНастройкиКД, Новый Структура("ДокументВладелец", ДокументПараметр));
	
		Если Форма.КлючТекущегоВарианта = Форма.Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВарианта Тогда
	
			НовыеНастройкиКД = КомпоновщикНастроек.Настройки;
	
			Если Форма.КлючТекущегоВарианта = "Основной" Тогда
				ЗаполнитьСхемуКомпоновкиДанных_Горизонталь(ДокументПараметр, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			ИначеЕсли Форма.КлючТекущегоВарианта = "Дополнительный" Тогда
				ЗаполнитьСхемуКомпоновкиДанных_Вертикаль(ДокументПараметр, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Истина);
			КонецЕсли;
	
			Форма.КлючНазначенияИспользования = СтрРазделить(ДокументПараметр.Метаданные().ПолноеИмя(), ".").Получить(1);
	
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область ПрограммноеФормированиеСКД

#Область ПодготовкаДанных

Функция ПодготовкаДанных(ДвиженияДокумента, ТаблицаРегистров, ДополнительнаяНумерация = Ложь)
	
	ОсновнаяИнформация = Новый Массив;
	
	Для Каждого СтрокаТаблицыРегистров Из ТаблицаРегистров Цикл
	
		ИмяРегистра            = СокрЛП(СтрокаТаблицыРегистров.ИмяРегистра);
		ВидРегистра            = СокрЛП(СтрокаТаблицыРегистров.ВидРегистра);
		ЛокализацияВидРегистра = СокрЛП(СтрокаТаблицыРегистров.ЛокализацияВидРегистра);
		ПредставлениеРегистра  = СокрЛП(СтрокаТаблицыРегистров.ПредставлениеРегистра);
	
		Для Каждого ДвижениеДокумента Из ДвиженияДокумента Цикл
	
			Если ВРег(СокрЛП(ДвижениеДокумента.Имя)) = ВРег(ИмяРегистра) Тогда
	
				Если ВидРегистра = "Накопления" Или ВидРегистра = "Сведений" Тогда
	
					ПодготовкаДанныхПоРегистрамНакопленияСведений(ДвижениеДокумента, ОсновнаяИнформация, ИмяРегистра, ВидРегистра,
						ЛокализацияВидРегистра, ПредставлениеРегистра, ДополнительнаяНумерация);
	
				ИначеЕсли ВидРегистра = "Бухгалтерии" Тогда
	
					ПодготовкаДанныхПоРегистрамБухгалтерии(ДвижениеДокумента, ОсновнаяИнформация, ИмяРегистра, ВидРегистра,
						ЛокализацияВидРегистра, ПредставлениеРегистра);
	
				ИначеЕсли ВидРегистра = "Расчета" Тогда
	
					ПодготовкаДанныхПоРегистрамРасчета(ДвижениеДокумента, ОсновнаяИнформация, ИмяРегистра, ВидРегистра,
						ЛокализацияВидРегистра, ПредставлениеРегистра, ДополнительнаяНумерация);
	
				КонецЕсли;
	
			КонецЕсли;
	
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ОсновнаяИнформация;
	
КонецФункции

Процедура ПодготовкаДанныхПоРегистрамНакопленияСведений(ДвижениеДокумента, ОсновнаяИнформация, ИмяРегистра,
	ВидРегистра, ЛокализацияВидРегистра, ПредставлениеРегистра, ДополнительнаяНумерация = Ложь)
	
	ИнформацияПоРегистру = Новый Структура;
	ИнформацияПоРегистру.Вставить("Измерения",              Новый Структура);
	ИнформацияПоРегистру.Вставить("Ресурсы",                Новый Структура);
	ИнформацияПоРегистру.Вставить("Реквизиты",              Новый Структура);
	ИнформацияПоРегистру.Вставить("СтандартныеРеквизиты",   Новый Структура);
	ИнформацияПоРегистру.Вставить("ИмяРегистра",            ИмяРегистра);
	ИнформацияПоРегистру.Вставить("ВидРегистра",            ВидРегистра);
	ИнформацияПоРегистру.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
	ИнформацияПоРегистру.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
	Если ДополнительнаяНумерация Тогда
		ИнформацияПоРегистру.Вставить("Нумератор", Новый Структура);
	КонецЕсли;
	
	ИнформацияПоРегистру.СтандартныеРеквизиты = СформироватьСтруктуруПолей(ДвижениеДокумента.СтандартныеРеквизиты,
		"НомерСтроки, Регистратор");
	ИнформацияПоРегистру.Измерения            = СформироватьСтруктуруПолей(ДвижениеДокумента.Измерения);
	ИнформацияПоРегистру.Ресурсы              = СформироватьСтруктуруПолей(ДвижениеДокумента.Ресурсы);
	ИнформацияПоРегистру.Реквизиты            = СформироватьСтруктуруПолей(ДвижениеДокумента.Реквизиты);
	
	ПоляВыбора = "";
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.СтандартныеРеквизиты);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Измерения);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Ресурсы);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Реквизиты);
	
	Если ДополнительнаяНумерация Тогда
	
		МаксимумПолей = Макс(ИнформацияПоРегистру.СтандартныеРеквизиты.Количество(),
			ИнформацияПоРегистру.Измерения.Количество(),
			ИнформацияПоРегистру.Ресурсы.Количество(),
			ИнформацияПоРегистру.Реквизиты.Количество());
			
			ИнформацияПоРегистру.Нумератор = СформироватьНумератор(МаксимумПолей);
			
			ДобавитьНумератор(ПоляВыбора, ИнформацияПоРегистру.Нумератор);
	
	КонецЕсли;
	
	Если СокрЛП(Прав(ПоляВыбора, 2)) = "," Тогда
		ПоляВыбора = Лев(ПоляВыбора, СтрДлина(ПоляВыбора) - 2);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Поля
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеЗапроса
	|{ГДЕ
	|	(&УсловиеКомпоновки)}";
	
	ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	Поля              = """" + ШаблонСообщения + """ Как ИмяРегистра," + ПоляВыбора;
	УсловиеКомпоновки = """" + ШаблонСообщения + """ В (&СписокРегистров)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля",              Поля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица",    ДвижениеДокумента.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса",    "Регистратор = &ДокументВладелец");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКомпоновки", УсловиеКомпоновки);
	
	ИнформацияДляФормированияНабораДанных = Новый Структура;
	ИнформацияДляФормированияНабораДанных.Вставить("ТекстЗапроса",         ТекстЗапроса);
	ИнформацияДляФормированияНабораДанных.Вставить("ИнформацияПоРегистру", ИнформацияПоРегистру);
	
	ОсновнаяИнформация.Добавить(ИнформацияДляФормированияНабораДанных);
	
КонецПроцедуры

Процедура ПодготовкаДанныхПоРегистрамБухгалтерии(ДвижениеДокумента, ОсновнаяИнформация, ИмяРегистра, ВидРегистра, ЛокализацияВидРегистра, ПредставлениеРегистра)
	
	ИнформацияПоРегистру = Новый Структура;
	ИнформацияПоРегистру.Вставить("СтандартныеРеквизиты",   Новый Структура);
	ИнформацияПоРегистру.Вставить("Измерения",              Новый Структура);
	ИнформацияПоРегистру.Вставить("Ресурсы",                Новый Структура);
	ИнформацияПоРегистру.Вставить("РесурсыДт",              Новый Структура);
	ИнформацияПоРегистру.Вставить("РесурсыКт",              Новый Структура);
	ИнформацияПоРегистру.Вставить("Субконто",               Новый Структура);
	ИнформацияПоРегистру.Вставить("СубконтоДт",             Новый Структура);
	ИнформацияПоРегистру.Вставить("СубконтоКт",             Новый Структура);
	ИнформацияПоРегистру.Вставить("ИзмеренияДт",            Новый Структура);
	ИнформацияПоРегистру.Вставить("ИзмеренияКт",            Новый Структура);
	ИнформацияПоРегистру.Вставить("Реквизиты",              Новый Структура);
	ИнформацияПоРегистру.Вставить("ИмяРегистра",            ИмяРегистра);
	ИнформацияПоРегистру.Вставить("ВидРегистра",            ВидРегистра);
	ИнформацияПоРегистру.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
	ИнформацияПоРегистру.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
	
	МаксимальноеКоличествоСубконто = ДвижениеДокумента.ПланСчетов.МаксКоличествоСубконто;
	КорреспонденцияОбъекта         = ДвижениеДокумента.Корреспонденция;
	
	ЛокализацияДебет    = НСтр("ru = 'Дт'");
	ЛокализацияКредит   = НСтр("ru = 'Кт'");
	ЛокализацияСубконто = НСтр("ru = 'Субконто'");
	ЛокализацияСчет     = НСтр("ru = 'Счет'");
	
	СтандартныеРеквизитыИсключения = "НомерСтроки, Регистратор, Счет";
	Для ИндексСубконто = 1 По МаксимальноеКоличествоСубконто Цикл
		ИндексСубконтоСтрокой =  Формат(ИндексСубконто, "ЧГ=0");
		СтандартныеРеквизитыИсключения = СтандартныеРеквизитыИсключения 
			+ ", " + "ВидСубконто" + ИндексСубконтоСтрокой + ", Субконто" + ИндексСубконтоСтрокой;
	КонецЦикла;
	
	ИнформацияПоРегистру.СтандартныеРеквизиты = СформироватьСтруктуруПолей(ДвижениеДокумента.СтандартныеРеквизиты,
		СтандартныеРеквизитыИсключения);
	ИнформацияПоРегистру.Реквизиты            = СформироватьСтруктуруПолей(ДвижениеДокумента.Реквизиты,
		СтандартныеРеквизитыИсключения);
	
	Ресурсы = ДвижениеДокумента.Ресурсы;
	Для Каждого Ресурс Из Ресурсы Цикл
	
		Если Ресурс.Балансовый Или Не КорреспонденцияОбъекта Тогда
	
			ИнформацияПоРегистру.Ресурсы.Вставить(Ресурс.Имя, Ресурс.Представление());
	
		Иначе
	
			ИнформацияПоРегистру.РесурсыДт.Вставить(Ресурс.Имя + "Дт", Ресурс.Представление() + " " + ЛокализацияДебет);
			ИнформацияПоРегистру.РесурсыКт.Вставить(Ресурс.Имя + "Кт", Ресурс.Представление() + " " + ЛокализацияКредит);
	
		КонецЕсли;
	
	КонецЦикла;
	
	Для ИндексСубконто = 1 По МаксимальноеКоличествоСубконто Цикл
	
		Если КорреспонденцияОбъекта Тогда
	
			ИндексСтрокой = Формат(ИндексСубконто, "ЧГ=0");
			
			ИнформацияПоРегистру.СубконтоДт.Вставить("СубконтоДт" + ИндексСтрокой,
				ЛокализацияСубконто + " " + ЛокализацияДебет + " " + ИндексСтрокой);
			ИнформацияПоРегистру.СубконтоКт.Вставить("СубконтоКт" + ИндексСтрокой,
				ЛокализацияСубконто + " " + ЛокализацияКредит + " " + ИндексСтрокой);
	
		Иначе
	
			ИнформацияПоРегистру.Субконто.Вставить("Субконто" + ИндексСтрокой, ЛокализацияСубконто + " " + ИндексСтрокой);
	
		КонецЕсли;
		
	КонецЦикла;
	
	Если КорреспонденцияОбъекта Тогда
		
		ИнформацияПоРегистру.ИзмеренияДт.Вставить("СчетДт", ЛокализацияСчет + " " +ЛокализацияДебет);
		ИнформацияПоРегистру.ИзмеренияКт.Вставить("СчетКт", ЛокализацияСчет + " " + ЛокализацияКредит);
	
	Иначе
	
		ТекстИзмерения = ТекстИзмерения + ?(ЗначениеЗаполнено(ТекстИзмерения), ", ", "") + "Счет";
	
		ИнформацияПоРегистру.Измерения.Вставить("Счет", ЛокализацияСчет);
	
	КонецЕсли;
	
	Измерения = ДвижениеДокумента.Измерения;
	Для Каждого Измерение Из Измерения Цикл
	
		Если Измерение.Балансовый Или Не КорреспонденцияОбъекта Тогда
	
			ИнформацияПоРегистру.Измерения.Вставить(Измерение.Имя, Измерение.Представление());
	
		Иначе
	
			ИнформацияПоРегистру.ИзмеренияДт.Вставить(Измерение.Имя + "Дт", Измерение.Представление() + " " + ЛокализацияДебет);
			ИнформацияПоРегистру.ИзмеренияКт.Вставить(Измерение.Имя + "Кт", Измерение.Представление() + " " + ЛокализацияКредит);
	
		КонецЕсли;
	
	КонецЦикла;
	
	ПоляВыбора = "";
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.СтандартныеРеквизиты);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Реквизиты);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Измерения);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.ИзмеренияДт);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.ИзмеренияКт);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Ресурсы);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.РесурсыДт);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.РесурсыКт);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Субконто);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.СубконтоДт);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.СубконтоКт);
	
	Если СокрЛП(Прав(ПоляВыбора, 2)) = "," Тогда
		ПоляВыбора = Лев(ПоляВыбора, СтрДлина(ПоляВыбора) - 2);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Поля
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|{ГДЕ
	|	(&УсловиеКомпоновки)}";
	
	ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	Поля              = """" + ШаблонСообщения + """ Как ИмяРегистра," + ПоляВыбора;
	УсловиеКомпоновки = """" + ШаблонСообщения + """ В (&СписокРегистров)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля",           Поля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица", "РегистрБухгалтерии." + ИмяРегистра
		+ ".ДвиженияССубконто(, , Регистратор = &ДокументВладелец)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКомпоновки", УсловиеКомпоновки);
	
	ИнформацияДляФормированияНабораДанных = Новый Структура;
	ИнформацияДляФормированияНабораДанных.Вставить("ТекстЗапроса",         ТекстЗапроса);
	ИнформацияДляФормированияНабораДанных.Вставить("ИнформацияПоРегистру", ИнформацияПоРегистру);
	
	ОсновнаяИнформация.Добавить(ИнформацияДляФормированияНабораДанных);
	
КонецПроцедуры

Процедура ПодготовкаДанныхПоРегистрамРасчета(ДвижениеДокумента, ОсновнаяИнформация, ИмяРегистра, ВидРегистра, ЛокализацияВидРегистра, ПредставлениеРегистра, ДополнительнаяНумерация = Ложь)
	
	ИнформацияПоРегистру = Новый Структура;
	ИнформацияПоРегистру.Вставить("Измерения",              Новый Структура);
	ИнформацияПоРегистру.Вставить("Ресурсы",                Новый Структура);
	ИнформацияПоРегистру.Вставить("Реквизиты",              Новый Структура);
	ИнформацияПоРегистру.Вставить("СтандартныеРеквизиты",   Новый Структура);
	ИнформацияПоРегистру.Вставить("ИмяРегистра",            ИмяРегистра);
	ИнформацияПоРегистру.Вставить("ВидРегистра",            ВидРегистра);
	ИнформацияПоРегистру.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
	ИнформацияПоРегистру.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
	Если ДополнительнаяНумерация Тогда
		ИнформацияПоРегистру.Вставить("Нумератор", Новый Структура);
	КонецЕсли;
	
	СтандартныеРеквизитыРегистраРасчета           = ДвижениеДокумента.СтандартныеРеквизиты;
	СтруктураСтандартныхРеквизитовРегистраРасчета = ИнформацияПоРегистру.СтандартныеРеквизиты;
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("ПериодРегистрации",    СтандартныеРеквизитыРегистраРасчета["ПериодРегистрации"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("ВидРасчета",           СтандартныеРеквизитыРегистраРасчета["ВидРасчета"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("ПериодДействия",       СтандартныеРеквизитыРегистраРасчета["ПериодДействия"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("ПериодДействияНачало", СтандартныеРеквизитыРегистраРасчета["ПериодДействияНачало"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("ПериодДействияКонец",  СтандартныеРеквизитыРегистраРасчета["ПериодДействияКонец"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("БазовыйПериодНачало",  СтандартныеРеквизитыРегистраРасчета["БазовыйПериодНачало"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("БазовыйПериодКонец" ,  СтандартныеРеквизитыРегистраРасчета["БазовыйПериодКонец"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("Активность",           СтандартныеРеквизитыРегистраРасчета["Активность"].Представление());
	СтруктураСтандартныхРеквизитовРегистраРасчета.Вставить("Сторно",               СтандартныеРеквизитыРегистраРасчета["Сторно"].Представление());
	
	ИнформацияПоРегистру.Измерения                          = СформироватьСтруктуруПолей(ДвижениеДокумента.Измерения);
	ИнформацияПоРегистру.Ресурсы                            = СформироватьСтруктуруПолей(ДвижениеДокумента.Ресурсы);
	ИнформацияПоРегистру.Реквизиты                          = СформироватьСтруктуруПолей(ДвижениеДокумента.Реквизиты);
	
	ПоляВыбора = "";
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.СтандартныеРеквизиты);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Измерения);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Ресурсы);
	ДобавитьПоля(ПоляВыбора, ИнформацияПоРегистру.Реквизиты);
	
	Если ДополнительнаяНумерация Тогда
		
		МаксимумПолей = Макс(ИнформацияПоРегистру.СтандартныеРеквизиты.Количество(),
			ИнформацияПоРегистру.Измерения.Количество(),
			ИнформацияПоРегистру.Ресурсы.Количество(),
			ИнформацияПоРегистру.Реквизиты.Количество());
		
		ИнформацияПоРегистру.Нумератор = СформироватьНумератор(МаксимумПолей);
		ДобавитьНумератор(ПоляВыбора, ИнформацияПоРегистру.Нумератор);
		
	КонецЕсли;
	
	Если СокрЛП(Прав(ПоляВыбора, 2)) = "," Тогда
		ПоляВыбора = Лев(ПоляВыбора, СтрДлина(ПоляВыбора) - 2);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Поля
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеЗапроса
	|{ГДЕ
	|	(&УсловиеКомпоновки)}";
	
	ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	Поля              = """" + ШаблонСообщения + """ Как ИмяРегистра," + ПоляВыбора;
	УсловиеКомпоновки = """" + ШаблонСообщения + """ В (&СписокРегистров)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля",              Поля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица",    ДвижениеДокумента.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса",    "Регистратор = &ДокументВладелец");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКомпоновки", УсловиеКомпоновки);
	
	ИнформацияДляФормированияНабораДанных = Новый Структура;
	ИнформацияДляФормированияНабораДанных.Вставить("ТекстЗапроса",         ТекстЗапроса);
	ИнформацияДляФормированияНабораДанных.Вставить("ИнформацияПоРегистру", ИнформацияПоРегистру);
	
	ОсновнаяИнформация.Добавить(ИнформацияДляФормированияНабораДанных);
	
КонецПроцедуры

Процедура ДобавитьНумератор(ТекстНумератора, СтруктураНумератора)
	
	Для Каждого Нумератор Из СтруктураНумератора Цикл
		ТекстНумератора = ТекстНумератора + ?(ЗначениеЗаполнено(ТекстНумератора), ", ", "") + Нумератор.Значение + " Как "
			+ Нумератор.Ключ;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщееФормированиеНаборовДанных

#Область РегистрыБухгалтерии

Процедура НастройкаСтруктурыРегистровБухгалтерии(НастройкиКД, НаборДанныхКД, ЭлементДанных)
	
	ВидРегистра            = "Бухгалтерии";
	ЛокализацияВидРегистра = НСтр("ru = 'Бухгалтерии'");
	ИмяРегистра            = ЭлементДанных.ИмяРегистра;
	ПредставлениеРегистра  = ЭлементДанных.ПредставлениеРегистра;
	
	СтруктураСтандартныхРеквизитов = ЭлементДанных.СтандартныеРеквизиты;
	СтруктураИзмерений             = ЭлементДанных.Измерения;
	СтруктураИзмеренийДт           = ЭлементДанных.ИзмеренияДт;
	СтруктураИзмеренийКт           = ЭлементДанных.ИзмеренияКт;
	СтруктураРесурсов              = ЭлементДанных.Ресурсы;
	СтруктураРесурсовДт            = ЭлементДанных.РесурсыДт;
	СтруктураРесурсовКт            = ЭлементДанных.РесурсыКт;
	СтруктураСубконто              = ЭлементДанных.Субконто;
	СтруктураСубконтоДт            = ЭлементДанных.СубконтоДт;
	СтруктураСубконтоКт            = ЭлементДанных.СубконтоКт;
	СтруктураРеквизитов            = ЭлементДанных.Реквизиты;
	
	ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	ГруппировкаДетальныеЗаписи = ДобавитьЭлементСтруктуры(НастройкиКД,
		"Регистр" + ВидРегистра + "_" + ИмяРегистра, ПользовательскийЗаголовок);
	
	Если СтруктураСтандартныхРеквизитов.Количество() > 0 Тогда
		
		РазместитьГруппуПолейСКД(СтруктураСтандартныхРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи,
			"СтандартныеРеквизиты", , РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураИзмерений.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураИзмерений, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Измерения", , , Истина);
	
	КонецЕсли;
	
	Если СтруктураИзмеренийДт.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураИзмеренийДт, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "ИзмеренияДт", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураСубконто.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураСубконто, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Субконто", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураСубконтоДт.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураСубконтоДт, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "СубконтоДт", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураРесурсовДт.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРесурсовДт, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "РесурсыДт", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураИзмеренийКт.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураИзмеренийКт, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "ИзмеренияКт", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);

	КонецЕсли;
	
	Если СтруктураСубконтоКт.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураСубконтоКт, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "СубконтоКт", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураРесурсовКт.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРесурсовКт, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "РесурсыКт", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, Истина);
	
	КонецЕсли;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРесурсов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Ресурсы", , , Истина);
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Реквизиты", , , Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеНаборовДанных_Горизонталь

#Область Общее

Функция ЗаполнитьСхемуКомпоновкиДанных_Горизонталь(ДокументОтбор, НастройкиКД)
	
	МетаданныеДокумента  = ДокументОтбор.Метаданные();
	ДвиженияДокумента    = МетаданныеДокумента.Движения;
	
	МассивРегистров      = МассивИспользуемыхРегистров(ДокументОтбор, ДвиженияДокумента);
	Если МассивРегистров.Количество() = 0 Тогда
		Возврат СхемаКомпоновкиДанных;
	Иначе
		ТаблицаРегистров     = ТаблицаИспользуемыхРегистров(МассивРегистров);
		ПодготовленныеДанные = ПодготовкаДанных(ДвиженияДокумента, ТаблицаРегистров);
	
		СтруктураПараметровДанных = Новый Структура("СписокРегистров", СформироватьСписокРегистров(ТаблицаРегистров));
		УстановитьПараметрыДанных(НастройкиКД, СтруктураПараметровДанных);
	
		Возврат ФормированиеСхемыКД_Горизонталь(ПодготовленныеДанные, НастройкиКД);
	КонецЕсли;
	
КонецФункции

Функция ФормированиеСхемыКД_Горизонталь(ПодготовленныеДанные, НастройкиКД)
	
	СхемаКД            = СхемаКомпоновкиДанных;
	ГлавноеОбъединение = СхемаКД.НаборыДанных["Main"];
	
	ГлобальныеНастройки = ПерехватитьГлобальныеНастройки();
	
	ИндексНабора = 0;
	Для Каждого ЭлементДанных Из ПодготовленныеДанные Цикл
	
		ИндексНабора         = ИндексНабора + 1;
		ИнформацияПоРегистру = ЭлементДанных.ИнформацияПоРегистру;
		
		НаборыДанных   = ГлавноеОбъединение.Элементы;
		ИмяНабора      = "ЗапросПоРегистру" + ИнформацияПоРегистру.ВидРегистра + "_" + ИнформацияПоРегистру.ИмяРегистра;
		НайденныйНабор = НаборыДанных.Найти(ИмяНабора);
	
		Если НайденныйНабор = Неопределено Тогда
	
			НайденныйНабор                = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
			НайденныйНабор.Имя            = ИмяНабора;
			НайденныйНабор.ИсточникДанных = "ИсточникДанных1";
	
			НайденныйНабор.Запрос = ЭлементДанных.ТекстЗапроса;
	
			ДоопределитьМакетСКД(СхемаКД, ИндексНабора, ИнформацияПоРегистру.ВидРегистра,
				ИнформацияПоРегистру.ЛокализацияВидРегистра, ИнформацияПоРегистру.ИмяРегистра, ГлобальныеНастройки);
	
		КонецЕсли;
	
		НастройкаСтруктурыНабора_Горизонталь(НастройкиКД, ЭлементДанных.ИнформацияПоРегистру, НайденныйНабор);
		
	КонецЦикла;
	
	ПользовательскоеОформление(СхемаКД, НастройкиКД, ПодготовленныеДанные);
	
	Возврат СхемаКД;
	
КонецФункции

Процедура НастройкаСтруктурыНабора_Горизонталь(НастройкиКД, ЭлементДанных, НаборДанныхКД)
	
	Если ЭлементДанных.ВидРегистра = "Накопления" Или ЭлементДанных.ВидРегистра = "Сведений" Тогда
	
		НастройкаСтруктурыРегистровНакопленияИСведений_Горизонталь(НастройкиКД, НаборДанныхКД, ЭлементДанных);
	
	ИначеЕсли ЭлементДанных.ВидРегистра = "Бухгалтерии" Тогда
	
		НастройкаСтруктурыРегистровБухгалтерии(НастройкиКД, НаборДанныхКД, ЭлементДанных);
	
	ИначеЕсли ЭлементДанных.ВидРегистра = "Расчета" Тогда
	
		НастройкаСтруктурыРегистровРасчета_Горизонталь(НастройкиКД, НаборДанныхКД, ЭлементДанных);
	
	КонецЕсли;
	
	ОформитьОтчет(НастройкиКД);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрыНакопленияИСведений

Процедура НастройкаСтруктурыРегистровНакопленияИСведений_Горизонталь(НастройкиКД, НаборДанныхКД, ЭлементДанных)
	
	ВидРегистра            = ЭлементДанных.ВидРегистра;
	ЛокализацияВидРегистра = ЭлементДанных.ЛокализацияВидРегистра;
	ИмяРегистра            = ЭлементДанных.ИмяРегистра;
	ПредставлениеРегистра  = ЭлементДанных.ПредставлениеРегистра;
	
	СтруктураСтандартныхРеквизитов = ЭлементДанных.СтандартныеРеквизиты;
	СтруктураИзмерений             = ЭлементДанных.Измерения;
	СтруктураРесурсов              = ЭлементДанных.Ресурсы;
	СтруктураРеквизитов            = ЭлементДанных.Реквизиты;
	
	ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	ГруппировкаДетальныеЗаписи = 
		ДобавитьЭлементСтруктуры(НастройкиКД, "Регистр" + ВидРегистра + "_" + ИмяРегистра, ПользовательскийЗаголовок);
	
	Если СтруктураСтандартныхРеквизитов.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Стандартные реквизиты (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураСтандартныхРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи,
			"СтандартныеРеквизиты", ПользовательскийЗаголовок, , , НСтр("ru = 'Стандартные реквизиты'"));
	
	КонецЕсли;
	
	Если СтруктураИзмерений.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Измерения (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураИзмерений, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Измерения",
			ПользовательскийЗаголовок, , , НСтр("ru = 'Измерения'"));
	
	КонецЕсли;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ресурсы (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураРесурсов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Ресурсы",
			ПользовательскийЗаголовок, , , НСтр("ru = 'Ресурсы'"));
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Реквизиты (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Реквизиты",
			"Реквизиты (" + ПредставлениеРегистра + ")", , , НСтр("ru = 'Реквизиты'"));
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегистрыРасчета

Процедура НастройкаСтруктурыРегистровРасчета_Горизонталь(НастройкиКД, НаборДанныхКД, ЭлементДанных)
	
	ВидРегистра            = "Расчета";
	ЛокализацияВидРегистра = НСтр("ru = 'Расчета'");
	ИмяРегистра            = ЭлементДанных.ИмяРегистра;
	ПредставлениеРегистра  = ЭлементДанных.ПредставлениеРегистра;
	
	СтруктураСтандартныхРеквизитов = ЭлементДанных.СтандартныеРеквизиты;
	СтруктураИзмерений             = ЭлементДанных.Измерения;
	СтруктураРесурсов              = ЭлементДанных.Ресурсы;
	СтруктураРеквизитов            = ЭлементДанных.Реквизиты;
	
	ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	ГруппировкаДетальныеЗаписи = ДобавитьЭлементСтруктуры(НастройкиКД,
		"Регистр" + ВидРегистра + "_" + ИмяРегистра, ПользовательскийЗаголовок);
	
	Если СтруктураСтандартныхРеквизитов.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Стандартные реквизиты (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураСтандартныхРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи,
			"СтандартныеРеквизиты", ПользовательскийЗаголовок, РасположениеПоляКомпоновкиДанных.Горизонтально);
	
	
	КонецЕсли;
	
	Если СтруктураИзмерений.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Измерения (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураИзмерений, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Измерения",
			ПользовательскийЗаголовок, , , НСтр("ru = 'Измерения'"));
	
	
	КонецЕсли;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ресурсы (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураРесурсов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Ресурсы",
			ПользовательскийЗаголовок, , , НСтр("ru = 'Ресурсы'"));
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
		
		ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Реквизиты (%1)'"),
			ПредставлениеРегистра);
	
		РазместитьГруппуПолейСКД(СтруктураРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Реквизиты",
			ПользовательскийЗаголовок, , , НСтр("ru = 'Реквизиты'"));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеНаборовДанных_Вертикаль

#Область Общее

Функция ЗаполнитьСхемуКомпоновкиДанных_Вертикаль(ДокументОтбор, НастройкиКД, ДополнительнаяНумерация = Ложь)
	
	МетаданныеДокумента  = ДокументОтбор.Метаданные();
	ДвиженияДокумента    = МетаданныеДокумента.Движения;
	
	МассивРегистров      = МассивИспользуемыхРегистров(ДокументОтбор, ДвиженияДокумента);
	Если МассивРегистров.Количество() = 0 Тогда
		Возврат СхемаКомпоновкиДанных;
	Иначе
		ТаблицаРегистров     = ТаблицаИспользуемыхРегистров(МассивРегистров);
		ПодготовленныеДанные = ПодготовкаДанных(ДвиженияДокумента, ТаблицаРегистров, ДополнительнаяНумерация);
		
		СтруктураПараметровДанных = Новый Структура("СписокРегистров", СформироватьСписокРегистров(ТаблицаРегистров));
		УстановитьПараметрыДанных(НастройкиКД, СтруктураПараметровДанных);
	
		Возврат ФормированиеСхемыКД_Вертикаль(ПодготовленныеДанные, НастройкиКД);
	КонецЕсли;
	
КонецФункции

Функция ФормированиеСхемыКД_Вертикаль(ПодготовленныеДанные, НастройкиКД)
	
	СхемаКД            = СхемаКомпоновкиДанных;
	ГлавноеОбъединение = СхемаКД.НаборыДанных["Main"];
	
	ГлобальныеНастройки = ПерехватитьГлобальныеНастройки();
	
	ИндексНабора = 0;
	Для Каждого ЭлементДанных Из ПодготовленныеДанные Цикл
	
		ИндексНабора         = ИндексНабора + 1;
		ИнформацияПоРегистру = ЭлементДанных.ИнформацияПоРегистру;
	
		НаборыДанных   = ГлавноеОбъединение.Элементы;
		ИмяНабора      = "ЗапросПоРегистру" + ИнформацияПоРегистру.ВидРегистра + "_" + ИнформацияПоРегистру.ИмяРегистра;
		НайденныйНабор = НаборыДанных.Найти(ИмяНабора);
	
		Если НайденныйНабор = Неопределено Тогда
	
			НайденныйНабор                = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
			НайденныйНабор.Имя            = ИмяНабора;
			НайденныйНабор.ИсточникДанных = "ИсточникДанных1";
	
			НайденныйНабор.Запрос = ЭлементДанных.ТекстЗапроса;
	
			ДоопределитьМакетСКД(СхемаКД, ИндексНабора, ИнформацияПоРегистру.ВидРегистра,
				ИнформацияПоРегистру.ЛокализацияВидРегистра, ИнформацияПоРегистру.ИмяРегистра, ГлобальныеНастройки);
	
		КонецЕсли;
	
		НастройкаСтруктурыНабора_Вертикаль(НастройкиКД, ЭлементДанных.ИнформацияПоРегистру, НайденныйНабор);
	
	КонецЦикла;
	
	ПользовательскоеОформление(СхемаКД, НастройкиКД, ПодготовленныеДанные);
	
	Возврат СхемаКД;
	
КонецФункции

Процедура НастройкаСтруктурыНабора_Вертикаль(НастройкиКД, ЭлементДанных, НаборДанныхКД)
	
	Если ЭлементДанных.ВидРегистра = "Накопления" Или ЭлементДанных.ВидРегистра = "Сведений" Тогда
	
		НастройкаСтруктурыРегистровНакопленияИСведений_Вертикаль(НастройкиКД, НаборДанныхКД, ЭлементДанных);
	
	ИначеЕсли ЭлементДанных.ВидРегистра = "Бухгалтерии" Тогда
	
		НастройкаСтруктурыРегистровБухгалтерии(НастройкиКД, НаборДанныхКД, ЭлементДанных);
	
	ИначеЕсли ЭлементДанных.ВидРегистра = "Расчета" Тогда
	
		НастройкаСтруктурыРегистровРасчета_Вертикаль(НастройкиКД, НаборДанныхКД, ЭлементДанных);
	
	КонецЕсли;
	
	ОформитьОтчет(НастройкиКД);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрыНакопленияИСведений

Процедура НастройкаСтруктурыРегистровНакопленияИСведений_Вертикаль(НастройкиКД, НаборДанныхКД, ЭлементДанных)
	
	ВидРегистра            = ЭлементДанных.ВидРегистра;
	ЛокализацияВидРегистра = ЭлементДанных.ЛокализацияВидРегистра;
	ИмяРегистра            = ЭлементДанных.ИмяРегистра;
	ПредставлениеРегистра  = ЭлементДанных.ПредставлениеРегистра;
	
	СтруктураСтандартныхРеквизитов = ЭлементДанных.СтандартныеРеквизиты;
	СтруктураИзмерений             = ЭлементДанных.Измерения;
	СтруктураРесурсов              = ЭлементДанных.Ресурсы;
	СтруктураРеквизитов            = ЭлементДанных.Реквизиты;
	СтруктураНумератора            = ЭлементДанных.Нумератор; 
	
	ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	ГруппировкаДетальныеЗаписи = ДобавитьЭлементСтруктуры(НастройкиКД, "Регистр" + ВидРегистра + "_" + ИмяРегистра,
		ПользовательскийЗаголовок);
	
	Если СтруктураНумератора.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураНумератора, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Нумератор", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , "№ГруппаЭлементаВыводаСКДТекущегоДокумента");
	
	КонецЕсли;
	
	Если СтруктураСтандартныхРеквизитов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураСтандартныхРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи,
			"СтандартныеРеквизиты", , РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Стандартные реквизиты'"));
	
	КонецЕсли;
	
	Если СтруктураИзмерений.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураИзмерений, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Измерения", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Измерения'"));
	
	КонецЕсли;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРесурсов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Ресурсы", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Ресурсы'"));
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Реквизиты", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Реквизиты'"));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрыРасчета

Процедура НастройкаСтруктурыРегистровРасчета_Вертикаль(НастройкиКД, НаборДанныхКД, ЭлементДанных)
	
	ВидРегистра            = "Расчета";
	ЛокализацияВидРегистра = НСтр("ru = 'Расчета'");
	ИмяРегистра            = ЭлементДанных.ИмяРегистра;
	ПредставлениеРегистра  = ЭлементДанных.ПредставлениеРегистра;
	
	СтруктураСтандартныхРеквизитов = ЭлементДанных.СтандартныеРеквизиты;
	СтруктураИзмерений             = ЭлементДанных.Измерения;
	СтруктураРесурсов              = ЭлементДанных.Ресурсы;
	СтруктураРеквизитов            = ЭлементДанных.Реквизиты;
	СтруктураНумератора            = ЭлементДанных.Нумератор;
	
	ПользовательскийЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
		НРег(ЛокализацияВидРегистра), ПредставлениеРегистра);
	
	ГруппировкаДетальныеЗаписи = ДобавитьЭлементСтруктуры(НастройкиКД, "Регистр" + ВидРегистра + "_" + ИмяРегистра,
		ПользовательскийЗаголовок);
	
	Если СтруктураНумератора.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураНумератора, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Нумератор", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , "№ГруппаЭлементаВыводаСКДТекущегоДокумента");
	
	КонецЕсли;
	
	Если СтруктураСтандартныхРеквизитов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураСтандартныхРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи,
			"СтандартныеРеквизиты", , РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Стандартные реквизиты'"));
	
	КонецЕсли;
	
	Если СтруктураИзмерений.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураИзмерений, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Измерения", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Измерения'"));
	
	КонецЕсли;
	
	Если СтруктураРесурсов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРесурсов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Ресурсы", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Ресурсы'"));
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() > 0 Тогда
	
		РазместитьГруппуПолейСКД(СтруктураРеквизитов, НаборДанныхКД, ГруппировкаДетальныеЗаписи, "Реквизиты", ,
			РасположениеПоляКомпоновкиДанных.Вертикально, , НСтр("ru = 'Реквизиты'"));
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеСтруктурыОтчета

#Область ПоляНабораДанных

Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено)
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	Возврат ПолеНабораДанных;
	
КонецФункции

#КонецОбласти

#Область ВыбранныеПоляНабораДанных

Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Или ТипЗнч(Куда) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД      = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

Функция ДобавитьВыбранноеПолеГруппа(Куда, ИмяИлиПолеКД, Заголовок = "", Расположение = Неопределено)
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Или ТипЗнч(Куда) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД      = ВыбранныеПоляКД.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	
	Если Расположение <> Неопределено Тогда
		ВыбранноеПолеКД.Расположение = Расположение;
	КонецЕсли;	
	
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ДополнительнаяОбщаяНастройкаГруппировки(Группировка, СтруктураНастроек)

	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
	
		Настройка = Группировка.ПараметрыВывода.Элементы.Найти(ЭлементНастройки.Ключ);
		Если Настройка <> Неопределено Тогда
			УстановитьПараметрВывода(Группировка, ЭлементНастройки.Ключ, ЭлементНастройки.Значение);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьЭлементСтруктуры(НастройкиКД, ИмяГруппировки, ЗначениеОтбора)
	
	ГруппировкаПоРегистру = НастройкиКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ГруппировкаПоРегистру.Имя                                    = ИмяГруппировки;
	ГруппировкаПоРегистру.ПредставлениеПользовательскойНастройки = ЗначениеОтбора;
	ГруппировкаПоРегистру.Использование                          = Истина;
	
	ГруппировкаПоРегистру.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаПоРегистру.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	УстановитьОтборПоИмениРегистра(ГруппировкаПоРегистру, ЗначениеОтбора);
	ОформитьГруппировкуПоРегистру(ГруппировкаПоРегистру);
	
	ПолеГруппировкиРегистр = ГруппировкаПоРегистру.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	
	ПолеГруппировкиРегистр.Использование  = Истина;
	ПолеГруппировкиРегистр.Поле           = Новый ПолеКомпоновкиДанных("ИмяРегистра");
	ПолеГруппировкиРегистр.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	ПолеГруппировкиРегистр.ТипДополнения  = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	ДетальныеЗаписи = ГруппировкаПоРегистру.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ДетальныеЗаписи.Использование = Истина;
	
	Возврат ДетальныеЗаписи;
	
КонецФункции

Процедура УстановитьОтборПоИмениРегистра(ГруппировкаДетальныеЗаписи, ЗначениеОтбора)
	
	Отбор          = ГруппировкаДетальныеЗаписи.Отбор;
	ЭлементыОтбора = Отбор.Элементы;
	
	ЭлементОтбора                  = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ИмяРегистра");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение   = ЗначениеОтбора;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
КонецПроцедуры

Процедура РазместитьГруппуПолейСКД(СтруктураПолей, НаборДанныхКД, ГруппировкаДетальныеЗаписи, ИмяГруппы,
	ПредставлениеГруппы = "", РасположениеВыбраннойГруппы = Неопределено, ВыбраннаяГруппаПуста = Ложь,
	ПредставлениеВыбраннойГруппы = "")
	
	Если ВыбраннаяГруппаПуста Тогда
		ЛокальноеИмяГруппы     = Новый ПолеКомпоновкиДанных("");
		ЛокальноеПредставлениеГруппы = "";
	Иначе
		ЛокальноеИмяГруппы           = ИмяГруппы;
		ЛокальноеПредставлениеГруппы = ПредставлениеВыбраннойГруппы;
	КонецЕсли;
	
	Группа = ДобавитьВыбранноеПолеГруппа(ГруппировкаДетальныеЗаписи, ЛокальноеИмяГруппы, ЛокальноеПредставлениеГруппы,
		РасположениеВыбраннойГруппы);
	
	Для Каждого ЭлементСтруктуры Из СтруктураПолей Цикл
	
		Имя     = ЭлементСтруктуры.Ключ;
		Представление = ЭлементСтруктуры.Значение;
	
		ДобавитьПолеНабораДанных(НаборДанныхКД, Имя, Представление);
	
		ДобавитьВыбранноеПоле(Группа, Имя, Представление);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоля(ПоляВыбора, СтруктураПолей)
	
	Для Каждого Поле Из СтруктураПолей Цикл
		ПоляВыбора = ПоляВыбора + ?(ЗначениеЗаполнено(ПоляВыбора), ", ", "") + Поле.Ключ;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруПолей(МетаданныеПоля, Исключения = Неопределено)
	
	МассивИсключаемыхПолей = Новый Массив;
	Если Исключения <> Неопределено Тогда
		МассивИсключаемыхПолей = СтрРазделить(Исключения, ", ");
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	Для Каждого ЕдиницаМетаданных Из МетаданныеПоля Цикл
	
		Если МассивИсключаемыхПолей.Найти(ЕдиницаМетаданных.Имя) = Неопределено Тогда
			СтруктураПолей.Вставить(ЕдиницаМетаданных.Имя, ЕдиницаМетаданных.Представление());
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СтруктураПолей;
	
КонецФункции

Функция СформироватьНумератор(ГраницаНумератора)
	
	СтруктураНумератора = Новый Структура;
	
	Для Индекс = 1 По ГраницаНумератора Цикл
		ИндексСтрокой = Формат(Индекс, "ЧГ=0");
		СтруктураНумератора.Вставить("ГруппаЭлементаВыводаСКДТекущегоДокумента" + ИндексСтрокой, ИндексСтрокой);
	КонецЦикла;
	
	Возврат СтруктураНумератора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

Процедура НастройкиКДПоУмолчаниюТиповойСхемы(ПараметрыОтчета, НовыеНастройкиКД, КлючВарианта)
	
	Если НовыеНастройкиКД <> Неопределено Тогда
		НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ГлобальныеНастройки",
			КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ГлобальныеНастройки);
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	НастройкиКД = КомпоновщикНастроек.Настройки;
	
	Если КлючВарианта = "Основной" Тогда
		ЗаполнитьСхемуКомпоновкиДанных_Горизонталь(ПараметрыОтчета.ДокументВладелец, НовыеНастройкиКД);
	ИначеЕсли КлючВарианта = "Дополнительный" Тогда
		ЗаполнитьСхемуКомпоновкиДанных_Вертикаль(ПараметрыОтчета.ДокументВладелец, НовыеНастройкиКД, Истина);
	КонецЕсли;
	
	ПараметрОтчета          = НастройкиКД.ПараметрыДанных.Элементы.Найти("ДокументВладелец");
	ПараметрОтчета.Значение = ПараметрыОтчета.ДокументВладелец;
	
КонецПроцедуры

Функция МассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат     = Новый Массив;
	ТекстЗапроса  = "";
	
	Для Каждого ОбъектМетаданныхРегистр Из Движения Цикл
	
		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
			И МассивИсключаемыхРегистров.Найти(ОбъектМетаданныхРегистр.Имя) <> Неопределено;
	
		Если Не ПропуститьРегистр Тогда
	
			ТекущийТекстЗапроса =
			"ВЫБРАТЬ
			|	&ИдентификаторыРегистра
			|ПОМЕСТИТЬ ВТ_ВременнаяТаблица
			|ИЗ
			|	&ТекущаяТаблица КАК ТекущаяТаблица
			|ГДЕ
			|	&Условие";
	
			ИдентификаторыРегистра =
			"""" + ОбъектМетаданныхРегистр.Имя + """ КАК ИмяТекущегоРегистра,
			|""" + ОбъектМетаданныхРегистр.Представление() + """ КАК ПредставлениеТекущегоРегистра";
	
			ИдентификаторВременнойТаблицы = "ВТ_" + СтрЗаменить(ОбъектМетаданныхРегистр.ПолноеИмя(), ".", "_");
	
			ТекущийТекстЗапроса = СтрЗаменить(ТекущийТекстЗапроса, "&ИдентификаторыРегистра", ИдентификаторыРегистра);
			ТекущийТекстЗапроса = СтрЗаменить(ТекущийТекстЗапроса, "ВТ_ВременнаяТаблица", ИдентификаторВременнойТаблицы);
			ТекущийТекстЗапроса = СтрЗаменить(ТекущийТекстЗапроса, "&ТекущаяТаблица", ОбъектМетаданныхРегистр.ПолноеИмя());
			ТекущийТекстЗапроса = СтрЗаменить(ТекущийТекстЗапроса, "&Условие", "Регистратор = &Регистратор");
	
			ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(ТекстЗапроса), ";", "") + ТекущийТекстЗапроса;
	
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос.Текст      = ТекстЗапроса;
	РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ГлобальныеНастройки = Новый Массив;
	
	Для Каждого РезультатЗапроса Из РезультатыЗапроса Цикл
	
		ВыгрузкаРезультатаЗапроса = РезультатЗапроса.Выгрузить();
		Если ВыгрузкаРезультатаЗапроса.Количество() <> 0 Тогда
	
			ИмяРегистра           = ВыгрузкаРезультатаЗапроса.Получить(0).ИмяТекущегоРегистра;
			ПредставлениеРегистра = ВыгрузкаРезультатаЗапроса.Получить(0).ПредставлениеТекущегоРегистра;
	
			Результат.Добавить(ИмяРегистра);
	
			Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
				ВидРегистра            = "Накопления";
				ЛокализацияВидРегистра = НСтр("ru = 'Накопления'");
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) <> Неопределено Тогда
				ВидРегистра            = "Бухгалтерии";
				ЛокализацияВидРегистра = НСтр("ru = 'Бухгалтерии'");
			ИначеЕсли Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
				ВидРегистра            = "Сведений";
				ЛокализацияВидРегистра = НСтр("ru = 'Сведений'");
			ИначеЕсли Метаданные.РегистрыРасчета.Найти(ИмяРегистра) <> Неопределено Тогда
				ВидРегистра            = "Расчета";
				ЛокализацияВидРегистра = НСтр("ru = 'Расчета'");
			КонецЕсли;
			
			СтруктураНастроек = Новый Структура;
			СтруктураНастроек.Вставить("ИмяРегистра",            ИмяРегистра);
			СтруктураНастроек.Вставить("ПредставлениеРегистра" , ПредставлениеРегистра);
			СтруктураНастроек.Вставить("ВидРегистра",            ВидРегистра);
			СтруктураНастроек.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
			СтруктураНастроек.Вставить("КоличествоЗаписей",      ВыгрузкаРезультатаЗапроса.Количество());
			ГлобальныеНастройки.Добавить(СтруктураНастроек);
	
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Запрос = Неопределено;
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ГлобальныеНастройки", ГлобальныеНастройки);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИспользуемыхРегистров(МассивРегистров)
	
	ТаблицаРегистров        = Новый ТаблицаЗначений;
	КолонкиТаблицыРегистров = ТаблицаРегистров.Колонки;
	КолонкиТаблицыРегистров.Добавить("ИмяРегистра",                   Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("ПредставлениеРегистра",         Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("ВидРегистра",                   Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("ЛокализацияВидРегистра",        Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("ВидРегистраНакопления",         Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("ПериодичностьРегистраСведений", Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("РежимЗаписиРегистраСведений",   Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("ПериодичностьРегистраРасчета",  Новый ОписаниеТипов("Строка"));
	КолонкиТаблицыРегистров.Добавить("Сортировщик",                   Новый ОписаниеТипов("Число", , ,
		Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	МетаданныеРегистрыНакопления  = Метаданные.РегистрыНакопления;
	МетаданныеРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
	МетаданныеРегистрыСведений    = Метаданные.РегистрыСведений;
	МетаданныеРегистрыРасчета     = Метаданные.РегистрыРасчета;
	
	Для Каждого Регистр Из МассивРегистров Цикл
	
		СтрокаТаблицыРегистров             = ТаблицаРегистров.Добавить();
		СтрокаТаблицыРегистров.ИмяРегистра = Регистр;
	
		РезультатПоиска = МетаданныеРегистрыНакопления.Найти(Регистр);
		Если РезультатПоиска <> Неопределено Тогда 
	
			СтрокаТаблицыРегистров.ПредставлениеРегистра  = РезультатПоиска.Представление();
			СтрокаТаблицыРегистров.ВидРегистра            = "Накопления";
			СтрокаТаблицыРегистров.ЛокализацияВидРегистра = НСтр("ru = 'Накопления'");
			СтрокаТаблицыРегистров.ВидРегистраНакопления  = Строка(РезультатПоиска.ВидРегистра);
			СтрокаТаблицыРегистров.Сортировщик            = 1;
	
		Иначе
	
			РезультатПоиска = МетаданныеРегистрыБухгалтерии.Найти(Регистр);
			Если РезультатПоиска <> Неопределено Тогда
	
				СтрокаТаблицыРегистров.ПредставлениеРегистра  = РезультатПоиска.Представление();
				СтрокаТаблицыРегистров.ВидРегистра            = "Бухгалтерии";
				СтрокаТаблицыРегистров.ЛокализацияВидРегистра = НСтр("ru = 'Бухгалтерии'");
				СтрокаТаблицыРегистров.Сортировщик            = 3;
	
			Иначе
				
				РезультатПоиска = МетаданныеРегистрыСведений.Найти(Регистр);
				Если РезультатПоиска <> Неопределено Тогда
	
					СтрокаТаблицыРегистров.ПредставлениеРегистра         = РезультатПоиска.Представление();
					СтрокаТаблицыРегистров.ВидРегистра                   = "Сведений";
					СтрокаТаблицыРегистров.ЛокализацияВидРегистра        = НСтр("ru = 'Сведений'");
					СтрокаТаблицыРегистров.ПериодичностьРегистраСведений = РезультатПоиска.ПериодичностьРегистраСведений;
					СтрокаТаблицыРегистров.РежимЗаписиРегистраСведений   = РезультатПоиска.РежимЗаписи;
					СтрокаТаблицыРегистров.Сортировщик                   = 2;
	
				Иначе
	
					РезультатПоиска = МетаданныеРегистрыРасчета.Найти(Регистр);
					Если РезультатПоиска <> Неопределено Тогда
	
						СтрокаТаблицыРегистров.ПредставлениеРегистра        = РезультатПоиска.Представление();
						СтрокаТаблицыРегистров.ВидРегистра                  = "Расчета";
						СтрокаТаблицыРегистров.ЛокализацияВидРегистра       = НСтр("ru = 'Расчета'");
						СтрокаТаблицыРегистров.ПериодичностьРегистраРасчета = РезультатПоиска.Периодичность;
						СтрокаТаблицыРегистров.Сортировщик                  = 4;
	
					КонецЕсли;
	
				КонецЕсли;
	
			КонецЕсли;
	
		КонецЕсли;
	
	КонецЦикла;
	
	ТаблицаРегистров.Сортировать("Сортировщик");
	
	Возврат ТаблицаРегистров;
	
КонецФункции

Процедура ДоопределитьМакетСКД(СхемаКД, ИндексНабора, ВидРегистра, ЛокализацияВидРегистра, ИмяРегистра,
	ГлобальныеНастройки)
	
	СтруктураПоиска = Новый Структура("ВидРегистра, ИмяРегистра", ВидРегистра, ИмяРегистра);
	СтрокиГлобальныхНастроек = ГлобальныеНастройки.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиГлобальныхНастроек.Количество() > 0 Тогда
	
		СтрокаГлобальныхНастроек = СтрокиГлобальныхНастроек.Получить(0);
		
		ЗаголовокГруппировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 ""%2"" (%3)'"),
			НРег(ЛокализацияВидРегистра), СтрокаГлобальныхНастроек.ПредставлениеРегистра,
			Формат(СтрокаГлобальныхНастроек.КоличествоЗаписей, "ЧГ=0"));
	
		МакетГруппировки                = СхемаКД.МакетыГруппировок.Добавить();
		МакетГруппировки.ИмяГруппировки = "Регистр" + ВидРегистра + "_" + ИмяРегистра;
		МакетГруппировки.ТипМакета      = ТипМакетаОбластиКомпоновкиДанных.Заголовок;
		МакетГруппировки.Макет          = "Макет" + Формат(ИндексНабора + 1, "ЧГ=0");
	
		МакетОбласти = Новый МакетОбластиКомпоновкиДанных;
		СтрокаМакета = МакетОбласти.Добавить(Тип("СтрокаТаблицыОбластиКомпоновкиДанных"));
		Ячейка       = СтрокаМакета.Ячейки.Добавить();
	
		ОформлениеЯчейки = Ячейка.Оформление.Элементы;
	
		Шрифт = ОформлениеЯчейки.Найти("Шрифт");
	
		Если Шрифт <> Неопределено Тогда
			Шрифт.Значение      = Новый Шрифт("Arial", 14);
			Шрифт.Использование = Истина;
		КонецЕсли;
	
		Размещение = ОформлениеЯчейки.Найти("Размещение");
	
		Если Размещение <> Неопределено Тогда
			Размещение.Значение      = ТипРазмещенияТекстаКомпоновкиДанных.Переносить;
			Размещение.Использование = Истина;
		КонецЕсли;
	
		ОбластьКД          = Ячейка.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
		ОбластьКД.Значение = ЗаголовокГруппировки;
	
		Макет       = СхемаКД.Макеты.Добавить();
		Макет.Имя   = "Макет" + Формат(ИндексНабора + 1, "ЧГ=0");
		Макет.Макет = МакетОбласти;
	
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСписокРегистров(ТаблицаРегистров)
	
	СписокРегистров = Новый СписокЗначений;
	
	Для Каждого СтрокаТаблицыРегистров Из ТаблицаРегистров Цикл
		
		ЗаголовокГруппировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
			НРег(СтрокаТаблицыРегистров.ЛокализацияВидРегистра), СтрокаТаблицыРегистров.ПредставлениеРегистра);
	
		СписокРегистров.Добавить(ЗаголовокГруппировки);
	
	КонецЦикла;
	
	Возврат СписокРегистров;
	
КонецФункции

Процедура УстановитьПараметрыДанных(НастройкиКД, СтруктураПараметров)
	
	ПараметрыДанных = НастройкиКД.ПараметрыДанных.Элементы;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл 
	
		ТекущийПараметр   = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		ТекущийПараметрКД = ПараметрыДанных.Найти(ТекущийПараметр);
	
		Если ТекущийПараметрКД <> Неопределено Тогда
	
			ТекущийПараметрКД.Использование = Истина;
			ТекущийПараметрКД.Значение      = Параметр.Значение;
	
		Иначе
	
			ПараметрДанных               = НастройкиКД.ПараметрыДанных.Элементы.Добавить();
			ПараметрДанных.Использование = Истина;
			ПараметрДанных.Значение      = Параметр.Значение;
			ПараметрДанных.Параметр      = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыводСКД

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДокументВладелец");
	Если ДокументПараметрСКД = Неопределено Или Не ЗначениеЗаполнено(ДокументПараметрСКД.Значение) Тогда
		Возврат;
	Иначе
		ДокументОтбор = ДокументПараметрСКД.Значение;
	КонецЕсли;
	
	МакетЗаголовка                              = ПолучитьМакет("Заголовок");
	ОбластьЗаголовка                            = МакетЗаголовка.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьЗаголовка.Параметры.СсылкаНаДокумент = Строка(ДокументОтбор);
	ПустаяОбласть                               = МакетЗаголовка.ПолучитьОбласть("ПустаяОбласть");
	
	ДокументРезультат.Вывести(ПустаяОбласть);
	ДокументРезультат.НачатьГруппуСтрок();
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	ДокументРезультат.ЗакончитьГруппуСтрок();
	ДокументРезультат.Вывести(ПустаяОбласть);
	
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДоопределитьГотовыйМакет(ДокументРезультат, ДокументОтбор);
	
КонецПроцедуры

Процедура ДоопределитьГотовыйМакет(ДокументРезультат, ДокументРегистратор)
	
	ТаблицаГлобальныхНастроек = ПерехватитьГлобальныеНастройки();
	ТаблицаГлобальныхНастроек.Колонки.Добавить("ТаблицаПримечаний", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для Каждого Строка Из ТаблицаГлобальныхНастроек Цикл
		Строка.ТаблицаПримечаний = ФормированиеСтрокиПримечания("Регистр" + Строка.ВидРегистра + "_" + Строка.ИмяРегистра);
	КонецЦикла;
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	ВысотаТаблицы = ДокументРезультат.ВысотаТаблицы;
	
	ТаблицаПримечаний = Новый ТаблицаЗначений;
	
	Для ИндексСтрок = 1 По ВысотаТаблицы Цикл
	
		Для ИндексКолонок = 1 По ШиринаТаблицы Цикл
	
			ИмяОбласти = "R" + Формат(ИндексСтрок, "ЧГ=0") + "C" + Формат(ИндексКолонок, "ЧГ=0");
			Область    = ДокументРезультат.Область(ИмяОбласти);
	
			СтрокаГлобальныхНастроек = ТаблицаГлобальныхНастроек.Найти(СокрЛП(Область.Текст), "НадписьРезультат");
			Если СтрокаГлобальныхНастроек <> Неопределено Тогда
	
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("ВидРегистра", СтрокаГлобальныхНастроек.ЛокализацияВидРегистра);
				СтруктураРасшифровки.Вставить("ИмяРегистра", СтрокаГлобальныхНастроек.ИмяРегистра);
				СтруктураРасшифровки.Вставить("Регистратор", ДокументРегистратор);
				Область.Расшифровка  = СтруктураРасшифровки;
	
				ОтчетыСервер.ВывестиГиперссылку(Область, СтруктураРасшифровки, Область.Текст);
	
				ТаблицаПримечаний = СтрокаГлобальныхНастроек.ТаблицаПримечаний;
	
				ГраницаПримечаний = 1;
	
			КонецЕсли;
	
		КонецЦикла;
	
		ИмяОбластиНумератора = "R" + Формат(ИндексСтрок, "ЧГ=0") + "C1";
		ОбластьНумератора    = ДокументРезультат.Область(ИмяОбластиНумератора);
	
		Если Не ЭтоЧисло(ОбластьНумератора.Текст) Тогда
	
			Если СтрНайти(ОбластьНумератора.Текст, "№ГруппаЭлементаВыводаСКДТекущегоДокумента") <> 0 Тогда
				ОбластьНумератора.Текст         = "№";
				ОбластьНумератора.ШиринаКолонки = 5;
			КонецЕсли;
	
		Иначе
	
			ОбластьНумератора.Отступ                  = 0;
			ОбластьНумератора.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
			СтрокаПримечания = ТаблицаПримечаний.Найти(ОбластьНумератора.Текст, "Этаж");
			Если СтрокаПримечания <> Неопределено Тогда
	
				ЭтажностьСтроки = СтрокаПримечания.Этажность + 1;
				Если ГраницаПримечаний = ЭтажностьСтроки Тогда
					
					ТекстПримечания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В этой строке: %1'"),
						СтрокаПримечания.Примечание + ".");
	
					ОбластьНумератора.Примечание.Текст = ТекстПримечания;
	
				Иначе
					ГраницаПримечаний = ГраницаПримечаний + 1;
				КонецЕсли;
	
			КонецЕсли;
	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОформления

Процедура ОформитьОтчет(НастройкиКД)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыводитьОтбор",           ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	СтруктураНастроек.Вставить("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	ДополнительнаяОбщаяНастройкаГруппировки(НастройкиКД, СтруктураНастроек);
	
КонецПроцедуры

Процедура ОформитьГруппировкуПоРегистру(ГруппировкаПоРегистру)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	ДополнительнаяОбщаяНастройкаГруппировки(ГруппировкаПоРегистру, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПользовательскоеОформление(СхемаКД, НастройкиКД, ПодготовленныеДанные)
	
	СписокВыбораРегистров = Новый СписокЗначений;
	
	УсловноеОформление      = НастройкиКД.УсловноеОформление.Элементы;
	ПоляУсловногоОформления = Новый ТаблицаЗначений;
	ПоляУсловногоОформленияКолонки = ПоляУсловногоОформления.Колонки;
	ПоляУсловногоОформленияКолонки.Добавить("ИмяРесурса",            Новый ОписаниеТипов("Строка"));
	ПоляУсловногоОформленияКолонки.Добавить("ПредставлениеРесурса",  Новый ОписаниеТипов("Строка"));
	ПоляУсловногоОформленияКолонки.Добавить("ВидРегистра",           Новый ОписаниеТипов("Строка"));
	ПоляУсловногоОформленияКолонки.Добавить("ПредставлениеРегистра", Новый ОписаниеТипов("Строка"));
	ПоляУсловногоОформленияКолонки.Добавить("ВидОформления",         Новый ОписаниеТипов("Строка"));
	
	Для Каждого ЭлементДанных Из ПодготовленныеДанные Цикл
	
		ИнформацияПоРегистру   = ЭлементДанных.ИнформацияПоРегистру;
		ИмяРегистра            = ИнформацияПоРегистру.ИмяРегистра;
		ВидРегистра            = ИнформацияПоРегистру.ВидРегистра;
		ЛокализацияВидРегистра = ИнформацияПоРегистру.ЛокализацияВидРегистра;
		ПредставлениеРегистра  = ИнформацияПоРегистру.ПредставлениеРегистра;
		РесурсыРегистра        = ИнформацияПоРегистру.Ресурсы;
		СтандартныеРеквизиты   = ИнформацияПоРегистру.СтандартныеРеквизиты;
		
		ЭлементСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 %2'"),
			НРег(ВидРегистра), ПредставлениеРегистра);
	
		СписокВыбораРегистров.Добавить(ЭлементСписка);
	
		Если ИнформацияПоРегистру.Свойство("РесурсыДт") Тогда
	
			РесурсыДт = ИнформацияПоРегистру.РесурсыДт;
			Для Каждого РесурсДт Из РесурсыДт Цикл
	
				СтруктураУсловногоОформления = Новый Структура;
				СтруктураУсловногоОформления.Вставить("ИмяРесурса",             РесурсДт.Ключ);
				СтруктураУсловногоОформления.Вставить("ПредставлениеРесурса",   РесурсДт.Значение);
				СтруктураУсловногоОформления.Вставить("ВидРегистра",            ВидРегистра);
				СтруктураУсловногоОформления.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
				СтруктураУсловногоОформления.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
				СтруктураУсловногоОформления.Вставить("ВидОформления",          "ОформлениеОтрицательности");
	
				ЗаполнитьЗначенияСвойств(ПоляУсловногоОформления.Добавить(), СтруктураУсловногоОформления);
	
			КонецЦикла;
	
		КонецЕсли;
	
		Если ИнформацияПоРегистру.Свойство("РесурсыКт") Тогда
	
			РесурсыКт = ИнформацияПоРегистру.РесурсыКт;
			Для Каждого РесурсКт Из РесурсыКт Цикл
	
				СтруктураУсловногоОформления = Новый Структура;
				СтруктураУсловногоОформления.Вставить("ИмяРесурса",             РесурсКт.Ключ);
				СтруктураУсловногоОформления.Вставить("ПредставлениеРесурса",   РесурсКт.Значение);
				СтруктураУсловногоОформления.Вставить("ВидРегистра",            ВидРегистра);
				СтруктураУсловногоОформления.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
				СтруктураУсловногоОформления.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
				СтруктураУсловногоОформления.Вставить("ВидОформления",          "ОформлениеОтрицательности");
	
				ЗаполнитьЗначенияСвойств(ПоляУсловногоОформления.Добавить(), СтруктураУсловногоОформления);
	
			КонецЦикла;
	
		КонецЕсли;
	
		Для Каждого РесурсРегистра Из РесурсыРегистра Цикл
	
			Если СокрЛП(НРег(ВидРегистра)) <> "сведений" Тогда
	
				СтруктураУсловногоОформления = Новый Структура;
				СтруктураУсловногоОформления.Вставить("ИмяРесурса",             РесурсРегистра.Ключ);
				СтруктураУсловногоОформления.Вставить("ПредставлениеРесурса",   РесурсРегистра.Значение);
				СтруктураУсловногоОформления.Вставить("ВидРегистра",            ВидРегистра);
				СтруктураУсловногоОформления.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
				СтруктураУсловногоОформления.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
				СтруктураУсловногоОформления.Вставить("ВидОформления",          "ОформлениеОтрицательности");
	
				ЗаполнитьЗначенияСвойств(ПоляУсловногоОформления.Добавить(), СтруктураУсловногоОформления);
	
			Иначе
				МетаданныеРесурсы = Метаданные.РегистрыСведений[ИмяРегистра];
				МетаданныеРесурс  = МетаданныеРесурсы.Ресурсы.Найти(РесурсРегистра.Ключ);
				Если МетаданныеРесурс <> Неопределено Тогда
	
					Если МетаданныеРесурс.Тип.СодержитТип(Тип("Число")) Тогда
	
						СтруктураУсловногоОформления = Новый Структура;
						СтруктураУсловногоОформления.Вставить("ИмяРесурса",             РесурсРегистра.Ключ);
						СтруктураУсловногоОформления.Вставить("ПредставлениеРесурса",   РесурсРегистра.Значение);
						СтруктураУсловногоОформления.Вставить("ВидРегистра",            ВидРегистра);
						СтруктураУсловногоОформления.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
						СтруктураУсловногоОформления.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
						СтруктураУсловногоОформления.Вставить("ВидОформления",          "ОформлениеОтрицательности");
	
						ЗаполнитьЗначенияСвойств(ПоляУсловногоОформления.Добавить(), СтруктураУсловногоОформления);
	
					КонецЕсли;
	
				КонецЕсли;
			КонецЕсли;
	
		КонецЦикла;
	
		Если СтандартныеРеквизиты.Свойство("ВидДвижения") Тогда
			
			СтруктураУсловногоОформления = Новый Структура;
			СтруктураУсловногоОформления.Вставить("ИмяРесурса",             "ВидДвижения");
			СтруктураУсловногоОформления.Вставить("ПредставлениеРесурса",   НСтр("ru = 'Вид движения'"));
			СтруктураУсловногоОформления.Вставить("ВидРегистра",            ВидРегистра);
			СтруктураУсловногоОформления.Вставить("ЛокализацияВидРегистра", ЛокализацияВидРегистра);
			СтруктураУсловногоОформления.Вставить("ПредставлениеРегистра",  ПредставлениеРегистра);
			СтруктураУсловногоОформления.Вставить("ВидОформления",          "ОформлениеВидаДвижений");
			
			ЗаполнитьЗначенияСвойств(ПоляУсловногоОформления.Добавить(), СтруктураУсловногоОформления);
	
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого ПолеУсловногоОформления Из ПоляУсловногоОформления Цикл
	
		Если ПолеУсловногоОформления.ВидОформления = "ОформлениеОтрицательности" Тогда
	
			ЦелевоеПоле = Новый ПолеКомпоновкиДанных(ПолеУсловногоОформления.ИмяРесурса);
	
			ЕдиницаУсловногоОформления = УсловноеОформление.Добавить();
			ЕдиницаУсловногоОформления.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
			ОтборУсловногоОформления = ЕдиницаУсловногоОформления.Отбор;
			
			ЭлементОтбора = ОтборУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ЛевоеЗначение  = ЦелевоеПоле;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = 0;
			ЭлементОтбора.Использование  = Истина;
	
			ЭлементОтбора = ОтборУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ОтрицательноеКрасным");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора.Использование  = Истина;
	
			ЕдиницаУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
			ОформляемыеПоля = ЕдиницаУсловногоОформления.Поля.Элементы;
			ОформляемоеПоле = ОформляемыеПоля.Добавить();
			
			ОформляемоеПоле.Поле          = ЦелевоеПоле;
			ОформляемоеПоле.Использование = Истина;
			
			СтрокаПредставления = НСтр("ru = 'Отметка отрицательности ресурса ""%1"", регистра %2: ""%3""'");
			ПредставлениеПользовательскойНастройки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПредставления,
				ПолеУсловногоОформления.ПредставлениеРесурса, НРег(ПолеУсловногоОформления.ВидРегистра),
				ПолеУсловногоОформления.ПредставлениеРегистра);
	
			ЕдиницаУсловногоОформления.ПредставлениеПользовательскойНастройки = ПредставлениеПользовательскойНастройки;
			ЕдиницаУсловногоОформления.РежимОтображения                       = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЕдиницаУсловногоОформления.Использование                          = Истина;
	
		ИначеЕсли ПолеУсловногоОформления.ВидОформления = "ОформлениеВидаДвижений" Тогда
	
			ЦелевоеПоле = Новый ПолеКомпоновкиДанных(ПолеУсловногоОформления.ИмяРесурса);
	
			ЕдиницаУсловногоОформленияПриход = УсловноеОформление.Добавить();
			ЕдиницаУсловногоОформленияПриход.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
			ОтборУсловногоОформленияПриход = ЕдиницаУсловногоОформленияПриход.Отбор;
			
			ЭлементОтбора = ОтборУсловногоОформленияПриход.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ЛевоеЗначение  = ЦелевоеПоле;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ВидДвиженияНакопления.Приход;
			ЭлементОтбора.Использование  = Истина;
	
			ЭлементОтбора = ОтборУсловногоОформленияПриход.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыделятьВидДвиженияНакопления");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора.Использование  = Истина;
	
			ЕдиницаУсловногоОформленияПриход.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатУспехЦвет);
	
			ОформляемыеПоля = ЕдиницаУсловногоОформленияПриход.Поля.Элементы;
			ОформляемоеПоле = ОформляемыеПоля.Добавить();
			
			ОформляемоеПоле.Поле          = ЦелевоеПоле;
			ОформляемоеПоле.Использование = Истина;
			
			СтрокаПредставления = НСтр("ru = 'Отметить зеленым приход регистра %1: ""%2""'");
			ПредставлениеПользовательскойНастройки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПредставления,
				НРег(ПолеУсловногоОформления.ВидРегистра), ПолеУсловногоОформления.ПредставлениеРегистра);
	
			ЕдиницаУсловногоОформленияПриход.ПредставлениеПользовательскойНастройки = ПредставлениеПользовательскойНастройки;
			ЕдиницаУсловногоОформленияПриход.РежимОтображения                       = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЕдиницаУсловногоОформленияПриход.Использование                          = Истина;
	
			ЕдиницаУсловногоОформленияРасход = УсловноеОформление.Добавить();
			ЕдиницаУсловногоОформленияРасход.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
			ОтборУсловногоОформленияРасход = ЕдиницаУсловногоОформленияРасход.Отбор;
			ЭлементОтбора = ОтборУсловногоОформленияРасход.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ЛевоеЗначение  = ЦелевоеПоле;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ВидДвиженияНакопления.Расход;
			ЭлементОтбора.Использование  = Истина;
	
			ЭлементОтбора = ОтборУсловногоОформленияРасход.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыделятьВидДвиженияНакопления");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			ЭлементОтбора.Использование  = Истина;
	
			ЕдиницаУсловногоОформленияРасход.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
			ОформляемыеПоля = ЕдиницаУсловногоОформленияРасход.Поля.Элементы;
			
			ОформляемоеПоле = ОформляемыеПоля.Добавить();
			
			ОформляемоеПоле.Поле          = ЦелевоеПоле;
			ОформляемоеПоле.Использование = Истина;
			
			СтрокаПредставления = НСтр("ru = 'Отметить красным расход регистра %1: ""%2""'");
			ПредставлениеПользовательскойНастройки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПредставления,
				НРег(ПолеУсловногоОформления.ВидРегистра), ПолеУсловногоОформления.ПредставлениеРегистра);
	
			ЕдиницаУсловногоОформленияРасход.ПредставлениеПользовательскойНастройки = ПредставлениеПользовательскойНастройки;
			ЕдиницаУсловногоОформленияРасход.РежимОтображения                       = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЕдиницаУсловногоОформленияРасход.Использование                          = Истина;
	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПримечаний

Функция ФормированиеСтрокиПримечания(ИмяРегистра)
	
	ЭтажиСтроки   = Новый ТаблицаЗначений;
	КолонкиЭтажей = ЭтажиСтроки.Колонки;
	КолонкиЭтажей.Добавить("Этаж",       Новый ОписаниеТипов("Строка"));
	КолонкиЭтажей.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	КолонкиЭтажей.Добавить("Этажность",  Новый ОписаниеТипов("Число"));
	
	МассивВыбранныхПолей = Новый Массив;
	СтруктураГруппировок = КомпоновщикНастроек.ПолучитьНастройки().Структура;
	НайтиГруппировкуРекурсивно(СтруктураГруппировок, МассивВыбранныхПолей, ИмяРегистра);
	
	ПолеНумератора  = Новый ПолеКомпоновкиДанных("Нумератор");
	ЭтажностьСтроки = ЭтажностьСтроки(ПолеНумератора, МассивВыбранныхПолей);
	
	Для Индекс = 0 По ЭтажностьСтроки - 1 Цикл
	
		СтрокаПримечания = "";
	
		Для Каждого ВыбраннаяГруппа Из МассивВыбранныхПолей Цикл
			Если ВыбраннаяГруппа.Поле <> ПолеНумератора Тогда
	
				Заголовок = "";
				Если ВыбраннаяГруппа.Заголовок = НСтр("ru = 'Стандартные реквизиты'") Тогда
					Заголовок = НСтр("ru = 'Стандартный реквизит'");
				ИначеЕсли ВыбраннаяГруппа.Заголовок = НСтр("ru = 'Измерения'") Тогда
					Заголовок = НСтр("ru = 'Измерение'");
				ИначеЕсли ВыбраннаяГруппа.Заголовок = НСтр("ru = 'Ресурсы'") Тогда
					Заголовок = НСтр("ru = 'Ресурс'");
				ИначеЕсли ВыбраннаяГруппа.Заголовок = НСтр("ru = 'Реквизиты'") Тогда
					Заголовок = НСтр("ru = 'Реквизит'");
				ИначеЕсли ВыбраннаяГруппа.Заголовок = НСтр("ru = 'Данные расчета'") Тогда
					Заголовок = НСтр("ru = 'Данные расчета'");
				КонецЕсли;
	
				Элементы = ВыбраннаяГруппа.Элементы;
	
				Если Индекс <= Элементы.Количество() - 1 Тогда
					ВыбранноеПоле = Элементы[Индекс];
					Если ВыбранноеПоле.Использование Тогда
						СтрокаПримечания = СтрокаПримечания + ?(ЗначениеЗаполнено(СтрокаПримечания), ", ", "")
							+ Элементы[Индекс].Заголовок + " (" + Заголовок + ")";
					КонецЕсли;
				КонецЕсли;
	
			КонецЕсли;
		КонецЦикла;
		
		СтруктураЭтажа = Новый Структура;
		СтруктураЭтажа.Вставить("Этаж",       Формат(Индекс + 1, "ЧГ=0"));
		СтруктураЭтажа.Вставить("Примечание", СтрокаПримечания);
		СтруктураЭтажа.Вставить("Этажность",  ЭтажностьСтроки);
		
		ЗаполнитьЗначенияСвойств(ЭтажиСтроки.Добавить(), СтруктураЭтажа);
	
	КонецЦикла;
	
	Возврат ЭтажиСтроки;
	
КонецФункции

Функция ЭтажностьСтроки(ПолеНумератора, МассивВыбранныхПолей)
	
	ЭтажностьСтроки = 0;
	Для Каждого ВыбраннаяГруппа Из МассивВыбранныхПолей Цикл
	
		Если ВыбраннаяГруппа.Поле = ПолеНумератора Тогда
			Элементы = ВыбраннаяГруппа.Элементы;
			Для Каждого Элемент Из Элементы Цикл
				Если Элемент.Использование Тогда
					ЭтажностьСтроки = ЭтажностьСтроки + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ЭтажностьСтроки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоЧисло(Знач ПроверяемоеЗначение)
	
	Попытка
		ПроверяемоеЗначение = Число(ПроверяемоеЗначение);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ОпределитьРасположениеЭлементовУправления()
	
	МассивНастроек              = Новый Массив;
	НастройкиЭлементаУправления = Новый Структура;
	
	НастройкиЭлементаУправления.Вставить("Поле",                     "СписокРегистров");
	НастройкиЭлементаУправления.Вставить("РастягиватьПоГоризонтали", Ложь);
	НастройкиЭлементаУправления.Вставить("АвтоМаксимальнаяШирина",   Истина);
	НастройкиЭлементаУправления.Вставить("Ширина",                   40);
	
	МассивНастроек.Добавить(НастройкиЭлементаУправления);
	
	НастройкиЭлементовУправления = Новый Структура();
	НастройкиЭлементовУправления.Вставить("ПараметрыДанных", МассивНастроек);
	
	Возврат НастройкиЭлементовУправления;
	
КонецФункции

Функция ПерехватитьГлобальныеНастройки()
	
	ГлобальныеНастройки = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ГлобальныеНастройки;
	
	ТаблицаГлобальныхНастроек = Новый ТаблицаЗначений;
	КолонкиГлобальныхНастроек = ТаблицаГлобальныхНастроек.Колонки;
	КолонкиГлобальныхНастроек.Добавить("ИмяРегистра",
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	КолонкиГлобальныхНастроек.Добавить("ПредставлениеРегистра",
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(128)));
	КолонкиГлобальныхНастроек.Добавить("ВидРегистра",
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(32)));
	КолонкиГлобальныхНастроек.Добавить("ЛокализацияВидРегистра",
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(32)));
	КолонкиГлобальныхНастроек.Добавить("КоличествоЗаписей"     , Новый ОписаниеТипов("Число"));
	КолонкиГлобальныхНастроек.Добавить("НадписьРезультат"      ,
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(256)));
	
	Для Каждого ЭлементГлобальныхНастроек Из ГлобальныеНастройки Цикл
	
		НоваяСтрока = ТаблицаГлобальныхНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементГлобальныхНастроек);
		
		НадписьРезультат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Регистр %1 ""%2"" (%3)'"),
			СокрЛП(НРег(ЭлементГлобальныхНастроек.ЛокализацияВидРегистра)),
			ЭлементГлобальныхНастроек.ПредставлениеРегистра,
			Формат(ЭлементГлобальныхНастроек.КоличествоЗаписей, "ЧГ=0"));
	
		НоваяСтрока.НадписьРезультат = НадписьРезультат;
	
	КонецЦикла;
	
	Возврат ТаблицаГлобальныхНастроек;
	
КонецФункции

Функция УстановитьПараметрВывода(КомпоновщикНастроекГруппировка, ИмяПараметра, Значение)
	
	ПараметрСКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	Если ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда	
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрСКД);
	Иначе
		ЗначениеПараметра = КомпоновщикНастроекГруппировка.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрСКД);
	КонецЕсли;
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Процедура НайтиГруппировкуРекурсивно(КоллекцияЭлементов, МассивВыбранныхПолей, ЗначениеПоиска)
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Если Элемент.Имя = ЗначениеПоиска Тогда
				Если Элемент.Структура.Количество() > 0 Тогда
					ДетальныеЗаписи = Элемент.Структура[0];
					ВыбранныеПоля   = ДетальныеЗаписи.Выбор.Элементы;
					Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
						МассивВыбранныхПолей.Добавить(ВыбранноеПоле);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			НайтиГруппировкуРекурсивно(Элемент.Структура, МассивВыбранныхПолей, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Строки, МассивВыбранныхПолей, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Колонки, МассивВыбранныхПолей, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Серии, МассивВыбранныхПолей, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Точки, МассивВыбранныхПолей, ЗначениеПоиска);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыОтчета(НастройкиКД, ПользовательскиеНастройкиКД)
	
	Результат = Новый Структура("ДокументВладелец");
	
	ПараметрДокументВладелец = Неопределено;
	
	Если ТипЗнч(ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементКД Из ПользовательскиеНастройкиКД.Элементы Цикл
			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(ЭлементКД.Параметр);
				Если ИмяПараметра = "ДокументВладелец" Тогда
					ПараметрДокументВладелец = ЭлементКД;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрДокументВладелец = Неопределено Тогда
		ПараметрДокументВладелец = НастройкиКД.ПараметрыДанных.Элементы.Найти("ДокументВладелец");
	КонецЕсли;
	
	Если ПараметрДокументВладелец <> Неопределено Тогда
		Результат.ДокументВладелец = ПараметрДокументВладелец.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли