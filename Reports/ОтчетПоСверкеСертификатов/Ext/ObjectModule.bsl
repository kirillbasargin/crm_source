#Область ПрограммныйИнтерфейс

Процедура СформироватьОтчет(Результат, КомпоновщикНастроек, ДанныеРасшифровки) Экспорт
		
	ТЗДляОтчета = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыдачаПодарков.Сделка КАК Ссылка,
	//Для исторических данных
	|	ВыдачаПодарков.Сделка.GUID_ИсторическойСделкиСРМ КАК GUID_ИсторическойСделкиСРМ
	|ИЗ
	|	РегистрСведений.ВыдачаПодарков КАК ВыдачаПодарков
	|ГДЕ
	|	ВыдачаПодарков.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВыдачаПодарков.Причина.ВыдачаСертификата
	|	И &Подарок
	|	И &Причина
	|	И &Проект
	|	И &Клиент
	|	И &Менеджер";
	
	пПроект = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Проект");
	Если пПроект <> Неопределено
			И пПроект.Использование Тогда
		Запрос.УстановитьПараметр("Проект", пПроект.Значение);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Проект", " И ВыдачаПодарков.Проект = &Проект");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Проект", "");
	КонецЕсли;	
	
	ВыполнитьКорректировкуТекстаЗапроса(Запрос, КомпоновщикНастроек);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивУИДов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		//Для исторических данных
		Если Выборка.GUID_ИсторическойСделкиСРМ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
			МассивУИДов.Добавить(Выборка.GUID_ИсторическойСделкиСРМ);
		Иначе
			МассивУИДов.Добавить(Выборка.Ссылка.УникальныйИдентификатор());	
		КонецЕсли;
			
	КонецЦикла;
	
	Если пПроект <> Неопределено
			И ЗначениеЗаполнено(пПроект.Значение) Тогда
	
		БазаDS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(пПроект.Значение, "ПроектБазыДомостроителя");
		
	Иначе
		
		БазаDS = Ложь;
	
	КонецЕсли;
	
	ПроксиСервер 	= Неопределено;
	ИмяСервиса 		= "ReportCRM";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, БазаDS, ИмяСервиса);	

	ТЗ 				= ПроксиСервер.ReturnReport(ЗначениеВСтрокуВнутр(МассивУИДов));
	ТаблицаСопуток 	= ЗначениеИзСтрокиВнутр(ТЗ);
	ТЗ 				= Неопределено;
	ПроксиСервер 	= Неопределено;
	Массив 			= Новый Массив;
	Массив.Добавить(Тип("ДокументСсылка.ЗаявкаНаСделку"));
	ОписаниеТиповС 	= Новый ОписаниеТипов(Массив);
	ТаблицаСопуток.Колонки.Добавить("СсылкаНаСделку", ОписаниеТиповС);
	
	Для Каждого Стр из ТаблицаСопуток Цикл
		Стр.СсылкаНаСделку = Документы.ЗаявкаНаСделку.ПолучитьСсылку(Стр.СделкаCRM);
		//Для исторических данных
		Если СтрНайти(Строка(Стр.СсылкаНаСделку), "не найден") > 0 Тогда
			Стр.СсылкаНаСделку = Документы.ЗаявкаНаСделку.НайтиПоРеквизиту("GUID_ИсторическойСделкиСРМ", Стр.СделкаCRM);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаСопуток);
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ТЗ.НомерСертификата КАК НомерСертификата,
	|	ТЗ.НаименованиеСертификата КАК НаименованиеСертификата,
	|	ТЗ.КодСертификата КАК КодСертификата,
	|	ТЗ.ПолучательВУПН КАК ПолучательВУПН,
	|	ТЗ.КодСделки КАК КодСделки,
	|	ТЗ.СуммаДоговора КАК СуммаДоговора,
	|	ТЗ.СсылкаНаСделку КАК СсылкаНаСделку
	|ПОМЕСТИТЬ СертификатыИЗУПН
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Клиенты.ОсновнойТелефон КАК ОсновнойТелефон,
	|	Клиенты.GUID КАК GUID
	|ПОМЕСТИТЬ ВТ_Клиенты
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	НЕ Клиенты.GUID = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	GUID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыдачаПодарков.Подарок КАК Номенклатура,
	|	ВыдачаПодарков.Проект КАК Проект,
	|	ВыдачаПодарков.Регистратор КАК ВыдачаПодарков,
	|	ЗаявкаНаСделку.ТипСертификата КАК ТипСертификата,
	|	ВыдачаПодарков.Сделка КАК ЗаявкаНаСделку,
	|	ВыдачаПодарков.Ответственный КАК Менеджер,
	|	ВыдачаПодарков.Регистратор.Автор КАК Автор,
	|	ПОДСТРОКА(ВыдачаПодарков.НомерСертификата, 0, 2) + "" "" + ПОДСТРОКА(ВыдачаПодарков.НомерСертификата, 3, 2) + "" №"" + ПОДСТРОКА(ВыдачаПодарков.НомерСертификата, 5, 4) КАК НомерСертификатаCRM,
	|	СертификатыИЗУПН.НомерСертификата КАК НомерСертификатаУПН,
	|	СертификатыИЗУПН.КодСделки КАК Сделка,
	|	СертификатыИЗУПН.ПолучательВУПН КАК ПолучательВУПН,
	|	СертификатыИЗУПН.СуммаДоговора КАК СуммаДоговора,
	|	ВыдачаПодарков.Регистратор.Дата КАК ВыдачаПодарковДата,
	|	ВыдачаПодарков.Регистратор.Клиент КАК Клиент,
	|	ЕСТЬNULL(Клиенты.ОсновнойТелефон, 0) КАК Телефон
	|ИЗ
	|	РегистрСведений.ВыдачаПодарков КАК ВыдачаПодарков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
	|			ЛЕВОЕ СОЕДИНЕНИЕ СертификатыИЗУПН КАК СертификатыИЗУПН
	|			ПО ЗаявкаНаСделку.ТипСертификата.Код = СертификатыИЗУПН.КодСертификата
	|				И ЗаявкаНаСделку.Ссылка = СертификатыИЗУПН.СсылкаНаСделку
	|		ПО ВыдачаПодарков.Сделка = ЗаявкаНаСделку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Клиенты КАК Клиенты
	|		ПО (НЕ ВыдачаПодарков.Регистратор.Клиент.GUID = """")
	|			И ВыдачаПодарков.Регистратор.Клиент.GUID = Клиенты.GUID
	|ГДЕ
	|	ВыдачаПодарков.Регистратор.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВыдачаПодарков.Причина.ВыдачаСертификата
	|	И &Подарок
	|	И &Причина
	|	И &Проект
	|	И &Клиент
	|	И &Менеджер";
	
	пПроект = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Проект");
	Если пПроект <> Неопределено
			И пПроект.Использование Тогда
		Запрос.УстановитьПараметр("Проект", пПроект.Значение);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Проект", " И ВыдачаПодарков.Проект = &Проект");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Проект", "");
	КонецЕсли;	
	
	ВыполнитьКорректировкуТекстаЗапроса(Запрос, КомпоновщикНастроек);	
	
	ТЗДляОтчета 	= Запрос.Выполнить().Выгрузить();	
	НаборыДанных 	= Новый Структура("ТЗДляОтчета", ТЗДляОтчета); 
			   
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанных, ДанныеРасшифровки, Истина);
			  
	Результат.Очистить();
	ДокументРезультат = Результат;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;	
	
	ПроцессорВывода.УстановитьДокумент(Результат);
		
	ПроцессорВывода.НачатьВывод();
	
	ТаблицаЗафиксирована = Ложь;
	Пока Истина Цикл
		сч = ДанныеРасшифровки.Элементы.Количество();
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультата= Неопределено Тогда
			Прервать;                                
		Иначе
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			Если Не ТаблицаЗафиксирована
				И ЭлементРезультата.ЗначенияПараметров.Количество() >  0 Тогда			
				ТаблицаЗафиксирована = Истина;
				Результат.ФиксацияСверху = 5;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартнаяОбработка = Ложь;
	
	СформироватьОтчет(ДокументРезультат, НастройкиКД, ДанныеРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьКорректировкуТекстаЗапроса(Запрос, КомпоновщикНастроек)

	пПериод = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Период");
	Если пПериод.Использование  Тогда
		Запрос.УстановитьПараметр("ДатаНачала", пПериод.Значение.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", пПериод.Значение.ДатаОкончания);		
	КонецЕсли;
		
	пНоменклатура = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Номенклатура");
	Если пНоменклатура <> Неопределено
			И пНоменклатура.Использование Тогда
		Запрос.УстановитьПараметр("Подарок", пНоменклатура.Значение);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Подарок", " И ВыдачаПодарков.Подарок = &Подарок");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Подарок", "");		
	КонецЕсли;
	
	пПричина = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Причина");
	Если пПричина <> Неопределено
			И пПричина.Использование Тогда
		Запрос.УстановитьПараметр("Причина", пПричина.Значение);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Причина", " И ВыдачаПодарков.Причина = &Причина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Причина", "");		
	КонецЕсли;

	пМенеджер = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Менеджер");
	Если пМенеджер <> Неопределено
			И пМенеджер.Использование Тогда
		Запрос.УстановитьПараметр("Менеджер", пМенеджер.Значение);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Менеджер", " И ВыдачаПодарков.Ответственный = &Менеджер");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Менеджер", "");			
	КонецЕсли;
	//
	пКлиент = КомпоновщикНастроек.ПараметрыДанных.Элементы.Найти("Клиент");
	Если пКлиент <> Неопределено
			И пМенеджер.Использование Тогда
		Запрос.УстановитьПараметр("Клиент", пКлиент.Значение);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Клиент", " И ВыдачаПодарков.Клиент = &Клиент");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Клиент", "");			
	КонецЕсли;
	

КонецПроцедуры


#КонецОбласти

