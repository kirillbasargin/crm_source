
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина;
	Настройки.СкрытьКомандыРассылки                              = Истина;
	Настройки.ФормироватьСразу                                   = Истина;
	
	Настройки.События.ПриСозданииНаСервере               = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере    = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//   ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример 1 - Добавление команды с обработчиком в ОтчетыКлиентПереопределяемый.ОбработчикКоманды:
//	Команда = Форма.Команды.Добавить("МояОсобеннаяКоманда");
//	Команда.Действие  = "Подключаемый_Команда";
//	Команда.Заголовок = НСтр("ru = 'Моя команда...'");
//	
//	Кнопка = Форма.Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Форма.Элементы.ГруппаПрограммныйИнтерфейс);
//	Кнопка.ИмяКоманды = Команда.Имя;
//	
//	Форма.ПостоянныеКоманды.Добавить(КомандаСоздать.Имя);
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ПараметрыФормы = Форма.Параметры;
	Если ПараметрыФормы.Свойство("СсылкаНаОбъект") Тогда
		
		ИмяПроцедуры = "КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемамОбъекта";
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "Форма", Форма, Тип("УправляемаяФорма"));
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ПроблемныйОбъект", ПараметрыФормы.СсылкаНаОбъект, ОбщегоНазначения.ОписаниеТипаВсеСсылки());
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "СтандартнаяОбработка", СтандартнаяОбработка, Тип("Булево"));
		
		СтруктураПараметровДанных = Новый Структура("Контекст", ПараметрыФормы.СсылкаНаОбъект);
		УстановитьПараметрыДанных(КомпоновщикНастроек.Настройки, СтруктураПараметровДанных);
		
	ИначеЕсли ПараметрыФормы.Свойство("ДанныеКонтекста") Тогда
		
		Если ТипЗнч(ПараметрыФормы.ДанныеКонтекста) = Тип("Структура") Тогда
			
			ДанныеКонтекста  = ПараметрыФормы.ДанныеКонтекста;
			ВыделенныеСтроки = ДанныеКонтекста.ВыделенныеСтроки;
			
			Если ВыделенныеСтроки.Количество() > 0 Тогда
				
				ПроблемныеОбъекты = КонтрольВеденияУчетаСлужебный.ПроблемныеОбъекты(ДанныеКонтекста.ВыделенныеСтроки);
				
				Если ПроблемныеОбъекты.Количество() = 0 Тогда
					Отказ = Истина;
				Иначе
					
					СписокПроблемныхОбъектов = Новый СписокЗначений;
					СписокПроблемныхОбъектов.ЗагрузитьЗначения(ПроблемныеОбъекты);
					
					СтруктураПараметровДанных = Новый Структура("Контекст", СписокПроблемныхОбъектов);
					УстановитьПараметрыДанных(КомпоновщикНастроек.Настройки, СтруктураПараметровДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыФормы.Свойство("МассивСсылок") Тогда
		
		МассивСсылок = ПараметрыФормы.МассивСсылок;
		Если МассивСсылок.Количество() > 0 Тогда
			
			СписокПроблемныхОбъектов = Новый СписокЗначений;
			СписокПроблемныхОбъектов.ЗагрузитьЗначения(МассивСсылок);
			
			СтруктураПараметровДанных = Новый Структура("Контекст", СписокПроблемныхОбъектов);
			УстановитьПараметрыДанных(КомпоновщикНастроек.Настройки, СтруктураПараметровДанных);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыФормы.Свойство("ВидПроверки") Тогда
		
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("КонтрольВеденияУчетаКлиент.ОткрытьОтчетПоПроблемам", "ВидПроверки", ПараметрыФормы.ВидПроверки, КонтрольВеденияУчетаПовтИсп.ОписаниеТипаВидПроверки());
		
		ПодробнаяИнформацияПоВидамПроверки = КонтрольВеденияУчета.ПодробнаяИнформацияПоВидамПроверки(ПараметрыФормы.ВидПроверки);
		Если ПодробнаяИнформацияПоВидамПроверки.Количество() = 0 Тогда
			Отказ = Истина;
		Иначе
			
			СписокПроверокПередОбновлением = Новый СписокЗначений;
			СписокПроверокПередОбновлением.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодробнаяИнформацияПоВидамПроверки.ВыгрузитьКолонку("ПравилоПроверки")));
			
			КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокПроблем", СписокПроверокПередОбновлением);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыФормы.Свойство("ПараметрКоманды") Тогда
		
		Если ТипЗнч(ПараметрыФормы.ПараметрКоманды) = Тип("Массив") И ПараметрыФормы.ПараметрКоманды.Количество() > 0 Тогда
			
			СписокПроверок = Новый СписокЗначений;
			СписокПроверок.ЗагрузитьЗначения(ПараметрыФормы.ПараметрКоманды);
			
			КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокПроблем", СписокПроверок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже.
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД,
	НовыеПользовательскиеНастройкиКД) Экспорт
	
	ПараметрВыводитьОтветственного = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтветственного"));
	Если ПараметрВыводитьОтветственного <> Неопределено И НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
		Настройка = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ПараметрВыводитьОтветственного.ИдентификаторПользовательскойНастройки);
		Если Настройка <> Неопределено Тогда
			СкрытьГруппировкуПоОтветственным(НовыеНастройкиКД, Настройка);
		КонецЕсли;
	КонецЕсли;
	
	Если КлючСхемы <> "1" Тогда
		КлючСхемы = "1";
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПередЗагрузкойВариантаНаСервере" в синтакс-помощнике.
//   ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере().
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ПараметрСКД         = Новый ПараметрКомпоновкиДанных("Контекст");
	КонтекстПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ПараметрСКД);
	
	Если КонтекстПараметрСКД <> Неопределено Тогда
		Контекст = КонтекстПараметрСКД.Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контекст) Тогда
		УстановитьПараметрыДанных(НовыеНастройкиКД, Новый Структура("Контекст", Контекст));
	КонецЕсли;
	
	УстановитьЛокализованныеПараметры(НовыеНастройкиКД);
	
	ДополнительныеСвойства = КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("СписокПроблем") Тогда
		УстановитьОтборПоСпискуПроблем(НовыеНастройкиКД.Отбор, ВидСравненияКомпоновкиДанных.ВСписке, ДополнительныеСвойства.СписокПроблем);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область ВыводСКД

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверкиВеденияУчета = КонтрольВеденияУчетаПовтИсп.ПроверкиВеденияУчета();
	
	НастройкиКД       = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКД, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("ВнешняяТаблица", ПроверкиВеденияУчета.Проверки), ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДоопределитьГотовыйМакет(ДокументРезультат);
	
КонецПроцедуры

Процедура ДоопределитьГотовыйМакет(ДокументРезультат)
	
	ДоопределитьШапку(ДокументРезультат);
	
	ДоопределитьВыводИтогов(ДокументРезультат);
	
	ПроставитьГиперссылкиРешений(ДокументРезультат);
	
КонецПроцедуры

Процедура ДоопределитьШапку(ДокументРезультат)
	
	ПерваяСтрока    = 0;
	ПоследняяСтрока = 0;
	
	ВысотаТаблицы = ДокументРезультат.ВысотаТаблицы;
	
	Для ИндексСтрок = 1 По ВысотаТаблицы Цикл
		
		ИмяОбласти = "R" + Формат(ИндексСтрок, "ЧГ=0");
		Область    = ДокументРезультат.Область(ИмяОбласти);
		
		Если СтрНайти(Область.Текст, "[Заголовок скрыт]") <> 0 Тогда
			Если ПерваяСтрока = 0 Тогда
				ПерваяСтрока = ИндексСтрок;
			КонецЕсли;
			ПоследняяСтрока = ПоследняяСтрока + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("R" + Формат(ПерваяСтрока, "ЧГ=0") + ":R" + Формат(ПерваяСтрока + ПоследняяСтрока - 1, "ЧГ=0")),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	ДокументРезультат.ФиксацияСверху = ПерваяСтрока - 1;
	
КонецПроцедуры

Процедура ДоопределитьВыводИтогов(ДокументРезультат)
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	ВысотаТаблицы = ДокументРезультат.ВысотаТаблицы;
	
	Для ИндексСтрок = 1 По ВысотаТаблицы Цикл
		
		Для ИндексКолонок = 1 По ШиринаТаблицы Цикл
			
			ИмяОбласти = "R" + Формат(ИндексСтрок, "ЧГ=0") + "C" + Формат(ИндексКолонок, "ЧГ=0");
			Область    = ДокументРезультат.Область(ИмяОбласти);
			
			Если СокрЛП(ВРег(Область.Текст)) = "ИТОГО" Тогда
				Область.ЦветФона = Новый Цвет(255, 250, 217);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ИмяОбласти   = "R" + Формат(ИндексСтрок, "ЧГ=0") + "C1";
		Область      = ДокументРезультат.Область(ИмяОбласти);
		ТекстОбласти = СокрЛП(ВРег(Область.Текст));
		
		Если ТекстОбласти = "ОШИБКА"
			Или ТекстОбласти = "ВОЗМОЖНЫЕ ПРИЧИНЫ"
			Или ТекстОбласти = "РЕКОМЕНДАЦИИ"
			Или ТекстОбласти = "РЕШЕНИЕ" Тогда
			
			Для ИндексКолонок = 3 По ШиринаТаблицы Цикл
				ИмяОбластиРесурсов    = "R" + Формат(ИндексСтрок, "ЧГ=0") + "C" + Формат(ИндексКолонок, "ЧГ=0");
				ОбластьРесурсов       = ДокументРезультат.Область(ИмяОбластиРесурсов);
				ОбластьРесурсов.Текст = "";
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьГиперссылкиРешений(ДокументРезультат)
	
	ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	ВысотаТаблицы = ДокументРезультат.ВысотаТаблицы;
	
	Для ИндексСтрок = 1 По ВысотаТаблицы Цикл
		
		Для ИндексКолонок = 1 По ШиринаТаблицы Цикл
			
			ИмяОбласти   = "R" + Формат(ИндексСтрок, "ЧГ=0") + "C" + Формат(ИндексКолонок, "ЧГ=0");
			Область      = ДокументРезультат.Область(ИмяОбласти);
			ТекстОбласти = Область.Текст;
			
			Если СтрНачинаетсяС(ТекстОбласти, "%") И СтрЗаканчиваетсяНа(ТекстОбласти, "%") Тогда
				
				ТекстОбласти      = СокрЛП(СтрЗаменить(ТекстОбласти, "%", ""));
				РазделеннаяСтрока = СтрРазделить(ТекстОбласти, ",");
				
				Если РазделеннаяСтрока.Количество() <> 3 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбработчикПереходаКИсправлению = РазделеннаяСтрока.Получить(1);
				Если Не ЗначениеЗаполнено(ОбработчикПереходаКИсправлению) Тогда
					Область.Текст = "";
					Продолжить;
				КонецЕсли;
				
				ВидПроверки = Справочники.ВидыПроверок.ПолучитьСсылку(Новый УникальныйИдентификатор(РазделеннаяСтрока.Получить(2)));
				
				СтруктураРасшифровки = Новый Структура;
				
				СтруктураРасшифровки.Вставить("Назначение",                     "ИсправитьПроблемы");
				СтруктураРасшифровки.Вставить("ИдентификаторПроверки",          РазделеннаяСтрока.Получить(0));
				СтруктураРасшифровки.Вставить("ОбработчикПереходаКИсправлению", ОбработчикПереходаКИсправлению);
				СтруктураРасшифровки.Вставить("ВидПроверки",                    ВидПроверки);
				
				Область.Расшифровка = СтруктураРасшифровки;
				
				ОтчетыСервер.ВывестиГиперссылку(Область, СтруктураРасшифровки, НСтр("ru = 'Выполнить исправление'"));
				
			ИначеЕсли СтрНайти(ТекстОбласти, "<Размещение структуры набора записей для последующей расшифровки>") <> 0 Тогда
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Назначение", "ОткрытьФормуРегистра");
				
				ОтборНабораЗаписей = Новый Структура;
				РазделенныйТекст   = СтрРазделить(ТекстОбласти, Символы.ПС);
				
				Для Каждого ЭлементТекста Из РазделенныйТекст Цикл
					
					Если РазделенныйТекст.Найти(ЭлементТекста) = 0 Тогда
						Продолжить;
					ИначеЕсли РазделенныйТекст.Найти(ЭлементТекста) = 1 Тогда
						СтруктураРасшифровки.Вставить("ПолноеИмяРегистра", ЭлементТекста);
						Продолжить;
					КонецЕсли;
					
					РазделенныйЭлементТекста = СтрРазделить(ЭлементТекста, "~~~", Ложь);
					
					Если РазделенныйЭлементТекста.Количество() <> 3 Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяОтбора             = РазделенныйЭлементТекста.Получить(0);
					ТипЗначенияОтбора     = РазделенныйЭлементТекста.Получить(1);
					ЗначениеОтбораСтрокой = РазделенныйЭлементТекста.Получить(2);
					
					Если ТипЗначенияОтбора = "Число" Или ТипЗначенияОтбора = "Строка" 
						Или ТипЗначенияОтбора = "Булево" Или ТипЗначенияОтбора = "Дата" Тогда
						
						ЗначениеОтбора = XMLЗначение(Тип(ТипЗначенияОтбора), ЗначениеОтбораСтрокой);
						
					ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(Метаданные.НайтиПоПолномуИмени(ТипЗначенияОтбора)) Тогда
						
						ЗначениеОтбора = XMLЗначение(Тип(СтрЗаменить(ТипЗначенияОтбора, "Перечисление", "ПеречислениеСсылка")), ЗначениеОтбораСтрокой);
						
					Иначе
						
						МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипЗначенияОтбора);
						Если МенеджерОбъекта = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ЗначениеОтбора = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеОтбораСтрокой));
						
					КонецЕсли;
					
					ОтборНабораЗаписей.Вставить(ИмяОтбора, ЗначениеОтбора);
					
				КонецЦикла;
				СтруктураРасшифровки.Вставить("ОтборНабораЗаписей", ОтборНабораЗаписей);
				
				Область.Расшифровка = СтруктураРасшифровки;
				
				Если РазделенныйТекст.Количество() <> 0 Тогда
					Область.Текст = СтрЗаменить(РазделенныйТекст.Получить(0), "<Размещение структуры набора записей для последующей расшифровки>", "");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныеНастройкиСКД

Процедура УстановитьПараметрыДанных(НастройкиКД, СтруктураПараметров)
	
	ПараметрыДанных = НастройкиКД.ПараметрыДанных.Элементы;
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
	
		ТекущийПараметр   = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
		ТекущийПараметрКД = ПараметрыДанных.Найти(ТекущийПараметр);
	
		Если ТекущийПараметрКД <> Неопределено Тогда
	
			ТекущийПараметрКД.Использование = Истина;
			ТекущийПараметрКД.Значение      = Параметр.Значение;
	
		Иначе
	
			ПараметрДанных               = НастройкиКД.ПараметрыДанных.Элементы.Добавить();
			ПараметрДанных.Использование = Истина;
			ПараметрДанных.Значение      = Параметр.Значение;
			ПараметрДанных.Параметр      = Новый ПараметрКомпоновкиДанных(Параметр.Ключ);
	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЛокализованныеПараметры(НастройкиКД)
	
	ПараметрыДанных = НастройкиКД.ПараметрыДанных.Элементы;
	
	СтруктураЛокализованныхПараметров = Новый Структура;
	СтруктураЛокализованныхПараметров.Вставить("НадписьОшибка",            НСтр("ru = 'Ошибка'"));
	СтруктураЛокализованныхПараметров.Вставить("НадписьВозможныеПричины",  НСтр("ru = 'Возможные причины'"));
	СтруктураЛокализованныхПараметров.Вставить("НадписьРекомендации",      НСтр("ru = 'Рекомендации'"));
	СтруктураЛокализованныхПараметров.Вставить("НадписьРешение",           НСтр("ru = 'Решение'"));
	СтруктураЛокализованныхПараметров.Вставить("НадписьПроблемныеОбъекты", НСтр("ru = 'Проблемные объекты'"));
	
	Для Каждого ЭлементСтруктуры Из СтруктураЛокализованныхПараметров Цикл
		
		ТекущийПараметрКД = ПараметрыДанных.Найти(Новый ПараметрКомпоновкиДанных(ЭлементСтруктуры.Ключ));
		Если ТекущийПараметрКД <> Неопределено Тогда
			
			ТекущийПараметрКД.Использование = Истина;
			ТекущийПараметрКД.Значение      = ЭлементСтруктуры.Значение;
			
		Иначе
			
			ПараметрДанных               = НастройкиКД.ПараметрыДанных.Элементы.Добавить();
			ПараметрДанных.Использование = Истина;
			ПараметрДанных.Значение      = ЭлементСтруктуры.Значение;
			ПараметрДанных.Параметр      = Новый ПараметрКомпоновкиДанных(ЭлементСтруктуры.Ключ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборПоСпискуПроблем(ОтборНастроекКД, ВидСравнения, ЗначениеОтбора)
	
	ЭлементыОтбора = ОтборНастроекКД.Элементы;
	
	ЭлементОтбора                  = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПравилоПроверки");
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ЗначениеОтбора;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
КонецПроцедуры

Процедура СкрытьГруппировкуПоОтветственным(НовыеНастройкиКД, Настройка)
	
	Если НовыеНастройкиКД <> Неопределено Тогда
		ГруппировкаПоОтветственномуКолонки = НайтиГруппировку(НовыеНастройкиКД.Структура[0].Колонки, "ОтветственныйГруппировка");
		ПолеОтветственного                 = НайтиПолеГруппировки(НовыеНастройкиКД.Структура[0].Строки, "Ответственный");
		Если ПолеОтветственного <> Неопределено Тогда
			ПолеОтветственного.Использование = Настройка.Значение;
		КонецЕсли;
		Если ГруппировкаПоОтветственномуКолонки <> Неопределено Тогда
			ГруппировкаПоОтветственномуКолонки.Состояние = ?(Настройка.Значение, СостояниеЭлементаНастройкиКомпоновкиДанных.Включен,
				СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиГруппировку(Структура, ИмяПоля)
	
	Для каждого Элемент Из Структура Цикл
		
		ПоляГруппировки = Элемент.ПоляГруппировки.Элементы;
		Для Каждого Поле Из ПоляГруппировки Цикл
			
			Если ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				Возврат Элемент;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Элемент.Структура.Количество() = 0 Тогда
			Продолжить;
		Иначе
			Группировка = НайтиГруппировку(Элемент.Структура, ИмяПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Группировка;
	
КонецФункции

Функция НайтиПолеГруппировки(Структура, ИмяПоля)
	
	Группировка     = НайтиГруппировку(Структура, ИмяПоля);
	ПоляГруппировки = Группировка.ПоляГруппировки.Элементы;
	НайденноеПоле   = Неопределено;
	
	Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
		ЦелевоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Если ПолеГруппировки.Поле = ЦелевоеПоле Тогда
			НайденноеПоле = ПолеГруппировки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеПоле;
	
КонецФункции

#КонецОбласти

#КонецЕсли