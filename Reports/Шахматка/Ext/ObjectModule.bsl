
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
		
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт

	Если ЗначениеЗаполнено(Форма.Параметры.ОбъектНедвижимостиВыделение) Тогда
		ПараметрСКД 				= Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОбъектНедвижимостиВыделение");
		ПараметрСКД.Использование 	= Истина;
		ПараметрСКД.Значение  		= Форма.Параметры.ОбъектНедвижимостиВыделение;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Форма.Параметры.Подъезд) Тогда
		ПараметрСКД 				= Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Подъезд");
		ПараметрСКД.Использование 	= Истина;
		ПараметрСКД.Значение  		= Форма.Параметры.Подъезд;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчет(Результат, КомпоновщикНастроек, ДанныеРасшифровки) Экспорт
	
	Результат.Очистить();
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
			
	ВнешниеНаборыДанных = Новый Структура;	
	ЗаполнитьВнешниеНаборыДанных(ВнешниеНаборыДанных, Настройки);	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СформироватьОтчет(ДокументРезультат, КомпоновщикНастроек, ДанныеРасшифровки);
	
КонецПроцедуры

#КонецОбласти

 #Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьВнешниеНаборыДанных(ВнешниеНаборыДанных, Настройки) 
	
	тзДанные = Новый ТаблицаЗначений;			
	тзДанные.Колонки.Добавить("ОбъектСтроительства", Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));	
	тзДанные.Колонки.Добавить("ОбъектНедвижимости", Новый ОписаниеТипов("СправочникСсылка.ОбъектыНедвижимости"));
	тзДанные.Колонки.Добавить("ЗаявкаНаСделку", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаСделку")); 
	тзДанные.Колонки.Добавить("ДатаСозданияСделки", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));	
	тзДанные.Колонки.Добавить("СуммаДоговора", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));	
	тзДанные.Колонки.Добавить("GUIDСделкиCRM", Новый ОписаниеТипов("УникальныйИдентификатор"));
			                                                                                        
	Если КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ВариантНаименование")
		И СтрНайти(КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВариантНаименование, "Проданные ОН") Тогда
		
		ОбъектСтроительства = Справочники.ОбъектыСтроительства.ПустаяСсылка();
		ПолеОбъектСтроительства = Новый ПолеКомпоновкиДанных("ОбъектСтроительства");
		Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОбъектСтроительства Тогда
				ОбъектСтроительства = ЭлементОтбора.ПравоеЗначение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
		пВариантПроданныеОН = Настройки.ПараметрыДанных.Элементы.Найти("ВариантПроданныеОН");
		Если НЕ пВариантПроданныеОН = Неопределено Тогда
			пВариантПроданныеОН.Значение = Истина;
			пВариантПроданныеОН.Использование = Истина;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСтроительства) Тогда
			ВнешниеНаборыДанных.Вставить("ДанныеПоСделкам", тзДанные);
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ЗаявкиНаСделкуСрезПоследних.ОбъектСтроительства КАК ОбъектСтроительства,
		//|	ЗаявкиНаСделкуСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
		//|	ЗаявкиНаСделкуСрезПоследних.Регистратор КАК ЗаявкаНаСделку,
		//|	ЕСТЬNULL(Сделки.ДатаСозданияСделки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСозданияСделки,
		//|	0 КАК СуммаДоговора,
		//|	ЗаявкиНаСделкуСрезПоследних.Регистратор.Номер КАК Номер
		//|ИЗ
		//|	РегистрСведений.ЗаявкиНаСделку.СрезПоследних(, ОбъектСтроительства = &ОбъектСтроительства) КАК ЗаявкиНаСделкуСрезПоследних
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сделки КАК Сделки
		//|		ПО ЗаявкиНаСделкуСрезПоследних.Регистратор = Сделки.ЗаявкаНаСделку
		//|ГДЕ
		//|	НЕ Сделки.СтатусСделки = ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута)";
		////|ГДЕ
		////|	ЗаявкиНаСделкуСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода";
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыОбъектовНедвижимостиСрезПоследних.ОбъектНедвижимости КАК ОбъектНедвижимости,
		|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ ВТ_СтатусыОН
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовНедвижимости.СрезПоследних(, ОбъектНедвижимости.Владелец = &ОбъектСтроительства) КАК СтатусыОбъектовНедвижимостиСрезПоследних
		|ГДЕ
		|	СтатусыОбъектовНедвижимостиСрезПоследних.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.Продан), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовНедвижимости.ПереданДольщику))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектНедвижимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сделки.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
		|	Сделки.ДатаСозданияСделки КАК ДатаСозданияСделки,
		|	Сделки.ЗаявкаНаСделку.Номер КАК Номер
		|ПОМЕСТИТЬ ВТ_Сделки
		|ИЗ
		|	Справочник.Сделки КАК Сделки
		|ГДЕ
		|	НЕ Сделки.СтатусСделки = ЗНАЧЕНИЕ(Перечисление.СтатусыСделокСправочник.Расторгнута)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаявкаНаСделку
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявкаНаСделкуОбъектыНедвижимости.Ссылка КАК Ссылка,
		|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости КАК ОбъектНедвижимости,
		|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости.Владелец КАК ОбъектСтроительства
		|ПОМЕСТИТЬ ВТ_ЗаявкиНаСделку
		|ИЗ
		|	Документ.ЗаявкаНаСделку.ОбъектыНедвижимости КАК ЗаявкаНаСделкуОбъектыНедвижимости
		|ГДЕ
		|	ЗаявкаНаСделкуОбъектыНедвижимости.ОбъектНедвижимости В
		|			(ВЫБРАТЬ
		|				ВТ_СтатусыОН.ОбъектНедвижимости
		|			ИЗ
		|				ВТ_СтатусыОН КАК ВТ_СтатусыОН)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сделки.ЗаявкаНаСделку КАК ЗаявкаНаСделку,
		|	ВТ_Сделки.Номер КАК Номер,
		|	ВТ_Сделки.ДатаСозданияСделки КАК ДатаСозданияСделки,
		|	ВТ_ЗаявкиНаСделку.ОбъектНедвижимости КАК ОбъектНедвижимости,
		|	ВТ_ЗаявкиНаСделку.ОбъектСтроительства КАК ОбъектСтроительства,
		|	0 КАК СуммаДоговора
		|ИЗ
		|	ВТ_Сделки КАК ВТ_Сделки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаявкиНаСделку КАК ВТ_ЗаявкиНаСделку
		|		ПО ВТ_Сделки.ЗаявкаНаСделку = ВТ_ЗаявкиНаСделку.Ссылка";	
			
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);	
		//пПериод = Настройки.ПараметрыДанных.Элементы.Найти("ПериодОтчета");
		//Если пПериод.Использование Тогда
		//	Запрос.УстановитьПараметр("НачалоПериода", пПериод.Значение.ДатаНачала);
		//	Запрос.УстановитьПараметр("КонецПериода", пПериод.Значение.ДатаОкончания);		
		//КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл				
				НоваяСтрока = тзДанные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЗаявкаНаСделку) Тогда
					НоваяСтрока.GUIDСделкиCRM = ВыборкаДетальныеЗаписи.ЗаявкаНаСделку.УникальныйИдентификатор();	
				КонецЕсли; 		
			КонецЦикла;
			ТаблицаРезультатов = ПолучитьДанныеУПН(тзДанные.ВыгрузитьКолонку("GUIDСделкиCRM"));
			ПодготовитьТаблицуДанныхИзУПН(ТаблицаРезультатов, тзДанные);
		КонецЕсли;
	
	КонецЕсли;	
	
	ВнешниеНаборыДанных.Вставить("ДанныеПоСделкам", тзДанные);
	
КонецПроцедуры

Функция ПолучитьДанныеУПН(МассивУИДов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаРезультатовУПН = Новый ТаблицаЗначений;
	
	Если МассивУИДов.Количество() = 0 Тогда
		Возврат ТаблицаРезультатовУПН;	
	КонецЕсли;
	
	ЗначениеПараметра = Ложь;
	
	ТекстЗапросаУНП = 
	"ВЫБРАТЬ
	|	ЗаявкаНаСделку.Ссылка КАК ЗаявкаНаСделку,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаСделку.GUIDСделкиCRM) КАК GUIDСделкиCRM
	|ПОМЕСТИТЬ ВТ_ПредварительныеЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаСделку КАК ЗаявкаНаСделку
	|ГДЕ
	|	ЗаявкаНаСделку.GUIDСделкиCRM В(&GUIDСтрокой)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявкаНаСделку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сделки.Ссылка КАК Сделка,
	|	ВТ_ПредварительныеЗаявки.GUIDСделкиCRM
	|ПОМЕСТИТЬ ВТ_Сделки
	|ИЗ
	|	Справочник.Сделки КАК Сделки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПредварительныеЗаявки КАК ВТ_ПредварительныеЗаявки
	|		ПО Сделки.ПредварительнаяЗаявка = ВТ_ПредварительныеЗаявки.ЗаявкаНаСделку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыСделкиСрезПоследних.Реквизит,
	|	ПараметрыСделкиСрезПоследних.Значение,	
	|	ПараметрыСделкиСрезПоследних.Сделка КАК Сделка
	|ПОМЕСТИТЬ ВТ_ПараметрыСделки
	|ИЗ
	|	РегистрСведений.ПараметрыСделки.СрезПоследних(
	|			,
	|			Сделка В
	|					(ВЫБРАТЬ
	|						ВТ_Сделки.Сделка
	|					ИЗ
	|						ВТ_Сделки КАК ВТ_Сделки)
	|				И Реквизит = ЗНАЧЕНИЕ(Справочник.РеквизитыСделки.СуммаДоговора)) КАК ПараметрыСделкиСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сделка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сделки.GUIDСделкиCRM,
	|	ЕСТЬNULL(ВТ_ПараметрыСделки.Значение, 0) КАК СуммаДоговора
	|ИЗ
	|	ВТ_Сделки КАК ВТ_Сделки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыСделки КАК ВТ_ПараметрыСделки
	|		ПО ВТ_Сделки.Сделка = ВТ_ПараметрыСделки.Сделка";
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ПутьКДанным"	, "GUIDСтрокой");	
	СтруктураПолей.Вставить("GUIDСделкиCRM", "GUIDСделкиCRM");
	СтруктураПолей.Вставить("СуммаДоговора", "СуммаДоговора");	
	СтруктураПолей.Вставить("Сделка", "Сделка");	
	
	ПрограммныйКод = """Результат = Строка(Параметр);""";	
	СтруктураПолей.Вставить("Выражение"	, "ОбщегоНазначенияСлужебныйСервер.ВычислитьПрограммныйКод(" + ПрограммныйКод + ", GUIDСделкиCRM)");
	
	МассивВП = Новый Массив;
	МассивВП.Добавить(СтруктураПолей);
		
	ТаблицаРезультатовУПН = ПолучитьТаблицуДанныхИзУПН(Ложь, ТекстЗапросаУНП, Новый Структура("GUIDСтрокой", МассивУИДов), МассивВП);
	ТаблицаРезультатовУПН_DS = ПолучитьТаблицуДанныхИзУПН(Истина, ТекстЗапросаУНП, Новый Структура("GUIDСтрокой", МассивУИДов), МассивВП);
	
	ТаблицаРезультатов = ТаблицаРезультатовУПН.Скопировать();
	Для каждого СтрокаТаблицыDS Из ТаблицаРезультатовУПН_DS Цикл
		НоваяСтрока = ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыDS); 	
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;	
	
КонецФункции

Функция ПолучитьТаблицуДанныхИзУПН(БазаDS = Ложь, ТекстЗапросаУНП, ПараметрыЗапроса, МассивВП)
	
	ПроксиСервер = Неопределено;
	ИмяСервиса = "RandomQuery";
	CRMСервер.ПодключитьсяКСервису(ПроксиСервер, БазаDS, ИмяСервиса);	
	
	ФлагОшибки = Ложь;
	
	Попытка
		ДанныеXDTO = ПроксиСервер.ExecuteQuery(ТекстЗапросаУНП, СериализаторXDTO.ЗаписатьXDTO(ПараметрыЗапроса), 90, СериализаторXDTO.ЗаписатьXDTO(МассивВП));
		
		СтруктураВозврата = СериализаторXDTO.ПрочитатьXDTO(ДанныеXDTO);        
		Если НЕ СтруктураВозврата = Неопределено Тогда 
			ОписаниеОшибки = СтруктураВозврата.ТекстОшибки;
			ФлагОшибки = СтруктураВозврата.Ошибка;
		Иначе
			ФлагОшибки = Истина;
			Отказ = Истина;
		КонецЕсли;
		
	Исключение
		Результат 	= ОписаниеОшибки();
		ФлагОшибки 	= Истина;
	КонецПопытки;											
	
	Если ФлагОшибки Тогда		
		ТекстСообщения = "Возникла ошибка при обработке выполнения произвольного запроса к базе УНП: " + ?(ПустаяСтрока(ОписаниеОшибки), "", ": " + ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
	Иначе
		Если Не ПустаяСтрока(СтруктураВозврата.РезультатЗапроса)Тогда
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXML.УстановитьСтроку(СтруктураВозврата.РезультатЗапроса);
			ХранилищеЗначенияТаблицаЗначений = ПрочитатьXML(ЧтениеXML,Тип("ХранилищеЗначения"));
			Если Не ХранилищеЗначенияТаблицаЗначений = Неопределено Тогда 
				ТаблицаРезультатов = ХранилищеЗначенияТаблицаЗначений.Получить();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;

КонецФункции 

Процедура ПодготовитьТаблицуДанныхИзУПН(ДанныеУПН, ТЗ_ВНД)

	Если ДанныеУПН.Количество() Тогда
		Для каждого Строка Из ТЗ_ВНД Цикл
			НайденныеСтроки = ДанныеУПН.НайтиСтроки(Новый Структура("GUIDСделкиCRM", Строка(Строка.GUIDСделкиCRM)));
			Если НайденныеСтроки.Количество() Тогда
				Строка.СуммаДоговора = НайденныеСтроки[0].СуммаДоговора;	
			КонецЕсли; 			
		КонецЦикла; 		
	КонецЕсли; 		
	ТЗ_ВНД.Колонки.Удалить("GUIDСделкиCRM");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

